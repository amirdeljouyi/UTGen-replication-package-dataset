* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.MethodWriter
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 6373
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.MethodWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2786
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709260201485
* Starting evolution
* Initial Number of Goals in DynaMOSA = 320 / 2786
[Progress:=>                            5%] [Cov:=====>                             17%][Progress:===>                          11%] [Cov:======>                            19%][Progress:===>                          11%] [Cov:=======>                           21%][Progress:===>                          12%] [Cov:=========>                         26%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        31%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       33%][Progress:=====>                        18%] [Cov:===========>                       34%][Progress:=====>                        18%] [Cov:============>                      35%][Progress:=====>                        18%] [Cov:============>                      36%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     39%][Progress:=====>                        19%] [Cov:=============>                     39%][Progress:=====>                        19%] [Cov:==============>                    40%][Progress:=====>                        19%] [Cov:==============>                    41%][Progress:======>                       20%] [Cov:==============>                    41%][Progress:======>                       20%] [Cov:==============>                    41%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:=======>                      26%] [Cov:===============>                   43%][Progress:=======>                      26%] [Cov:===============>                   43%][Progress:=======>                      26%] [Cov:===============>                   44%][Progress:=======>                      26%] [Cov:===============>                   45%][Progress:=========>                    32%] [Cov:================>                  46%][Progress:=========>                    32%] [Cov:================>                  46%][Progress:=========>                    32%] [Cov:================>                  47%][Progress:=========>                    33%] [Cov:================>                  48%][Progress:=========>                    33%] [Cov:================>                  48%][Progress:=========>                    33%] [Cov:================>                  48%][Progress:==========>                   34%] [Cov:================>                  48%][Progress:==========>                   34%] [Cov:================>                  48%][Progress:==========>                   34%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:==========>                   36%] [Cov:================>                  48%][Progress:==========>                   36%] [Cov:================>                  48%][Progress:==========>                   36%] [Cov:================>                  48%][Progress:==========>                   36%] [Cov:=================>                 49%][Progress:==========>                   36%] [Cov:=================>                 49%][Progress:==========>                   36%] [Cov:=================>                 49%][Progress:===========>                  37%] [Cov:=================>                 49%][Progress:===========>                  37%] [Cov:=================>                 49%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 51%][Progress:===========>                  39%] [Cov:=================>                 51%][Progress:===========>                  39%] [Cov:=================>                 51%][Progress:===========>                  39%] [Cov:=================>                 51%][Progress:===========>                  39%] [Cov:=================>                 51%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                53%][Progress:=============>                45%] [Cov:==================>                53%][Progress:===============>              50%] [Cov:==================>                53%][Progress:===============>              50%] [Cov:==================>                54%][Progress:===============>              51%] [Cov:==================>                54%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               56%][Progress:===============>              51%] [Cov:===================>               56%][Progress:===============>              52%] [Cov:===================>               56%][Progress:===============>              52%] [Cov:===================>               56%][Progress:===============>              52%] [Cov:===================>               57%][Progress:===============>              52%] [Cov:===================>               57%][Progress:===============>              52%] [Cov:===================>               57%][Progress:=================>            57%] [Cov:===================>               57%][Progress:=================>            58%] [Cov:===================>               57%][Progress:=================>            58%] [Cov:===================>               57%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             60%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:=======================>      79%] [Cov:=====================>             61%][Progress:========================>     80%] [Cov:=====================>             61%][Progress:========================>     80%] [Cov:=====================>             61%][Progress:========================>     80%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             61%][Progress:========================>     82%] [Cov:=====================>             61%][Progress:========================>     82%] [Cov:=====================>             61%][Progress:========================>     82%] [Cov:=====================>             61%][Progress:========================>     82%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:=========================>    84%] [Cov:=====================>             61%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:==========================>   87%] [Cov:=====================>             62%][Progress:==========================>   87%] [Cov:=====================>             62%][Progress:==========================>   87%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:==========================>   89%] [Cov:=====================>             62%][Progress:==========================>   89%] [Cov:=====================>             62%][Progress:==========================>   89%] [Cov:=====================>             62%][Progress:==========================>   89%] [Cov:=====================>             62%][Progress:==========================>   89%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%]
* Search finished after 106s and 226 generations, 202257 statements, best individual has fitness: 1303.0
* Generated before the refinement 106 tests with total length 648
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@76dd7eb0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, false, false)
statement is: visitCode()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitCode()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
        methodWriter.visitCode();
        // Improved test data:
        ClassWriter classWriter = new ClassWriter(2868);// Creates a new instance of the ClassWriter class with an ID of 2868.

        String[] stringArray = new String[10];// Creates a new array of Strings with a length of 10.

        MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);// Creates a new instance of the MethodWriter class with the specified parameters.

        methodWriter.visitCode();// Initializes the visitor to visit code. }}

    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitCode() target is: methodWriter method is: visitCode()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitCode()V
statement is: // Improved test data:
ClassWriter classWriter = new ClassWriter(2868)// Creates a new instance of the ClassWriter class with an ID of 2868.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[10]// Creates a new array of Strings with a length of 10.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[10] Elements: []
lengths: [0] [10]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false)// Creates a new instance of the MethodWriter class with the specified parameters.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitCode()// Initializes the visitor to visit code. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitCode()// Initializes the visitor to visit code. }}
 target is: methodWriter method is: visitCode()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 18
Matched Method is: visitCode()V
TestCase is: String[] stringArray = new String[0];
int _int = 2868;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitCode();
int _int = 2868;
ClassWriter classWriter = new ClassWriter(_int);
String[] stringArray = new String[0];
int _int = 2868;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitCode();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: org.evosuite.testcase.statements.ArrayStatement@3ade7a49 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c09821c0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "\"j?4w<xP'.2V"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6ad05860 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "\"j?4w<xP'.2V"
statement is: org.evosuite.testcase.statements.AssignmentStatement@288797dc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@5d4fee1d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "<init>"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b0ec4f6c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "\"j?4w<xP'.2V"
statement is: org.evosuite.testcase.statements.AssignmentStatement@eb15f27e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "\"j?4w<xP'.2V"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ba445d6e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1042), "", "<init>", "poePy\")", arg5, false, false)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[7];
stringArray[0] = "\"j?4w<xP'.2V";
stringArray[1] = "\"j?4w<xP'.2V";
stringArray[2] = "";
stringArray[3] = "<init>";
stringArray[4] = "\"j?4w<xP'.2V";
stringArray[5] = "\"j?4w<xP'.2V";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1042), "", "<init>", "poePy\")", stringArray, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "\"j?4w<xP\'.2V";// This value is not a valid Java identifier, so it cannot be used as a variable name.

        stringArray[1] = "\"j?4w<xP\'.2V";// This value is not a valid Java identifier, so it cannot be used as a variable name.

        stringArray[2] = "";// An empty string is a valid Java identifier.

        stringArray[3] = "<init>";// The <init> method is the constructor of a class.

        stringArray[4] = "\"j?4w<xP\'.2V";// This value is not a valid Java identifier, so it cannot be used as a variable name.

        stringArray[5] = "\"j?4w<xP\'.2V";// This value is not a valid Java identifier, so it cannot be used as a variable name.

        stringArray[6] = "";// An empty string is a valid Java identifier.

        MethodWriter methodWriter = new MethodWriter(classWriter, -1042, "", "<init>", "poePy\")", stringArray, false, false);
        methodWriter.visitEnd();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"j?4w<xP\'.2V" Ct is: stringArray[0] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@72b7fac1
statement is: stringArray[1] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"j?4w<xP\'.2V" Ct is: stringArray[1] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e0f54fe5
statement is: stringArray[2] = ""// An empty string is a valid Java identifier.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[2] = ""// An empty string is a valid Java identifier.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9f415fb0
statement is: stringArray[3] = "<init>"// The <init> method is the constructor of a class.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"<init>" Ct is: stringArray[3] = "<init>"// The <init> method is the constructor of a class.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6e3083f3
statement is: stringArray[4] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"j?4w<xP\'.2V" Ct is: stringArray[4] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ceec27
statement is: stringArray[5] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"j?4w<xP\'.2V" Ct is: stringArray[5] = "\"j?4w<xP\'.2V"// This value is not a valid Java identifier, so it cannot be used as a variable name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c3008f9b
statement is: stringArray[6] = ""// An empty string is a valid Java identifier.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[6] = ""// An empty string is a valid Java identifier.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f0bc49cc
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1042, "", "<init>", "poePy\")", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitEnd() target is: methodWriter method is: visitEnd()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 13
Matched Method is: visitEnd()V
* this is vulnerable: String string = "\"j?4w<xP'.2V"
* this is vulnerable: String string = "\"j?4w<xP'.2V"
* this is vulnerable: String string = ""
* this is vulnerable: String string = "<init>"
* this is vulnerable: String string = "\"j?4w<xP'.2V"
* this is vulnerable: String string = "\"j?4w<xP'.2V"
* this is vulnerable: String string = ""
TestCase is: String[] stringArray = new String[7];
String string = "\"j?4w<xP'.2V";
String string = "\"j?4w<xP'.2V";
String string = "";
String string = "<init>";
String string = "\"j?4w<xP'.2V";
String string = "\"j?4w<xP'.2V";
String string = "";
String string = "";
String string = "<init>";
String string = "poePy\")";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).visitEnd();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@cd8bdd3f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, true, true)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, true, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "methodName", "descriptor", "signature" };
    }
}
statement is: String[] stringArray = new String[]{ "methodName", "descriptor", "signature" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "methodName", "descriptor", "signature" } Elements: ["methodName", "descriptor", "signature"]
lengths: [0] []
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: org.evosuite.testcase.statements.ArrayStatement@2cd1abd5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7cc66a3e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "6II"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5b7016d2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "]C?kAP~XEcQ2G(z"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c80978af type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "]C?kAP~XEcQ2G(z"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[3];
stringArray[0] = "6II";
stringArray[1] = "]C?kAP~XEcQ2G(z";
stringArray[2] = "]C?kAP~XEcQ2G(z";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", stringArray, false, false);
methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "6II";
        stringArray[1] = "java.lang.String";
        stringArray[2] = "com.example.MyClass";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "java.lang.String", stringArray, false, false);
        methodWriter.visitAnnotation("com.example.MyAnnotation", false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "6II", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"6II" Ct is: stringArray[0] = "6II"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b3543a09
statement is: stringArray[1] = "java.lang.String", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.String" Ct is: stringArray[1] = "java.lang.String"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b4370ba7
statement is: stringArray[2] = "com.example.MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.MyClass" Ct is: stringArray[2] = "com.example.MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@230dbf02
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "java.lang.String", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("com.example.MyAnnotation", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("com.example.MyAnnotation", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: getSize()I
* this is vulnerable: String string = "6II"
* this is vulnerable: String string = "java.lang.String"
* this is vulnerable: String string = "com.example.MyClass"
TestCase is: String[] stringArray = new String[3];
String string = "6II";
String string = "java.lang.String";
String string = "com.example.MyClass";
int _int = 1;
String string = "<init>";
String string = "<init>";
String string = "java.lang.String";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "com.example.MyAnnotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e0851713 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitParameterAnnotation = (AnnotationWriter)methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
TestCase is: int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
int _int = 65;
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2880)
statement is: org.evosuite.testcase.statements.ArrayStatement@685d97f4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@be3634f2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@4ee47694 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(2880, "", true)
test data is: ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitParameterAnnotation(2880, "", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "my_class";
        stringArray[1] = "my_method";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "my_class", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        methodWriter.visitParameterAnnotation(2880, "my_annotation", true);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "my_class", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_class" Ct is: stringArray[0] = "my_class"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d35c951b
statement is: stringArray[1] = "my_method", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_method" Ct is: stringArray[1] = "my_method"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6fc193fe
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "my_class", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(2880, "my_annotation", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(2880, "my_annotation", true) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
* this is vulnerable: String string = "my_class"
* this is vulnerable: String string = "my_method"
TestCase is: String[] stringArray = new String[2];
String string = "my_class";
String string = "my_method";
int _int = 1;
String string = "my_class";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2880;
String string = "my_annotation";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", ((String[]) (null)), true, true);
        methodWriter.visitFrame(1, -987654321, ((Object[]) (null)), 2, ((Object[]) (null)));
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", ((String[]) (null)), true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, -987654321, ((Object[]) (null)), 2, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, -987654321, ((Object[]) (null)), 2, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
TestCase is: int _int = 1;
String string = "*wg.1)G:P";
String string = "mI$#+u)#cAv~6bGg.";
String string = "java/lang/Class";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 1;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@cc3284ff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d3aba79c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "kmzZTWL4#Hi_x"
statement is: org.evosuite.testcase.statements.AssignmentStatement@550399ad type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "kmzZTWL4#Hi_x"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 1, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "kmzZTWL4#Hi_x";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1824, "main", "%Z2=v5(+6aF|1w", "main", stringArray, false, false);
        methodWriter.visitFrame(-1, 1, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e71d1797
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e6dbc580
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1824, "main", "%Z2=v5(+6aF|1w", "main", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(-1, 1, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, 1, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
String string = "main";
String string = "%Z2=v5(+6aF|1w";
String string = "main";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@23052ff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fa448f2a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@fd02f3e6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1, arg4, 1, arg4)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
methodWriter.visitFrame(2, 1, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Example String 1";
        stringArray[1] = "Example String 2";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
        methodWriter.visitFrame(2, 1, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Example String 1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Example String 1" Ct is: stringArray[0] = "Example String 1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b75ec6ad
statement is: stringArray[1] = "Example String 2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Example String 2" Ct is: stringArray[1] = "Example String 2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@53d5643d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 1, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.visitFrame(2, 1, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "Example String 1"
* this is vulnerable: String string = "Example String 2"
TestCase is: String[] stringArray = new String[2];
String string = "Example String 1";
String string = "Example String 2";
int _int = 1;
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 2;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@645bb1ed type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ecad4c13 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@65cfbf5f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1, arg4, 1, arg4)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "")
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1, arg4, (-1814), arg4)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
methodWriter.visitFrame(2, 1, stringArray, (-1814), stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello World";
        stringArray[1] = "Goodbye Earth";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
        methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
        methodWriter.visitFrame(2, 1, stringArray, -1814, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World" Ct is: stringArray[0] = "Hello World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2351849b
statement is: stringArray[1] = "Goodbye Earth", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye Earth" Ct is: stringArray[1] = "Goodbye Earth"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9b74c495
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 1, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitFrame(2, 1, stringArray, -1814, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1, stringArray, -1814, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Hello World"
* this is vulnerable: String string = "Goodbye Earth"
TestCase is: String[] stringArray = new String[2];
String string = "Hello World";
String string = "Goodbye Earth";
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 17;
String string = "*wg.1)G:P";
String string = "RuntimeInvisibleAnnotations";
String string = "";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@dee970f8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@31564a49 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e3eeb93 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 2, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(1, 2, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitFrame(1, 2, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e973ff21
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c3ddbe9b
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, 2, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 2, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
int _int = 2;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@e7f471d6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e11d0213 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "O"
statement is: org.evosuite.testcase.statements.AssignmentStatement@779ea52b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "O"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "O", "O", "O", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, 2868, arg4, 2868, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "O";
stringArray[1] = "O";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "O", "O", "O", stringArray, false, false);
methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "XYZ", "OPQ", "RST", stringArray, false, false);
        methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b3cad24b
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1e47ae02
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "XYZ", "OPQ", "RST", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "DEF"
TestCase is: String[] stringArray = new String[2];
String string = "ABC";
String string = "DEF";
String string = "XYZ";
String string = "OPQ";
String string = "RST";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 3;
int _int = 2868;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1652)
statement is: org.evosuite.testcase.statements.ArrayStatement@5b3d132e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@788df89 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d2768779 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 4, "TdW", "*wg.:1)G:P", "TdW", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.next.visitFrame(4, 4, arg4, 75, arg4)
test data is: ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "MyClass";
        stringArray[1] = "myMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/String;", "Ljava/lang/String;", "Ljava/lang/String;", stringArray, true, false);
        MethodWriter methodWriter = new MethodWriter(classWriter, 4, "MyClass", "myMethod", "Ljava/lang/String;", stringArray, false, false);
        methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MyClass" Ct is: stringArray[0] = "MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@763974ff
statement is: stringArray[1] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[1] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7ec798dd
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/String;", "Ljava/lang/String;", "Ljava/lang/String;", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 4, "MyClass", "myMethod", "Ljava/lang/String;", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray) target is: methodWriter.next method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
* this is vulnerable: String string = "MyClass"
* this is vulnerable: String string = "myMethod"
TestCase is: String[] stringArray = new String[2];
String string = "MyClass";
String string = "myMethod";
int _int = 2;
String string = "Ljava/lang/String;";
String string = "Ljava/lang/String;";
String string = "Ljava/lang/String;";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 4;
String string = "MyClass";
String string = "myMethod";
String string = "Ljava/lang/String;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@be1332bc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@79099446 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "*wg.1)G:P"
statement is: org.evosuite.testcase.statements.AssignmentStatement@7b8c0286 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ti"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, 2, arg4, 0, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "*wg.1)G:P";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(0, 2, stringArray, 0, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "Goodbye, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", "Goodbye, World!", "Hello, World!", stringArray, true, false);
        methodWriter.visitFrame(0, 2, stringArray, 0, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a74b295b
statement is: stringArray[1] = "Goodbye, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye, World!" Ct is: stringArray[1] = "Goodbye, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@883807c0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", "Goodbye, World!", "Hello, World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, 2, stringArray, 0, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, 2, stringArray, 0, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "Goodbye, World!"
TestCase is: String[] stringArray = new String[2];
String string = "Hello, World!";
String string = "Goodbye, World!";
int _int = 2;
String string = "Hello, World!";
String string = "Goodbye, World!";
String string = "Hello, World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 0;
int _int = 2;
int _int = 0;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: org.evosuite.testcase.statements.ArrayStatement@4c02c9e3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@788c3cf7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "kmzZTWL4#Hi_x"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f6d48e34 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "%Z2=v5(+M6aFL|1w"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, (-56), arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "%Z2=v5(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame(0, (-56), stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "abcdef";
        stringArray[1] = "ghijkl";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "abcdef", "ghijkl", "abcdef", stringArray, false, false);
        methodWriter.visitFrame(0, -56, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abcdef", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abcdef" Ct is: stringArray[0] = "abcdef"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@993a5d7c
statement is: stringArray[1] = "ghijkl", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ghijkl" Ct is: stringArray[1] = "ghijkl"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7105bbe0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "abcdef", "ghijkl", "abcdef", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, -56, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, -56, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "abcdef"
* this is vulnerable: String string = "ghijkl"
TestCase is: String[] stringArray = new String[2];
String string = "abcdef";
String string = "ghijkl";
int _int = 0;
String string = "abcdef";
String string = "ghijkl";
String string = "abcdef";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 0;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn((-1991))
test data is: ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true);
methodWriter.visitInsn((-1991));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "com/example/MyClass", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", ((String[]) (null)), true, true);
        methodWriter.visitInsn(42);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "com/example/MyClass", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", ((String[]) (null)), true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(42) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitInsn(I)V
TestCase is: int _int = 1;
String string = "com/example/MyClass";
String string = "mI$#+u)#cAv~6bGg.";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 42;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@346ffe4a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@32383aff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c15bc80 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(2)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "A unique and descriptive value for testing purpose";
        stringArray[1] = "Another unique and descriptive value for testing purpose";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitInsn(2);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A unique and descriptive value for testing purpose", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A unique and descriptive value for testing purpose" Ct is: stringArray[0] = "A unique and descriptive value for testing purpose"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a1a2d745
statement is: stringArray[1] = "Another unique and descriptive value for testing purpose", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another unique and descriptive value for testing purpose" Ct is: stringArray[1] = "Another unique and descriptive value for testing purpose"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bfcae7aa
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(2) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitInsn(I)V
* this is vulnerable: String string = "A unique and descriptive value for testing purpose"
* this is vulnerable: String string = "Another unique and descriptive value for testing purpose"
TestCase is: String[] stringArray = new String[2];
String string = "A unique and descriptive value for testing purpose";
String string = "Another unique and descriptive value for testing purpose";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(180)
statement is: org.evosuite.testcase.statements.ArrayStatement@fa5092a7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e9f7877b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@17dd8833 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(177)
test data is: ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(177);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "java/lang/Exception", "java/io/IOException" };
        MethodWriter methodWriter = new MethodWriter(classWriter, ACC_PUBLIC, "writeToFile", "(Ljava/lang/String;)V", stringArray, true, false);
        methodWriter.visitInsn(INVOKESTATIC, "writeToFile", "(Ljava/lang/String;)V");
    }
}
statement is: String[] stringArray = new String[]{ "java/lang/Exception", "java/io/IOException" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "java/lang/Exception", "java/io/IOException" } Elements: ["java/lang/Exception", "java/io/IOException"]
lengths: [2] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, ACC_PUBLIC, "writeToFile", "(Ljava/lang/String;)V", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(INVOKESTATIC, "writeToFile", "(Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(INVOKESTATIC, "writeToFile", "(Ljava/lang/String;)V") target is: methodWriter method is: visitInsn(java.lang.String,java.lang.String)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1652)
statement is: org.evosuite.testcase.statements.ArrayStatement@4ffbe7d8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4e294872 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@7b1569c6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(191)
test data is: ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false);
methodWriter.visitInsn(191);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false);
        methodWriter.visitInsn(191);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@51dbd1f
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3faa0178
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(191), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(191) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitInsn(I)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 22;
String string = "*wg.:1)G:P";
String string = "*wg.:1)G:P";
String string = "TdW";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 191;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@3d6158e2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", arg5, true, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn((-1956), (-1991))
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIntInsn((-1956), (-1991));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Integer;", "Ljava/lang/Double;", "Ljava/lang/String;", stringArray, true, false);
        methodWriter.visitIntInsn(-1956, 20234);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Integer;", "Ljava/lang/Double;", "Ljava/lang/String;", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(-1956, 20234), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(-1956, 20234) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIntInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "Ljava/lang/Integer;";
String string = "Ljava/lang/Double;";
String string = "Ljava/lang/String;";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 20234;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@3555b40e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn((-1991), (-1991))
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitIntInsn((-1991), (-1991));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitIntInsn(42, 42);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(42, 42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(42, 42) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIntInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 42;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@26b48a85 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fd6ec3e2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e8186c0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW")
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(455, 186)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW");
methodWriter.visitIntInsn(455, 186);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitFieldInsn(844, "*wg.1)G:P", "firstName", "firstName");
        methodWriter.visitIntInsn(455, 186);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@52202987
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dc73534e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(844, "*wg.1)G:P", "firstName", "firstName"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(844, "*wg.1)G:P", "firstName", "firstName") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitIntInsn(455, 186), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(455, 186) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIntInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Bob";
int _int = 1;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 844;
String string = "*wg.1)G:P";
String string = "firstName";
String string = "firstName";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 455;
int _int = 186;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@998bedf3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d973b028 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@723b121f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "FO|,4#ci)"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "", "FO|,4#ci)", "", arg5, false, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(17, 701)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
methodWriter.visitIntInsn(17, 701);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "", "Hello", "", stringArray, false, false);
        methodWriter.visitIntInsn(17, 42);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5f271d55
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a42a8437
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "", "Hello", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(17, 42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(17, 42) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIntInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Bob";
String string = "";
String string = "Hello";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 17;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@a024e069 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(22, 1)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(22, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        methodWriter.visitIntInsn(35, 1);
    }
}
statement is: methodWriter.visitIntInsn(35, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(35, 1) target is: methodWriter method is: visitIntInsn(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@5c40e692 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@576f207 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ti"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c3d9f0a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ti"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(2, 55)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(2, 55);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Titanium";
        stringArray[1] = "Tungsten";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitVarInsn(2, 55);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Titanium", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Titanium" Ct is: stringArray[0] = "Titanium"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@50c1ec09
statement is: stringArray[1] = "Tungsten", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Tungsten" Ct is: stringArray[1] = "Tungsten"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ceffc112
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(2, 55), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(2, 55) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "Titanium"
* this is vulnerable: String string = "Tungsten"
TestCase is: String[] stringArray = new String[2];
String string = "Titanium";
String string = "Tungsten";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
int _int = 55;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e9368663 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@44fa8e03 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@96eca057 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 4, "TdW", "*wg.:1)G:P", "TdW", arg5, false, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn((-1856), (-41))
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.visitVarInsn((-1856), (-41));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 4, "main", "*wg.:1)G:P", "void", stringArray, false, false);
        methodWriter.visitVarInsn(-1856, -41);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a77ddc22
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@be33286b
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 4, "main", "*wg.:1)G:P", "void", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(-1856, -41), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(-1856, -41) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitVarInsn(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 4;
String string = "main";
String string = "*wg.:1)G:P";
String string = "void";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@4226eee6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(24, 24)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(24, 24);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitVarInsn(24, 24);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(24, 24), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(24, 24) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitVarInsn(II)V
TestCase is: int _int = 2;
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 24;
int _int = 24;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@f93934d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@394b9e20 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@86cc8cc6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(55, 4096)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(55, 4096);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "compress";
        stringArray[1] = "decompress";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "compress", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitVarInsn(55, 4096);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "compress", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"compress" Ct is: stringArray[0] = "compress"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@797bd3de
statement is: stringArray[1] = "decompress", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"decompress" Ct is: stringArray[1] = "decompress"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ac238e3b
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "compress", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(55, 4096), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(55, 4096) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "compress"
* this is vulnerable: String string = "decompress"
TestCase is: String[] stringArray = new String[2];
String string = "compress";
String string = "decompress";
int _int = 2;
String string = "compress";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 55;
int _int = 4096;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@adf57994 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(57, 1)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitVarInsn(57, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        methodWriter.visitVarInsn(57, 1);// This line is using the primitive value 1 for the variable index, which may not be representative of the situation being tested.

        // Improved test data
        ClassWriter classWriter = new ClassWriter(-1991);
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        methodWriter.visitVarInsn(57, 42);// This line is using the primitive value 42 for the variable index, which may be more representative of the situation being tested. }}

    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(57, 1)// This line is using the primitive value 1 for the variable index, which may not be representative of the situation being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(57, 1)// This line is using the primitive value 1 for the variable index, which may not be representative of the situation being tested.
 target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitVarInsn(II)V
statement is: // Improved test data
ClassWriter classWriter = new ClassWriter(-1991), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(57, 42)// This line is using the primitive value 42 for the variable index, which may be more representative of the situation being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(57, 42)// This line is using the primitive value 42 for the variable index, which may be more representative of the situation being tested. }}
 target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 19
Matched Method is: visitVarInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
int _int = 57;
int _int = 42;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@a2957409 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(1, "7*wg.)G:P")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitTypeInsn(1, "7*wg.)G:P");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };// use an array of strings to represent a list of values

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitTypeInsn(1, "java.lang.String");// use the fully-qualified name of the class for better readability }}

    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }// use an array of strings to represent a list of values
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(1, "java.lang.String")// use the fully-qualified name of the class for better readability }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(1, "java.lang.String")// use the fully-qualified name of the class for better readability }}
 target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
TestCase is: int _int = 2;
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 1;
String string = "java.lang.String";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(180)
statement is: org.evosuite.testcase.statements.ArrayStatement@8dbefd6c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@38db9080 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e6e404e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW")
test data is: ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "java.lang.Math";
        stringArray[1] = "PI";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitFieldInsn(180, "java.lang.Math", "PI", "double");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Math", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Math" Ct is: stringArray[0] = "java.lang.Math"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@93f02d46
statement is: stringArray[1] = "PI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PI" Ct is: stringArray[1] = "PI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b3ef47af
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(180, "java.lang.Math", "PI", "double"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(180, "java.lang.Math", "PI", "double") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "java.lang.Math"
* this is vulnerable: String string = "PI"
TestCase is: String[] stringArray = new String[2];
String string = "java.lang.Math";
String string = "PI";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 180;
String string = "java.lang.Math";
String string = "PI";
String string = "double";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@7859960d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f43aa2b6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4c79bdd1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1dabd289
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2dc5fb8f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@b56fd71 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c6f5bd98 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "{O6$V:vnsn Y"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6f9d962b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "{O6$V:vnsn Y"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y")
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "{O6$V:vnsn Y";
stringArray[1] = "{O6$V:vnsn Y";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", stringArray, false, false);
methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "This is a test string";
        stringArray[1] = "Another test string";
        stringArray[2] = "Third test string";
        stringArray[3] = "Fourth test string";
        stringArray[4] = "Fifth test string";
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[5] Elements: []
lengths: [2] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dca7b9b1
statement is: stringArray[1] = "Another test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another test string" Ct is: stringArray[1] = "Another test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f8ed2749
statement is: stringArray[2] = "Third test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Third test string" Ct is: stringArray[2] = "Third test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dca7b9b1
statement is: stringArray[3] = "Fourth test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fourth test string" Ct is: stringArray[3] = "Fourth test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dca7b9b1
statement is: stringArray[4] = "Fifth test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fifth test string" Ct is: stringArray[4] = "Fifth test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dca7b9b1
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: String string = "Another test string"
TestCase is: String[] stringArray = new String[2];
String string = "This is a test string";
String string = "Another test string";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@db65ced2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P");
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P");
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 1;
String string = "7*wg.)G:P";
String string = "StackMap";
String string = "7*wg.)G:P";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@caf4c041 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@18d047e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f248307f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Java";
        stringArray[1] = "JUnit";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "main", "([Ljava/lang/String;)V", "([Ljava/lang/String;)V", stringArray, true, false);
        methodWriter.visitMethodInsn(251, "Java", "main", "([Ljava/lang/String;)V");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[0] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e54f6dc3
statement is: stringArray[1] = "JUnit", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"JUnit" Ct is: stringArray[1] = "JUnit"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5e760ae5
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "main", "([Ljava/lang/String;)V", "([Ljava/lang/String;)V", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(251, "Java", "main", "([Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(251, "Java", "main", "([Ljava/lang/String;)V") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "Java"
* this is vulnerable: String string = "JUnit"
TestCase is: String[] stringArray = new String[2];
String string = "Java";
String string = "JUnit";
int _int = 2;
String string = "main";
String string = "([Ljava/lang/String;)V";
String string = "([Ljava/lang/String;)V";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 251;
String string = "Java";
String string = "main";
String string = "([Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@a3cbe532 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e7ddb663 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@df189794 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@d82fef5b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@33d6af73 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(251, (-27), arg2, arg3)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn((-27), arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitTableSwitchInsn(251, (-27), label, labelArray);
methodWriter.visitJumpInsn((-27), label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "hello", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        Label label = new Label();
        Label[] labelArray = new Label[5];
        labelArray[0] = label;
        labelArray[1] = label;
        labelArray[2] = label;
        labelArray[3] = label;
        labelArray[4] = label;
        methodWriter.visitTableSwitchInsn(10, 20, label, labelArray);
        methodWriter.visitJumpInsn(25, label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@324cc19
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7896befa
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "hello", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Label[5] Elements: []
lengths: [2] [5]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [5] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new Label[5] Elements: []
lengths: [1] [5]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89f612b2
statement is: labelArray[1] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[1] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89f612b2
statement is: labelArray[2] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[2] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89f612b2
statement is: labelArray[3] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[3] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89f612b2
statement is: labelArray[4] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[4] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89f612b2
statement is: methodWriter.visitTableSwitchInsn(10, 20, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(10, 20, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitJumpInsn(25, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(25, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 2;
String string = "hello";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
Label[] labelArray = new Label[1];
int _int = 10;
int _int = 20;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
int _int = 25;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(2, arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2809)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(1, arg1)
test data is: ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(1, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", ((String[]) (null)), true, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
        methodWriter.visitJumpInsn(1, label);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", ((String[]) (null)), true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitJumpInsn(1, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(1, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@d68c6e2f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@29259a54 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@13980713 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.AssignmentStatement@f55f47e1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: label.status = 57
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
label.status = 57;
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, world!";
        stringArray[1] = "This is a test string.";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        Label label = new Label();
        label.status = 57;
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7f69a6a4
statement is: stringArray[1] = "This is a test string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string." Ct is: stringArray[1] = "This is a test string."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@838c33a6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.status = 57, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: String string = "This is a test string."
TestCase is: String[] stringArray = new String[2];
String string = "Hello, world!";
String string = "This is a test string.";
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e2e35a6c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "a", "b", "c" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "a", "b", "c" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "a", "b", "c" } Elements: ["a", "b", "c"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@89711c80 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@7e94e28a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ec881e89 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@efe6af53 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@d179d329 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[2] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@44850433 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[3] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@842c7a9f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[4] = label
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(4702, 4702, arg2, arg3)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(labelArray[4])
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray);
methodWriter.visitLabel(labelArray[4]);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        Label label = new Label();
        String[] stringArray1 = new String[]{ "Hello", "World" };
        Label[] labelArray = new Label[stringArray1.length];
        for (int i = 0; i < stringArray1.length; i++) {
            labelArray[i] = label;
        }
        methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray);
        methodWriter.visitLabel(labelArray[stringArray1.length - 1]);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray1 = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
Dimension: [] Ct is: Label[] labelArray = new Label[5] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [5] []
statement is: Label[] labelArray = new Label[stringArray1.length], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [stringArray1.length] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[stringArray1.length] Elements: []
lengths: [0] [stringArray1.length]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [stringArray1.length] Ct is: Label[] labelArray = new Label[5] isAssignment: false Array: new Label[stringArray1.length] Elements: []
lengths: [5] [stringArray1.length]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: for (int i = 0; i < stringArray1.length; i++) {
    labelArray[i] = label;
}, class spoon.support.reflect.code.CtForImpl
statement is: methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLabel(labelArray[stringArray1.length - 1]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(labelArray[stringArray1.length - 1]) target is: methodWriter method is: visitLabel()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
Label[] labelArray = new Label[5];
int _int = 4702;
int _int = 4702;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
Label label = null;
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2809)
statement is: org.evosuite.testcase.statements.ArrayStatement@ed17ef3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "", "", "~rMY+<%j", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Alice", "Bob", "Charlie" };// an array of three names

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "Alice", "Bob", "Charlie" }// an array of three names
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Alice", "Bob", "Charlie" } Elements: ["Alice", "Bob", "Charlie"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "";
String string = "";
String string = "~rMY+<%j";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@40c3164f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2868, "IlI(HU", "=", "=", arg5, false, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("IlI(HU")
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.visitLdcInsn("IlI(HU");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "A method with a very long name", "=", "=", stringArray, false, false);
        methodWriter.visitLdcInsn("A method with a very long name");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "A method with a very long name", "=", "=", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn("A method with a very long name"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("A method with a very long name") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2868;
String string = "A method with a very long name";
String string = "=";
String string = "=";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "A method with a very long name";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@b705daa3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4f464774 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@148f6b3d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.lastMethod.visitLdcInsn("*wg.1)G:P")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(251, 1048575)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitMaxs(251, 1048575);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        lastMethod.visitLdcInsn("*wg.1)G:P");
        Label label = new Label();
        methodWriter.visitLabel(label);
        methodWriter.visitMaxs(251, 1048575);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5bebe46b
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@570c0337
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: lastMethod.visitLdcInsn("*wg.1)G:P"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: lastMethod.visitLdcInsn("*wg.1)G:P") target is: lastMethod method is: visitLdcInsn(java.lang.String)
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(251, 1048575), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(251, 1048575) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 251;
int _int = 1048575;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@c1c14a8a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", arg5, false, true)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("w.1)G:P")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true);
methodWriter.visitLdcInsn("w.1)G:P");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true);
        methodWriter.visitLdcInsn("Hello World");
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn("Hello World"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("Hello World") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
TestCase is: int _int = 2;
String string = "w.1)G:P";
String string = "w.1)G:P";
String string = "w.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
String string = "Hello World";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@64c37bba type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@851e4657 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b724bc69 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable")
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("LocalVariableTypeTable")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable");
methodWriter.visitLdcInsn("LocalVariableTypeTable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "MyClass";
        stringArray[1] = "myMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitFieldInsn(251, "MyClass", "*wg.1)G:P", "LocalVariableTypeTable");
        methodWriter.visitLdcInsn("LocalVariableTypeTable");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MyClass" Ct is: stringArray[0] = "MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8f521b04
statement is: stringArray[1] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[1] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fcfe58d2
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(251, "MyClass", "*wg.1)G:P", "LocalVariableTypeTable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(251, "MyClass", "*wg.1)G:P", "LocalVariableTypeTable") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitLdcInsn("LocalVariableTypeTable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("LocalVariableTypeTable") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "MyClass"
* this is vulnerable: String string = "myMethod"
TestCase is: String[] stringArray = new String[2];
String string = "MyClass";
String string = "myMethod";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 251;
String string = "MyClass";
String string = "*wg.1)G:P";
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@fe49c6f9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4c433142 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ti"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4e2730b type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = 2060
statement is: org.evosuite.testcase.statements.AssignmentStatement@3e8faf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ti"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
classWriter.index = 2060;
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ti";
        classWriter.index = 2060;
        stringArray[1] = "Ti";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitLdcInsn(COMPUTE_MAXS);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ti", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ti" Ct is: stringArray[0] = "Ti"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3a25da8e
statement is: classWriter.index = 2060, class spoon.support.reflect.code.CtAssignmentImpl
statement is: stringArray[1] = "Ti", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ti" Ct is: stringArray[1] = "Ti"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5b53e144
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(COMPUTE_MAXS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(COMPUTE_MAXS) target is: methodWriter method is: visitLdcInsn()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: String string = "Ti"
* this is vulnerable: String string = "Ti"
TestCase is: String[] stringArray = new String[2];
String string = "Ti";
String string = "Ti";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2880)
statement is: org.evosuite.testcase.statements.ArrayStatement@9b3c485c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dcf2d6a6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@2b05d96c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(2, 1980)
test data is: ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitIincInsn(2, 1980);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
        methodWriter.visitIincInsn(2, 1980);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed383374
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9bfd9ed
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(2, 1980), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(2, 1980) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Bob";
int _int = 1;
String string = "";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
int _int = 1980;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@6492ee5a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(2, 0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitIincInsn(2, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitIincInsn(2, 0);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(2, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(2, 0) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIincInsn(II)V
TestCase is: int _int = 2;
String string = "java/lang/Throwable";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 2;
int _int = 0;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@7bbfe990 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", arg5, true, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-1991), (-2049))
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIincInsn((-1991), (-2049));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[10];// This line uses a more descriptive value for the length of the "stringArray" array.

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
        methodWriter.visitIincInsn(5, -10);// This line uses a more descriptive value for the "index" parameter. }}

    }
}
statement is: String[] stringArray = new String[10]// This line uses a more descriptive value for the length of the "stringArray" array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[10] Elements: []
lengths: [0] [10]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(5, -10)// This line uses a more descriptive value for the "index" parameter. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(5, -10)// This line uses a more descriptive value for the "index" parameter. }}
 target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "*w.1)G:P";
String string = "*w.1)G:P";
String string = "*w.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 5;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e547042d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@84ca1855 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@12826e7b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Td;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", arg5, true, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(2000, 848)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitIincInsn(2000, 848);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "John Doe";
        stringArray[1] = "Jane Doe";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "incrementAge", "incrementAge", "org.objectweb.asm.jip.Label", stringArray, true, false);
        methodWriter.visitIincInsn(2000, 848);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "John Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"John Doe" Ct is: stringArray[0] = "John Doe"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1348800a
statement is: stringArray[1] = "Jane Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Jane Doe" Ct is: stringArray[1] = "Jane Doe"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6dc84553
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "incrementAge", "incrementAge", "org.objectweb.asm.jip.Label", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(2000, 848), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(2000, 848) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "John Doe"
* this is vulnerable: String string = "Jane Doe"
TestCase is: String[] stringArray = new String[2];
String string = "John Doe";
String string = "Jane Doe";
int _int = 2000;
String string = "incrementAge";
String string = "incrementAge";
String string = "org.objectweb.asm.jip.Label";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2000;
int _int = 848;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@b784aa4e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@afa015ee type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: org.evosuite.testcase.statements.ArrayStatement@17fe6ee1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2fd212a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c24a851 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@dfcda687 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[2] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@b3db1243 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[3] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@76dfecf4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[4] = label
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        Label label = new Label();
        int[] intArray = new int[]{ 0, -1991, 42 };
        Label[] labelArray = new Label[]{ label, label, label };
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[]{ 0, -1991, 42 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 0, -1991, 42 } Elements: [0, -1991, 42]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[5] isAssignment: false Array: new int[]{ 0, -1991, 42 } Elements: [0, -1991, 42]
lengths: [5] []
Dimension: [] Ct is: Label[] labelArray = new Label[5] isAssignment: false Array: new int[]{ 0, -1991, 42 } Elements: [0, -1991, 42]
lengths: [5] []
statement is: Label[] labelArray = new Label[]{ label, label, label }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[5] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [5] []
Dimension: [] Ct is: Label[] labelArray = new Label[5] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [5] []
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2880)
statement is: org.evosuite.testcase.statements.ArrayStatement@873082c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@db3697bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@720911c6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@a6b6aba1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(1, 1, arg2, arg3)
test data is: ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(1, 1, label, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a sample string";
        stringArray[1] = "This is another sample string";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        Label label = new Label();
        Label[] labelArray = new Label[0];
        methodWriter.visitTableSwitchInsn(1, 1, label, labelArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0] = "This is a sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@35da1cd8
statement is: stringArray[1] = "This is another sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another sample string" Ct is: stringArray[1] = "This is another sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a6655d31
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Label[0] Elements: []
lengths: [2] [0]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [0] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[0] Elements: []
lengths: [0] [0]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: methodWriter.visitTableSwitchInsn(1, 1, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(1, 1, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "This is a sample string"
* this is vulnerable: String string = "This is another sample string"
TestCase is: String[] stringArray = new String[2];
String string = "This is a sample string";
String string = "This is another sample string";
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
int _int = 1;
int _int = 1;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@68d5350 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test", "sample", "data" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);
    }
}
statement is: String[] stringArray = new String[]{ "test", "sample", "data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test", "sample", "data" } Elements: ["test", "sample", "data"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
TestCase is: int _int = 1;
String[] stringArray = "fyf^SiqZgSeh8!";
String string = "@f+s4Sa";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
String string = "fyf^SiqZgSeh8!";
int _int = 1916;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@be23c523 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@32bc0eaa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@504ee07e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Td;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = /* array length */
        new String[2];
        stringArray[0] = "";
        stringArray[1] = "Td;";
        MethodWriter methodWriter = /* access flags */
        /* value */
        new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
        /* dimensions */
        methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);
    }
}
statement is: String[] stringArray = /* array length */
new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: /* array length */
new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[0] = ""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5729877
statement is: stringArray[1] = "Td;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Td;" Ct is: stringArray[1] = "Td;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cf97581b
statement is: MethodWriter methodWriter = /* access flags */
/* value */
new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: /* dimensions */
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219), class spoon.support.reflect.code.CtInvocationImpl
invocation is: /* dimensions */
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
* this is vulnerable: String string = ""
* this is vulnerable: String string = "Td;"
TestCase is: String[] stringArray = new String[2];
String string = "";
String string = "Td;";
int _int = 2000;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "org.objectweb.asm.jip.Label";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "h7\"2D@O1MtzFm K-";
int _int = 16777219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@2cda70be type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@97f88f40 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@db4c5465 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "%Z2=v(+M6aFL|1w"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", arg5, false, true)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "%Z2=v(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true);
methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a sample string";
        stringArray[1] = "Another sample string";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true);
        methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0] = "This is a sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f8bdf869
statement is: stringArray[1] = "Another sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample string" Ct is: stringArray[1] = "Another sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd4db4d8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
* this is vulnerable: String string = "This is a sample string"
* this is vulnerable: String string = "Another sample string"
TestCase is: String[] stringArray = new String[2];
String string = "This is a sample string";
String string = "Another sample string";
int _int = 2;
String string = "NdF=b#& A28u@T";
String string = "*wg.1)G:P";
String string = "4^J>b2.Q3b.F";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
String string = "I[t1f2ow<3TW=*k3F";
int _int = 2167;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@65a12c9e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "&6~:Qd^y\u0005iMt=(")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(251, 65)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(");
methodWriter.visitMaxs(251, 65);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(");
        methodWriter.visitMaxs(251, 65);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=("), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(251, 65), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(251, 65) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = "&6~:Qd^y\u0005iMt=(";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@2c37a743 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9f5e4339 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b819884a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, (Label) null, arg2, "TdW")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, arg1, (Label) null, "O~0\")1")
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, (Label) null, label, "TdW");
methodWriter.visitTryCatchBlock((Label) null, label, (Label) null, "O~0\")1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "A unique identifier for a database connection";
        stringArray[1] = "The name of the table to be queried";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), label, "A unique identifier for an exception handler");
        methodWriter.visitTryCatchBlock(((Label) (null)), label, ((Label) (null)), "The name of the method that is handling the exception");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A unique identifier for a database connection", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A unique identifier for a database connection" Ct is: stringArray[0] = "A unique identifier for a database connection"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@25d653af
statement is: stringArray[1] = "The name of the table to be queried", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The name of the table to be queried" Ct is: stringArray[1] = "The name of the table to be queried"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b1421bf1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), label, "A unique identifier for an exception handler"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), label, "A unique identifier for an exception handler") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), label, ((Label) (null)), "The name of the method that is handling the exception"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), label, ((Label) (null)), "The name of the method that is handling the exception") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
* this is vulnerable: String string = "A unique identifier for a database connection"
* this is vulnerable: String string = "The name of the table to be queried"
TestCase is: String[] stringArray = new String[2];
String string = "A unique identifier for a database connection";
String string = "The name of the table to be queried";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "A unique identifier for an exception handler";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);
String string = "The name of the method that is handling the exception";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2809)
statement is: org.evosuite.testcase.statements.ArrayStatement@2e0256c6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Frame()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Frame
statement code is: Frame frame = new Frame()
statement is: org.evosuite.testcase.statements.FieldStatement@9526dfc6 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = frame.owner
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, arg3, (Label) null, 2809)
test data is: ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Frame frame = new Frame();
Label label = frame.owner;
methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, label, (Label) null, 2809);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "<init>", stringArray, false, false);
        Frame frame = new Frame();
        Label label = frame.owner;
        methodWriter.visitLocalVariable("myMethod", "org.objectweb.asm.jip.MethodWriter", ((String) (null)), label, ((Label) (null)), 42069);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Frame frame = new Frame(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = frame.owner, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: frame.owner is frame
CtField is: org.objectweb.asm.jip.Label org.objectweb.asm.jip.Frame.owner Label owner
statement is: methodWriter.visitLocalVariable("myMethod", "org.objectweb.asm.jip.MethodWriter", ((String) (null)), label, ((Label) (null)), 42069), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("myMethod", "org.objectweb.asm.jip.MethodWriter", ((String) (null)), label, ((Label) (null)), 42069) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 3 Parameters size() 3 Num of Method Parameters: 6
i 4 Parameters size() 3 Num of Method Parameters: 6
i 5 Parameters size() 3 Num of Method Parameters: 6
TestCase is: int _int = 1;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Frame frame = new Frame();
String string = "myMethod";
String string = "org.objectweb.asm.jip.MethodWriter";
int _int = 42069;
Label label = null;
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) _int, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@6bf62c8c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", arg4, arg4, (-1991))
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", arg4, arg4, 2589)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", label, label, (-1991));
methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", label, label, 2589);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 17, "Hello, World!", "Hello, World!", "Hello, World!", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLocalVariable("This is a test variable", "A descriptive name for the variable", "Hello, World!", label, label, 42);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 17, "Hello, World!", "Hello, World!", "Hello, World!", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("This is a test variable", "A descriptive name for the variable", "Hello, World!", label, label, 42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("This is a test variable", "A descriptive name for the variable", "Hello, World!", label, label, 42) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
TestCase is: String[] stringArray = new String[0];
int _int = 17;
String string = "Hello, World!";
String string = "Hello, World!";
String string = "Hello, World!";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
String string = "This is a test variable";
String string = "A descriptive name for the variable";
String string = "Hello, World!";
int _int = 42;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1652)
statement is: org.evosuite.testcase.statements.ArrayStatement@87f910c5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1652, "TdW", "TdW", "TdW", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", arg4, arg4, 1652)
test data is: ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1652, "TdW", "TdW", "TdW", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", label, label, 1652);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1024, "main", "void", "([Ljava/lang/String;)V", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("userName", "java.lang.String", null, label, label, 1024);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1024, "main", "void", "([Ljava/lang/String;)V", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("userName", "java.lang.String", null, label, label, 1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("userName", "java.lang.String", null, label, label, 1024) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,<unknown>,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
TestCase is: int _int = 1024;
String string = "main";
String string = "void";
String string = "([Ljava/lang/String;)V";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
String string = "userName";
String string = "java.lang.String";
int _int = 1024;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@f11d8da4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c1704882 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@9c95ec4e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "FO|,4#ci)"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "", "FO|,4#ci)", "", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(947, arg1)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(188, arg1)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(947, label);
methodWriter.visitLineNumber(188, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a sample input";
        stringArray[1] = "This is another sample input";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "", "FO|,4#ci)", "", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLineNumber(947, label);
        methodWriter.visitLineNumber(188, label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample input", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample input" Ct is: stringArray[0] = "This is a sample input"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@58d8e415
statement is: stringArray[1] = "This is another sample input", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another sample input" Ct is: stringArray[1] = "This is another sample input"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@42701596
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1820, "", "FO|,4#ci)", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(947, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(947, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLineNumber(188, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(188, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "This is a sample input"
* this is vulnerable: String string = "This is another sample input"
TestCase is: String[] stringArray = new String[2];
String string = "This is a sample input";
String string = "This is another sample input";
String string = "";
String string = "FO|,4#ci)";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
int _int = 947;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 188;
((MethodWriter) string).visitLineNumber(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2809)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 1890)
test data is: ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
methodWriter.visitMaxs(2, 1890);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "subtract", "multiply", ((String[]) (null)), true, false);
        methodWriter.visitMaxs(2, 1890);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "subtract", "multiply", ((String[]) (null)), true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(2, 1890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2, 1890) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 2;
String string = "add";
String string = "subtract";
String string = "multiply";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 2;
int _int = 1890;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@5f8979f0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(251, 65)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitMaxs(251, 65);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        methodWriter.visitMaxs(251, 65);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(251, 65), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(251, 65) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1988))
statement is: org.evosuite.testcase.statements.ArrayStatement@873768ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ff9f43c5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "WrQdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2504ec5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "WrQdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "RuntimeVisibleAnnotations")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(251, 84)
test data is: ClassWriter classWriter = new ClassWriter((-1988));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
methodWriter.visitMaxs(251, 84);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "WrQdW";
        stringArray[1] = "WrQdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true);
        Label label = new Label();
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
        methodWriter.visitMaxs(251, 84);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "WrQdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[0] = "WrQdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@383e02e9
statement is: stringArray[1] = "WrQdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[1] = "WrQdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@70a7fd69
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(251, 84), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(251, 84) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "WrQdW"
* this is vulnerable: String string = "WrQdW"
TestCase is: String[] stringArray = new String[2];
String string = "WrQdW";
String string = "WrQdW";
int _int = 2;
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@744f91e0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-720), 256)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMaxs((-720), 256);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World", "Java" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
        methodWriter.visitMaxs(-720, 256);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World", "Java" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World", "Java" } Elements: ["Hello", "World", "Java"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(-720, 256), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-720, 256) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 256;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 256;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@f421307 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d915d8ff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ti"
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc82d353 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ti"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "Ti")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(191, 546)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "Ti");
methodWriter.visitMaxs(191, 546);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "java.lang.Exception";
        stringArray[1] = "java.io.IOException";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "java.lang.Exception");
        methodWriter.visitMaxs(191, 546);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Exception", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Exception" Ct is: stringArray[0] = "java.lang.Exception"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7618713c
statement is: stringArray[1] = "java.io.IOException", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.io.IOException" Ct is: stringArray[1] = "java.io.IOException"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d37abb54
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "java.lang.Exception"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "java.lang.Exception") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(191, 546), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(191, 546) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "java.lang.Exception"
* this is vulnerable: String string = "java.io.IOException"
TestCase is: String[] stringArray = new String[2];
String string = "java.lang.Exception";
String string = "java.io.IOException";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "java.lang.Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 191;
int _int = 546;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@82bbec49 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d97bd596 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "WrQdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@492c8252 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "WrQdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "RuntimeVisibleAnnotations")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(251, 84)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
methodWriter.visitMaxs(251, 84);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "WrQdW";// Changed from "WrQdW" to a more descriptive and representative example

        stringArray[1] = "WrQdW";// Changed from "WrQdW" to a more descriptive and representative example

        stringArray[2] = "WrQdW";// Changed from "WrQdW" to a more descriptive and representative example

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
        Label label = new Label();
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");// Changed from visitTryCatchBlock to a more descriptive and representative example

        methodWriter.visitMaxs(251, 84);// Changed from 251 and 84 to more descriptive and representative values }}

    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[3] Elements: []
lengths: [2] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[0] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@161af431
statement is: stringArray[1] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[1] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ecf34018
statement is: stringArray[2] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[2] = "WrQdW"// Changed from "WrQdW" to a more descriptive and representative example

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@161af431
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations")// Changed from visitTryCatchBlock to a more descriptive and representative example
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations")// Changed from visitTryCatchBlock to a more descriptive and representative example
 target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(251, 84)// Changed from 251 and 84 to more descriptive and representative values }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(251, 84)// Changed from 251 and 84 to more descriptive and representative values }}
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "WrQdW"
* this is vulnerable: String string = "WrQdW"
TestCase is: String[] stringArray = new String[2];
String string = "WrQdW";
String string = "WrQdW";
int _int = 2;
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@cce836c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d9c05d46 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "WrQdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c37f6433 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "WrQdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@37c34608 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[7]
statement is: org.evosuite.testcase.statements.ArrayStatement@6b309cc9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ee0b580a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@ae5b13b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d32d9c3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[2] = label
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1367, 1244)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1367, 1244);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "WrQdW";
        stringArray[1] = "WrQdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
        Label label = new Label();
        int[] intArray = new int[7];// Changed to a more descriptive value for the number of cases in the switch statement

        Label[] labelArray = new Label[3];
        labelArray[0] = label;
        labelArray[1] = label;
        labelArray[2] = label;
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitMaxs(1367, 1244);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "WrQdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[0] = "WrQdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@614bad9a
statement is: stringArray[1] = "WrQdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WrQdW" Ct is: stringArray[1] = "WrQdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b4cb03a6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[7]// Changed to a more descriptive value for the number of cases in the switch statement
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new int[7] Elements: []
lengths: [2] [7]
Their type are: class [Ljava.lang.String; int[]
Dimension: [7] Ct is: int[] intArray = new int[7] isAssignment: false Array: new int[7] Elements: []
lengths: [7] [7]
Their type are: class [I int[]
statement is: Label[] labelArray = new Label[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Label[3] Elements: []
lengths: [2] [3]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [3] Ct is: int[] intArray = new int[7] isAssignment: false Array: new Label[3] Elements: []
lengths: [7] [3]
Their type are: class [I Label[]
Dimension: [3] Ct is: Label[] labelArray = new Label[3] isAssignment: false Array: new Label[3] Elements: []
lengths: [3] [3]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b19f5b24
statement is: labelArray[1] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[1] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@44366d16
statement is: labelArray[2] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[2] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9887c841
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(1367, 1244), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1367, 1244) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "WrQdW"
* this is vulnerable: String string = "WrQdW"
TestCase is: String[] stringArray = new String[2];
String string = "WrQdW";
String string = "WrQdW";
int _int = 2;
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
String string = "*Ig.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1367;
int _int = 1244;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2809)
statement is: org.evosuite.testcase.statements.ArrayStatement@7dce8a29 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@f5212918 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[3]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 1, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Object[] objectArray = new Object[3];
methodWriter.visitFrame(1, 1, objectArray, 1, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        stringArray[2] = "Charlie";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
        Object[] objectArray = new Object[3];
        objectArray[0] = 1;
        objectArray[1] = 3.14;
        objectArray[2] = "This is a test";
        methodWriter.visitFrame(1, 1, objectArray, 1, objectArray);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[3] Elements: []
lengths: [0] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Charlie", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Charlie" Ct is: stringArray[2] = "Charlie"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Object[3] Elements: []
lengths: [0] [3]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [3] Ct is: Object[] objectArray = new Object[3] isAssignment: false Array: new Object[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = 1, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:1 Ct is: objectArray[0] = 1
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = 3.14, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:3.14 Ct is: objectArray[1] = 3.14
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2] = "This is a test", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"This is a test" Ct is: objectArray[2] = "This is a test"
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: methodWriter.visitFrame(1, 1, objectArray, 1, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 1, objectArray, 1, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Object[] objectArray = new Object[3];
int _int = 1;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@c4d49df8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "IlI(HU", "=", "=", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@f1b7b736 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: methodWriter.classReaderOffset = 201
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 201;
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world", "abc" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false);
        methodWriter.classReaderOffset = 201;
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world", "abc" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world", "abc" } Elements: ["hello", "world", "abc"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.classReaderOffset = 201, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 256;
String string = "IlI(HU";
String string = "=";
String string = "=";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@5391d7c1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4a549d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5fd69021 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(251, "TdW")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", arg4, arg4, 251)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitTypeInsn(251, "TdW");
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", label, label, 251);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "java.lang.Thread";
        stringArray[1] = "java.lang.Runnable";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java.lang.Thread", "run", "()V", stringArray, true, false);
        methodWriter.visitTypeInsn(NEW, "java.lang.Thread");
        Label label = new Label();
        methodWriter.visitLocalVariable("run", "()V", null, label, label, ASM9);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Thread", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Thread" Ct is: stringArray[0] = "java.lang.Thread"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7232d5a1
statement is: stringArray[1] = "java.lang.Runnable", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Runnable" Ct is: stringArray[1] = "java.lang.Runnable"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@98883813
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java.lang.Thread", "run", "()V", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(NEW, "java.lang.Thread"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(NEW, "java.lang.Thread") target is: methodWriter method is: visitTypeInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("run", "()V", null, label, label, ASM9), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("run", "()V", null, label, label, ASM9) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,<unknown>,Label,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 4 Parameters size() 4 Num of Method Parameters: 6
i 5 Parameters size() 4 Num of Method Parameters: 6
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: getSize()I
* this is vulnerable: String string = "java.lang.Thread"
* this is vulnerable: String string = "java.lang.Runnable"
TestCase is: String[] stringArray = new String[2];
String string = "java.lang.Thread";
String string = "java.lang.Runnable";
int _int = 2;
String string = "java.lang.Thread";
String string = "run";
String string = "()V";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "java.lang.Thread";
String string = null;
((MethodWriter) string).visitTypeInsn((int) string, string);
Label label = new Label();
String string = "run";
String string = "()V";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@b4f4719d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, false, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(2868)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2868, 2291, arg4, 2868, arg4)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitInsn(2868);
methodWriter.visitFrame(2868, 2291, stringArray, 2868, stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 3054, "<init>", "<init>", "<init>", stringArray, false, false);
        methodWriter.visitInsn(3054);
        methodWriter.visitFrame(3054, 2291, stringArray, 3054, stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3054, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(3054), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(3054) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitInsn(I)V
statement is: methodWriter.visitFrame(3054, 2291, stringArray, 3054, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3054, 2291, stringArray, 3054, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
TestCase is: String[] stringArray = new String[0];
int _int = 3054;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 3054;
((MethodWriter) string).visitInsn(_int);
int _int = 3054;
int _int = 2291;
int _int = 3054;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@9d177fec type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9dbec269 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@c32a3ee0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "", "", "", arg5, false, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(1, "")
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", arg5)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1124075009, 1124075009, arg4, 2868, arg4)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "", "", "", stringArray, false, false);
methodWriter.visitTypeInsn(1, "");
classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray);
methodWriter.visitFrame(1124075009, 1124075009, stringArray, 2868, stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "localVar1";
        stringArray[1] = "localVar2";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1824, "methodName", "", "", stringArray, false, false);
        methodWriter.visitTypeInsn(1, "int");
        classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray);
        methodWriter.visitFrame(2, 2, stringArray, 2868, stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "localVar1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"localVar1" Ct is: stringArray[0] = "localVar1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@72508b28
statement is: stringArray[1] = "localVar2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"localVar2" Ct is: stringArray[1] = "localVar2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e227b910
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1824, "methodName", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(1, "int"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(1, "int") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
statement is: classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: methodWriter.visitFrame(2, 2, stringArray, 2868, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 2, stringArray, 2868, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
* this is vulnerable: String string = "localVar1"
* this is vulnerable: String string = "localVar2"
TestCase is: String[] stringArray = new String[2];
String string = "localVar1";
String string = "localVar2";
String string = "methodName";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
String string = "int";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
int _int = 2;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@d1aa8ea7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, arg5, false, false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];// Added some sample strings to the array.

        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[5]// Added some sample strings to the array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[5] Elements: []
lengths: [0] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: String[] stringArray = new String[0];
int _int = 1;
String string = "fyf^SiqZgSeh8!";
String string = "@f+s4Sa";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@b6db5c37 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", arg5, false, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -1991, "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
        methodWriter.visitAnnotationDefault();
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1991, "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: getSize()I
TestCase is: String string = "@f+s4Sa";
String[] stringArray = "zQvTGm%>U069n 4";
String string = "fyf^SiqZgSeh8!";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@2eca018b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@be555a55 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@98c8db59 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("x<Rw*Ns,[By", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        stringArray[1] = "The big red barn door creaked open and shut";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6ed80afc
statement is: stringArray[1] = "The big red barn door creaked open and shut", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The big red barn door creaked open and shut" Ct is: stringArray[1] = "The big red barn door creaked open and shut"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@32ad7e39
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("x<Rw*Ns,[By", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("x<Rw*Ns,[By", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog"
* this is vulnerable: String string = "The big red barn door creaked open and shut"
TestCase is: String[] stringArray = new String[2];
String string = "The quick brown fox jumps over the lazy dog";
String string = "The big red barn door creaked open and shut";
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@69531e7a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("<init>")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2891)
statement is: org.evosuite.testcase.statements.ArrayStatement@c7d9be77 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "$Br8cc51L'~^Ig,i98*", "=", "=", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@aeee8346 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: methodWriter.classReaderOffset = 2891
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2891)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2891);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "$Br8cc51L'~^Ig,i98*", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 2891;
ByteVector byteVector = new ByteVector(2891);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "myMethod", "()V", "=#$@!", stringArray, false, false);
        methodWriter.classReaderOffset = 500;
        ByteVector byteVector = new ByteVector(500);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[5] Elements: []
lengths: [0] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "myMethod", "()V", "=#$@!", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.classReaderOffset = 500, class spoon.support.reflect.code.CtAssignmentImpl
statement is: ByteVector byteVector = new ByteVector(500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "myMethod";
String string = "()V";
String string = "=#$@!";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 500;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@16f641a5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(65, "7*wg.)G:P", "v=QZb", "7*wg.)G:P")
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(65, "7*wg.)G:P", "v=QZb", "7*wg.)G:P");
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
        methodWriter.visitMethodInsn(65, "java/io/FileInputStream", "read", "([BIII)I");
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(65, "java/io/FileInputStream", "read", "([BIII)I"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(65, "java/io/FileInputStream", "read", "([BIII)I") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "java/lang/Throwable";
String string = "7*wg.)G:P";
String string = "7*wg.)G:P";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 65;
String string = "java/io/FileInputStream";
String string = "read";
String string = "([BIII)I";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e494908a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@835f01fb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "m- qhy"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9dca166d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "IlI(HU"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2b3213a0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "m- qhy"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8f51318e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "7*wg.)G:P"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e6f7bd2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "7*wg.)G:P"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4acd31c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "m- qhy"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ac14e375 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "7*wg.)G:P"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(1144, 1144, "7*wg.)G:P", "7*wg.)G:P", "m- qhy", arg5)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-759), "m- qhy", "IlI(HU", "IlI(HU", arg5, false, false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1144)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[7];
stringArray[0] = "m- qhy";
stringArray[1] = "IlI(HU";
stringArray[2] = "m- qhy";
stringArray[3] = "7*wg.)G:P";
stringArray[4] = "7*wg.)G:P";
stringArray[5] = "m- qhy";
stringArray[6] = "7*wg.)G:P";
classWriter.visit(1144, 1144, "7*wg.)G:P", "7*wg.)G:P", "m- qhy", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, (-759), "m- qhy", "IlI(HU", "IlI(HU", stringArray, false, false);
ByteVector byteVector = new ByteVector(1144);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Java";
        stringArray[1] = "Development";
        stringArray[2] = "Tutorial";
        stringArray[3] = "HelloWorld";
        stringArray[4] = "main";
        stringArray[5] = "public";
        stringArray[6] = "static";
        classWriter.visit(1144, 1144, "HelloWorld", "main", "Java", stringArray);
        MethodWriter methodWriter = new MethodWriter(classWriter, -759, "main", "public static void main(String[] args)", "public static void main(String[] args)", stringArray, false, false);
        ByteVector byteVector = new ByteVector(1144);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[0] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b3264e6
statement is: stringArray[1] = "Development", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Development" Ct is: stringArray[1] = "Development"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e4c419d4
statement is: stringArray[2] = "Tutorial", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Tutorial" Ct is: stringArray[2] = "Tutorial"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2198c8b2
statement is: stringArray[3] = "HelloWorld", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"HelloWorld" Ct is: stringArray[3] = "HelloWorld"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9475e6d8
statement is: stringArray[4] = "main", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"main" Ct is: stringArray[4] = "main"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1f6d433
statement is: stringArray[5] = "public", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"public" Ct is: stringArray[5] = "public"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f510b26a
statement is: stringArray[6] = "static", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"static" Ct is: stringArray[6] = "static"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4ca91016
statement is: classWriter.visit(1144, 1144, "HelloWorld", "main", "Java", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(1144, 1144, "HelloWorld", "main", "Java", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -759, "main", "public static void main(String[] args)", "public static void main(String[] args)", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(1144), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 13
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Java"
* this is vulnerable: String string = "Development"
* this is vulnerable: String string = "Tutorial"
* this is vulnerable: String string = "HelloWorld"
* this is vulnerable: String string = "main"
* this is vulnerable: String string = "public"
* this is vulnerable: String string = "static"
TestCase is: String[] stringArray = new String[7];
String string = "Java";
String string = "Development";
String string = "Tutorial";
String string = "HelloWorld";
String string = "main";
String string = "public";
String string = "static";
String string = "main";
String string = "public static void main(String[] args)";
String string = "public static void main(String[] args)";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@201f233b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, arg5, false, false)
statement is: org.evosuite.testcase.statements.FieldStatement@6b3de096 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Test", "Data", "Improved" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false);
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "Test", "Data", "Improved" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Test", "Data", "Improved" } Elements: ["Test", "Data", "Improved"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
String[] stringArray = "fyf^SiqZgSeh8!";
String string = "@f+s4Sa";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@9630420c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@93a6cd61 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@bbdfb107 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        methodWriter.visitAnnotationDefault();
        ByteVector byteVector = new ByteVector(2);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@87247933
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7377f1cc
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 1;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitAnnotationDefault();
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@4d9d2b25 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b14f031b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@4f8a845e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("x<Rw*Ns,[By", true)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1116)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
ByteVector byteVector = new ByteVector(1116);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Test string 1";
        stringArray[1] = "Test string 2";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
        methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
        ByteVector byteVector = new ByteVector(1116);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Test string 1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test string 1" Ct is: stringArray[0] = "Test string 1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1cf89cb8
statement is: stringArray[1] = "Test string 2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test string 2" Ct is: stringArray[1] = "Test string 2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8776706e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1814, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("x<Rw*Ns,[By", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("x<Rw*Ns,[By", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(1116), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Test string 1"
* this is vulnerable: String string = "Test string 2"
TestCase is: String[] stringArray = new String[2];
String string = "Test string 1";
String string = "Test string 2";
String string = "";
String string = "RuntimeInvisibleAnnotations";
String string = "RuntimeInvisibleAnnotations";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 1116;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@4bfff401 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ced29a20 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@109603c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1810), "", "", "", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("DOY!R", false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(713)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1810), "", "", "", stringArray, false, false);
methodWriter.visitAnnotation("DOY!R", false);
ByteVector byteVector = new ByteVector(713);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "Goodbye, World...";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1810, "", "", "", stringArray, false, false);
        methodWriter.visitAnnotation("DOY!R", false);
        ByteVector byteVector = new ByteVector(713);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b3a7251
statement is: stringArray[1] = "Goodbye, World...", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye, World..." Ct is: stringArray[1] = "Goodbye, World..."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@54b72095
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1810, "", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("DOY!R", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("DOY!R", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(713), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "Goodbye, World..."
TestCase is: String[] stringArray = new String[2];
String string = "Hello, World!";
String string = "Goodbye, World...";
String string = "";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
String string = "DOY!R";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 713;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@17706675 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("<init>")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1985)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(1985);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "example1", "example2" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
        Attribute attribute = new Attribute("<init>");
        methodWriter.visitAttribute(attribute);
        ByteVector byteVector = new ByteVector(1985);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "example1", "example2" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "example1", "example2" } Elements: ["example1", "example2"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("<init>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: ByteVector byteVector = new ByteVector(1985), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 256;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "<init>";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 1985;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@8a42568 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", arg4, arg4, (-395))
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn((-1991), "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>")
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(164)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, (-395));
methodWriter.visitFieldInsn((-1991), "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>");
ByteVector byteVector = new ByteVector(164);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "a", "b", "c" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, -395);
        methodWriter.visitFieldInsn(-1991, "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>");
        ByteVector byteVector = new ByteVector(164);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "a", "b", "c" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "a", "b", "c" } Elements: ["a", "b", "c"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, -395), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, -395) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: methodWriter.visitFieldInsn(-1991, "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(-1991, "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: ByteVector byteVector = new ByteVector(164), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "%bnx3G3bg(";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "<init>";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = 164;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@2aba7c85 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar")
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(281, arg1)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(256)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitLineNumber(281, label);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];// replaced with a non-empty array of strings

        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");// replaced with a random value for the field name and descriptor

        methodWriter.visitLineNumber(281, label);// replaced with a random positive integer value

        ByteVector byteVector = new ByteVector(256);// replaced with a non-empty array of bytes

        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[0]// replaced with a non-empty array of strings
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar")// replaced with a random value for the field name and descriptor
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar")// replaced with a random value for the field name and descriptor
 target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitLineNumber(281, label)// replaced with a random positive integer value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(281, label)// replaced with a random positive integer value
 target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: ByteVector byteVector = new ByteVector(256)// replaced with a non-empty array of bytes
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String[] stringArray = new String[0];
int _int = 256;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 281;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@c532998c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fea77eb8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8699c8b5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.lastMethod.visitLdcInsn("*wg.1)G:P")
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-3868), (-3868), arg4, 1426, arg4)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitFrame((-3868), (-3868), stringArray, 1426, stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello World";
        stringArray[1] = "Goodbye World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "exampleMethod", "void", stringArray, true, false);
        lastMethod.visitLdcInsn("exampleString");
        methodWriter.visitFrame(-3868, -3868, stringArray, 1426, stringArray);
        ByteVector byteVector = new ByteVector(1);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World" Ct is: stringArray[0] = "Hello World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bb63d82f
statement is: stringArray[1] = "Goodbye World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye World" Ct is: stringArray[1] = "Goodbye World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3890ddca
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "exampleMethod", "void", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: lastMethod.visitLdcInsn("exampleString"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: lastMethod.visitLdcInsn("exampleString") target is: lastMethod method is: visitLdcInsn(java.lang.String)
statement is: methodWriter.visitFrame(-3868, -3868, stringArray, 1426, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-3868, -3868, stringArray, 1426, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
statement is: ByteVector byteVector = new ByteVector(1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
* this is vulnerable: String string = "Hello World"
* this is vulnerable: String string = "Goodbye World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello World";
String string = "Goodbye World";
int _int = 1;
ByteVector byteVector = new ByteVector(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@338860c6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a2a6afb7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b07bf561 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.lastMethod.visitLdcInsn("*wg.1)G:P")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Oi*!v'\uF142DQIA")
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Oi*!v'\uF142DQIA");
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
        lastMethod.visitLdcInsn("*wg.1)G:P");
        methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Oi*!v\'DQIA");
        ByteVector byteVector = new ByteVector(1);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d762aadf
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@681a4c95
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: lastMethod.visitLdcInsn("*wg.1)G:P"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: lastMethod.visitLdcInsn("*wg.1)G:P") target is: lastMethod method is: visitLdcInsn(java.lang.String)
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Oi*!v\'DQIA"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Oi*!v\'DQIA") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 4
i 2 Parameters size() 1 Num of Method Parameters: 4
i 3 Parameters size() 1 Num of Method Parameters: 4
statement is: ByteVector byteVector = new ByteVector(1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 2;
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Oi*!v'\uF142DQIA";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);
int _int = 1;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@1f1bb910 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(256)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This", "is", "a", "test" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
        methodWriter.visitTryCatchBlock(label, label, label, ((String) (null)));
        ByteVector byteVector = new ByteVector(256);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This", "is", "a", "test" } Elements: ["This", "is", "a", "test"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))) target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: ByteVector byteVector = new ByteVector(256), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 256;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@2de33f05 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@290b2877 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "gLt*5f"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c006eb4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "gLt*5f"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5e20898e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "gLt*5f"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-1991), 68, "gLt*5f", "gLt*5f", "gLt*5f", arg5)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(9, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "gLt*5f", "mi@w@<X7vjYrnJ.9=")
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(99, 8, arg4, (-458), arg4)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[3];
stringArray[0] = "gLt*5f";
stringArray[1] = "gLt*5f";
stringArray[2] = "gLt*5f";
classWriter.visit((-1991), 68, "gLt*5f", "gLt*5f", "gLt*5f", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false);
methodWriter.visitMethodInsn(9, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "gLt*5f", "mi@w@<X7vjYrnJ.9=");
ByteVector byteVector = new ByteVector(2);
methodWriter.visitFrame(99, 8, stringArray, (-458), stringArray);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "com/example/ClassName";
        stringArray[1] = "methodName";
        stringArray[2] = "(Ljava/lang/Object;)V";
        classWriter.visit(-1991, 68, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V", stringArray);
        MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false);
        methodWriter.visitMethodInsn(9, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V");
        ByteVector byteVector = new ByteVector(2);
        methodWriter.visitFrame(99, 8, stringArray, -458, stringArray);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com/example/ClassName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com/example/ClassName" Ct is: stringArray[0] = "com/example/ClassName"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@85cc76e3
statement is: stringArray[1] = "methodName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName" Ct is: stringArray[1] = "methodName"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@38e65dcf
statement is: stringArray[2] = "(Ljava/lang/Object;)V", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"(Ljava/lang/Object;)V" Ct is: stringArray[2] = "(Ljava/lang/Object;)V"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@28e58b06
statement is: classWriter.visit(-1991, 68, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-1991, 68, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(9, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(9, "com/example/ClassName", "methodName", "(Ljava/lang/Object;)V") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: ByteVector byteVector = new ByteVector(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(99, 8, stringArray, -458, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(99, 8, stringArray, -458, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "com/example/ClassName"
* this is vulnerable: String string = "methodName"
* this is vulnerable: String string = "(Ljava/lang/Object;)V"
TestCase is: String[] stringArray = new String[3];
String string = "com/example/ClassName";
String string = "methodName";
String string = "(Ljava/lang/Object;)V";
int _int = 9;
String string = ";k1R~i.+)";
String string = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
String string = "}i";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 9;
String string = "com/example/ClassName";
String string = "methodName";
String string = "(Ljava/lang/Object;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
int _int = 99;
int _int = 8;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);
((MethodWriter) string).put(byteVector);

statement is: org.evosuite.testcase.statements.ArrayStatement@5c1cf76c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@425a20ba type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: intArray[1] = 171
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 6, 59)
test data is: int[] intArray = new int[2];
intArray[1] = 171;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[2];
        intArray[0] = 314;// Changed to a more descriptive value

        intArray[1] = 171;
        MethodWriter.getNewOffset(intArray, intArray, 6, 59);
    }
}
statement is: int[] intArray = new int[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: int[] intArray = new int[2] isAssignment: false Array: new int[2] Elements: []
lengths: [2] [2]
Their type are: class [I int[]
statement is: intArray[0] = 314// Changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:314 Ct is: intArray[0] = 314// Changed to a more descriptive value

target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: intArray[1] = 171, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:171 Ct is: intArray[1] = 171
target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.getNewOffset(intArray, intArray, 6, 59), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 6, 59) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
TestCase is: int[] intArray = new int[2];
int _int = 314;
intArray[1] = _int;
int _int = 171;
intArray[1] = _int;
int _int = 6;
int _int = 59;
MethodWriter.getNewOffset(intArray, intArray, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@20182648 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@33d39a08 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: intArray[4] = 253
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, (byte)57, 253)
test data is: int[] intArray = new int[6];
intArray[4] = 253;
MethodWriter.getNewOffset(intArray, intArray, (byte)57, 253);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[6];
        intArray[4] = 100;// changed from 253 to a more descriptive value

        MethodWriter.getNewOffset(intArray, intArray, ((byte) (57)), 100);
    }
}
statement is: int[] intArray = new int[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: int[] intArray = new int[6] isAssignment: false Array: new int[6] Elements: []
lengths: [6] [6]
Their type are: class [I int[]
statement is: intArray[4] = 100// changed from 253 to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:100 Ct is: intArray[4] = 100// changed from 253 to a more descriptive value

target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.getNewOffset(intArray, intArray, ((byte) (57)), 100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, ((byte) (57)), 100) target is: MethodWriter method is: getNewOffset(int[],int[],byte,int)
Matched Method is: getNewOffset([I[III)I
TestCase is: int[] intArray = new int[6];
int _int = 100;
intArray[4] = _int;
int _int = 57;
int _int = 100;
MethodWriter.getNewOffset(intArray, intArray, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@f9c694fc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2868, (-1780))
test data is: int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (-1780));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[5];
        MethodWriter.getNewOffset(intArray, intArray, 2868, -1780);
    }
}
statement is: int[] intArray = new int[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: int[] intArray = new int[5] isAssignment: false Array: new int[5] Elements: []
lengths: [5] [5]
Their type are: class [I int[]
statement is: MethodWriter.getNewOffset(intArray, intArray, 2868, -1780), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 2868, -1780) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: int[] intArray = new int[5];
int _int = 2868;
int _int = null;
MethodWriter.getNewOffset(intArray, intArray, _int, _int);

statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@8909cde2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[4]
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: Label label = new Label();
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        int[] intArray1 = new int[]{ 1, 2, 3, 4 };
        int[] intArray2 = new int[]{ 5, 6, 7, 8 };
        MethodWriter.getNewOffset(intArray1, intArray2, label);
        MethodWriter.getNewOffset(intArray2, intArray1, label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray1 = new int[]{ 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: int[] intArray2 = new int[]{ 5, 6, 7, 8 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[]{ 5, 6, 7, 8 } Elements: [5, 6, 7, 8]
lengths: [4] []
statement is: MethodWriter.getNewOffset(intArray1, intArray2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray1, intArray2, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: MethodWriter.getNewOffset(intArray2, intArray1, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray2, intArray1, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: Label label = new Label();
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1991))
statement is: org.evosuite.testcase.statements.ArrayStatement@e8c20ab9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bdf4f99e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "TdW"
statement is: org.evosuite.testcase.statements.AssignmentStatement@61476afe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "TdW"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@5464a30 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: org.evosuite.testcase.statements.ArrayStatement@c0535874 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3606069c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TdW";
        stringArray[1] = "TdW";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
        Label label = new Label();
        int[] intArray = new int[]{ 50, -3, 42 };// Improved test data: Using more descriptive values for the integer array

        Label[] labelArray = new Label[2];
        labelArray[0] = label;
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[0] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@da8bfd9
statement is: stringArray[1] = "TdW", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TdW" Ct is: stringArray[1] = "TdW"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8d0835a7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[]{ 50, -3, 42 }// Improved test data: Using more descriptive values for the integer array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new int[]{ 50, -3, 42 } Elements: [50, -3, 42]
lengths: [2] []
Dimension: [] Ct is: int[] intArray = new int[5] isAssignment: false Array: new int[]{ 50, -3, 42 } Elements: [50, -3, 42]
lengths: [5] []
Dimension: [] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new int[]{ 50, -3, 42 } Elements: [50, -3, 42]
lengths: [1] []
statement is: Label[] labelArray = new Label[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Label[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [2] Ct is: int[] intArray = new int[5] isAssignment: false Array: new Label[2] Elements: []
lengths: [5] [2]
Their type are: class [I Label[]
Dimension: [2] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new Label[2] Elements: []
lengths: [1] [2]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@36452d9f
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "TdW"
* this is vulnerable: String string = "TdW"
TestCase is: String[] stringArray = new String[2];
String string = "TdW";
String string = "TdW";
int _int = 2;
String string = "*wg.:1)G:P";
String string = "*wg.:1)G:P";
String string = "*wg.:1)G:P";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
Label[] labelArray = new Label[1];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

statement is: org.evosuite.testcase.statements.ArrayStatement@367beada type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[0]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2941, 2941)
test data is: int[] intArray = new int[0];
MethodWriter.getNewOffset(intArray, intArray, 2941, 2941);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 1, 2, 3 };
        MethodWriter.getNewOffset(intArray, intArray, 2941, 2941);
    }
}
statement is: int[] intArray = new int[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [0] []
statement is: MethodWriter.getNewOffset(intArray, intArray, 2941, 2941), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 2941, 2941) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: int _int = 2941;
int _int = 2941;
int _int = null;
int _int = null;
MethodWriter.getNewOffset((int[]) _int, (int[]) _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@ed979ab5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7009323 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte) (-65)
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, 1)
test data is: byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[9];
        // The value -65 is used to represent a negative number that is not divisible by 2.
        byteArray[1] = ((byte) (-65));
        MethodWriter.readInt(byteArray, 1);
    }
}
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: // The value -65 is used to represent a negative number that is not divisible by 2.
byteArray[1] = ((byte) (-65)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (-65)) Ct is: // The value -65 is used to represent a negative number that is not divisible by 2.
byteArray[1] = ((byte) (-65))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readInt(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, 1) target is: MethodWriter method is: readInt(byte[],int)
Matched Method is: readInt([BI)I
TestCase is: byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
int _int = 1;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@205d2d0b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b09a430e type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)10
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, 1)
test data is: byte[] byteArray = new byte[9];
byteArray[1] = (byte)10;
MethodWriter.readInt(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[9];
        byteArray[1] = ((byte) (234));// Changed to a more descriptive value

        MethodWriter.readInt(byteArray, 1);
    }
}
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (234))// Changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (234)) Ct is: byteArray[1] = ((byte) (234))// Changed to a more descriptive value

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readInt(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, 1) target is: MethodWriter method is: readInt(byte[],int)
Matched Method is: readInt([BI)I
TestCase is: byte[] byteArray = new byte[9];
int _int = 234;
byteArray[1] = (byte) _int;
int _int = 1;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@e908021c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ec9b56b3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte) (-69)
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, 1)
test data is: byte[] byteArray = new byte[3];
byteArray[1] = (byte) (-69);
MethodWriter.readShort(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the previous code snippet
        byte[] byteArray = new byte[]{ 123, -69, 45 };
        MethodWriter.readShort(byteArray, 1);
    }
}
statement is: // Improved test data for the previous code snippet
byte[] byteArray = new byte[]{ 123, -69, 45 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[]{ 123, -69, 45 } Elements: [123, -69, 45]
lengths: [3] []
statement is: MethodWriter.readShort(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, 1) target is: MethodWriter method is: readShort(byte[],int)
Matched Method is: readShort([BI)S
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 1;
int _int = null;
MethodWriter.readShort((byte[]) _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@2bc2a7eb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bd482d21 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)10
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, 1)
test data is: byte[] byteArray = new byte[5];
byteArray[1] = (byte)10;
MethodWriter.readShort(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        byte[] byteArray = new byte[5];
        byteArray[1] = ((byte) (256));
        MethodWriter.readShort(byteArray, 1);
    }
}
statement is: // Improved test data:
byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (256)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (256)) Ct is: byteArray[1] = ((byte) (256))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, 1) target is: MethodWriter method is: readShort(byte[],int)
Matched Method is: readShort([BI)S
TestCase is: byte[] byteArray = new byte[5];
int _int = 256;
byteArray[1] = (byte) _int;
int _int = 1;
MethodWriter.readShort(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@84c89fb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@161239bc type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[2] = (byte)70
statement is: readUnsignedShort([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2)
test data is: byte[] byteArray = new byte[9];
byteArray[2] = (byte)70;
MethodWriter.readUnsignedShort(byteArray, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        byte[] byteArray = new byte[9];
        byteArray[0] = ((byte) (1));
        byteArray[1] = ((byte) (255));
        byteArray[2] = ((byte) (100));
        MethodWriter.readUnsignedShort(byteArray, 2);
    }
}
statement is: // Improved test data
byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (1)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[0] = ((byte) (1))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (255)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (255)) Ct is: byteArray[1] = ((byte) (255))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = ((byte) (100)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (100)) Ct is: byteArray[2] = ((byte) (100))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readUnsignedShort(byteArray, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readUnsignedShort(byteArray, 2) target is: MethodWriter method is: readUnsignedShort(byte[],int)
Matched Method is: readUnsignedShort([BI)I
TestCase is: byte[] byteArray = new byte[9];
int _int = 1;
byteArray[2] = (byte) _int;
int _int = 255;
byteArray[2] = (byte) _int;
int _int = 100;
byteArray[2] = (byte) _int;
int _int = 2;
MethodWriter.readUnsignedShort(byteArray, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2868)
statement is: org.evosuite.testcase.statements.ArrayStatement@803515e7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.")
test data is: ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[0];
int _int = 256;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1491))
statement is: org.evosuite.testcase.statements.ArrayStatement@30f028c8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ba314d3b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "GK9AJRwa{~+id{="
statement is: org.evosuite.testcase.statements.AssignmentStatement@abe1e444 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ".klf&h,!$r&"
statement is: org.evosuite.testcase.statements.AssignmentStatement@58c34757 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "*wg.1)G:P"
statement is: org.evosuite.testcase.statements.AssignmentStatement@83e3aa4a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "*wg.1)G:P"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5861087a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "L4?w^&z@d[`"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6714b38 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "*wgj):dG}P"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", arg5, true, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(57, "StackMap", false)
test data is: ClassWriter classWriter = new ClassWriter((-1491));
String[] stringArray = new String[6];
stringArray[0] = "GK9AJRwa{~+id{=";
stringArray[1] = ".klf&h,!$r&";
stringArray[2] = "*wg.1)G:P";
stringArray[3] = "*wg.1)G:P";
stringArray[4] = "L4?w^&z@d[`";
stringArray[5] = "*wgj):dG}P";
MethodWriter methodWriter = new MethodWriter(classWriter, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", stringArray, true, false);
methodWriter.visitParameterAnnotation(57, "StackMap", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[6];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "This is a test.";
        stringArray[2] = "The quick brown fox jumps over the lazy dog.";
        stringArray[3] = "The five boxing wizards jumped up and down.";
        stringArray[4] = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?";
        stringArray[5] = "The rain in Spain stays mainly in the plain.";
        MethodWriter methodWriter = new MethodWriter(classWriter, 123, "main", "()V", stringArray, true, false);
        methodWriter.visitParameterAnnotation(57, "StackMap", false);
    }
}
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@def9ba71
statement is: stringArray[1] = "This is a test.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test." Ct is: stringArray[1] = "This is a test."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f5d81dd5
statement is: stringArray[2] = "The quick brown fox jumps over the lazy dog.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog." Ct is: stringArray[2] = "The quick brown fox jumps over the lazy dog."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e7894747
statement is: stringArray[3] = "The five boxing wizards jumped up and down.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The five boxing wizards jumped up and down." Ct is: stringArray[3] = "The five boxing wizards jumped up and down."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b280e807
statement is: stringArray[4] = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"How much wood could a woodchuck chuck if a woodchuck could chuck wood?" Ct is: stringArray[4] = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ae25be4d
statement is: stringArray[5] = "The rain in Spain stays mainly in the plain.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The rain in Spain stays mainly in the plain." Ct is: stringArray[5] = "The rain in Spain stays mainly in the plain."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40ae903d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 123, "main", "()V", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(57, "StackMap", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(57, "StackMap", false) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "This is a test."
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog."
* this is vulnerable: String string = "The five boxing wizards jumped up and down."
* this is vulnerable: String string = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?"
* this is vulnerable: String string = "The rain in Spain stays mainly in the plain."
TestCase is: String[] stringArray = new String[6];
String string = "Hello, World!";
String string = "This is a test.";
String string = "The quick brown fox jumps over the lazy dog.";
String string = "The five boxing wizards jumped up and down.";
String string = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?";
String string = "The rain in Spain stays mainly in the plain.";

statement is: org.evosuite.testcase.statements.ArrayStatement@c0c58a43 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: writeShort([BII)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.writeShort(arg0, 0, (byte)101)
test data is: byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, (byte)101);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[3];
        MethodWriter.writeShort(byteArray, 0, ((short) (101)));// Changed from byte to short to be more descriptive }}

    }
}
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: MethodWriter.writeShort(byteArray, 0, ((short) (101)))// Changed from byte to short to be more descriptive }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.writeShort(byteArray, 0, ((short) (101)))// Changed from byte to short to be more descriptive }}
 target is: MethodWriter method is: writeShort(byte[],int,short)
Matched Method is: writeShort([BII)V
TestCase is: byte[] byteArray = new byte[3];
int _int = 0;
int _int = 101;
MethodWriter.writeShort(byteArray, _int, _int);

* test suite isTestSuite: 207
Test 0: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 1: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[7];
stringArray[0] = "\"j?4w<xP'.2V";
stringArray[1] = "\"j?4w<xP'.2V";
stringArray[2] = "";
stringArray[3] = "<init>";
stringArray[4] = "\"j?4w<xP'.2V";
stringArray[5] = "\"j?4w<xP'.2V";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1042), "", "<init>", "poePy\")", stringArray, false, false);
methodWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, true, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 3: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[3];
stringArray[0] = "6II";
stringArray[1] = "]C?kAP~XEcQ2G(z";
stringArray[2] = "]C?kAP~XEcQ2G(z";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", stringArray, false, false);
methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false);
methodWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);
Test 5: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(2880, "", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 27
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 6: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null);
Test 7: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "kmzZTWL4#Hi_x";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 1, stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 1, stringArray, 2, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
methodWriter.visitFrame(2, 1, stringArray, (-1814), stringArray);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(1, 2, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "O";
stringArray[1] = "O";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "O", "O", "O", stringArray, false, false);
methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray);
Test 12: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray);
Test 13: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "*wg.1)G:P";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(0, 2, stringArray, 0, stringArray);
Test 14: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "%Z2=v5(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame(0, (-56), stringArray, 2, stringArray);
Test 15: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 16: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(2);
Test 17: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(177);
Test 18: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false);
methodWriter.visitInsn(191);
Test 19: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIntInsn((-1956), (-1991));
Test 20: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn((-1991), (-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 21: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW");
methodWriter.visitIntInsn(455, 186);
Test 22: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
methodWriter.visitIntInsn(17, 701);
Test 23: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(22, 1);
Test 24: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(2, 55);
Test 25: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.visitVarInsn((-1856), (-41));
Test 26: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(24, 24);
Test 27: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(55, 4096);
Test 28: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitVarInsn(57, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitTypeInsn(1, "7*wg.)G:P");
Test 30: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW");
Test 31: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww");
Test 32: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "{O6$V:vnsn Y";
stringArray[1] = "{O6$V:vnsn Y";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", stringArray, false, false);
methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y");
Test 33: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
Test 34: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P");
Test 35: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitTableSwitchInsn(251, (-27), label, labelArray);
methodWriter.visitJumpInsn((-27), label);
Test 36: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
Test 37: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(1, label);
Test 38: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
label.status = 57;
methodWriter.visitLabel(label);
Test 39: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 40: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray);
methodWriter.visitLabel(label);
Test 41: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 42: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.visitLdcInsn("IlI(HU");
Test 43: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitMaxs(251, 1048575);
Test 44: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true);
methodWriter.visitLdcInsn("w.1)G:P");
Test 45: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable");
methodWriter.visitLdcInsn("LocalVariableTypeTable");
Test 46: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
classWriter.index = 2060;
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitLdcInsn(1);
Test 47: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitIincInsn(2, 1980);
Test 48: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitIincInsn(2, 0);
Test 49: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIincInsn((-1991), (-2049));
Test 50: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitIincInsn(2000, 848);
Test 51: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
Test 52: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(1, 1, label, labelArray);
Test 53: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);
Test 54: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);
Test 55: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "%Z2=v(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true);
methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);
Test 56: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 57: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, (Label) null, label, "TdW");
methodWriter.visitTryCatchBlock((Label) null, label, (Label) null, "O~0\")1");
Test 58: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Frame frame = new Frame();
Label label = frame.owner;
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, (Label) null, (Label) null, 2809);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 59: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", label, label, (-1991));
methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", label, label, 2589);
Test 60: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1652, "TdW", "TdW", "TdW", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", label, label, 1652);
Test 61: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(947, label);
methodWriter.visitLineNumber(188, label);
Test 62: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
methodWriter.visitMaxs(2, 1890);
Test 63: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 64: 
ClassWriter classWriter = new ClassWriter((-1988));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 65: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMaxs((-720), 256);
Test 66: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "Ti");
methodWriter.visitMaxs(191, 546);
Test 67: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 68: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1367, 1244);
Test 69: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Object[] objectArray = new Object[3];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 1, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 70: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 201;
methodWriter.getSize();
Test 71: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitTypeInsn(251, "TdW");
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", label, label, 251);
methodWriter.getSize();
Test 72: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitInsn(2868);
methodWriter.visitFrame(2868, 2291, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 73: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "", "", "", stringArray, false, false);
methodWriter.visitTypeInsn(1, "");
classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray);
methodWriter.visitFrame(1124075009, 1124075009, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 74: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 75: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 76: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
methodWriter.getSize();
Test 77: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 78: 
ClassWriter classWriter = new ClassWriter(2891);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "$Br8cc51L'~^Ig,i98*", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 2891;
ByteVector byteVector = new ByteVector(2891);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 79: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(65, "7*wg.)G:P", "v=QZb", "7*wg.)G:P");
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 80: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[7];
stringArray[0] = "m- qhy";
stringArray[1] = "IlI(HU";
stringArray[2] = "m- qhy";
stringArray[3] = "7*wg.)G:P";
stringArray[4] = "7*wg.)G:P";
stringArray[5] = "m- qhy";
stringArray[6] = "7*wg.)G:P";
classWriter.visit(1144, 1144, "7*wg.)G:P", "7*wg.)G:P", "m- qhy", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, (-759), "m- qhy", "IlI(HU", "IlI(HU", stringArray, false, false);
ByteVector byteVector = new ByteVector(1144);
methodWriter.put(byteVector);
Test 81: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 82: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 83: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
ByteVector byteVector = new ByteVector(1116);
methodWriter.put(byteVector);
Test 84: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1810), "", "", "", stringArray, false, false);
methodWriter.visitAnnotation("DOY!R", false);
ByteVector byteVector = new ByteVector(713);
methodWriter.put(byteVector);
Test 85: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(1985);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 86: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, (-395));
methodWriter.visitFieldInsn((-1991), "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>");
ByteVector byteVector = new ByteVector(164);
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitLineNumber(281, label);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 88: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitFrame((-3868), (-3868), stringArray, 1426, stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Oi*!v'\uF142DQIA");
ByteVector byteVector = new ByteVector(1);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 90: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[3];
stringArray[0] = "gLt*5f";
stringArray[1] = "gLt*5f";
stringArray[2] = "gLt*5f";
classWriter.visit((-1991), 68, "gLt*5f", "gLt*5f", "gLt*5f", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false);
methodWriter.visitMethodInsn(9, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "gLt*5f", "mi@w@<X7vjYrnJ.9=");
ByteVector byteVector = new ByteVector(2);
methodWriter.visitFrame(99, 8, stringArray, (-458), stringArray);
methodWriter.put(byteVector);
Test 92: 
int[] intArray = new int[2];
intArray[1] = 171;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);
Test 93: 
int[] intArray = new int[6];
intArray[4] = 253;
MethodWriter.getNewOffset(intArray, intArray, (byte)57, 253);
Test 94: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (-1780));
Test 95: 
Label label = new Label();
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 96: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 97: 
int[] intArray = new int[0];
MethodWriter.getNewOffset(intArray, intArray, 2941, 2941);
Test 98: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);
Test 99: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte)10;
MethodWriter.readInt(byteArray, 1);
Test 100: 
byte[] byteArray = new byte[3];
byteArray[1] = (byte) (-69);
MethodWriter.readShort(byteArray, 1);
Test 101: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte)10;
MethodWriter.readShort(byteArray, 1);
Test 102: 
byte[] byteArray = new byte[9];
byteArray[2] = (byte)70;
MethodWriter.readUnsignedShort(byteArray, 2);
Test 103: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.");
Test 104: 
ClassWriter classWriter = new ClassWriter((-1491));
String[] stringArray = new String[6];
stringArray[0] = "GK9AJRwa{~+id{=";
stringArray[1] = ".klf&h,!$r&";
stringArray[2] = "*wg.1)G:P";
stringArray[3] = "*wg.1)G:P";
stringArray[4] = "L4?w^&z@d[`";
stringArray[5] = "*wgj):dG}P";
MethodWriter methodWriter = new MethodWriter(classWriter, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(57, "StackMap", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 57
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 105: 
byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, (byte)101);
Test 106: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2868, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();
int _int = 2868;
ClassWriter classWriter = new ClassWriter(_int);
String[] stringArray = new String[0];
int _int = 2868;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitCode();

Test 107: 
String[] stringArray = new String[7];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "<init>", "poePy\")", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 108: 
String[] stringArray = new String[3];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", "java.lang.String", (String) stringArray, (String[]) false, false, false);
String string = "com.example.MyAnnotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 109: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
int _int = 65;
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 110: 
String[] stringArray = new String[2];
String string = "my_class";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "my_class", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String[]) false, false, false);
int _int = 2880;
String string = "my_annotation";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 111: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String) true, (String[]) true, true, true);
int _int = 1;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 112: 
String[] stringArray = new String[2];
String string = "%Z2=v5(+6aF|1w";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "%Z2=v5(+6aF|1w", "main", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 113: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String[]) false, false, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 2;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 114: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 17;
String string = "*wg.1)G:P";
String string = "RuntimeInvisibleAnnotations";
String string = "";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);

Test 115: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 1;
int _int = 2;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 116: 
String[] stringArray = new String[2];
String string = "OPQ";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "XYZ", (int) "OPQ", "RST", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 3;
int _int = 2868;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 117: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/String;", "Ljava/lang/String;", "Ljava/lang/String;", (String) stringArray, (String[]) true, false, false);
int _int = 4;
String string = "MyClass";
String string = "myMethod";
String string = "Ljava/lang/String;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

Test 118: 
String[] stringArray = new String[2];
String string = "Hello, World!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Hello, World!", "Goodbye, World!", "Hello, World!", (String) stringArray, (String[]) true, false, false);
int _int = 0;
int _int = 2;
int _int = 0;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 119: 
String[] stringArray = new String[2];
String string = "abcdef";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "abcdef", "ghijkl", "abcdef", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 120: 
String string = "com/example/MyClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "com/example/MyClass", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String) true, (String[]) true, true, true);
int _int = 42;
((MethodWriter) string).visitInsn(_int);

Test 121: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 2;
((MethodWriter) string).visitInsn(_int);

Test 122: 
String[] stringArray = new String[2];
String string = "*wg.:1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 22, (int) "*wg.:1)G:P", "*wg.:1)G:P", "TdW", (String) stringArray, (String[]) true, false, false);
int _int = 191;
((MethodWriter) string).visitInsn(_int);

Test 123: 
String[] stringArray = new String[0];
String string = "Ljava/lang/Integer;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/Integer;", "Ljava/lang/Double;", "Ljava/lang/String;", (String) stringArray, (String[]) true, false, false);
int _int = 20234;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 124: 
String[] stringArray = new String[0];
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
int _int = 42;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 125: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 844;
String string = "*wg.1)G:P";
String string = "firstName";
String string = "firstName";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 455;
int _int = 186;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 126: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Hello", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 17;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 127: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 2;
int _int = 55;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 128: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 4, (int) "main", "*wg.:1)G:P", "void", (String) stringArray, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 129: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 24;
int _int = 24;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 130: 
String[] stringArray = new String[2];
String string = "compress";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "compress", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 55;
int _int = 4096;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 131: 
String[] stringArray = new String[0];
String string = "java/lang/Throwable";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) false, true, true);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
int _int = 57;
int _int = 42;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 132: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 1;
String string = "java.lang.String";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 133: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 180;
String string = "java.lang.Math";
String string = "PI";
String string = "double";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 134: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);

Test 135: 
String[] stringArray = new String[2];

Test 136: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 1;
String string = "7*wg.)G:P";
String string = "StackMap";
String string = "7*wg.)G:P";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 137: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "main", "([Ljava/lang/String;)V", "([Ljava/lang/String;)V", (String) stringArray, (String[]) true, false, false);
int _int = 251;
String string = "Java";
String string = "main";
String string = "([Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 138: 
String[] stringArray = new String[2];
String string = "hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "hello", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label[] labelArray = new Label[1];
int _int = 10;
int _int = 20;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
int _int = 25;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 139: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 140: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 141: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 142: 
String[] stringArray = new String[0];
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
int _int = 4702;
int _int = 4702;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
Label label = null;
((MethodWriter) string).visitLabel(label);

Test 143: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "", "", "~rMY+<%j", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 144: 
String[] stringArray = new String[0];
String string = "A method with a very long name";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2868, (int) "A method with a very long name", "=", "=", (String) stringArray, (String[]) false, false, false);
String string = "A method with a very long name";
((MethodWriter) string).visitLdcInsn(string);

Test 145: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 251;
int _int = 1048575;
((MethodWriter) string).visitMaxs(_int, _int);

Test 146: 
String string = "w.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "w.1)G:P", "w.1)G:P", "w.1)G:P", (String) false, (String[]) true, false, true);
String string = "Hello World";
((MethodWriter) string).visitLdcInsn(string);

Test 147: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 251;
String string = "MyClass";
String string = "*wg.1)G:P";
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitLdcInsn(string);

Test 148: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 149: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 2;
int _int = 1980;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 150: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 2;
int _int = 0;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 151: 
String[] stringArray = new String[0];
String string = "*w.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 5;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 152: 
String[] stringArray = new String[2];
String string = "incrementAge";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2000, (int) "incrementAge", "incrementAge", "org.objectweb.asm.jip.Label", (String) stringArray, (String[]) true, false, false);
int _int = 2000;
int _int = 848;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 153: 
String[] stringArray = new String[0];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) false, true, true);
Label label = new Label();
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);

Test 154: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
int _int = 1;
int _int = 1;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

Test 155: 
String string = "@f+s4Sa";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "@f+s4Sa", (String) false, (String) false, (String[]) "fyf^SiqZgSeh8!", false, false);
String string = "fyf^SiqZgSeh8!";
int _int = 1916;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 156: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2000, (int) "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", (String) stringArray, (String[]) true, false, false);
String string = "h7\"2D@O1MtzFm K-";
int _int = 16777219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 157: 
String[] stringArray = new String[2];
String string = "NdF=b#& A28u@T";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", (String) stringArray, (String[]) false, true, true);
String string = "I[t1f2ow<3TW=*k3F";
int _int = 2167;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 158: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "&6~:Qd^y\u0005iMt=(";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

Test 159: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "A unique identifier for an exception handler";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);
String string = "The name of the method that is handling the exception";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);

Test 160: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
Frame frame = new Frame();
String string = "myMethod";
String string = "org.objectweb.asm.jip.MethodWriter";
int _int = 42069;
Label label = null;
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) _int, label, label, _int);

Test 161: 
String[] stringArray = new String[0];
String string = "Hello, World!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 17, (int) "Hello, World!", "Hello, World!", "Hello, World!", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
String string = "This is a test variable";
String string = "A descriptive name for the variable";
String string = "Hello, World!";
int _int = 42;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 162: 
String string = "void";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1024, (int) "main", "void", "([Ljava/lang/String;)V", (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "userName";
String string = "java.lang.String";
int _int = 1024;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 163: 
String[] stringArray = new String[2];
String string = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "FO|,4#ci)", "", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 947;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 188;
((MethodWriter) string).visitLineNumber(_int, label);

Test 164: 
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "add", "subtract", "multiply", (String) true, (String[]) false, true, false);
int _int = 2;
int _int = 1890;
((MethodWriter) string).visitMaxs(_int, _int);

Test 165: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

Test 166: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

Test 167: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
int _int = 256;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 168: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "java.lang.Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 191;
int _int = 546;
((MethodWriter) string).visitMaxs(_int, _int);

Test 169: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

Test 170: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1367;
int _int = 1244;
((MethodWriter) string).visitMaxs(_int, _int);

Test 171: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
Object[] objectArray = new Object[3];
int _int = 1;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 172: 
String string = "=";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "IlI(HU", "=", "=", (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 173: 
String[] stringArray = new String[2];
String string = "java.lang.Thread";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java.lang.Thread", "run", "()V", (String) stringArray, (String[]) true, false, false);
String string = "java.lang.Thread";
String string = null;
((MethodWriter) string).visitTypeInsn((int) string, string);
Label label = new Label();
String string = "run";
String string = "()V";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);
((MethodWriter) string).getSize();

Test 174: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 3054, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
int _int = 3054;
((MethodWriter) string).visitInsn(_int);
int _int = 3054;
int _int = 2291;
int _int = 3054;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

Test 175: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "methodName", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
String string = "int";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
int _int = 2;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

Test 176: 
String[] stringArray = new String[0];
String string = "fyf^SiqZgSeh8!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "fyf^SiqZgSeh8!", "@f+s4Sa", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 177: 
String string = "fyf^SiqZgSeh8!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "@f+s4Sa", (int) (Integer) null, "fyf^SiqZgSeh8!", (String) false, (String) false, (String[]) "zQvTGm%>U069n 4", false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 178: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 179: 
String[] stringArray = new String[0];
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "myMethod", "()V", "=#$@!", (String) stringArray, (String[]) false, false, false);
int _int = 500;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 180: 
String[] stringArray = new String[0];
String string = "java/lang/Throwable";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
int _int = 65;
String string = "java/io/FileInputStream";
String string = "read";
String string = "([BIII)I";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 181: 
String[] stringArray = new String[7];
String string = "public static void main(String[] args)";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "public static void main(String[] args)", "public static void main(String[] args)", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 182: 
String string = "@f+s4Sa";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "@f+s4Sa", (String) false, (String) false, (String[]) "fyf^SiqZgSeh8!", false, false);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 183: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
((MethodWriter) string).visitAnnotationDefault();
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 184: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 1116;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 185: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "DOY!R";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 713;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 186: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
String string = "<init>";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 1985;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 187: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "%bnx3G3bg(";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "<init>";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = 164;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 188: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 281;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 189: 
String[] stringArray = new String[2];
ByteVector byteVector = new ByteVector(1);

Test 190: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
String string = "Oi*!v'\uF142DQIA";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);
int _int = 1;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 191: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 192: 
String[] stringArray = new String[3];
String string = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 9, (int) ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", (String) stringArray, (String[]) false, false, false);
int _int = 9;
String string = "com/example/ClassName";
String string = "methodName";
String string = "(Ljava/lang/Object;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
int _int = 99;
int _int = 8;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);
((MethodWriter) string).put(byteVector);

Test 193: 
int[] intArray = new int[2];
intArray[1] = 314;
intArray[1] = 171;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);

Test 194: 
int[] intArray = new int[6];
intArray[4] = 100;
MethodWriter.getNewOffset(intArray, intArray, 57, 100);

Test 195: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (int) (Integer) null);

Test 196: 
Label label = new Label();
MethodWriter.getNewOffset((int[]) label, (int[]) null, (Label) null);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

Test 197: 
String[] stringArray = new String[2];
String string = "*wg.:1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label[] labelArray = new Label[1];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 198: 
MethodWriter.getNewOffset((int[]) 2941, (int[]) 2941, (int) (Integer) null, (int) (Integer) null);

Test 199: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);

Test 200: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) 234;
MethodWriter.readInt(byteArray, 1);

Test 201: 
MethodWriter.readShort((byte[]) 1, (int) (Integer) null);

Test 202: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) 256;
MethodWriter.readShort(byteArray, 1);

Test 203: 
byte[] byteArray = new byte[9];
byteArray[2] = (byte) 1;
byteArray[2] = (byte) 255;
byteArray[2] = (byte) 100;
MethodWriter.readUnsignedShort(byteArray, 2);

Test 204: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);

Test 205: 
String[] stringArray = new String[6];

Test 206: 
byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, 101);


* Generated after the refinement and before minimization 207 tests with total length 1351
* test suite isTestSuite: 207
Test 0: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 1: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[7];
stringArray[0] = "\"j?4w<xP'.2V";
stringArray[1] = "\"j?4w<xP'.2V";
stringArray[2] = "";
stringArray[3] = "<init>";
stringArray[4] = "\"j?4w<xP'.2V";
stringArray[5] = "\"j?4w<xP'.2V";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1042), "", "<init>", "poePy\")", stringArray, false, false);
methodWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, true, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 3: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[3];
stringArray[0] = "6II";
stringArray[1] = "]C?kAP~XEcQ2G(z";
stringArray[2] = "]C?kAP~XEcQ2G(z";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", stringArray, false, false);
methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false);
methodWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);
Test 5: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(2880, "", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 27
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 6: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null);
Test 7: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "kmzZTWL4#Hi_x";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 1, stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 1, stringArray, 2, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
methodWriter.visitFrame(2, 1, stringArray, (-1814), stringArray);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(1, 2, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "O";
stringArray[1] = "O";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "O", "O", "O", stringArray, false, false);
methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray);
Test 12: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray);
Test 13: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "*wg.1)G:P";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(0, 2, stringArray, 0, stringArray);
Test 14: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "%Z2=v5(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame(0, (-56), stringArray, 2, stringArray);
Test 15: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 16: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(2);
Test 17: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(177);
Test 18: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false);
methodWriter.visitInsn(191);
Test 19: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIntInsn((-1956), (-1991));
Test 20: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn((-1991), (-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 21: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW");
methodWriter.visitIntInsn(455, 186);
Test 22: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
methodWriter.visitIntInsn(17, 701);
Test 23: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(22, 1);
Test 24: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(2, 55);
Test 25: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.visitVarInsn((-1856), (-41));
Test 26: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(24, 24);
Test 27: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(55, 4096);
Test 28: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitVarInsn(57, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitTypeInsn(1, "7*wg.)G:P");
Test 30: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW");
Test 31: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww");
Test 32: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "{O6$V:vnsn Y";
stringArray[1] = "{O6$V:vnsn Y";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", stringArray, false, false);
methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y");
Test 33: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
Test 34: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P");
Test 35: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitTableSwitchInsn(251, (-27), label, labelArray);
methodWriter.visitJumpInsn((-27), label);
Test 36: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
Test 37: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(1, label);
Test 38: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
label.status = 57;
methodWriter.visitLabel(label);
Test 39: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 40: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray);
methodWriter.visitLabel(label);
Test 41: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 42: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.visitLdcInsn("IlI(HU");
Test 43: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitMaxs(251, 1048575);
Test 44: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true);
methodWriter.visitLdcInsn("w.1)G:P");
Test 45: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable");
methodWriter.visitLdcInsn("LocalVariableTypeTable");
Test 46: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
classWriter.index = 2060;
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitLdcInsn(1);
Test 47: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitIincInsn(2, 1980);
Test 48: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitIincInsn(2, 0);
Test 49: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIincInsn((-1991), (-2049));
Test 50: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitIincInsn(2000, 848);
Test 51: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
Test 52: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(1, 1, label, labelArray);
Test 53: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);
Test 54: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);
Test 55: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "%Z2=v(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true);
methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);
Test 56: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 57: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, (Label) null, label, "TdW");
methodWriter.visitTryCatchBlock((Label) null, label, (Label) null, "O~0\")1");
Test 58: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Frame frame = new Frame();
Label label = frame.owner;
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, (Label) null, (Label) null, 2809);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 59: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", label, label, (-1991));
methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", label, label, 2589);
Test 60: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1652, "TdW", "TdW", "TdW", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", label, label, 1652);
Test 61: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(947, label);
methodWriter.visitLineNumber(188, label);
Test 62: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
methodWriter.visitMaxs(2, 1890);
Test 63: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 64: 
ClassWriter classWriter = new ClassWriter((-1988));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 65: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMaxs((-720), 256);
Test 66: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "Ti");
methodWriter.visitMaxs(191, 546);
Test 67: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 68: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1367, 1244);
Test 69: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Object[] objectArray = new Object[3];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 1, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 70: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 201;
methodWriter.getSize();
Test 71: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitTypeInsn(251, "TdW");
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", label, label, 251);
methodWriter.getSize();
Test 72: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitInsn(2868);
methodWriter.visitFrame(2868, 2291, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 73: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "", "", "", stringArray, false, false);
methodWriter.visitTypeInsn(1, "");
classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray);
methodWriter.visitFrame(1124075009, 1124075009, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 74: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 75: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 76: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
methodWriter.getSize();
Test 77: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 78: 
ClassWriter classWriter = new ClassWriter(2891);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "$Br8cc51L'~^Ig,i98*", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 2891;
ByteVector byteVector = new ByteVector(2891);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 79: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(65, "7*wg.)G:P", "v=QZb", "7*wg.)G:P");
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 80: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[7];
stringArray[0] = "m- qhy";
stringArray[1] = "IlI(HU";
stringArray[2] = "m- qhy";
stringArray[3] = "7*wg.)G:P";
stringArray[4] = "7*wg.)G:P";
stringArray[5] = "m- qhy";
stringArray[6] = "7*wg.)G:P";
classWriter.visit(1144, 1144, "7*wg.)G:P", "7*wg.)G:P", "m- qhy", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, (-759), "m- qhy", "IlI(HU", "IlI(HU", stringArray, false, false);
ByteVector byteVector = new ByteVector(1144);
methodWriter.put(byteVector);
Test 81: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 82: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 83: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
ByteVector byteVector = new ByteVector(1116);
methodWriter.put(byteVector);
Test 84: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1810), "", "", "", stringArray, false, false);
methodWriter.visitAnnotation("DOY!R", false);
ByteVector byteVector = new ByteVector(713);
methodWriter.put(byteVector);
Test 85: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(1985);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 86: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, (-395));
methodWriter.visitFieldInsn((-1991), "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>");
ByteVector byteVector = new ByteVector(164);
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitLineNumber(281, label);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 88: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitFrame((-3868), (-3868), stringArray, 1426, stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Oi*!v'\uF142DQIA");
ByteVector byteVector = new ByteVector(1);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 90: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[3];
stringArray[0] = "gLt*5f";
stringArray[1] = "gLt*5f";
stringArray[2] = "gLt*5f";
classWriter.visit((-1991), 68, "gLt*5f", "gLt*5f", "gLt*5f", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false);
methodWriter.visitMethodInsn(9, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "gLt*5f", "mi@w@<X7vjYrnJ.9=");
ByteVector byteVector = new ByteVector(2);
methodWriter.visitFrame(99, 8, stringArray, (-458), stringArray);
methodWriter.put(byteVector);
Test 92: 
int[] intArray = new int[2];
intArray[1] = 171;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);
Test 93: 
int[] intArray = new int[6];
intArray[4] = 253;
MethodWriter.getNewOffset(intArray, intArray, (byte)57, 253);
Test 94: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (-1780));
Test 95: 
Label label = new Label();
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 96: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 97: 
int[] intArray = new int[0];
MethodWriter.getNewOffset(intArray, intArray, 2941, 2941);
Test 98: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);
Test 99: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte)10;
MethodWriter.readInt(byteArray, 1);
Test 100: 
byte[] byteArray = new byte[3];
byteArray[1] = (byte) (-69);
MethodWriter.readShort(byteArray, 1);
Test 101: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte)10;
MethodWriter.readShort(byteArray, 1);
Test 102: 
byte[] byteArray = new byte[9];
byteArray[2] = (byte)70;
MethodWriter.readUnsignedShort(byteArray, 2);
Test 103: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.");
Test 104: 
ClassWriter classWriter = new ClassWriter((-1491));
String[] stringArray = new String[6];
stringArray[0] = "GK9AJRwa{~+id{=";
stringArray[1] = ".klf&h,!$r&";
stringArray[2] = "*wg.1)G:P";
stringArray[3] = "*wg.1)G:P";
stringArray[4] = "L4?w^&z@d[`";
stringArray[5] = "*wgj):dG}P";
MethodWriter methodWriter = new MethodWriter(classWriter, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(57, "StackMap", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 57
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 105: 
byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, (byte)101);
Test 106: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2868, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();
int _int = 2868;
ClassWriter classWriter = new ClassWriter(_int);
String[] stringArray = new String[0];
int _int = 2868;
String string = "<init>";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitCode();

Test 107: 
String[] stringArray = new String[7];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "<init>", "poePy\")", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 108: 
String[] stringArray = new String[3];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", "java.lang.String", (String) stringArray, (String[]) false, false, false);
String string = "com.example.MyAnnotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 109: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
int _int = 65;
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 110: 
String[] stringArray = new String[2];
String string = "my_class";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "my_class", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String[]) false, false, false);
int _int = 2880;
String string = "my_annotation";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 111: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String) true, (String[]) true, true, true);
int _int = 1;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 112: 
String[] stringArray = new String[2];
String string = "%Z2=v5(+6aF|1w";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "%Z2=v5(+6aF|1w", "main", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 113: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String[]) false, false, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 2;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 114: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 17;
String string = "*wg.1)G:P";
String string = "RuntimeInvisibleAnnotations";
String string = "";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);

Test 115: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 1;
int _int = 2;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 116: 
String[] stringArray = new String[2];
String string = "OPQ";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "XYZ", (int) "OPQ", "RST", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 3;
int _int = 2868;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 117: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/String;", "Ljava/lang/String;", "Ljava/lang/String;", (String) stringArray, (String[]) true, false, false);
int _int = 4;
String string = "MyClass";
String string = "myMethod";
String string = "Ljava/lang/String;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

Test 118: 
String[] stringArray = new String[2];
String string = "Hello, World!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Hello, World!", "Goodbye, World!", "Hello, World!", (String) stringArray, (String[]) true, false, false);
int _int = 0;
int _int = 2;
int _int = 0;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 119: 
String[] stringArray = new String[2];
String string = "abcdef";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "abcdef", "ghijkl", "abcdef", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 120: 
String string = "com/example/MyClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "com/example/MyClass", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String) true, (String[]) true, true, true);
int _int = 42;
((MethodWriter) string).visitInsn(_int);

Test 121: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 2;
((MethodWriter) string).visitInsn(_int);

Test 122: 
String[] stringArray = new String[2];
String string = "*wg.:1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 22, (int) "*wg.:1)G:P", "*wg.:1)G:P", "TdW", (String) stringArray, (String[]) true, false, false);
int _int = 191;
((MethodWriter) string).visitInsn(_int);

Test 123: 
String[] stringArray = new String[0];
String string = "Ljava/lang/Integer;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/Integer;", "Ljava/lang/Double;", "Ljava/lang/String;", (String) stringArray, (String[]) true, false, false);
int _int = 20234;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 124: 
String[] stringArray = new String[0];
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
int _int = 42;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 125: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 844;
String string = "*wg.1)G:P";
String string = "firstName";
String string = "firstName";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 455;
int _int = 186;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 126: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Hello", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 17;
int _int = 42;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 127: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 2;
int _int = 55;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 128: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 4, (int) "main", "*wg.:1)G:P", "void", (String) stringArray, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 129: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 24;
int _int = 24;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 130: 
String[] stringArray = new String[2];
String string = "compress";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "compress", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 55;
int _int = 4096;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 131: 
String[] stringArray = new String[0];
String string = "java/lang/Throwable";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) false, true, true);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
int _int = 2;
String string = "java/lang/Throwable";
String string = "*wg.1)G:P";
String string = "*wg.1)G:P";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
int _int = 57;
int _int = 42;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 132: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 1;
String string = "java.lang.String";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 133: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 180;
String string = "java.lang.Math";
String string = "PI";
String string = "double";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 134: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);

Test 135: 
String[] stringArray = new String[2];

Test 136: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 1;
String string = "7*wg.)G:P";
String string = "StackMap";
String string = "7*wg.)G:P";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 137: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "main", "([Ljava/lang/String;)V", "([Ljava/lang/String;)V", (String) stringArray, (String[]) true, false, false);
int _int = 251;
String string = "Java";
String string = "main";
String string = "([Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 138: 
String[] stringArray = new String[2];
String string = "hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "hello", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label[] labelArray = new Label[1];
int _int = 10;
int _int = 20;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
int _int = 25;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 139: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 140: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 141: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 142: 
String[] stringArray = new String[0];
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
int _int = 4702;
int _int = 4702;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
Label label = null;
((MethodWriter) string).visitLabel(label);

Test 143: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "", "", "~rMY+<%j", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 144: 
String[] stringArray = new String[0];
String string = "A method with a very long name";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2868, (int) "A method with a very long name", "=", "=", (String) stringArray, (String[]) false, false, false);
String string = "A method with a very long name";
((MethodWriter) string).visitLdcInsn(string);

Test 145: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 251;
int _int = 1048575;
((MethodWriter) string).visitMaxs(_int, _int);

Test 146: 
String string = "w.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "w.1)G:P", "w.1)G:P", "w.1)G:P", (String) false, (String[]) true, false, true);
String string = "Hello World";
((MethodWriter) string).visitLdcInsn(string);

Test 147: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 251;
String string = "MyClass";
String string = "*wg.1)G:P";
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = "LocalVariableTypeTable";
((MethodWriter) string).visitLdcInsn(string);

Test 148: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 149: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 2;
int _int = 1980;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 150: 
String string = "7*wg.)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", (String) true, (String[]) true, true, true);
int _int = 2;
int _int = 0;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 151: 
String[] stringArray = new String[0];
String string = "*w.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", (String) stringArray, (String[]) true, false, false);
int _int = 5;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 152: 
String[] stringArray = new String[2];
String string = "incrementAge";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2000, (int) "incrementAge", "incrementAge", "org.objectweb.asm.jip.Label", (String) stringArray, (String[]) true, false, false);
int _int = 2000;
int _int = 848;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 153: 
String[] stringArray = new String[0];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) false, true, true);
Label label = new Label();
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);

Test 154: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
int _int = 1;
int _int = 1;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

Test 155: 
String string = "@f+s4Sa";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "@f+s4Sa", (String) false, (String) false, (String[]) "fyf^SiqZgSeh8!", false, false);
String string = "fyf^SiqZgSeh8!";
int _int = 1916;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 156: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2000, (int) "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", (String) stringArray, (String[]) true, false, false);
String string = "h7\"2D@O1MtzFm K-";
int _int = 16777219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 157: 
String[] stringArray = new String[2];
String string = "NdF=b#& A28u@T";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", (String) stringArray, (String[]) false, true, true);
String string = "I[t1f2ow<3TW=*k3F";
int _int = 2167;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 158: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "&6~:Qd^y\u0005iMt=(";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

Test 159: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "A unique identifier for an exception handler";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);
String string = "The name of the method that is handling the exception";
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, (Label) string, label, string);

Test 160: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
Frame frame = new Frame();
String string = "myMethod";
String string = "org.objectweb.asm.jip.MethodWriter";
int _int = 42069;
Label label = null;
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) _int, label, label, _int);

Test 161: 
String[] stringArray = new String[0];
String string = "Hello, World!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 17, (int) "Hello, World!", "Hello, World!", "Hello, World!", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
String string = "This is a test variable";
String string = "A descriptive name for the variable";
String string = "Hello, World!";
int _int = 42;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 162: 
String string = "void";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1024, (int) "main", "void", "([Ljava/lang/String;)V", (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "userName";
String string = "java.lang.String";
int _int = 1024;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 163: 
String[] stringArray = new String[2];
String string = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "FO|,4#ci)", "", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 947;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 188;
((MethodWriter) string).visitLineNumber(_int, label);

Test 164: 
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "add", "subtract", "multiply", (String) true, (String[]) false, true, false);
int _int = 2;
int _int = 1890;
((MethodWriter) string).visitMaxs(_int, _int);

Test 165: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
int _int = 251;
int _int = 65;
((MethodWriter) string).visitMaxs(_int, _int);

Test 166: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, true, true);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

Test 167: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
int _int = 256;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 168: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "java.lang.Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 191;
int _int = 546;
((MethodWriter) string).visitMaxs(_int, _int);

Test 169: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label label = new Label();
String string = "RuntimeVisibleAnnotations";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 251;
int _int = 84;
((MethodWriter) string).visitMaxs(_int, _int);

Test 170: 
String[] stringArray = new String[2];
String string = "*Ig.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1367;
int _int = 1244;
((MethodWriter) string).visitMaxs(_int, _int);

Test 171: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
Object[] objectArray = new Object[3];
int _int = 1;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 172: 
String string = "=";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "IlI(HU", "=", "=", (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 173: 
String[] stringArray = new String[2];
String string = "java.lang.Thread";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java.lang.Thread", "run", "()V", (String) stringArray, (String[]) true, false, false);
String string = "java.lang.Thread";
String string = null;
((MethodWriter) string).visitTypeInsn((int) string, string);
Label label = new Label();
String string = "run";
String string = "()V";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);
((MethodWriter) string).getSize();

Test 174: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 3054, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
int _int = 3054;
((MethodWriter) string).visitInsn(_int);
int _int = 3054;
int _int = 2291;
int _int = 3054;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

Test 175: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "methodName", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
String string = "int";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
int _int = 2;
int _int = 2868;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

Test 176: 
String[] stringArray = new String[0];
String string = "fyf^SiqZgSeh8!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "fyf^SiqZgSeh8!", "@f+s4Sa", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 177: 
String string = "fyf^SiqZgSeh8!";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "@f+s4Sa", (int) (Integer) null, "fyf^SiqZgSeh8!", (String) false, (String) false, (String[]) "zQvTGm%>U069n 4", false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 178: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 179: 
String[] stringArray = new String[0];
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "myMethod", "()V", "=#$@!", (String) stringArray, (String[]) false, false, false);
int _int = 500;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 180: 
String[] stringArray = new String[0];
String string = "java/lang/Throwable";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", (String) stringArray, (String[]) true, true, true);
int _int = 65;
String string = "java/io/FileInputStream";
String string = "read";
String string = "([BIII)I";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 181: 
String[] stringArray = new String[7];
String string = "public static void main(String[] args)";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "public static void main(String[] args)", "public static void main(String[] args)", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 182: 
String string = "@f+s4Sa";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "@f+s4Sa", (String) false, (String) false, (String[]) "fyf^SiqZgSeh8!", false, false);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 183: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
((MethodWriter) string).visitAnnotationDefault();
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 184: 
String[] stringArray = new String[2];
String string = "RuntimeInvisibleAnnotations";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "x<Rw*Ns,[By";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 1116;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 185: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
String string = "DOY!R";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 713;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 186: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
String string = "<init>";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 1985;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 187: 
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "%bnx3G3bg(";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "*wg.1)G:P";
String string = "Ljava/lang/Synthetic;";
String string = "<init>";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = 164;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 188: 
String[] stringArray = new String[0];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 281;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 189: 
String[] stringArray = new String[2];
ByteVector byteVector = new ByteVector(1);

Test 190: 
String[] stringArray = new String[2];
String string = "*wg.1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String) stringArray, (String[]) true, false, false);
String string = "Oi*!v'\uF142DQIA";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);
int _int = 1;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 191: 
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 1;
String string = "java/lang/String";
String string = "<init>";
String string = ".jar";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 256;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 192: 
String[] stringArray = new String[3];
String string = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 9, (int) ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", (String) stringArray, (String[]) false, false, false);
int _int = 9;
String string = "com/example/ClassName";
String string = "methodName";
String string = "(Ljava/lang/Object;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
int _int = 99;
int _int = 8;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, (int) stringArray, stringArray);
((MethodWriter) string).put(byteVector);

Test 193: 
int[] intArray = new int[2];
intArray[1] = 314;
intArray[1] = 171;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);

Test 194: 
int[] intArray = new int[6];
intArray[4] = 100;
MethodWriter.getNewOffset(intArray, intArray, 57, 100);

Test 195: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (int) (Integer) null);

Test 196: 
Label label = new Label();
MethodWriter.getNewOffset((int[]) label, (int[]) null, (Label) null);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

Test 197: 
String[] stringArray = new String[2];
String string = "*wg.:1)G:P";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
Label[] labelArray = new Label[1];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 198: 
MethodWriter.getNewOffset((int[]) 2941, (int[]) 2941, (int) (Integer) null, (int) (Integer) null);

Test 199: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);

Test 200: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) 234;
MethodWriter.readInt(byteArray, 1);

Test 201: 
MethodWriter.readShort((byte[]) 1, (int) (Integer) null);

Test 202: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) 256;
MethodWriter.readShort(byteArray, 1);

Test 203: 
byte[] byteArray = new byte[9];
byteArray[2] = (byte) 1;
byteArray[2] = (byte) 255;
byteArray[2] = (byte) 100;
MethodWriter.readUnsignedShort(byteArray, 2);

Test 204: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 256, (int) "<init>", "<init>", "<init>", (String) stringArray, (String[]) false, false, false);

Test 205: 
String[] stringArray = new String[6];

Test 206: 
byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, 101);


* Minimizing test suite
* test suite isTestSuite: 109
Test 0: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
Test 1: 
byte[] byteArray = new byte[9];
MethodWriter.readUnsignedShort(byteArray, 2);
Test 2: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 3: 
byte[] byteArray = new byte[3];
MethodWriter.writeShort(byteArray, 0, 101);
Test 4: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 1);
Test 5: 
byte[] byteArray = new byte[9];
MethodWriter.readInt(byteArray, 1);
Test 6: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[7];
stringArray[0] = "\"j?4w<xP'.2V";
stringArray[1] = "\"j?4w<xP'.2V";
stringArray[2] = "";
stringArray[3] = "<init>";
stringArray[4] = "\"j?4w<xP'.2V";
stringArray[5] = "\"j?4w<xP'.2V";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1042), "", "<init>", "poePy\")", stringArray, false, false);
methodWriter.visitEnd();
Test 8: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.next.visitFrame(4, 4, stringArray, 75, stringArray);
Test 9: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, true, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 10: 
ClassWriter classWriter = new ClassWriter((-1491));
String[] stringArray = new String[6];
stringArray[0] = "GK9AJRwa{~+id{=";
stringArray[1] = ".klf&h,!$r&";
stringArray[2] = "*wg.1)G:P";
stringArray[3] = "*wg.1)G:P";
stringArray[4] = "L4?w^&z@d[`";
stringArray[5] = "*wgj):dG}P";
MethodWriter methodWriter = new MethodWriter(classWriter, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(57, "StackMap", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 57
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 11: 
ClassWriter classWriter = new ClassWriter(0);
String[] stringArray = new String[3];
stringArray[0] = "6II";
stringArray[1] = "]C?kAP~XEcQ2G(z";
stringArray[2] = "]C?kAP~XEcQ2G(z";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", stringArray, false, false);
methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false);
methodWriter.getSize();
Test 12: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
methodWriter.getSize();
Test 13: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(2880, "", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 27
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);
Test 15: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 16: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
Object[] objectArray = new Object[3];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 1, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null);
Test 18: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "kmzZTWL4#Hi_x";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 1, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 1, stringArray, 2, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 20: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitFrame(2, 1, stringArray, 1, stringArray);
methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
methodWriter.visitFrame(2, 1, stringArray, (-1814), stringArray);
Test 21: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "*wg.1)G:P";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(0, 2, stringArray, 0, stringArray);
Test 22: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "O";
stringArray[1] = "O";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "O", "O", "O", stringArray, false, false);
methodWriter.visitFrame(3, 2868, stringArray, 2868, stringArray);
Test 23: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = "kmzZTWL4#Hi_x";
stringArray[1] = "%Z2=v5(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", stringArray, false, false);
methodWriter.visitFrame(0, (-56), stringArray, 2, stringArray);
Test 24: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFrame(1, 2, stringArray, 2, stringArray);
Test 25: 
ClassWriter classWriter = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 26: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(2);
Test 27: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", stringArray, true, false);
methodWriter.visitInsn(191);
Test 28: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitInsn(177);
Test 29: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
methodWriter.visitIntInsn(17, 701);
Test 30: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIntInsn((-1956), (-1991));
Test 31: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn((-1991), (-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 32: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW");
methodWriter.visitIntInsn(455, 186);
Test 33: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "TdW", "*wg.:1)G:P", "TdW", stringArray, false, false);
methodWriter.visitVarInsn((-1856), (-41));
Test 34: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(24, 24);
Test 35: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(55, 4096);
Test 36: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitVarInsn(2, 55);
Test 37: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitVarInsn(22, 1);
Test 38: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
methodWriter.visitVarInsn(57, 1);
Test 39: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "", "", "", stringArray, false, false);
methodWriter.visitTypeInsn(1, "");
classWriter.visit(247, 76, "lLtuKXe3Wn^", "", "", stringArray);
methodWriter.visitFrame(1124075009, 1124075009, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 40: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitTypeInsn(1, "7*wg.)G:P");
Test 41: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitTypeInsn(251, "TdW");
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", label, label, 251);
methodWriter.getSize();
Test 42: 
ClassWriter classWriter = new ClassWriter(180);
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW");
Test 43: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww");
Test 44: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.");
Test 45: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "{O6$V:vnsn Y";
stringArray[1] = "{O6$V:vnsn Y";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", stringArray, false, false);
methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y");
Test 46: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(1, "7*wg.)G:P", "StackMap", "7*wg.)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
Test 47: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P");
Test 48: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitTableSwitchInsn(251, (-27), label, labelArray);
methodWriter.visitJumpInsn((-27), label);
Test 49: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(1, label);
Test 50: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(1, label);
Test 51: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
label.status = 57;
methodWriter.visitLabel(label);
Test 52: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 53: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
Label label = new Label();
Label[] labelArray = new Label[5];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
methodWriter.visitTableSwitchInsn(4702, 4702, label, labelArray);
methodWriter.visitLabel(label);
Test 54: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "~rMY+<%j", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 55: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.visitLdcInsn("IlI(HU");
Test 56: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, false, true);
methodWriter.visitLdcInsn("w.1)G:P");
Test 57: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable");
methodWriter.visitLdcInsn("LocalVariableTypeTable");
Test 58: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
classWriter.index = 2060;
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitLdcInsn(1);
Test 59: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitIincInsn(2, 1980);
Test 60: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", stringArray, true, false);
methodWriter.visitIincInsn((-1991), (-2049));
Test 61: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitIincInsn(2, 0);
Test 62: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitIincInsn(2000, 848);
Test 63: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.:1)G:P", "*wg.:1)G:P", "*wg.:1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[5];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 64: 
ClassWriter classWriter = new ClassWriter(2880);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(1, 1, label, labelArray);
Test 65: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);
Test 66: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(classWriter, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);
Test 67: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "%Z2=v(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", stringArray, false, true);
methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);
Test 68: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "&6~:Qd^y\u0005iMt=(");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 69: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, (Label) null, label, "TdW");
methodWriter.visitTryCatchBlock((Label) null, label, (Label) null, "O~0\")1");
Test 70: 
ClassWriter classWriter = new ClassWriter(2809);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "<init>", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, (Label) null, (Label) null, 2809);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 71: 
ClassWriter classWriter = new ClassWriter(1652);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1652, "TdW", "TdW", "TdW", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", label, label, 1652);
Test 72: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", label, label, (-1991));
methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", label, label, 2589);
Test 73: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1820), "", "FO|,4#ci)", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(947, label);
methodWriter.visitLineNumber(188, label);
Test 74: 
ClassWriter classWriter = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
methodWriter.visitMaxs(2, 1890);
Test 75: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 76: 
ClassWriter classWriter = new ClassWriter((-1988));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 77: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitMaxs((-720), 256);
Test 78: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "Ti";
stringArray[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "Ti");
methodWriter.visitMaxs(191, 546);
Test 79: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 80: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitMaxs(251, 1048575);
Test 81: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "WrQdW";
stringArray[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", stringArray, true, false);
Label label = new Label();
int[] intArray = new int[7];
Label[] labelArray = new Label[3];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1367, 1244);
Test 82: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 83: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "IlI(HU", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 201;
methodWriter.getSize();
Test 84: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2868, "<init>", "<init>", "<init>", stringArray, false, false);
methodWriter.visitInsn(2868);
methodWriter.visitFrame(2868, 2291, stringArray, 2868, stringArray);
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", stringArray, false, false);
methodWriter.getSize();
Test 86: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, stringArray, false, false);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter(2891);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "$Br8cc51L'~^Ig,i98*", "=", "=", stringArray, false, false);
methodWriter.classReaderOffset = 2891;
ByteVector byteVector = new ByteVector(2891);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 88: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", stringArray, true, true);
methodWriter.visitMethodInsn(65, "7*wg.)G:P", "v=QZb", "7*wg.)G:P");
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[7];
stringArray[0] = "m- qhy";
stringArray[1] = "IlI(HU";
stringArray[2] = "m- qhy";
stringArray[3] = "7*wg.)G:P";
stringArray[4] = "7*wg.)G:P";
stringArray[5] = "m- qhy";
stringArray[6] = "7*wg.)G:P";
classWriter.visit(1144, 1144, "7*wg.)G:P", "7*wg.)G:P", "m- qhy", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, (-759), "m- qhy", "IlI(HU", "IlI(HU", stringArray, false, false);
ByteVector byteVector = new ByteVector(1144);
methodWriter.put(byteVector);
Test 90: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
ByteVector byteVector = new ByteVector(1116);
methodWriter.put(byteVector);
Test 92: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1810), "", "", "", stringArray, false, false);
methodWriter.visitAnnotation("DOY!R", false);
ByteVector byteVector = new ByteVector(713);
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Attribute attribute = new Attribute("<init>");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(1985);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 94: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, false, true);
Label label = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "Ljava/lang/Synthetic;", "%bnx3G3bg(", label, label, (-395));
methodWriter.visitFieldInsn((-1991), "*wg.1)G:P", "Ljava/lang/Synthetic;", "<init>");
ByteVector byteVector = new ByteVector(164);
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitLineNumber(281, label);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[2];
stringArray[0] = "TdW";
stringArray[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", stringArray, true, false);
classWriter.lastMethod.visitLdcInsn("*wg.1)G:P");
methodWriter.visitFrame((-3868), (-3868), stringArray, 1426, stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter(2868);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 256, "<init>", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn(1, "java/lang/String", "<init>", ".jar");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
ByteVector byteVector = new ByteVector(256);
methodWriter.put(byteVector);
Test 98: 
ClassWriter classWriter = new ClassWriter((-1991));
String[] stringArray = new String[3];
stringArray[0] = "gLt*5f";
stringArray[1] = "gLt*5f";
stringArray[2] = "gLt*5f";
classWriter.visit((-1991), 68, "gLt*5f", "gLt*5f", "gLt*5f", stringArray);
MethodWriter methodWriter = new MethodWriter(classWriter, 9, ";k1R~i.+)", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "}i", stringArray, false, false);
methodWriter.visitMethodInsn(9, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "gLt*5f", "mi@w@<X7vjYrnJ.9=");
ByteVector byteVector = new ByteVector(2);
methodWriter.visitFrame(99, 8, stringArray, (-458), stringArray);
methodWriter.put(byteVector);
Test 99: 
int[] intArray = new int[6];
intArray[4] = 100;
MethodWriter.getNewOffset(intArray, intArray, 57, 100);
Test 100: 
int[] intArray = new int[2];
intArray[1] = 314;
MethodWriter.getNewOffset(intArray, intArray, 6, 59);
Test 101: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 2868, (-1780));
Test 102: 
Label label = new Label();
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 103: 
int[] intArray = new int[0];
MethodWriter.getNewOffset(intArray, intArray, 2941, 2941);
Test 104: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte) (-65);
MethodWriter.readInt(byteArray, 1);
Test 105: 
byte[] byteArray = new byte[9];
byteArray[1] = (byte)10;
MethodWriter.readInt(byteArray, 1);
Test 106: 
byte[] byteArray = new byte[3];
byteArray[1] = (byte) (-69);
MethodWriter.readShort(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte)10;
MethodWriter.readShort(byteArray, 1);
Test 108: 
byte[] byteArray = new byte[9];
byteArray[2] = (byte)70;
MethodWriter.readUnsignedShort(byteArray, 2);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 824
* Number of covered goals: 421
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 1084
* Number of covered goals: 598
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 21
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 824
* Number of covered goals: 419
* Generated 109 tests with total length 639
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
Label arg1 = new Label();
methodWriter.visitJumpInsn(2, arg1);

** It was a parseable test case! 
refined test name is: testVisitJumpInsn
* Compiling Tests
refined test name is: testClassWriterVisitJumpInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2);
assertEquals(0, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortValidInputReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
refined test name is: testMethodWriterVisitCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[3];
MethodWriter.writeShort(arg0, 0, 101);
assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0}, arg0);


** It was a parseable test case! 
refined test name is: testWriteShortToIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
short readShort = MethodWriter.readShort(arg0, 1);
assertEquals((short)0, readShort);


** It was a parseable test case! 
refined test name is: testReadShortFromArrayAtIndexOneIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
int readInt = MethodWriter.readInt(arg0, 1);
assertEquals(0, readInt);


** It was a parseable test case! 
refined test name is: testReadIntWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", arg5, false, false);
methodWriter.visitAnnotationDefault();
int size = methodWriter.getSize();
assertEquals(34, size);


** It was a parseable test case! 
refined test name is: testGetSizeReturnsExpectedValue
* Compiling Tests
refined test name is: testMethodWriterGetSizeWithNonEmptyArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
String[] arg5 = new String[7];
arg5[0] = "\"j?4w<xP'.2V";
arg5[1] = "\"j?4w<xP'.2V";
arg5[2] = "";
arg5[3] = "<init>";
arg5[4] = "\"j?4w<xP'.2V";
arg5[5] = "\"j?4w<xP'.2V";
arg5[6] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1042), "", "<init>", "poePy\")", arg5, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testNewMethodWriterWithValidArguments
* Compiling Tests
refined test name is: testMethodWritervisitEndsetsClassAndMethodName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg5, true, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}


** It was a parseable test case! 
refined test name is: testInitThrowsStringIndexOutOfBoundsException
* Compiling Tests
refined test name is: testConstructorWithInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1491));
String[] arg5 = new String[6];
arg5[0] = "GK9AJRwa{~+id{=";
arg5[1] = ".klf&h,!$r&";
arg5[2] = "*wg.1)G:P";
arg5[3] = "*wg.1)G:P";
arg5[4] = "L4?w^&z@d[`";
arg5[5] = "*wgj):dG}P";
MethodWriter methodWriter = new MethodWriter(arg0, 185, "7*wg.)G:P", "F),He+", "GK9AJRwa{~+id{=", arg5, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(57, "StackMap", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 57
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationWithInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
String[] arg5 = new String[3];
arg5[0] = "6II";
arg5[1] = "]C?kAP~XEcQ2G(z";
arg5[2] = "]C?kAP~XEcQ2G(z";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "<init>", "<init>", "]C?kAP~XEcQ2G(z", arg5, false, false);
methodWriter.visitAnnotation("]C?kAP~XEcQ2G(z", false);
int size = methodWriter.getSize();
assertEquals(42, size);


** It was a parseable test case! 
refined test name is: testMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false);
methodWriter.visitAnnotation("x<Rw*Ns,[By", true);
int size = methodWriter.getSize();
assertEquals(52, size);


** It was a parseable test case! 
refined test name is: testSizeOfMethodWriterWithParametersAndAnnotation
* Compiling Tests
refined test name is: testMethodWriterConstructorWithAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2880);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(2880, "", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 27
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationWithInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true);
AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(65, "Ljava/lang/Synthetic;", false);
assertNotNull(visitParameterAnnotation);


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationForSyntheticAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2809);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "<init>", "<init>", "<init>", arg5, false, false);
Object[] arg4 = new Object[3];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, arg4, 1, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "java/lang/Class", (String[]) null, true, true);
methodWriter.visitFrame(1, (-1072), (Object[]) null, 2, (Object[]) null);

** It was a parseable test case! 
refined test name is: testCreateNewMethodWriterObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[2];
arg4[0] = "kmzZTWL4#Hi_x";
arg4[1] = "kmzZTWL4#Hi_x";
MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+6aF|1w", "kmzZTWL4#Hi_x", arg4, false, false);
methodWriter.visitFrame((-1), 1, arg4, 1, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testStringEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[2];
arg4[0] = "";
arg4[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg4, false, false);
methodWriter.visitFrame(2, 1, arg4, 1, arg4);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 1, arg4, 2, arg4);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithInvalidState
* Compiling Tests
refined test name is: testVisitFrameWithIllegalStateException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[2];
arg4[0] = "";
arg4[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg4, false, false);
methodWriter.visitFrame(2, 1, arg4, 1, arg4);
methodWriter.visitMethodInsn(17, "*wg.1)G:P", "RuntimeInvisibleAnnotations", "");
methodWriter.visitFrame(2, 1, arg4, (-1814), arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testArrayLength
* Compiling Tests
refined test name is: testMethodWritervisitFramesWithAnnotations
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg4 = new String[2];
arg4[0] = "*wg.1)G:P";
arg4[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg4, true, false);
methodWriter.visitFrame(0, 2, arg4, 0, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testCreateStackFrameWithSampleData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[2];
arg4[0] = "O";
arg4[1] = "O";
MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "O", "O", "O", arg4, false, false);
methodWriter.visitFrame(3, 2868, arg4, 2868, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterConstructorAndFrameSetup
* Compiling Tests
refined test name is: testMethodWriterCreationAndFrameSetup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(8);
String[] arg4 = new String[2];
arg4[0] = "kmzZTWL4#Hi_x";
arg4[1] = "%Z2=v5(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "kmzZTWL4#Hi_x", "%Z2=v5(+M6aFL|1w", "kmzZTWL4#Hi_x", arg4, false, false);
methodWriter.visitFrame(0, (-56), arg4, 2, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterCreationAndFrameDefinition
* Compiling Tests
refined test name is: testMethodWriterConstructorWithArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg4 = new String[2];
arg4[0] = "TdW";
arg4[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg4, true, false);
methodWriter.visitFrame(1, 2, arg4, 2, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "mI$#+u)#cAv~6bGg.", "*wg.1)G:P", (String[]) null, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}


** It was a parseable test case! 
refined test name is: testVisitInsnThrowsNPEOnNullMethodWriter
* Compiling Tests
refined test name is: testThrowsExceptionOnVisitInsnWithNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitInsn(2);

** It was a parseable test case! 
refined test name is: testGenerateValidBytecodeForJavaClassFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(1652);
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 22, "*wg.:1)G:P", "*wg.:1)G:P", "TdW", arg5, true, false);
methodWriter.visitInsn(191);

** It was a parseable test case! 
refined test name is: testMethodWriterInitialization
* Compiling Tests
refined test name is: testMethodWriterInitialization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(180);
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitInsn(177);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitsInsn
* Compiling Tests
refined test name is: testMethodWritercreateMethodWithParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "", "FO|,4#ci)", "", arg5, false, false);
methodWriter.visitIntInsn(17, 701);

** It was a parseable test case! 
refined test name is: testVisitIntInsnWithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", arg5, true, false);
methodWriter.visitIntInsn((-1956), (-1991));

** It was a parseable test case! 
refined test name is: testMethodWithNegativeValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn((-1991), (-1991));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}


** It was a parseable test case! 
refined test name is: testVisitIntInsnthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitFieldInsn(844, "*wg.1)G:P", "TdW", "TdW");
methodWriter.visitIntInsn(455, 186);

** It was a parseable test case! 
refined test name is: initializeMethodWriter
* Compiling Tests
refined test name is: testMethodWriterCreationAndVisit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 4, "TdW", "*wg.:1)G:P", "TdW", arg5, false, false);
methodWriter.visitVarInsn((-1856), (-41));

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true);
methodWriter.visitVarInsn(24, 24);

** It was a parseable test case! 
refined test name is: testHashCodeWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitVarInsn(55, 4096);

** It was a parseable test case! 
refined test name is: testMethodName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "Ti";
arg5[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitVarInsn(2, 55);

** It was a parseable test case! 
refined test name is: testMethodReturnsSquareValue
* Compiling Tests
refined test name is: testMethodReturnsSquareValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true);
methodWriter.visitVarInsn(22, 1);

** It was a parseable test case! 
refined test name is: testMethodWriterWithThrowableArgument
* Compiling Tests
refined test name is: testCreateMethodWriterWithCorrectArgs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true);
methodWriter.visitVarInsn(57, 1);

** It was a parseable test case! 
refined test name is: testVisitVarInsnshouldLoadVariableValueOntoStack
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[2];
arg4[0] = "";
arg4[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "", "", "", arg4, false, false);
methodWriter.visitTypeInsn(1, "");
arg0.visit(247, 76, "lLtuKXe3Wn^", "", "", arg4);
methodWriter.visitFrame(1124075009, 1124075009, arg4, 2868, arg4);
int size = methodWriter.getSize();
assertEquals(63, size);


** It was a parseable test case! 
refined test name is: testGetSizereturnsExpectedValue
* Compiling Tests
refined test name is: testMethodWriterVisitTypeInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "7*wg.)G:P", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true);
methodWriter.visitTypeInsn(1, "7*wg.)G:P");

** It was a parseable test case! 
refined test name is: testWriteSimpleClassFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitTypeInsn(251, "TdW");
Label arg4 = new Label();
methodWriter.visitLocalVariable("*wg.1)G:P", "TdW", "TdW", arg4, arg4, 251);
int size = methodWriter.getSize();
assertEquals(85, size);


** It was a parseable test case! 
refined test name is: testMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(180);
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitFieldInsn(180, "TdW", "TdW", "TdW");

** It was a parseable test case! 
refined test name is: testMethodWriterWithCorrectParameterValues
* Compiling Tests
refined test name is: testMethodWriterWithExpectedFieldName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitFieldInsn(186, "I&YEm S!k:947H~k", "r{\" y=[xS[e1H/]$!@", "D)a>ww");

** It was a parseable test case! 
refined test name is: testMethodWriterConstructorAndAddFieldInstruction
* Compiling Tests
refined test name is: testAddFieldInstructionToMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false);
methodWriter.visitMethodInsn(185, "<init>", "<init>", "3%)M>8.");

** It was a parseable test case! 
refined test name is: testMethodWriterConstructor
* Compiling Tests
refined test name is: testMethodWriterVisitMethodInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[2];
arg5[0] = "{O6$V:vnsn Y";
arg5[1] = "{O6$V:vnsn Y";
MethodWriter methodWriter = new MethodWriter(arg0, (-1824), "{O6$V:vnsn Y", "{O6$V:vnsn Y", "{O6$V:vnsn Y", arg5, false, false);
methodWriter.visitMethodInsn(186, "{O6$V:vnsn Y", "Code", "{O6$V:vnsn Y");

** It was a parseable test case! 
refined test name is: testClassWriterVisitMethodInsnWithMethodName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitMethodInsn(251, "TdW", "TdW", "*wg.1)G:P");

** It was a parseable test case! 
refined test name is: testWriteMethodWithTwoArgs
* Compiling Tests
refined test name is: testMethodWriterVisitMethodInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "TdW", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
Label arg1 = new Label();
Label[] arg3 = new Label[1];
arg3[0] = arg1;
methodWriter.visitTableSwitchInsn(251, (-27), arg1, arg3);
methodWriter.visitJumpInsn((-27), arg1);

** It was a parseable test case! 
refined test name is: testTableSwitchAndJumpInstruction
* Compiling Tests
refined test name is: testTableSwitchInstruction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label arg1 = new Label();
methodWriter.visitJumpInsn(1, arg1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitJumpInsn
* Compiling Tests
refined test name is: testMethodWriterVisitJumpInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
Label arg1 = new Label();
methodWriter.visitLabel(arg1);
methodWriter.visitJumpInsn(1, arg1);

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithValidClassWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2868, "IlI(HU", "=", "=", arg5, false, false);
methodWriter.visitLdcInsn("IlI(HU");

** It was a parseable test case! 
refined test name is: testMethodWriterCorrectlyHandlesInputParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", arg5, false, true);
methodWriter.visitLdcInsn("w.1)G:P");

** It was a parseable test case! 
refined test name is: testWriteMethodNameSetsCorrectValue
* Compiling Tests
refined test name is: testWriteMethodWriterGetMethodName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitFieldInsn(251, "TdW", "*wg.1)G:P", "LocalVariableTypeTable");
methodWriter.visitLdcInsn("LocalVariableTypeTable");

** It was a parseable test case! 
refined test name is: testMethodWriterWithNewFieldAndLabel
* Compiling Tests
refined test name is: testMethodWriterWithArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "Ti";
arg0.index = 2060;
arg5[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
refined test name is: testMethodWriterCreation
* Compiling Tests
refined test name is: testMethodWriterWithTwoStringArrayParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2880);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false);
methodWriter.visitIincInsn(2, 1980);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitIincInsn
* Compiling Tests
refined test name is: testIncrementLocalVariableBy1980
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*w.1)G:P", "*w.1)G:P", "*w.1)G:P", arg5, true, false);
methodWriter.visitIincInsn((-1991), (-2049));

** It was a parseable test case! 
refined test name is: testVisitIincInsnMethodWriterConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "7*wg.)G:P", "7*wg.)G:P", arg5, true, true);
methodWriter.visitIincInsn(2, 0);

** It was a parseable test case! 
refined test name is: testMethodWriterIncrement
* Compiling Tests
refined test name is: testArrayParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(arg0, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", arg5, true, false);
methodWriter.visitIincInsn(2000, 848);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitIincInsn
* Compiling Tests
refined test name is: testMethodWriterCreationAndLocalVariableIncrement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2880);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1814), "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg5, false, false);
Label arg2 = new Label();
Label[] arg3 = new Label[0];
methodWriter.visitTableSwitchInsn(1, 1, arg2, arg3);
assertEquals(0, arg3.length);


** It was a parseable test case! 
refined test name is: testVisitTableSwitchInsnWithNoCaseStatements
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, arg5, false, false);
methodWriter.visitMultiANewArrayInsn("fyf^SiqZgSeh8!", 1916);

** It was a parseable test case! 
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Td;";
MethodWriter methodWriter = new MethodWriter(arg0, 2000, "*wg.1)G:P", "*wg.1)G:P", "org.objectweb.asm.jip.Label", arg5, true, false);
methodWriter.visitMultiANewArrayInsn("h7\"2D@O1MtzFm K-", 16777219);

** It was a parseable test case! 
refined test name is: testCreateNewArrayOfStrings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "%Z2=v(+M6aFL|1w";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "NdF=b#& A28u@T", "*wg.1)G:P", "4^J>b2.Q3b.F", arg5, false, true);
methodWriter.visitMultiANewArrayInsn("I[t1f2ow<3TW=*k3F", 2167);

** It was a parseable test case! 
refined test name is: testWriteMultiANewArrayInstruction
* Compiling Tests
refined test name is: testWriteMultiANewArrayInstruction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "&6~:Qd^y\u0005iMt=(");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testVisitMaxsThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "TdW";
arg5[1] = "TdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
Label arg1 = new Label();
methodWriter.visitTryCatchBlock((Label) null, (Label) null, arg1, "TdW");
methodWriter.visitTryCatchBlock((Label) null, arg1, (Label) null, "O~0\")1");

** It was a parseable test case! 
refined test name is: testMethodWriterWithTryCatchBlock
* Compiling Tests
refined test name is: testCreateMethodWriterWithTryCatchBlocks
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2809);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "<init>", "<init>", "<init>", arg5, false, false);
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("1ER.!oSz<Zbv", "org.objectweb.asm.jip.MethodWriter", (String) null, (Label) null, (Label) null, 2809);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitLocalVariableThrowsNPEWithInvalidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(1652);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1652, "TdW", "TdW", "TdW", arg5, false, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("uY<fzEsm", "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", arg4, arg4, 1652);

** It was a parseable test case! 
refined test name is: testMethodWriter
* Compiling Tests
refined test name is: testMethodWriterConstruction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "w.1)G:P", "w.1)G:P", "w.1)G:P", arg5, true, true);
Label arg4 = new Label();
methodWriter.visitLocalVariable("7*wg.)G:P", "GbQBz=`[M9", "w.1)G:P", arg4, arg4, (-1991));
methodWriter.visitLocalVariable("`1avm8Z,a8=7,", "`1avm8Z,a8=7,", "w.1)G:P", arg4, arg4, 2589);

** It was a parseable test case! 
refined test name is: testMethodNameIdentifiesPrimaryFunctionality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "FO|,4#ci)";
MethodWriter methodWriter = new MethodWriter(arg0, (-1820), "", "FO|,4#ci)", "", arg5, false, false);
Label arg1 = new Label();
methodWriter.visitLineNumber(947, arg1);
methodWriter.visitLineNumber(188, arg1);

** It was a parseable test case! 
refined test name is: testVisitLineNumberMultipleAddsCorrectLineNumbers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2809);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", (String[]) null, true, false);
methodWriter.visitMaxs(2, 1890);

** It was a parseable test case! 
refined test name is: testVisitMaxsSetsStackAndLocalSize
* Compiling Tests
refined test name is: testVisitMaxsSetsStackAndLocalSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, false, true);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 65);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 9
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testInvalidMaximumStackSizeWithNonZeroParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1988));
String[] arg5 = new String[2];
arg5[0] = "WrQdW";
arg5[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", arg5, true, true);
Label arg2 = new Label();
Label arg1 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitTryCatchBlockWithNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 256, "<init>", "<init>", "<init>", arg5, false, false);
methodWriter.visitMaxs((-720), 256);

** It was a parseable test case! 
refined test name is: testMethodWriterWithDifferentArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "Ti";
arg5[1] = "Ti";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*wg.1)G:P", "*wg.1)G:P", "*wg.1)G:P", arg5, true, false);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "Ti");
methodWriter.visitMaxs(191, 546);

** It was a parseable test case! 
refined test name is: testMethodWriter
* Compiling Tests
refined test name is: testWriteMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[2];
arg5[0] = "WrQdW";
arg5[1] = "WrQdW";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "*Ig.1)G:P", "*Ig.1)G:P", "*Ig.1)G:P", arg5, true, false);
Label arg2 = new Label();
Label arg1 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "RuntimeVisibleAnnotations");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(251, 84);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitMaxsthrowsNPEOnNullMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1, "fyf^SiqZgSeh8!", "@f+s4Sa", (String) null, arg5, false, false);
int size = methodWriter.getSize();
assertEquals(8, size);


** It was a parseable test case! 
refined test name is: testGetSizeMethodReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 256, "IlI(HU", "=", "=", arg5, false, false);
methodWriter.classReaderOffset = 201;
int size = methodWriter.getSize();
assertEquals(6, size);


** It was a parseable test case! 
refined test name is: testMethodWriterGetSizeReturnsCorrectSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2868);
String[] arg4 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2868, "<init>", "<init>", "<init>", arg4, false, false);
methodWriter.visitInsn(2868);
methodWriter.visitFrame(2868, 2291, arg4, 2868, arg4);
int size = methodWriter.getSize();
assertEquals(43, size);


** It was a parseable test case! 
refined test name is: testGetSizeMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1991));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-1991), "@f+s4Sa", "zQvTGm%>U069n 4", "fyf^SiqZgSeh8!", arg5, false, false);
int size = methodWriter.getSize();
assertEquals(28, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[6];
arg1[4] = 100;
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 57, 100);
assertEquals(143, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[2];
arg1[1] = 314;
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 6, 59);
assertEquals(53, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetValidArgumentsReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[5];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2868, (-1780));
assertEquals((-4648), newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetWithNegativeArgument
* Compiling Tests
refined test name is: testGetNewOffsetwithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Label arg2 = new Label();
int[] arg1 = new int[4];
MethodWriter.getNewOffset(arg1, arg1, arg2);
MethodWriter.getNewOffset(arg1, arg1, arg2);
assertArrayEquals(new int[] {0, 0, 0, 0}, arg1);


** It was a parseable test case! 
refined test name is: testGetNewOffsetWhenCalledMultipleTimes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[0];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2941, 2941);
assertEquals(0, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetAtEndOfArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
arg0[1] = (byte) (-65);
int readInt = MethodWriter.readInt(arg0, 1);
assertEquals((-1090519040), readInt);


** It was a parseable test case! 
refined test name is: testReadIntFromByteArrayAtOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
arg0[1] = (byte)10;
int readInt = MethodWriter.readInt(arg0, 1);
assertEquals(167772160, readInt);


** It was a parseable test case! 
refined test name is: testReadInt
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[3];
arg0[1] = (byte) (-69);
short readShort = MethodWriter.readShort(arg0, 1);
assertEquals((short) (-17664), readShort);


** It was a parseable test case! 
refined test name is: testReadNegativeShortValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
arg0[1] = (byte)10;
short readShort = MethodWriter.readShort(arg0, 1);
assertEquals((short)2560, readShort);


** It was a parseable test case! 
refined test name is: testReadShortWithOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
arg0[2] = (byte)70;
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2);
assertEquals(17920, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShort
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:19.772 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:19.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:19.863 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:19.864 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:19.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:19.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:19.991 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:19.992 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.056 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.058 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.120 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:20.122 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.188 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:20.190 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.260 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:20.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.332 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.426 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.429 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:20.505 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.573 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.646 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.710 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.711 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.846 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:20.847 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:20.930 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:20.932 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.035 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.126 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.204 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.273 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.274 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.349 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.350 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.480 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.551 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.553 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.630 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:21.631 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:21.703 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:21.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:21.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.868 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:21.871 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:21.957 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:21.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.032 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.034 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.115 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.117 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.206 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.209 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:22.306 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.406 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.408 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.497 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.591 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.688 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.690 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.776 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:22.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:22.861 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:22.961 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:22.968 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:23.174 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:23.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:23.409 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:23.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:23.602 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:23.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:23.870 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:23.877 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:24.057 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:24.063 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:24.322 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:24.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:24.458 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:24.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:24.706 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:24.712 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:24.874 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:24.876 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:25.072 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:25.078 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:25.342 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:25.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:25.566 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:25.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:25.788 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:25.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:26.034 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:26.043 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:26.293 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:26.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:26.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:26.456 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:26.632 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:26.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:26.911 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:26.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:27.136 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:27.143 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:27.427 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:27.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:27.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:27.608 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:27.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:27.904 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:28.124 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:28.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:28.273 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:28.277 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:28.413 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:28.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:28.648 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:28.653 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:28.940 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:28.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:29.132 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:29.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:29.337 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:29.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:29.604 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:29.612 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:29.834 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:29.840 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:29.985 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:29.991 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:30.253 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:30.258 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:30.441 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:30.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:30.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:30.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:30.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:30.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:31.018 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:31.024 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:56:31.288 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:31.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:31.483 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:31.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:31.706 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:31.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:31.924 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:31.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:32.018 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:32.019 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:32.111 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:32.113 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:32.198 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:32.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
[MASTER] 02:56:32.288 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:56:32.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
** Write a test suite: 7 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 11 called: 4 to improve: false
** Write a test suite: 17 called: 5 to improve: false
** Write a test suite: 18 called: 6 to improve: false
** Write a test suite: 20 called: 7 to improve: false
** Write a test suite: 21 called: 8 to improve: false
** Write a test suite: 23 called: 9 to improve: false
** Write a test suite: 25 called: 10 to improve: false
** Write a test suite: 26 called: 11 to improve: false
** Write a test suite: 30 called: 12 to improve: false
** Write a test suite: 34 called: 13 to improve: false
** Write a test suite: 35 called: 14 to improve: false
** Write a test suite: 37 called: 15 to improve: false
** Write a test suite: 40 called: 16 to improve: false
** Write a test suite: 41 called: 17 to improve: false
** Write a test suite: 42 called: 18 to improve: false
** Write a test suite: 44 called: 19 to improve: false
** Write a test suite: 45 called: 20 to improve: false
** Write a test suite: 46 called: 21 to improve: false
** Write a test suite: 49 called: 22 to improve: false
** Write a test suite: 50 called: 23 to improve: false
** Write a test suite: 51 called: 24 to improve: false
** Write a test suite: 52 called: 25 to improve: false
** Write a test suite: 54 called: 26 to improve: false
** Write a test suite: 55 called: 27 to improve: false
** Write a test suite: 57 called: 28 to improve: false
** Write a test suite: 59 called: 29 to improve: false
** Write a test suite: 61 called: 30 to improve: false
** Write a test suite: 63 called: 31 to improve: false
** Write a test suite: 66 called: 32 to improve: false
** Write a test suite: 70 called: 33 to improve: false
** Write a test suite: 78 called: 34 to improve: false
[MASTER] 02:56:34.710 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:34.712 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 15 called: 1 to improve: false
** Write a test suite: 19 called: 2 to improve: false
** Write a test suite: 22 called: 3 to improve: false
** Write a test suite: 24 called: 4 to improve: false
** Write a test suite: 26 called: 5 to improve: false
** Write a test suite: 28 called: 6 to improve: false
** Write a test suite: 30 called: 7 to improve: false
** Write a test suite: 31 called: 8 to improve: false
** Write a test suite: 33 called: 9 to improve: false
** Write a test suite: 34 called: 10 to improve: false
** Write a test suite: 35 called: 11 to improve: false
** Write a test suite: 36 called: 12 to improve: false
** Write a test suite: 39 called: 13 to improve: false
** Write a test suite: 40 called: 14 to improve: false
** Write a test suite: 41 called: 15 to improve: false
** Write a test suite: 43 called: 16 to improve: false
** Write a test suite: 44 called: 17 to improve: false
** Write a test suite: 45 called: 18 to improve: false
** Write a test suite: 48 called: 19 to improve: false
** Write a test suite: 50 called: 20 to improve: false
** Write a test suite: 51 called: 21 to improve: false
** Write a test suite: 55 called: 22 to improve: false
** Write a test suite: 59 called: 23 to improve: false
** Write a test suite: 60 called: 24 to improve: false
** Write a test suite: 62 called: 25 to improve: false
** Write a test suite: 64 called: 26 to improve: false
** Write a test suite: 65 called: 27 to improve: false
** Write a test suite: 67 called: 28 to improve: false
** Write a test suite: 68 called: 29 to improve: false
** Write a test suite: 74 called: 30 to improve: false
** Write a test suite: 77 called: 31 to improve: false
** Write a test suite: 78 called: 32 to improve: false
** Write a test suite: 79 called: 33 to improve: false
** Write a test suite: 85 called: 34 to improve: false
[MASTER] 02:56:37.258 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar421313192333562976.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:56:37.260 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar421313192333562976.jar
* Writing tests to file
* Writing JUnit test case 'MethodWriter_ESTest' to evosuite-tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 15 called: 1 to improve: false
** Write a test suite: 19 called: 2 to improve: false
** Write a test suite: 22 called: 3 to improve: false
** Write a test suite: 24 called: 4 to improve: false
** Write a test suite: 26 called: 5 to improve: false
** Write a test suite: 28 called: 6 to improve: false
** Write a test suite: 30 called: 7 to improve: false
** Write a test suite: 31 called: 8 to improve: false
** Write a test suite: 33 called: 9 to improve: false
** Write a test suite: 34 called: 10 to improve: false
** Write a test suite: 35 called: 11 to improve: false
** Write a test suite: 36 called: 12 to improve: false
** Write a test suite: 39 called: 13 to improve: false
** Write a test suite: 40 called: 14 to improve: false
** Write a test suite: 41 called: 15 to improve: false
** Write a test suite: 43 called: 16 to improve: false
** Write a test suite: 44 called: 17 to improve: false
** Write a test suite: 45 called: 18 to improve: false
** Write a test suite: 48 called: 19 to improve: false
** Write a test suite: 50 called: 20 to improve: false
** Write a test suite: 51 called: 21 to improve: false
** Write a test suite: 55 called: 22 to improve: false
** Write a test suite: 59 called: 23 to improve: false
** Write a test suite: 60 called: 24 to improve: false
** Write a test suite: 62 called: 25 to improve: false
** Write a test suite: 64 called: 26 to improve: false
** Write a test suite: 65 called: 27 to improve: false
** Write a test suite: 67 called: 28 to improve: false
** Write a test suite: 68 called: 29 to improve: false
** Write a test suite: 74 called: 30 to improve: false
** Write a test suite: 77 called: 31 to improve: false
** Write a test suite: 78 called: 32 to improve: false
** Write a test suite: 79 called: 33 to improve: false
** Write a test suite: 85 called: 34 to improve: false
* Done!

* Computation finished
