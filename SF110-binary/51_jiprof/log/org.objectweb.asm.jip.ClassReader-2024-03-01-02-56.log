* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.ClassReader
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 13570
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2586
* Using seed 1709261801719
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 242 / 2586
[Progress:===>                          10%] [Cov:=>                                 3%][Progress:===>                          11%] [Cov:=>                                 3%][Progress:===>                          11%] [Cov:=>                                 3%][Progress:====>                         16%] [Cov:=>                                 3%][Progress:=====>                        17%] [Cov:=>                                 3%][Progress:=====>                        17%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:==>                                6%][Progress:======>                       23%] [Cov:==>                                6%][Progress:===========>                  39%] [Cov:==>                                6%][Progress:===========>                  39%] [Cov:==>                                8%][Progress:===========>                  39%] [Cov:==>                                8%][Progress:=============>                44%] [Cov:===>                               10%][Progress:=============>                45%] [Cov:===>                               11%][Progress:=============>                45%] [Cov:====>                              13%][Progress:=============>                45%] [Cov:=========>                         26%][Progress:=============>                46%] [Cov:================>                  48%][Progress:==============>               48%] [Cov:=================>                 51%][Progress:===============>              51%] [Cov:==================>                52%][Progress:=================>            57%] [Cov:===================>               56%][Progress:=================>            59%] [Cov:===================>               56%][Progress:==================>           60%] [Cov:===================>               56%][Progress:==================>           63%] [Cov:===================>               56%][Progress:===================>          64%] [Cov:===================>               56%][Progress:====================>         68%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:=====================>             60%][Progress:======================>       75%] [Cov:=====================>             60%][Progress:=======================>      77%] [Cov:=====================>             60%][Progress:=======================>      79%] [Cov:=====================>             60%][Progress:========================>     82%] [Cov:=====================>             60%][Progress:=========================>    85%] [Cov:=====================>             60%][Progress:=========================>    86%] [Cov:=====================>             61%][Progress:==========================>   89%] [Cov:=====================>             61%][Progress:============================> 94%] [Cov:=====================>             61%][Progress:=============================>99%] [Cov:=====================>             61%][Progress:==============================100%] [Cov:=====================>             61%]
* Search finished after 101s and 35 generations, 12402 statements, best individual has fitness: 1161.0
* Generated before the refinement 39 tests with total length 104
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("")
test data is: ClassReader classReader = new ClassReader("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int myIntValue = 10;
        double myDoubleValue = 3.14;
        String myStringValue = "hello";
        char myCharValue = 'a';
    }
}
statement is: int myIntValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDoubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String myStringValue = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char myCharValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 10;
double _double = 3.14;
String string = "hello";
char _char = 'a';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getAccess();
    }
}
statement is: classReader.getAccess(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getAccess() target is: classReader method is: getAccess()
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(2)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
classReader.getItem(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem(3);
        // Changed the index parameter from 2 to 3, as this is a more representative value for testing }}
    }
}
statement is: classReader.getItem(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(3) target is: classReader method is: getItem(int)
statement is: // Changed the index parameter from 2 to 3, as this is a more representative value for testing }}, class spoon.support.reflect.code.CtCommentImpl
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: java.io.ByteArrayInputStream([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0, 1412)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412);
ClassReader classReader = new ClassReader(bufferedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412);
    }
}
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 1;
int _int = 2994;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) _int, _int, 2994);
int _int = 1412;
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, _int);

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        List<String> interfaces = classReader.getInterfaces();
        assertEquals(interfaces.size(), 2);
        assertTrue(interfaces.contains("java.lang.Runnable"));
        assertTrue(interfaces.contains("java.util.Map$Entry"));
    }
}
statement is: List<String> interfaces = classReader.getInterfaces(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: assertEquals(interfaces.size(), 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(interfaces.size(), 2) target is:  method is: assertEquals(<unknown>,int)
statement is: assertTrue(interfaces.contains("java.lang.Runnable")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(interfaces.contains("java.lang.Runnable")) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(interfaces.contains("java.util.Map$Entry")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(interfaces.contains("java.util.Map$Entry")) target is:  method is: assertTrue(<unknown>)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data
        String[] expectedInterfaces = new String[]{ "org.objectweb.asm.jip.Interface1", "org.objectweb.asm.jip.Interface2" };
    }
}
statement is: // Test data
String[] expectedInterfaces = new String[]{ "org.objectweb.asm.jip.Interface1", "org.objectweb.asm.jip.Interface2" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: org.evosuite.testcase.statements.ArrayStatement@b1596c4c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[17]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
ClassReader classReader = new ClassReader(byteArrayInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 };// Replace with a more realistic value

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 }// Replace with a more realistic value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[17] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [17] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1703)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 640)
test data is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(1703);
classReader.accept((ClassVisitor) classWriter, 640);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String jarFileName = "path/to/jar/file.jar";
        int jarFileSize = 1234;
        String jarFileManifest = "Jar-File-Manifest-Data";
    }
}
statement is: // Improved test data
String jarFileName = "path/to/jar/file.jar", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int jarFileSize = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String jarFileManifest = "Jar-File-Manifest-Data", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "path/to/jar/file.jar"
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "Jar-File-Manifest-Data"
TestCase is: String string = "path/to/jar/file.jar";
int _int = 1234;
String string = "Jar-File-Manifest-Data";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(392)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 2)
test data is: ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(classWriter.toByteArray().length, 1000);
    }
}
statement is: assertEquals(classWriter.toByteArray().length, 1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(classWriter.toByteArray().length, 1000) target is:  method is: assertEquals(<unknown>,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(47)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 2160)
test data is: ClassWriter classWriter = new ClassWriter(47);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 2160);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int inputAccessFlags = AccessController.getContext().getEffectivePermissions();
        String expectedClassName = "com.example.MyClass";
        int expectedAccessFlags = AccessController.getContext().getEffectivePermissions();
    }
}
statement is: int inputAccessFlags = AccessController.getContext().getEffectivePermissions(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: AccessController.getContext().getEffectivePermissions() target is: AccessController.getContext() method is: getEffectivePermissions()
statement is: String expectedClassName = "com.example.MyClass", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedAccessFlags = AccessController.getContext().getEffectivePermissions(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: AccessController.getContext().getEffectivePermissions() target is: AccessController.getContext() method is: getEffectivePermissions()
* this is vulnerable: String string = "com.example.MyClass"
TestCase is: String string = "com.example.MyClass";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(392)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 10)
test data is: ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 10);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int myIntValue = 42;
        double myDoubleValue = 3.14;
        String myStringValue = "Hello, World!";
        char myCharValue = 'A';
    }
}
statement is: // Improved test data
int myIntValue = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDoubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String myStringValue = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char myCharValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'A';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(3308)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 1418)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(3308);
classReader.accept((ClassVisitor) classWriter, 1418);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int primitiveIntValue = 42;// a more descriptive and representative value for an integer

        double primitiveDoubleValue = 3.14;// a more descriptive and representative value for a double

        String stringValue = "Hello, world!";// a more descriptive and representative value for a String

        char charValue = 'a';// a more descriptive and representative value for a character }}

    }
}
statement is: // Improved test data:
int primitiveIntValue = 42// a more descriptive and representative value for an integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveDoubleValue = 3.14// a more descriptive and representative value for a double
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, world!"// a more descriptive and representative value for a String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a'// a more descriptive and representative value for a character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'a';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@488de025 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[12]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(8, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
classReader.readConst(8, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[12];
        classReader.readConst(8, new char[]{ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' });
    }
}
statement is: char[] charArray = new char[12], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [12] Ct is: char[] charArray = new char[12] isAssignment: false Array: new char[12] Elements: []
lengths: [12] [12]
Their type are: class [C char[]
statement is: classReader.readConst(8, new char[]{ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(8, new char[]{ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' }) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[12];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@52d362be type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[5]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(41, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
char[] charArray = new char[5];
classReader.readConst(41, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[]{ 'a', 'b', 'c', 'd', 'e' };
        classReader.readConst(41, charArray);
    }
}
statement is: char[] charArray = new char[]{ 'a', 'b', 'c', 'd', 'e' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[5] isAssignment: false Array: new char[]{ 'a', 'b', 'c', 'd', 'e' } Elements: ['a', 'b', 'c', 'd', 'e']
lengths: [5] []
statement is: classReader.readConst(41, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(41, charArray) target is: classReader method is: readConst(int,char[])
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: org.evosuite.testcase.statements.ArrayStatement@1c1d8baf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[7]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(2, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
char[] charArray = new char[7];
classReader.readConst(2, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[10];
        classReader.readConst(3, charArray);
    }
}
statement is: char[] charArray = new char[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: char[] charArray = new char[7] isAssignment: false Array: new char[10] Elements: []
lengths: [7] [10]
Their type are: class [C char[]
statement is: classReader.readConst(3, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(3, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[7];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@7ebc13a1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[12]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(69, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
classReader.readConst(69, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[12];
        classReader.readConst(3, charArray);
    }
}
statement is: char[] charArray = new char[12], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [12] Ct is: char[] charArray = new char[12] isAssignment: false Array: new char[12] Elements: []
lengths: [12] [12]
Their type are: class [C char[]
statement is: classReader.readConst(3, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(3, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[12];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(182)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readUnsignedShort(182);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readUnsignedShort(42);
    }
}
statement is: classReader.readUnsignedShort(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(42) target is: classReader method is: readUnsignedShort(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(1234567890);
    }
}
statement is: classReader.readInt(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(1234567890) target is: classReader method is: readInt(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(3392)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 3392)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 3392);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: org.objectweb.asm.jip.ClassWriter(Lorg/objectweb/asm/jip/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, (-194))
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, (-194));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2378)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(2378);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 10)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 10);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10);
        // Improved test data
        int intValue = 123;// replace with a more descriptive integer value

        double doubleValue = 123.456;// replace with a more descriptive double value

        String stringValue = "Hello World!";// replace with a more descriptive String value

        char charValue = 'a';// replace with a more descriptive character value }}

    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: // Improved test data
int intValue = 123// replace with a more descriptive integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 123.456// replace with a more descriptive double value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World!"// replace with a more descriptive String value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a'// replace with a more descriptive character value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123
* this is vulnerable: double _double = 123.456
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 123;
double _double = 123.456;
String string = "Hello World!";
char _char = 'a';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-2140))
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-2140));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -2140);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -2140), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -2140) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((byte)30)
statement is: org.evosuite.testcase.statements.ArrayStatement@f927ab98 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[2]
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 138)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter((byte)30);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 138);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[2];
        classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 138);
        // Improved test data
        int primitiveIntegerValue = 42;// change to a more descriptive value

        double primitiveDoubleValue = 3.14;// change to a more descriptive value

        String stringValue = "Hello, world!";// change to a more descriptive value

        char characterValue = 'A';// change to a more descriptive value }}

    }
}
statement is: Attribute[] attributeArray = new Attribute[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Attribute[] attributeArray = new Attribute[2] isAssignment: false Array: new Attribute[2] Elements: []
lengths: [2] [2]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Attribute[]
statement is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 138), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 138) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: // Improved test data
int primitiveIntegerValue = 42// change to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveDoubleValue = 3.14// change to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, world!"// change to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char characterValue = 'A'// change to a more descriptive value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: Attribute[] attributeArray = new Attribute[2];
int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@94922ae8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[17]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // A byte array representing a Java class file
        byte[] byteArray = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, // Magic number
        0x0, 0x0, 0x0, 0x34, // Version number
        0x1, 0x2, 0x3, 0x4, // Access flags
        0x5, 0x6, 0x7, 0x8, // This class
        0x9, 0xa, 0xb, 0xc, // Superclass
        0xd, 0xe, 0xf, 0x10, // Interfaces
        0x11, 0x12, 0x13, 0x14, // Fields
        0x15, 0x16, 0x17, 0x18, // Methods
        0x19, 0x1a, 0x1b, 0x1c// Attributes
         };
        // A ByteArrayInputStream that wraps the byte array
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
    }
}
statement is: // A byte array representing a Java class file
byte[] byteArray = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, // Magic number
0x0, 0x0, 0x0, 0x34, // Version number
0x1, 0x2, 0x3, 0x4, // Access flags
0x5, 0x6, 0x7, 0x8, // This class
0x9, 0xa, 0xb, 0xc, // Superclass
0xd, 0xe, 0xf, 0x10, // Interfaces
0x11, 0x12, 0x13, 0x14, // Fields
0x15, 0x16, 0x17, 0x18, // Methods
0x19, 0x1a, 0x1b, 0x1c// Attributes
 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[17] isAssignment: false Array: new byte[]{ 0xca, 0xfe, 0xba, 0xbe, // Magic number
0x0, 0x0, 0x0, 0x34, // Version number
0x1, 0x2, 0x3, 0x4, // Access flags
0x5, 0x6, 0x7, 0x8, // This class
0x9, 0xa, 0xb, 0xc, // Superclass
0xd, 0xe, 0xf, 0x10, // Interfaces
0x11, 0x12, 0x13, 0x14, // Fields
0x15, 0x16, 0x17, 0x18, // Methods
0x19, 0x1a, 0x1b, 0x1c// Attributes
 } Elements: [0xca, 0xfe, 0xba, 0xbe, // Magic number
0x0, 0x0, 0x0, 0x34, // Version number
0x1, 0x2, 0x3, 0x4, // Access flags
0x5, 0x6, 0x7, 0x8, // This class
0x9, 0xa, 0xb, 0xc, // Superclass
0xd, 0xe, 0xf, 0x10, // Interfaces
0x11, 0x12, 0x13, 0x14, // Fields
0x15, 0x16, 0x17, 0x18, // Methods
0x19, 0x1a, 0x1b, 0x1c// Attributes
]
lengths: [17] []
statement is: // A ByteArrayInputStream that wraps the byte array
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classReader.getClassName()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed primitive values and Strings to more descriptive examples
        int myInt = 42;
        String myString = "Hello, world!";
        double myDouble = 3.14;
        char myChar = 'A';
        classReader.getIntValue(myInt);// Returns 42

        classReader.getStringValue(myString);// Returns "Hello, world!"

        classReader.getDoubleValue(myDouble);// Returns 3.14

        classReader.getCharValue(myChar);// Returns 'A' }}

    }
}
statement is: // Changed primitive values and Strings to more descriptive examples
int myInt = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String myString = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char myChar = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.getIntValue(myInt)// Returns 42
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getIntValue(myInt)// Returns 42
 target is: classReader method is: getIntValue(int)
statement is: classReader.getStringValue(myString)// Returns "Hello, world!"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getStringValue(myString)// Returns "Hello, world!"
 target is: classReader method is: getStringValue(java.lang.String)
statement is: classReader.getDoubleValue(myDouble)// Returns 3.14
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getDoubleValue(myDouble)// Returns 3.14
 target is: classReader method is: getDoubleValue(double)
statement is: classReader.getCharValue(myChar)// Returns 'A' }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getCharValue(myChar)// Returns 'A' }}
 target is: classReader method is: getCharValue(char)
* this is vulnerable: int _int = 42
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 42;
String string = "Hello, world!";
double _double = 3.14;
char _char = 'A';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readByte(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readByte(256);
    }
}
statement is: classReader.readByte(256), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(256) target is: classReader method is: readByte(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@aa7f7e7d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(127, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[9];
classReader.readClass(127, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[9];
        classReader.readClass(127, charArray);
        // Improved test data:
        int integerValue = 12345;// A more descriptive value for the integer variable.

        double doubleValue = 3.14;// A more descriptive value for the double variable.

        String stringValue = "Hello, World!";// A more descriptive value for the String variable.

        char charValue = 'A';// A more descriptive value for the char variable. }}

    }
}
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
statement is: classReader.readClass(127, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readClass(127, charArray) target is: classReader method is: readClass(int,char[])
statement is: // Improved test data:
int integerValue = 12345// A more descriptive value for the integer variable.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14// A more descriptive value for the double variable.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, World!"// A more descriptive value for the String variable.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A'// A more descriptive value for the char variable. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 12345
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'A'
TestCase is: char[] charArray = new char[9];
int _int = 12345;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'A';

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(101)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(101);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(101);// Changed from 42 to a more descriptive value }}

    }
}
statement is: classReader.readInt(101)// Changed from 42 to a more descriptive value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(101)// Changed from 42 to a more descriptive value }}
 target is: classReader method is: readInt(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@339ded87 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[3]
statement is: readLabel(I[Lorg/objectweb/asm/jip/Label;)Lorg/objectweb/asm/jip/Label; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Label
statement code is: Label readLabel = classReader.readLabel(1, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
Label[] labelArray = new Label[3];
classReader.readLabel(1, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label[] labelArray = new Label[3];
        // Improved test data
        classReader.readLabel(1, new Label[]{ new Label("my_label"), new Label("another_label"), new Label("yet_another_label") });
    }
}
statement is: Label[] labelArray = new Label[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: Label[] labelArray = new Label[3] isAssignment: false Array: new Label[3] Elements: []
lengths: [3] [3]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: // Improved test data
classReader.readLabel(1, new Label[]{ new Label("my_label"), new Label("another_label"), new Label("yet_another_label") }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classReader.readLabel(1, new Label[]{ new Label("my_label"), new Label("another_label"), new Label("yet_another_label") }) target is: classReader method is: readLabel(int,Label[])
TestCase is: Label[] labelArray = new Label[3];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(2)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        classReader.readLong(1000000000);
    }
}
statement is: // Improved test data:
classReader.readLong(1000000000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
classReader.readLong(1000000000) target is: classReader method is: readLong(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(146)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(146);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        classReader.readLong(1234567890);// A more descriptive and representative value for a long primitive type }}

    }
}
statement is: // Improved test data
classReader.readLong(1234567890)// A more descriptive and representative value for a long primitive type }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classReader.readLong(1234567890)// A more descriptive and representative value for a long primitive type }}
 target is: classReader method is: readLong(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@425746d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[17]
statement is: org.objectweb.asm.jip.ClassReader([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(9)
test data is: byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
classReader.readLong(9);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)), ((byte) (0xf0)) };
        ClassReader classReader = new ClassReader(byteArray);
        classReader.readLong(1234567890L);
    }
}
statement is: // Improved test data for the given code snippet
byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)), ((byte) (0xf0)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[17] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56, ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)), ((byte) (0xf0)) } Elements: [0x12, 0x34, 0x56, ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)), ((byte) (0xf0))]
lengths: [17] []
statement is: ClassReader classReader = new ClassReader(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.objectweb.asm.jip.ClassReader([B)V
statement is: classReader.readLong(1234567890L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(1234567890L) target is: classReader method is: readLong(long)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(2)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        classReader.readShort(10);
    }
}
statement is: // Improved test data:
classReader.readShort(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
classReader.readShort(10) target is: classReader method is: readShort(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(69)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(69);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(10);// Changed from 69 to a more descriptive value of 10 }}

    }
}
statement is: classReader.readShort(10)// Changed from 69 to a more descriptive value of 10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(10)// Changed from 69 to a more descriptive value of 10 }}
 target is: classReader method is: readShort(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@2041d31d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: org.objectweb.asm.jip.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0, 1626, (-816))
test data is: byte[] byteArray = new byte[3];
ClassReader classReader = new ClassReader(byteArray, 1626, (-816));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        public static final byte[] BYTE_ARRAY = new byte[]{ 34, -76, 98 };
    }
}
statement is: public static final byte[] BYTE_ARRAY = new byte[]{ 34, -76, 98 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[]{ 34, -76, 98 } Elements: [34, -76, 98]
lengths: [3] []
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(3392)
statement is: copyPool(Lorg/objectweb/asm/jip/ClassWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.copyPool(arg0)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.copyPool(classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.copyPool(classWriter);
    }
}
statement is: classReader.copyPool(classWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter) target is: classReader method is: copyPool()
statement is: org.evosuite.testcase.statements.ArrayStatement@b5181cdb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[17]
statement is: org.objectweb.asm.jip.ClassReader([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(334, (char[]) null)
test data is: byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
classReader.readUTF8(334, (char[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10 };
        ClassReader classReader = new ClassReader(byteArray);
        classReader.readUTF8(334, "Test String");
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[17] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10]
lengths: [17] []
statement is: ClassReader classReader = new ClassReader(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.objectweb.asm.jip.ClassReader([B)V
statement is: classReader.readUTF8(334, "Test String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(334, "Test String") target is: classReader method is: readUTF8(int,java.lang.String)
* test suite isTestSuite: 53
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getAccess();
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
classReader.getItem(2);
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412);
ClassReader classReader = null;
try {
  classReader = new ClassReader(bufferedInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getSuperName();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getInterfaces();
Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
classReader.getInterfaces();
Test 7: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(1703);
classReader.accept((ClassVisitor) classWriter, 640);
Test 9: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 2);
Test 10: 
ClassWriter classWriter = new ClassWriter(47);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 2160);
Test 11: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 10);
Test 12: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(3308);
classReader.accept((ClassVisitor) classWriter, 1418);
Test 13: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(8, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
char[] charArray = new char[5];
// Undeclared exception!
try { 
  classReader.readConst(41, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
char[] charArray = new char[7];
// Undeclared exception!
try { 
  classReader.readConst(2, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(69, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readUnsignedShort(182);
Test 18: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(1);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 3392);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, (-194));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(2378);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 10);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-2140));
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter((byte)30);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 138);
Test 25: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
classReader.getAccess();
Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.getClassName();
Test 27: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readByte(1);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[9];
classReader.readClass(127, charArray);
Test 29: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(101);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
Label[] labelArray = new Label[3];
classReader.readLabel(1, labelArray);
Test 31: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(2);
Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(146);
Test 33: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
classReader.readLong(9);
Test 34: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(2);
Test 35: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(69);
Test 36: 
byte[] byteArray = new byte[3];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray, 1626, (-816));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.copyPool(classWriter);
Test 38: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
// Undeclared exception!
try { 
  classReader.readUTF8(334, (char[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 

Test 40: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 1, 2994, 2994);
int _int = 1412;
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, _int);

Test 41: 

Test 42: 

Test 43: 

Test 44: 

Test 45: 
char[] charArray = new char[12];

Test 46: 
char[] charArray = new char[7];

Test 47: 
char[] charArray = new char[12];

Test 48: 

Test 49: 
Attribute[] attributeArray = new Attribute[2];

Test 50: 

Test 51: 
char[] charArray = new char[9];

Test 52: 
Label[] labelArray = new Label[3];


* Generated after the refinement and before minimization 53 tests with total length 113
* test suite isTestSuite: 53
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getAccess();
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
classReader.getItem(2);
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412);
ClassReader classReader = null;
try {
  classReader = new ClassReader(bufferedInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getSuperName();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getInterfaces();
Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
classReader.getInterfaces();
Test 7: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(1703);
classReader.accept((ClassVisitor) classWriter, 640);
Test 9: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 2);
Test 10: 
ClassWriter classWriter = new ClassWriter(47);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 2160);
Test 11: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 10);
Test 12: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(3308);
classReader.accept((ClassVisitor) classWriter, 1418);
Test 13: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(8, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
char[] charArray = new char[5];
// Undeclared exception!
try { 
  classReader.readConst(41, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
char[] charArray = new char[7];
// Undeclared exception!
try { 
  classReader.readConst(2, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(69, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readUnsignedShort(182);
Test 18: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(1);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 3392);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, (-194));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(2378);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 10);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-2140));
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter((byte)30);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 138);
Test 25: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
classReader.getAccess();
Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.getClassName();
Test 27: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readByte(1);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[9];
classReader.readClass(127, charArray);
Test 29: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(101);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
Label[] labelArray = new Label[3];
classReader.readLabel(1, labelArray);
Test 31: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(2);
Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(146);
Test 33: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
classReader.readLong(9);
Test 34: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(2);
Test 35: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(69);
Test 36: 
byte[] byteArray = new byte[3];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray, 1626, (-816));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.copyPool(classWriter);
Test 38: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
// Undeclared exception!
try { 
  classReader.readUTF8(334, (char[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 

Test 40: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 1, 2994, 2994);
int _int = 1412;
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, _int);

Test 41: 

Test 42: 

Test 43: 

Test 44: 

Test 45: 
char[] charArray = new char[12];

Test 46: 
char[] charArray = new char[7];

Test 47: 
char[] charArray = new char[12];

Test 48: 

Test 49: 
Attribute[] attributeArray = new Attribute[2];

Test 50: 

Test 51: 
char[] charArray = new char[9];

Test 52: 
Label[] labelArray = new Label[3];


* Minimizing test suite
* test suite isTestSuite: 38
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(1);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(2);
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
classReader.getInterfaces();
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getAccess();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(146);
Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
classReader.getItem(2);
Test 7: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readByte(1);
Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.getClassName();
Test 9: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(classReader.b, 1, 2994);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 1412);
ClassReader classReader = null;
try {
  classReader = new ClassReader(bufferedInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 10: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getSuperName();
Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.getInterfaces();
Test 12: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, (-194));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 13: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 3392);
Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter classWriter = new ClassWriter(2378);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 16: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(1703);
classReader.accept((ClassVisitor) classWriter, 640);
Test 17: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 10);
Test 18: 
ClassWriter classWriter = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) classWriter, 2);
Test 19: 
ClassWriter classWriter = new ClassWriter(47);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 2160);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-2140));
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter((byte)30);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 138);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
char[] charArray = new char[7];
// Undeclared exception!
try { 
  classReader.readConst(2, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
char[] charArray = new char[5];
// Undeclared exception!
try { 
  classReader.readConst(41, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(8, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(69, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] charArray = new char[9];
classReader.readClass(127, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readUnsignedShort(182);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 10);
Test 29: 
byte[] byteArray = new byte[17];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);
classReader.getAccess();
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readInt(101);
Test 31: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
Label[] labelArray = new Label[3];
classReader.readLabel(1, labelArray);
Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readLong(2);
Test 33: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
classReader.readLong(9);
Test 34: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readShort(69);
Test 35: 
byte[] byteArray = new byte[3];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray, 1626, (-816));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter classWriter = new ClassWriter(3392);
classReader.copyPool(classWriter);
Test 37: 
byte[] byteArray = new byte[17];
ClassReader classReader = new ClassReader(byteArray);
// Undeclared exception!
try { 
  classReader.readUTF8(334, (char[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 52%
* Total number of goals: 817
* Number of covered goals: 427
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 65%
* Total number of goals: 891
* Number of covered goals: 578
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 40
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 817
* Number of covered goals: 391
* Generated 38 tests with total length 101
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 31%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testClassReaderThrowsIOExceptionWhenClassNotFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
int readInt = classReader.readInt(1);
assertEquals((-21316096), readInt);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadIntFromClassFileAtOffsetOne
* Compiling Tests
refined test name is: testReadIntFromClassFileAtOffsetOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
short readShort = classReader.readShort(2);
assertEquals((short) (-17730), readShort);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadShortAndAssertHeader
* Compiling Tests
refined test name is: testReadShortwithValidDatareturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
String[] interfaces = classReader.getInterfaces();
assertEquals(1, interfaces.length);


** It was a parseable test case! 
refined test name is: testGetInterfacesShouldReturnSingleInterface
* Compiling Tests
refined test name is: testGetInterfacesReturnsSingleInterface
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
int access = classReader.getAccess();
assertEquals(33, access);


** It was a parseable test case! 
refined test name is: testGetAccessReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
long readLong = classReader.readLong(146);
assertEquals(34348745315975185L, readLong);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadLongAndValidateHeader
* Compiling Tests
refined test name is: testReadLong
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
int item = classReader.getItem(2);
assertEquals(16, item);
assertEquals(914, classReader.header);


** It was a parseable test case! 
refined test name is: testGetItemReturnsCorrectValue
* Compiling Tests
refined test name is: testGetItemReturnsValueAtGivenIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
int readByte = classReader.readByte(1);
assertEquals(254, readByte);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadByteAtPosition1
* Compiling Tests
refined test name is: testReadByteAtPosition1
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
assertEquals(2022, classReader.header);

String className = classReader.getClassName();
assertEquals("org/objectweb/asm/jip/FieldWriter", className);


** It was a parseable test case! 
refined test name is: testHeaderAndClassName
* Compiling Tests
refined test name is: testClassReaderHeaderIsEqualTo2022
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
String superName = classReader.getSuperName();
assertEquals("java/lang/Object", superName);
assertEquals(8915, classReader.header);
assertNotNull(superName);


** It was a parseable test case! 
refined test name is: testSuperClass
* Compiling Tests
refined test name is: testSuperClassNameAndHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
String[] interfaces = classReader.getInterfaces();
assertEquals(0, interfaces.length);
assertEquals(8915, classReader.header);


** It was a parseable test case! 
refined test name is: testClassReaderHeader
* Compiling Tests
refined test name is: testClassReaderHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter arg0 = new ClassWriter(3392);
classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 3392);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testFieldWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
ClassWriter arg0 = new ClassWriter(2378);
classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 1);
assertEquals(1, ClassReader.SKIP_CODE);


** It was a parseable test case! 
refined test name is: testReadingClassFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter arg0 = new ClassWriter(1703);
classReader.accept((ClassVisitor) arg0, 640);
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testJarFileFilterShouldComputeFrames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) arg0, 10);

** It was a parseable test case! 
refined test name is: testAcceptThrowsExceptionOnUndeclaredException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(392);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
classReader.accept((ClassVisitor) arg0, 2);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testReadClassFileReturnsCorrectClassNodeFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(47);
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
// Undeclared exception!
classReader.accept((ClassVisitor) arg0, 2160);

** It was a parseable test case! 
refined test name is: testClassReaderAccept
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter arg0 = new ClassWriter(8);
classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-2140));
assertEquals(1, ClassReader.SKIP_CODE);


** It was a parseable test case! 
refined test name is: testReadAndProcessByteVector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter arg0 = new ClassWriter((byte)30);
Attribute[] arg1 = new Attribute[2];
classReader.accept((ClassVisitor) arg0, arg1, 138);
assertEquals(48, classReader.getAccess());


** It was a parseable test case! 
refined test name is: testAcceptWithArg0AndArg1ReturnsCorrectClassWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
char[] arg1 = new char[7];
// Undeclared exception!
try { 
  classReader.readConst(2, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 7
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
char[] arg1 = new char[5];
// Undeclared exception!
try { 
  classReader.readConst(41, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 5
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstWithValidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] arg1 = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(8, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 12
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
char[] arg1 = new char[12];
// Undeclared exception!
try { 
  classReader.readConst(69, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 12
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
assertEquals(2022, classReader.header);

char[] arg1 = new char[9];
String readClass = classReader.readClass(127, arg1);
assertEquals("version", readClass);


** It was a parseable test case! 
refined test name is: testReadClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
classReader.readUnsignedShort(182);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadUnsignedShort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ByteVector");
ClassWriter arg0 = new ClassWriter(8);
classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 10);
assertEquals(1, ClassReader.SKIP_CODE);


** It was a parseable test case! 
refined test name is: testSkipCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
int readInt = classReader.readInt(101);
assertEquals(2022, classReader.header);
assertEquals(150999296, readInt);


** It was a parseable test case! 
refined test name is: testReadInt
* Compiling Tests
refined test name is: testReadIntAtOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
Label[] arg1 = new Label[3];
Label readLabel = classReader.readLabel(1, arg1);
assertEquals(2022, classReader.header);
assertNotNull(readLabel);


** It was a parseable test case! 
refined test name is: testReadLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
long readLong = classReader.readLong(2);
assertEquals((-4990551337076653927L), readLong);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadLong
* Compiling Tests
refined test name is: testReadLong
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[17];
ClassReader classReader = new ClassReader(arg0);
long readLong = classReader.readLong(9);
assertEquals(0L, readLong);


** It was a parseable test case! 
refined test name is: testReadLongForZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
short readShort = classReader.readShort(69);
assertEquals((short)27145, readShort);
assertEquals(2022, classReader.header);


** It was a parseable test case! 
refined test name is: testReadShortMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[3];
ClassReader classReader = null;
try {
  classReader = new ClassReader(arg0, 1626, (-816));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testConstructWithNegativeLengthThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
ClassWriter arg0 = new ClassWriter(3392);
classReader.copyPool(arg0);
assertEquals(48, classReader.getAccess());


** It was a parseable test case! 
refined test name is: testCopyPoolsetsAccessFlagCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[17];
ClassReader classReader = new ClassReader(arg0);
// Undeclared exception!
try { 
  classReader.readUTF8(334, (char[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testUnexpectedExceptionThrownWhenReadingUTF8String
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:26.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:26.062 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:26.205 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:26.207 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:26.355 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:26.358 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:26.592 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:26.595 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:26.851 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:26.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.015 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:27.019 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.149 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:27.151 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:27.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:27.453 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.672 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:27.674 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:27.924 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:27.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:28.310 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:28.313 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:28.692 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:28.694 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:29.026 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:29.028 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:30.034 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:30.036 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:31.768 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:31.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:33.354 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:33.356 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:33.647 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:33.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:33.984 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:33.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.211 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:34.214 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.434 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:34.436 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.570 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:34.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.707 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:34.835 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:34.962 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:34.964 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:35.260 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:35.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:35.394 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:35.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.514 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.516 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:10:35.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.648 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:35.736 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.738 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:35.857 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:35.954 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:35.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
[MASTER] 03:10:36.257 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:36.259 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:10:36.349 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:36.351 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 5 called: 3 to improve: false
** Write a test suite: 6 called: 4 to improve: false
** Write a test suite: 7 called: 5 to improve: false
** Write a test suite: 8 called: 6 to improve: false
** Write a test suite: 9 called: 7 to improve: false
** Write a test suite: 10 called: 8 to improve: false
** Write a test suite: 26 called: 9 to improve: false
** Write a test suite: 28 called: 10 to improve: false
[MASTER] 03:10:43.012 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:43.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 7 called: 1 to improve: false
** Write a test suite: 23 called: 2 to improve: false
** Write a test suite: 24 called: 3 to improve: false
** Write a test suite: 25 called: 4 to improve: false
** Write a test suite: 26 called: 5 to improve: false
** Write a test suite: 27 called: 6 to improve: false
** Write a test suite: 28 called: 7 to improve: false
** Write a test suite: 30 called: 8 to improve: false
** Write a test suite: 31 called: 9 to improve: false
** Write a test suite: 32 called: 10 to improve: false
[MASTER] 03:10:49.898 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar4309647575687529072.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:10:49.905 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4309647575687529072.jar
* Writing tests to file
* Writing JUnit test case 'ClassReader_ESTest' to evosuite-tests
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 7 called: 1 to improve: false
** Write a test suite: 23 called: 2 to improve: false
** Write a test suite: 24 called: 3 to improve: false
** Write a test suite: 25 called: 4 to improve: false
** Write a test suite: 26 called: 5 to improve: false
** Write a test suite: 27 called: 6 to improve: false
** Write a test suite: 28 called: 7 to improve: false
** Write a test suite: 30 called: 8 to improve: false
** Write a test suite: 31 called: 9 to improve: false
** Write a test suite: 32 called: 10 to improve: false
* Done!

* Computation finished
