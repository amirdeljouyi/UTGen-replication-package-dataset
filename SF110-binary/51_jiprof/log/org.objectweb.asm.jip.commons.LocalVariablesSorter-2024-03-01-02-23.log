* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.commons.LocalVariablesSorter
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 9614
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.commons.LocalVariablesSorter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 299
* Using seed 1709259793296
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 91 / 299
[Progress:>                             1%] [Cov:>                                  0%][Progress:>                             1%] [Cov:>                                  0%][Progress:>                             2%] [Cov:>                                  0%][Progress:>                             2%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  0%][Progress:=>                            4%] [Cov:>                                  0%][Progress:=>                            4%] [Cov:>                                  0%][Progress:=>                            4%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  0%][Progress:==>                           7%] [Cov:>                                  0%][Progress:==>                           7%] [Cov:>                                  0%][Progress:==>                           7%] [Cov:=>                                 5%][Progress:==>                           7%] [Cov:===>                               11%][Progress:==>                           8%] [Cov:============>                      36%][MASTER] 02:23:23.708 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.objectweb.asm.jip.commons.LocalVariablesSorter canUseFunctionalMocks=false, canBeMocked: false
[Progress:==>                           8%] [Cov:============>                      36%][Progress:==>                           8%] [Cov:=================>                 50%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:===================>               55%][Progress:==>                           9%] [Cov:===================>               56%][Progress:==>                           9%] [Cov:===================>               57%][Progress:==>                           9%] [Cov:====================>              58%][Progress:===>                          10%] [Cov:=====================>             60%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:=======================>           68%][Progress:===>                          11%] [Cov:=======================>           68%][Progress:===>                          11%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          12%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         15%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:====>                         16%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        17%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        18%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:=====>                        19%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       20%] [Cov:==============================>    87%][Progress:======>                       21%] [Cov:==============================>    87%][Progress:======>                       21%] [Cov:==============================>    87%][Progress:======>                       21%] [Cov:==============================>    87%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       21%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       22%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:======>                       23%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      24%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:========>                     29%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    30%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    31%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    32%] [Cov:==============================>    88%][Progress:=========>                    33%] [Cov:==============================>    88%][Progress:=========>                    33%] [Cov:==============================>    88%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:======================>       76%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      77%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      78%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:=======================>      79%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     80%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     81%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     82%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:========================>     83%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    84%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    85%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:=========================>    86%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   87%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   88%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:==========================>   89%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  90%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  91%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  92%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:===========================>  93%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 94%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 95%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:============================> 96%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>97%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>98%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:=============================>99%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%][Progress:==============================100%] [Cov:===============================>   91%]
* Search finished after 101s and 668 generations, 363663 statements, best individual has fitness: 25.0
* Generated before the refinement 27 tests with total length 124
statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", arg2)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", arg4, arg4, 9)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();
localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", label, label, 9);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
        Label label = new Label();
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 6;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Label label = new Label();

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitIincInsn((-4513), (-1669))
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitIincInsn((-4513), (-1669));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitIincInsn(-4513, -1669);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitIincInsn(-4513, -1669), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitIincInsn(-4513, -1669) target is: localVariablesSorter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitIincInsn(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = null;
int _int = null;
((LocalVariablesSorter) _int).visitIincInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitMaxs(2, 5)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitMaxs(2, 5);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitMaxs(2, 5);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitMaxs(2, 5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitMaxs(2, 5) target is: localVariablesSorter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitMaxs(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 2;
int _int = 5;
((LocalVariablesSorter) string).visitMaxs(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(21, 0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(21, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(21, 0);
        // Improved test data:
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(21, 10);// Visits the nth variable on the operand stack (in this case, the 11th) }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(21, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, 0) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
statement is: // Improved test data:
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(21, 10)// Visits the nth variable on the operand stack (in this case, the 11th) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, 10)// Visits the nth variable on the operand stack (in this case, the 11th) }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 10
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 21;
int _int = 0;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 21;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(22, 4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(22, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(ALOAD, 4);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(ALOAD, 4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(ALOAD, 4) target is: localVariablesSorter method is: visitVarInsn(int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitVarInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 4;
int _int = null;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(23, 23)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(6, 23)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(23, 23);
localVariablesSorter.visitVarInsn(6, 23);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(23, 23);
        localVariablesSorter.visitVarInsn(6, 23);
        // Improved test data
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(23, 10);
        localVariablesSorter.visitVarInsn(6, 15);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(23, 23), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(23, 23) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(6, 23), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(6, 23) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitVarInsn(II)V
statement is: // Improved test data
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(23, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(23, 10) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 11
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 11
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(6, 15), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(6, 15) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 11
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 11
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 15;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(54, 0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
localVariablesSorter.visitVarInsn(54, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
        localVariablesSorter.visitVarInsn(54, 10);// Replace 0 with a more descriptive value (e.g., 10) to demonstrate the sorting of local variables. }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(54, 10)// Replace 0 with a more descriptive value (e.g., 10) to demonstrate the sorting of local variables. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(54, 10)// Replace 0 with a more descriptive value (e.g., 10) to demonstrate the sorting of local variables. }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
String string = "n[XZ))JcsboG$?z";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 54;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(55, 1)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(55, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(55, 1);// Changed the primitive value from 55 to 3 (int) and changed the string from "n[XZ))WvcsboG$5m" to "hello world" (String) }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(55, 1)// Changed the primitive value from 55 to 3 (int) and changed the string from "n[XZ))WvcsboG$5m" to "hello world" (String) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(55, 1)// Changed the primitive value from 55 to 3 (int) and changed the string from "n[XZ))WvcsboG$5m" to "hello world" (String) }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))WvcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 55;
int _int = 1;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(56, (-2319))
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(56, (-2319));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(56, 10);// Changed from -2319 to a more descriptive value of 10 }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(56, 10)// Changed from -2319 to a more descriptive value of 10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(56, 10)// Changed from -2319 to a more descriptive value of 10 }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 56;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(57, (-928))
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(57, (-928));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter1 = new LocalVariablesSorter(3034, "Hello World!", methodVisitor);
        localVariablesSorter1.visitVarInsn(57, -100);
        MethodVisitor methodVisitor2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter2 = new LocalVariablesSorter(4034, "Goodbye World!", methodVisitor2);
        localVariablesSorter2.visitVarInsn(57, 100);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter1 = new LocalVariablesSorter(3034, "Hello World!", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter1.visitVarInsn(57, -100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter1.visitVarInsn(57, -100) target is: localVariablesSorter1 method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: MethodVisitor methodVisitor2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter2 = new LocalVariablesSorter(4034, "Goodbye World!", methodVisitor2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter2.visitVarInsn(57, 100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter2.visitVarInsn(57, 100) target is: localVariablesSorter2 method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 10
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 3034;
String string = "Hello World!";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 57;
int _int = null;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 4034;
String string = "Goodbye World!";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 57;
int _int = 100;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.ArrayStatement@c0b0d25d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[1]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        Object[] objectArray = new Object[]{ new Integer(42), new Double(3.14), "Hello, world!" };
        localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[]{ new Integer(42), new Double(3.14), "Hello, world!" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Object[] objectArray = new Object[1] isAssignment: false Array: new Object[]{ new Integer(42), new Double(3.14), "Hello, world!" } Elements: [new Integer(42), new Double(3.14), "Hello, world!"]
lengths: [1] []
statement is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 1 Parameters size() 1 Num of Method Parameters: 5
i 2 Parameters size() 1 Num of Method Parameters: 5
i 3 Parameters size() 1 Num of Method Parameters: 5
i 4 Parameters size() 1 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 0;
int _int = null;
Object[] objectArray = null;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.ArrayStatement@cedde553 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[5]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame(3, 24, arg4, 9, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[5];
localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor);
        Object[] objectArray = new Object[5];
        objectArray[0] = 1;// First element of the array is an integer with value 1

        objectArray[1] = "hello";// Second element of the array is a string with value "hello"

        localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: Object[] objectArray = new Object[5] isAssignment: false Array: new Object[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = 1// First element of the array is an integer with value 1
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:1 Ct is: objectArray[0] = 1// First element of the array is an integer with value 1

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = "hello"// Second element of the array is a string with value "hello"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"hello" Ct is: objectArray[1] = "hello"// Second element of the array is a string with value "hello"

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
Object[] objectArray = new Object[5];
int _int = 3;
int _int = 24;
int _int = 9;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@4797d9f5 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.DOUBLE_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(4, 10)
statement is: org.evosuite.testcase.statements.ArrayStatement@61f77dff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[1]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.DOUBLE_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(4, 10);
        Object[] objectArray = new Object[1];
        objectArray[0] = Double.valueOf(3.14);// Improved test data: using a more descriptive value for the double variable

        localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.DOUBLE_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.DOUBLE_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.DOUBLE_TYPE Type DOUBLE_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.visitVarInsn(4, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(4, 10) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
statement is: Object[] objectArray = new Object[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Object[] objectArray = new Object[1] isAssignment: false Array: new Object[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = Double.valueOf(3.14)// Improved test data: using a more descriptive value for the double variable
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:Double.valueOf(3.14) Ct is: objectArray[0] = Double.valueOf(3.14)// Improved test data: using a more descriptive value for the double variable

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.DOUBLE_TYPE;
((LocalVariablesSorter) _int).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(4, 10)
statement is: org.evosuite.testcase.statements.ArrayStatement@32e82077 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[1]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(4, 10);
        Object[] objectArray = new Object[1];
        objectArray[0] = "This is a long value";// Changed the primitive value to a more descriptive string

        localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.visitVarInsn(4, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(4, 10) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitVarInsn(II)V
statement is: Object[] objectArray = new Object[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Object[] objectArray = new Object[1] isAssignment: false Array: new Object[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = "This is a long value"// Changed the primitive value to a more descriptive string
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"This is a long value" Ct is: objectArray[0] = "This is a long value"// Changed the primitive value to a more descriptive string

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@4eb982e6 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.SHORT_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(4, 10)
statement is: org.evosuite.testcase.statements.ArrayStatement@6dc50c0d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[1]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.SHORT_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(4, 10);
        Object[] objectArray = new Object[1];
        objectArray[0] = new Integer(5);// replace with a more descriptive value

        localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.SHORT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.SHORT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.SHORT_TYPE Type SHORT_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.visitVarInsn(4, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(4, 10) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
statement is: Object[] objectArray = new Object[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Object[] objectArray = new Object[1] isAssignment: false Array: new Object[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = new Integer(5)// replace with a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:new Integer(5) Ct is: objectArray[0] = new Integer(5)// replace with a more descriptive value

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1, objectArray, 0, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter) _int).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

statement is: org.evosuite.testcase.statements.FieldStatement@230e7eea type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.BOOLEAN_TYPE
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", arg2)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: Type type = Type.BOOLEAN_TYPE;
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Type type = Type.getType("java.lang.String");
        MethodAdapter methodAdapter = new MethodAdapter(((MethodVisitor) (null)));
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
        localVariablesSorter.newLocal(type);
    }
}
statement is: Type type = Type.getType("java.lang.String"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getType("java.lang.String") target is: Type method is: getType(java.lang.String)
statement is: MethodAdapter methodAdapter = new MethodAdapter(((MethodVisitor) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
int _int = 8;
String string = "n[XZ))vCsAoG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = null;
((LocalVariablesSorter) string).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@ba0fd8a0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.CHAR_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.CHAR_TYPE;
        localVariablesSorter.newLocal(type);
        // Improved test data:
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.INT_TYPE;
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.CHAR_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.CHAR_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.CHAR_TYPE Type CHAR_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: // Improved test data:
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.INT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.INT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.CHAR_TYPE Type CHAR_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 9
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter) _int).newLocal(type);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter) _int).newLocal(type);

statement is: org.evosuite.testcase.statements.FieldStatement@a2d8bea type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.BYTE_TYPE
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: Type type = Type.BYTE_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Type type = Type.getType(String.class);// Replacing Type.BYTE_TYPE with a more descriptive value

        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", ((MethodVisitor) (null)));
        localVariablesSorter.newLocal(type);
    }
}
statement is: Type type = Type.getType(String.class)// Replacing Type.BYTE_TYPE with a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getType(String.class) target is: Type method is: getType(java.lang.Class)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", ((MethodVisitor) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
String string = "n[XZ))vcsb2c5@BF2m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, (MethodVisitor) null);
Type type = null;
((LocalVariablesSorter) string).newLocal(type);

statement is: org.evosuite.testcase.statements.FieldStatement@79503a9b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.INT_TYPE
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: Type type = Type.INT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Type type = Type.INT_TYPE;
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", ((MethodVisitor) (null)));
        localVariablesSorter.newLocal(type);
        // Improved test data:
        Type type = Type.getType(Integer.class);// Use the Integer class instead of an int primitive

        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", ((MethodVisitor) (null)));
        localVariablesSorter.newLocal(type);// Use the Type class to create a new local variable of type Integer }}

    }
}
statement is: Type type = Type.INT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.INT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.INT_TYPE Type INT_TYPE
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", ((MethodVisitor) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: // Improved test data:
Type type = Type.getType(Integer.class)// Use the Integer class instead of an int primitive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getType(Integer.class) target is: Type method is: getType(java.lang.Class)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", ((MethodVisitor) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocal(type)// Use the Type class to create a new local variable of type Integer }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// Use the Type class to create a new local variable of type Integer }}
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 7
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: Type type = Type.INT_TYPE;
int _int = 6;
String string = "n[XZ))vcsb2c5@BF2zm";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, (MethodVisitor) null);
((LocalVariablesSorter) _int).newLocal(type);
int _int = 6;
String string = "n[XZ))vcsb2c5@BF2zm";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, (MethodVisitor) null);
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1fbf46 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.FLOAT_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.FLOAT_TYPE;
        localVariablesSorter.newLocal(type, 3.14F);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.FLOAT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.FLOAT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.FLOAT_TYPE Type FLOAT_TYPE
statement is: localVariablesSorter.newLocal(type, 3.14F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type, 3.14F) target is: localVariablesSorter method is: newLocal(Type,float)
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
Type type = Type.FLOAT_TYPE;

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2)
statement is: Class<Object> class = Object.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Object>
statement code is: Class<Object> class = Object.class
statement is: getType(Ljava/lang/Class;)Lorg/objectweb/asm/jip/Type; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.getType(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Class<Object> class = Object.class;
Type type = Type.getType(class);
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "myClass", methodVisitor);
        Class<Object> $missing$ = Object.class;
        Type type = Type.getType();
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "myClass", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Class<Object> $missing$ = Object.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Object.class is Object
statement is: Type type = Type.getType(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getType() target is: Type method is: getType()
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "myClass";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = null;
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(24, 6)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.newLocal(type);// local variable 0, type LONG

        localVariablesSorter.newLocal(type);// local variable 1, type LONG

        localVariablesSorter.newLocal(type);// local variable 2, type LONG

        localVariablesSorter.newLocalMapping(type);// local variable 3, type LONG

        localVariablesSorter.visitVarInsn(24, 6);// store value at index 6 into local variable 3 (type LONG)

        localVariablesSorter.newLocal(type);// local variable 4, type LONG

        localVariablesSorter.newLocal(type);// local variable 5, type LONG

        localVariablesSorter.newLocal(type);// local variable 6, type LONG

        localVariablesSorter.newLocalMapping(type);// local variable 7, type LONG

        localVariablesSorter.newLocal(type);// local variable 8, type LONG }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-644, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.newLocal(type)// local variable 0, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 0, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type)// local variable 1, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 1, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type)// local variable 2, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 2, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocalMapping(type)// local variable 3, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type)// local variable 3, type LONG
 target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.visitVarInsn(24, 6)// store value at index 6 into local variable 3 (type LONG)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(24, 6)// store value at index 6 into local variable 3 (type LONG)
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.newLocal(type)// local variable 4, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 4, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type)// local variable 5, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 5, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type)// local variable 6, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 6, type LONG
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocalMapping(type)// local variable 7, type LONG
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type)// local variable 7, type LONG
 target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type)// local variable 8, type LONG }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type)// local variable 8, type LONG }}
 target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
((LocalVariablesSorter) string).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: org.evosuite.testcase.statements.AssignmentStatement@98b00b07 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: localVariablesSorter.nextLocal = 0
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(24, 6)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = 0;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.nextLocal = 0;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.newLocal(type);
        localVariablesSorter.newLocalMapping(type);
        localVariablesSorter.visitVarInsn(24, 6);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.nextLocal = 0, class spoon.support.reflect.code.CtAssignmentImpl
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.newLocalMapping(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type) target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
statement is: localVariablesSorter.visitVarInsn(24, 6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(24, 6) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) _int).newLocal(type);
((LocalVariablesSorter) _int).newLocal(type);
((LocalVariablesSorter) _int).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: org.evosuite.testcase.statements.AssignmentStatement@4740e5b1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: localVariablesSorter.nextLocal = (-1379)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = (-1379);
localVariablesSorter.newLocalMapping(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.nextLocal = -1379;
        localVariablesSorter.newLocalMapping(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-17, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.nextLocal = -1379, class spoon.support.reflect.code.CtAssignmentImpl
statement is: localVariablesSorter.newLocalMapping(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type) target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 2
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: getObjectType(Ljava/lang/String;)Lorg/objectweb/asm/jip/Type; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Type
statement code is: Type objectType = Type.getObjectType("n[$Z))v&bofG$5$")
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", arg2)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("n[$Z))v&bofG$5$");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", methodVisitor);
localVariablesSorter.newLocalMapping(objectType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        Type objectType = Type.getObjectType("java.lang.String");// Changed from "n[$Z))v&bofG$5$" to a more descriptive example of an object type

        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-1095, "]Ljava/lang/String;", methodVisitor);// Changed from "])Z-V\"}5U7#6p@H9)_j" to a more descriptive example of a String object

        localVariablesSorter.newLocalMapping(objectType);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: Type objectType = Type.getObjectType("java.lang.String")// Changed from "n[$Z))v&bofG$5$" to a more descriptive example of an object type
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getObjectType("java.lang.String") target is: Type method is: getObjectType(java.lang.String)
Matched Method is: getObjectType(Ljava/lang/String;)Lorg/objectweb/asm/jip/Type;
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-1095, "]Ljava/lang/String;", methodVisitor)// Changed from "])Z-V\"}5U7#6p@H9)_j" to a more descriptive example of a String object
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocalMapping(objectType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(objectType) target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "java.lang.String";
Type objectType = Type.getObjectType(string);
String string = "]Ljava/lang/String;";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
((LocalVariablesSorter) objectType).newLocalMapping(objectType);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(4, 10)
statement is: org.evosuite.testcase.statements.ArrayStatement@6991fda9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@89028279 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[0] = (Object) "n[XZ)vsoG$5m"
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), 9, arg4, 1733, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
objectArray[0] = (Object) "n[XZ)vsoG$5m";
localVariablesSorter.visitFrame((-1), 9, objectArray, 1733, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
        localVariablesSorter.visitVarInsn(4, 10);
        Object[] objectArray = new Object[3];
        objectArray[0] = ((Object) ("This is a string"));
        localVariablesSorter.visitFrame(-1, 9, objectArray, 1733, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(4, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(4, 10) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitVarInsn(II)V
statement is: Object[] objectArray = new Object[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: Object[] objectArray = new Object[3] isAssignment: false Array: new Object[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = ((Object) ("This is a string")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("This is a string")) Ct is: objectArray[0] = ((Object) ("This is a string"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5d3fcac
statement is: localVariablesSorter.visitFrame(-1, 9, objectArray, 1733, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, 9, objectArray, 1733, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "This is a string"
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 201;
String string = "n[XZ)vsoG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[3];
String string = "This is a string";
int _int = 9;
int _int = 1733;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", arg2)
statement is: setLocalType(ILorg/objectweb/asm/jip/Type;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.setLocalType(1, arg1)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.setLocalType(1, type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        Type type = Type.LONG_TYPE;
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
        localVariablesSorter.setLocalType(1, type);
        // Improved test data:
        LocalVariablesSorter sorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
        sorter.setLocalType(1, INT_TYPE);// Testing with an integer type instead of long }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.setLocalType(1, type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.setLocalType(1, type) target is: localVariablesSorter method is: setLocalType(int,Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: setLocalType(ILorg/objectweb/asm/jip/Type;)V
statement is: // Improved test data:
LocalVariablesSorter sorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: sorter.setLocalType(1, INT_TYPE)// Testing with an integer type instead of long }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: sorter.setLocalType(1, INT_TYPE)// Testing with an integer type instead of long }}
 target is: sorter method is: setLocalType(int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 9
Matched Method is: setLocalType(ILorg/objectweb/asm/jip/Type;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
int _int = 9;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 1;
((LocalVariablesSorter) _int).setLocalType(_int, type);
int _int = 9;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 1;
Type type = null;
((LocalVariablesSorter) _int).setLocalType(_int, type);

* test suite isTestSuite: 54
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();
localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", label, label, 9);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitIincInsn((-4513), (-1669));
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitMaxs(2, 5);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(21, 0);
Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(22, 4);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(23, 23);
localVariablesSorter.visitVarInsn(6, 23);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
localVariablesSorter.visitVarInsn(54, 0);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(55, 1);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(56, (-2319));
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(57, (-928));
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[5];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 15: 
Type type = Type.BOOLEAN_TYPE;
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
localVariablesSorter.newLocal(type);
Test 16: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 17: 
Type type = Type.BYTE_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 18: 
Type type = Type.INT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 19: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Class<Object> class = Object.class;
Type type = Type.getType(class);
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = 0;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = (-1379);
localVariablesSorter.newLocalMapping(type);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("n[$Z))v&bofG$5$");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", methodVisitor);
localVariablesSorter.newLocalMapping(objectType);
Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
objectArray[0] = (Object) "n[XZ)vsoG$5m";
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 9, objectArray, 1733, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.setLocalType(1, type);
Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();

Test 28: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitIincInsn((int) (Integer) null, (int) (Integer) null);

Test 29: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 2;
int _int = 5;
((LocalVariablesSorter) string).visitMaxs(_int, _int);

Test 30: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)10).visitVarInsn(21, 0);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 21;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 31: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 4;
int _int = null;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

Test 32: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 15;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

Test 33: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
((LocalVariablesSorter)10).visitVarInsn(54, 10);

Test 34: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitVarInsn(55, 1);

Test 35: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitVarInsn(56, 10);

Test 36: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 3034;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "Hello World!", methodVisitor);
int _int = 57;
int _int = null;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 4034;
String string = "Goodbye World!";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 57;
int _int = 100;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 37: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 0;
int _int = null;
Object[] objectArray = null;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 38: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Object[] objectArray = new Object[5];
int _int = 3;
int _int = 24;
int _int = 9;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 39: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
((LocalVariablesSorter)2763).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 40: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 41: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter)2763).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 42: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
((LocalVariablesSorter)"n[XZ))vCsAoG$5m").newLocal((Type) null);

Test 43: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter)7).newLocal(type);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter) _int).newLocal(type);

Test 44: 
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
((LocalVariablesSorter)"n[XZ))vcsb2c5@BF2m").newLocal((Type) null);

Test 45: 
Type type = Type.INT_TYPE;
int _int = 6;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
((LocalVariablesSorter)6).newLocal(type);
int _int = 6;
String string = "n[XZ))vcsb2c5@BF2zm";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, (MethodVisitor) null);
((LocalVariablesSorter) _int).newLocal(type);

Test 46: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.FLOAT_TYPE;

Test 47: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "myClass", methodVisitor);
Type type = null;
((LocalVariablesSorter) _int).newLocal(type);

Test 48: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
((LocalVariablesSorter) string).newLocal(type);

Test 49: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter)7).newLocal(type);
((LocalVariablesSorter) _int).newLocal(type);
((LocalVariablesSorter) _int).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 50: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

Test 51: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("java.lang.String");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "]Ljava/lang/String;", (String) methodVisitor, methodVisitor);
((LocalVariablesSorter) objectType).newLocalMapping(objectType);

Test 52: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 201;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
((LocalVariablesSorter)201).visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
int _int = 9;
int _int = 1733;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 53: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
int _int = 9;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)9).setLocalType(1, type);
int _int = 9;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 1;
Type type = null;
((LocalVariablesSorter) _int).setLocalType(_int, type);


* Generated after the refinement and before minimization 54 tests with total length 336
* test suite isTestSuite: 54
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();
localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", label, label, 9);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitIincInsn((-4513), (-1669));
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitMaxs(2, 5);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(21, 0);
Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(22, 4);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(23, 23);
localVariablesSorter.visitVarInsn(6, 23);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
localVariablesSorter.visitVarInsn(54, 0);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(55, 1);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(56, (-2319));
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(57, (-928));
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[5];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 15: 
Type type = Type.BOOLEAN_TYPE;
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
localVariablesSorter.newLocal(type);
Test 16: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 17: 
Type type = Type.BYTE_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 18: 
Type type = Type.INT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 19: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Class<Object> class = Object.class;
Type type = Type.getType(class);
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = 0;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = (-1379);
localVariablesSorter.newLocalMapping(type);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("n[$Z))v&bofG$5$");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", methodVisitor);
localVariablesSorter.newLocalMapping(objectType);
Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
objectArray[0] = (Object) "n[XZ)vsoG$5m";
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 9, objectArray, 1733, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.setLocalType(1, type);
Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();

Test 28: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitIincInsn((int) (Integer) null, (int) (Integer) null);

Test 29: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 2;
int _int = 5;
((LocalVariablesSorter) string).visitMaxs(_int, _int);

Test 30: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)10).visitVarInsn(21, 0);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 10;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 21;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 31: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 4;
int _int = null;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

Test 32: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 23;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodVisitor, methodVisitor);
int _int = 23;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
int _int = 6;
int _int = 15;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);

Test 33: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
((LocalVariablesSorter)10).visitVarInsn(54, 10);

Test 34: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitVarInsn(55, 1);

Test 35: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)7).visitVarInsn(56, 10);

Test 36: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 3034;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "Hello World!", methodVisitor);
int _int = 57;
int _int = null;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 4034;
String string = "Goodbye World!";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 57;
int _int = 100;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 37: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
int _int = 0;
int _int = null;
Object[] objectArray = null;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 38: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Object[] objectArray = new Object[5];
int _int = 3;
int _int = 24;
int _int = 9;
((LocalVariablesSorter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 39: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
((LocalVariablesSorter)2763).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 40: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 41: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 2763;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter)2763).newLocal(type);
int _int = 4;
int _int = 10;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[1];
int _int = 0;
int _int = null;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 42: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
((LocalVariablesSorter)"n[XZ))vCsAoG$5m").newLocal((Type) null);

Test 43: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter)7).newLocal(type);
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter) _int).newLocal(type);

Test 44: 
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
((LocalVariablesSorter)"n[XZ))vcsb2c5@BF2m").newLocal((Type) null);

Test 45: 
Type type = Type.INT_TYPE;
int _int = 6;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
((LocalVariablesSorter)6).newLocal(type);
int _int = 6;
String string = "n[XZ))vcsb2c5@BF2zm";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, (MethodVisitor) null);
((LocalVariablesSorter) _int).newLocal(type);

Test 46: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.FLOAT_TYPE;

Test 47: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "myClass", methodVisitor);
Type type = null;
((LocalVariablesSorter) _int).newLocal(type);

Test 48: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) string).visitVarInsn(_int, _int);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocal(type);
((LocalVariablesSorter) string).newLocalMapping(type);
((LocalVariablesSorter) string).newLocal(type);

Test 49: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 7;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter)7).newLocal(type);
((LocalVariablesSorter) _int).newLocal(type);
((LocalVariablesSorter) _int).newLocalMapping(type);
int _int = 24;
int _int = 6;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 50: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "n[XZ))vcsboG$5m", (String) methodVisitor, methodVisitor);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

Test 51: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("java.lang.String");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "]Ljava/lang/String;", (String) methodVisitor, methodVisitor);
((LocalVariablesSorter) objectType).newLocalMapping(objectType);

Test 52: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
int _int = 201;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
((LocalVariablesSorter)201).visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
int _int = 9;
int _int = 1733;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 53: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
int _int = 9;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
((LocalVariablesSorter)9).setLocalType(1, type);
int _int = 9;
String string = "n[XZ))vcsboG$5m";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodVisitor);
int _int = 1;
Type type = null;
((LocalVariablesSorter) _int).setLocalType(_int, type);


* Minimizing test suite
* test suite isTestSuite: 28
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", methodVisitor);
Label label = new Label();
localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", label, label, 9);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitIincInsn((-4513), (-1669));
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitMaxs(2, 5);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(21, 0);
Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(22, 4);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(23, 23);
localVariablesSorter.visitVarInsn(6, 23);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", methodVisitor);
localVariablesSorter.visitVarInsn(54, 0);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(55, 1);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(56, (-2319));
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(57, (-928));
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(6, 23);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Object[] objectArray = new Object[5];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(3, 24, objectArray, 9, objectArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 15: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), objectArray, 0, objectArray);
Test 16: 
Type type = Type.BOOLEAN_TYPE;
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", methodAdapter);
localVariablesSorter.newLocal(type);
Test 17: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 18: 
Type type = Type.BYTE_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 19: 
Type type = Type.INT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
localVariablesSorter.newLocal(type);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Class<Object> class = Object.class;
Type type = Type.getType(class);
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.newLocal(type);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = 0;
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocal(type);
localVariablesSorter.newLocalMapping(type);
localVariablesSorter.visitVarInsn(24, 6);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", methodVisitor);
Type type = Type.LONG_TYPE;
localVariablesSorter.nextLocal = (-1379);
localVariablesSorter.newLocalMapping(type);
Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type objectType = Type.getObjectType("n[$Z))v&bofG$5$");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", methodVisitor);
localVariablesSorter.newLocalMapping(objectType);
Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", methodVisitor);
localVariablesSorter.visitVarInsn(4, 10);
Object[] objectArray = new Object[3];
objectArray[0] = (Object) "n[XZ)vsoG$5m";
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 9, objectArray, 1733, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type type = Type.LONG_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", methodVisitor);
localVariablesSorter.setLocalType(1, type);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 87
* Number of covered goals: 78
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 110
* Number of covered goals: 104
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 83%
* Total number of goals: 6
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 87
* Number of covered goals: 78
* Generated 28 tests with total length 127
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsboG$5m", arg2);
Label arg4 = new Label();
localVariablesSorter.visitLocalVariable("RZG\"x:lcFA>", "H)C;#a{o0/`ad,-", "n[XZ))vcsboG$5m", arg4, arg4, 9);

** It was a parseable test case! 
refined test name is: testsortinglocalvariables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitIincInsn((-4513), (-1669));

** It was a parseable test case! 
refined test name is: testVisitIincInsnThrowsOnNegativeIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitMaxs(2, 5);

** It was a parseable test case! 
refined test name is: testVisitMaxs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(21, 0);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(22, 4);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(23, 23);
localVariablesSorter.visitVarInsn(6, 23);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
refined test name is: testVisitVarInsnWithCorrectOpcodeAndIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "n[XZ))JcsboG$?z", arg2);
localVariablesSorter.visitVarInsn(54, 0);

** It was a parseable test case! 
refined test name is: testSortLocalVariablesUpdatesStackMapFrame
* Compiling Tests
refined test name is: testSortsLocalVariables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))WvcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(55, 1);

** It was a parseable test case! 
refined test name is: testSortAndVisitLocalVariables
* Compiling Tests
refined test name is: testVisitVarInsnForFirstVariableName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(56, (-2319));

** It was a parseable test case! 
refined test name is: testMethodReturnsCorrectString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(57, (-928));

** It was a parseable test case! 
refined test name is: testVisitVarInsnWithOpcodeAndVariableIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.visitVarInsn(6, 23);

** It was a parseable test case! 
refined test name is: testAddVariableToVisitedVariables
* Compiling Tests
refined test name is: testAddVariableToVisitedVariablesList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
Object[] arg4 = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4);
assertEquals(1, arg4.length);


** It was a parseable test case! 
refined test name is: testVisitFrameHandlesNegativeFrameTypeAndCount
* Compiling Tests
refined test name is: testVisitFrameWithNegativeParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-644), "n[XZ))vcsboG$5m", arg2);
Object[] arg4 = new Object[5];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(3, 24, arg4, 9, arg4);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithIncorrectNumberOfLocals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.LONG_TYPE;
localVariablesSorter.newLocal(arg0);
localVariablesSorter.visitVarInsn(4, 10);
Object[] arg4 = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4);
assertEquals(1, arg4.length);


** It was a parseable test case! 
refined test name is: testNewLocalWithCorrectType
* Compiling Tests
refined test name is: testNewLocalAndVisitVarInsnWithCorrectArgumentType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(arg0);
localVariablesSorter.visitVarInsn(4, 10);
Object[] arg4 = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4);
assertEquals(1, arg4.length);


** It was a parseable test case! 
refined test name is: testNewLocalVariable
* Compiling Tests
refined test name is: testNewLocalVariableDouble
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2763, "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.SHORT_TYPE;
localVariablesSorter.newLocal(arg0);
localVariablesSorter.visitVarInsn(4, 10);
Object[] arg4 = new Object[1];
localVariablesSorter.visitFrame((-1), (-1), arg4, 0, arg4);
assertEquals(1, arg4.length);


** It was a parseable test case! 
refined test name is: testLocalVariablesSorter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Type arg0 = Type.BOOLEAN_TYPE;
MethodAdapter arg2 = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(8, "n[XZ))vCsAoG$5m", arg2);
int newLocal = localVariablesSorter.newLocal(arg0);
assertEquals(2, newLocal);


** It was a parseable test case! 
refined test name is: testCreateNewLocalVariableWithCorrectIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.CHAR_TYPE;
int newLocal = localVariablesSorter.newLocal(arg0);
assertEquals(3, newLocal);


** It was a parseable test case! 
refined test name is: testNewLocalWithCharType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Type arg0 = Type.BYTE_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "n[XZ))vcsb2c5@BF2m", (MethodVisitor) null);
int newLocal = localVariablesSorter.newLocal(arg0);
assertEquals(3, newLocal);


** It was a parseable test case! 
refined test name is: testNewLocalVariableCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Type arg0 = Type.INT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(6, "n[XZ))vcsb2c5@BF2zm", (MethodVisitor) null);
int newLocal = localVariablesSorter.newLocal(arg0);
assertEquals(3, newLocal);


** It was a parseable test case! 
refined test name is: testNewLocalVariableHasExpectedIndexValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.FLOAT_TYPE;
int newLocal = localVariablesSorter.newLocal(arg0);
assertEquals(2, newLocal);


** It was a parseable test case! 
refined test name is: testNewLocal
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(7, "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.LONG_TYPE;
localVariablesSorter.nextLocal = 0;
localVariablesSorter.newLocal(arg0);
localVariablesSorter.newLocal(arg0);
localVariablesSorter.newLocalMapping(arg0);
localVariablesSorter.visitVarInsn(24, 6);

** It was a parseable test case! 
refined test name is: testVisitVarInsnWithLocalVariable
* Compiling Tests
refined test name is: testVisitVarInsnWithLocalVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-17), "n[XZ))vcsboG$5m", arg2);
Type arg0 = Type.LONG_TYPE;
localVariablesSorter.nextLocal = (-1379);
int newLocalMapping = localVariablesSorter.newLocalMapping(arg0);
assertEquals((-1379), newLocalMapping);


** It was a parseable test case! 
refined test name is: testNewLocalMappingReturnsCorrectValueForLongType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type arg0 = Type.getObjectType("n[$Z))v&bofG$5$");
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1095), "])Z-V\"}5U7#6p@H9)_j", arg2);
int newLocalMapping = localVariablesSorter.newLocalMapping(arg0);
assertEquals(0, newLocalMapping);


** It was a parseable test case! 
refined test name is: testNewLocalMapping
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(201, "n[XZ)vsoG$5m", arg2);
localVariablesSorter.visitVarInsn(4, 10);
Object[] arg4 = new Object[3];
arg4[0] = (Object) "n[XZ)vsoG$5m";
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 9, arg4, 1733, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testInvalidFrameTypeThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg2 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
Type arg1 = Type.LONG_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(9, "n[XZ))vcsboG$5m", arg2);
localVariablesSorter.setLocalType(1, arg1);
assertEquals(2, arg1.getSize());


** It was a parseable test case! 
refined test name is: testSetLocalTypesetsLocalVariableType
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:56.006 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:56.127 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:56.225 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.227 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:56.325 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:56.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:56.420 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.422 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:56.523 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.526 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:56.623 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:56.629 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:56.740 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:56.742 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:56.856 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:56.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:57.180 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:57.182 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:57.284 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:57.287 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:57.390 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:57.392 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:57.500 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:57.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:57.607 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:57.610 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:57.729 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:57.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:57.836 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:57.838 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:57.916 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:57.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.002 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.085 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.169 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.261 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:58.263 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:29:58.358 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.449 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
[MASTER] 02:29:58.541 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:58.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.631 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:58.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.732 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:29:58.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
** Write a test suite: 7 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
** Write a test suite: 11 called: 4 to improve: false
** Write a test suite: 13 called: 5 to improve: false
** Write a test suite: 14 called: 6 to improve: false
** Write a test suite: 21 called: 7 to improve: false
[MASTER] 02:29:59.102 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:59.104 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
** Write a test suite: 14 called: 3 to improve: false
** Write a test suite: 15 called: 4 to improve: false
** Write a test suite: 18 called: 5 to improve: false
** Write a test suite: 19 called: 6 to improve: false
** Write a test suite: 20 called: 7 to improve: false
[MASTER] 02:29:59.455 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3512909257278001403.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:29:59.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3512909257278001403.jar
* Writing tests to file
* Writing JUnit test case 'LocalVariablesSorter_ESTest' to evosuite-tests
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
** Write a test suite: 14 called: 3 to improve: false
** Write a test suite: 15 called: 4 to improve: false
** Write a test suite: 18 called: 5 to improve: false
** Write a test suite: 19 called: 6 to improve: false
** Write a test suite: 20 called: 7 to improve: false
* Done!

* Computation finished
