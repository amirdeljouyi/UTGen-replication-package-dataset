* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.MethodWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 4597
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.MethodWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2786
* Using seed 1710225707188
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 320 / 2786
[Progress:>                             0%] [Cov:=>                                 4%][Progress:>                             1%] [Cov:===>                               10%][Progress:===>                          12%] [Cov:====>                              14%][Progress:===>                          12%] [Cov:=======>                           21%][Progress:===>                          13%] [Cov:=========>                         26%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:===========>                       34%][Progress:===>                          13%] [Cov:=============>                     39%][Progress:====>                         14%] [Cov:==============>                    40%][Progress:====>                         14%] [Cov:==============>                    42%][Progress:====>                         14%] [Cov:===============>                   44%][Progress:====>                         15%] [Cov:===============>                   44%][Progress:====>                         15%] [Cov:===============>                   44%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:================>                  47%][Progress:======>                       20%] [Cov:================>                  48%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:========>                     27%] [Cov:=================>                 51%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               56%][Progress:========>                     29%] [Cov:===================>               56%][Progress:========>                     29%] [Cov:===================>               56%][Progress:========>                     29%] [Cov:===================>               56%][Progress:========>                     29%] [Cov:===================>               56%][Progress:=========>                    30%] [Cov:===================>               56%][Progress:=========>                    30%] [Cov:===================>               57%][Progress:=========>                    30%] [Cov:===================>               57%][Progress:=========>                    30%] [Cov:===================>               57%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:=====================>             60%][Progress:==========>                   36%] [Cov:=====================>             60%][Progress:==========>                   36%] [Cov:=====================>             60%][Progress:==========>                   36%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                46%] [Cov:=====================>             61%][Progress:=============>                46%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:==================>           61%] [Cov:=====================>             62%][Progress:==================>           61%] [Cov:=====================>             62%][Progress:==================>           62%] [Cov:=====================>             62%][Progress:==================>           62%] [Cov:=====================>             62%][Progress:==================>           62%] [Cov:=====================>             62%][Progress:==================>           63%] [Cov:=====================>             62%][Progress:==================>           63%] [Cov:=====================>             62%][Progress:==================>           63%] [Cov:=====================>             62%][Progress:==================>           63%] [Cov:======================>            63%][Progress:==================>           63%] [Cov:======================>            63%][Progress:==================>           63%] [Cov:======================>            63%][Progress:===================>          64%] [Cov:======================>            63%][Progress:===================>          64%] [Cov:======================>            63%][Progress:===================>          64%] [Cov:======================>            63%][Progress:===================>          64%] [Cov:======================>            63%][Progress:===================>          64%] [Cov:======================>            63%][Progress:===================>          65%] [Cov:======================>            63%][Progress:===================>          65%] [Cov:======================>            63%][Progress:===================>          65%] [Cov:======================>            63%][Progress:===================>          65%] [Cov:======================>            63%][Progress:===================>          65%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            64%][Progress:=========================>    84%] [Cov:======================>            64%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           68%][Progress:============================> 94%] [Cov:=======================>           68%][Progress:============================> 94%] [Cov:=======================>           68%][Progress:============================> 94%] [Cov:=======================>           68%][Progress:============================> 94%] [Cov:=======================>           68%][Progress:============================> 94%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:=======================>           68%][Progress:=============================>97%] [Cov:=======================>           68%][Progress:=============================>97%] [Cov:=======================>           68%][Progress:==============================100%] [Cov:=======================>           68%]
* Search finished after 103s and 217 generations, 199708 statements, best individual has fitness: 1093.0
* Generated before the refinement 108 tests with total length 594
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-35))
statement is: org.evosuite.testcase.statements.ArrayStatement@41f2b412 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "10", "\"Hello World\"", "\"Hello World\"", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "10", "\"Hello World\"", "\"Hello World\"", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "10";
String string = "\"Hello World\"";
String string = "\"Hello World\"";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@9003e4c1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e1beeee7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@781f0bbf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@6d530106 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc11c9a0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@d6379548 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b78d2c3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "}\"|H"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e2f03356 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@5e0f5d29 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg5, false, false)
statement is: visitCode()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitCode()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "Hello, world!";
        stringArray[1] = "This is a sample string.";
        stringArray[2] = "The quick brown fox jumps over the lazy dog.";
        stringArray[3] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        stringArray[4] = "abcdefghijklmnopqrstuvwxyz";
        stringArray[5] = "1234567890";
        stringArray[6] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~";
        stringArray[7] = "This is a test string with various characters.";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
        methodWriter.visitCode();
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ad559cd4
statement is: stringArray[1] = "This is a sample string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string." Ct is: stringArray[1] = "This is a sample string."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dc2d0a44
statement is: stringArray[2] = "The quick brown fox jumps over the lazy dog.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog." Ct is: stringArray[2] = "The quick brown fox jumps over the lazy dog."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@746e49da
statement is: stringArray[3] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABCDEFGHIJKLMNOPQRSTUVWXYZ" Ct is: stringArray[3] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@17854360
statement is: stringArray[4] = "abcdefghijklmnopqrstuvwxyz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abcdefghijklmnopqrstuvwxyz" Ct is: stringArray[4] = "abcdefghijklmnopqrstuvwxyz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@807ce4a8
statement is: stringArray[5] = "1234567890", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"1234567890" Ct is: stringArray[5] = "1234567890"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@46e50c88
statement is: stringArray[6] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~" Ct is: stringArray[6] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@430ebb8
statement is: stringArray[7] = "This is a test string with various characters.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string with various characters." Ct is: stringArray[7] = "This is a test string with various characters."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@79cdad9f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitCode() target is: methodWriter method is: visitCode()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 15
Matched Method is: visitCode()V
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: String string = "This is a sample string."
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog."
* this is vulnerable: String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
* this is vulnerable: String string = "abcdefghijklmnopqrstuvwxyz"
* this is vulnerable: String string = "1234567890"
* this is vulnerable: String string = "!@#$%^&*()_+-=[]{}|;':\"<>,./?`~"
* this is vulnerable: String string = "This is a test string with various characters."
TestCase is: String[] stringArray = new String[8];
String string = "Hello, world!";
String string = "This is a sample string.";
String string = "The quick brown fox jumps over the lazy dog.";
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String string = "abcdefghijklmnopqrstuvwxyz";
String string = "1234567890";
String string = "!@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
String string = "This is a test string with various characters.";
int _int = 0;
String string = "";
String string = "";
String string = "}\"|H";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitCode();

statement is: org.evosuite.testcase.statements.ArrayStatement@f636aff9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: writeShort([BII)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.writeShort(arg0, (byte) (-1), (byte) (-108))
test data is: byte[] byteArray = new byte[2];
MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        MethodWriter.writeShort(byteArray, ((byte) (100)), ((byte) (-108)));
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: MethodWriter.writeShort(byteArray, ((byte) (100)), ((byte) (-108))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.writeShort(byteArray, ((byte) (100)), ((byte) (-108))) target is: MethodWriter method is: writeShort(byte[],byte,byte)
Matched Method is: writeShort([BII)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[2];
int _int = 100;
byte _byte = null;
MethodWriter.writeShort(byteArray, _int, _byte);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@ad22e6fc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ec2d4ff8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@4a02d7fc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@7ee87b15 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@b28124e7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@c6968784 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@b64067b3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "}\"|H"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ab032c95 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1f4f0a23 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg5, false, false)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "https://www.example1.com";// URL for a website

        stringArray[1] = "https://www.example2.com";// Another URL for a different website

        stringArray[2] = "https://www.example3.com";// A third URL for yet another website

        stringArray[3] = "https://www.example4.com";// Fourth URL for a fourth website

        stringArray[4] = "https://www.example5.com";// Fifth URL for a fifth website

        stringArray[5] = "}\"|H";// The last URL in the array

        stringArray[6] = "Some text that describes the method being tested";// A description of the method being tested

        stringArray[7] = "Another piece of text that provides more information about the method";// More detailed information about the method

        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
        methodWriter.visitEnd();
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "https://www.example1.com"// URL for a website
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example1.com" Ct is: stringArray[0] = "https://www.example1.com"// URL for a website

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4053485b
statement is: stringArray[1] = "https://www.example2.com"// Another URL for a different website
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example2.com" Ct is: stringArray[1] = "https://www.example2.com"// Another URL for a different website

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9710321a
statement is: stringArray[2] = "https://www.example3.com"// A third URL for yet another website
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example3.com" Ct is: stringArray[2] = "https://www.example3.com"// A third URL for yet another website

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5e13cf7e
statement is: stringArray[3] = "https://www.example4.com"// Fourth URL for a fourth website
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example4.com" Ct is: stringArray[3] = "https://www.example4.com"// Fourth URL for a fourth website

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c5cd356c
statement is: stringArray[4] = "https://www.example5.com"// Fifth URL for a fifth website
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"https://www.example5.com" Ct is: stringArray[4] = "https://www.example5.com"// Fifth URL for a fifth website

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1c7a6b42
statement is: stringArray[5] = "}\"|H"// The last URL in the array
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"}\"|H" Ct is: stringArray[5] = "}\"|H"// The last URL in the array

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@654f10aa
statement is: stringArray[6] = "Some text that describes the method being tested"// A description of the method being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Some text that describes the method being tested" Ct is: stringArray[6] = "Some text that describes the method being tested"// A description of the method being tested

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aaa60ff4
statement is: stringArray[7] = "Another piece of text that provides more information about the method"// More detailed information about the method
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another piece of text that provides more information about the method" Ct is: stringArray[7] = "Another piece of text that provides more information about the method"// More detailed information about the method

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@93be0abd
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitEnd() target is: methodWriter method is: visitEnd()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 15
Matched Method is: visitEnd()V
* this is vulnerable: String string = "https://www.example1.com"
* this is vulnerable: String string = "https://www.example2.com"
* this is vulnerable: String string = "https://www.example3.com"
* this is vulnerable: String string = "https://www.example4.com"
* this is vulnerable: String string = "https://www.example5.com"
* this is vulnerable: String string = "}\"|H"
* this is vulnerable: String string = "Some text that describes the method being tested"
* this is vulnerable: String string = "Another piece of text that provides more information about the method"
TestCase is: String[] stringArray = new String[8];
String string = "https://www.example1.com";
String string = "https://www.example2.com";
String string = "https://www.example3.com";
String string = "https://www.example4.com";
String string = "https://www.example5.com";
String string = "}\"|H";
String string = "Some text that describes the method being tested";
String string = "Another piece of text that provides more information about the method";
int _int = 0;
String string = "";
String string = "";
String string = "}\"|H";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitEnd();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@d0939fa9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", arg5, true, false)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", arg5, false, false)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "parameterTypes", "returnType", "exceptions", stringArray, true, false);
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "methodName", "parameterTypes", "returnType", "exceptions", stringArray, false, false);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "parameterTypes", "returnType", "exceptions", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "methodName", "parameterTypes", "returnType", "exceptions", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[0];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, doubleValue, stringValue, charValue, boolValue);
        Label label = new Label();
        methodWriter.visitLabel(label);
        // Improved test data:
        int primitiveValue = 10;
        double doubleValue = 3.14;
        String stringValue = "This is a test string";
        char charValue = 'a';
        boolean boolValue = true;
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, doubleValue, stringValue, charValue, boolValue), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
statement is: // Improved test data:
int primitiveValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean boolValue = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: Label label = new Label();
int _int = 10;
double _double = 3.14;
String string = "This is a test string";
char _char = 'a';
boolean _boolean = true;

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.evosuite.testcase.statements.ArrayStatement@f14ef49b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@41a77711 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "<init>"
statement is: org.evosuite.testcase.statements.AssignmentStatement@99e7a168 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "$)&dB /)d<!y"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 78, "<init>", "$)&dB /)d<!y", (String) null, arg5, false, true)
test data is: ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Constructor";
        stringArray[1] = "methodName(param1, param2)";
        MethodWriter methodWriter = new MethodWriter(classWriter, 78, "Constructor", "methodName(param1, param2)", ((String) (null)), stringArray, false, true);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Constructor", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Constructor" Ct is: stringArray[0] = "Constructor"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9c6d8417
statement is: stringArray[1] = "methodName(param1, param2)", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName(param1, param2)" Ct is: stringArray[1] = "methodName(param1, param2)"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@78bb001d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 78, "Constructor", "methodName(param1, param2)", ((String) (null)), stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "Constructor"
* this is vulnerable: String string = "methodName(param1, param2)"
TestCase is: String[] stringArray = new String[2];
String string = "Constructor";
String string = "methodName(param1, param2)";
int _int = 78;
String string = "Constructor";
String string = "methodName(param1, param2)";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@14ae3e52 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("<_#07X[i@0", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello World", "Goodbye", "Testing" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
        methodWriter.visitAnnotation("<_#07X[i@0", true);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "Hello World", "Goodbye", "Testing" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello World", "Goodbye", "Testing" } Elements: ["Hello World", "Goodbye", "Testing"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("<_#07X[i@0", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("<_#07X[i@0", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 24117248;
String string = "LocalVariableTable";
String string = "In0[Jm";
String string = "LocalVariableTable";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "<_#07X[i@0";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@724af9b4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@58d51c3b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@851789ec type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ljava/lang/Synthetic;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", arg5, false, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitParameterAnnotation = (AnnotationWriter)methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Object;";
        stringArray[1] = "Ljava/lang/Integer;";
        MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/String;", "Ljava/lang/StringBuilder;", "Ljava/lang/StringBuffer;", stringArray, false, false);
        methodWriter.visitParameterAnnotation(2, "Ljava/lang/Integer;", false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Object;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Object;" Ct is: stringArray[0] = "Ljava/lang/Object;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f677a271
statement is: stringArray[1] = "Ljava/lang/Integer;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Integer;" Ct is: stringArray[1] = "Ljava/lang/Integer;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@31ca8cc3
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/String;", "Ljava/lang/StringBuilder;", "Ljava/lang/StringBuffer;", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(2, "Ljava/lang/Integer;", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(2, "Ljava/lang/Integer;", false) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
* this is vulnerable: String string = "Ljava/lang/Object;"
* this is vulnerable: String string = "Ljava/lang/Integer;"
TestCase is: String[] stringArray = new String[2];
String string = "Ljava/lang/Object;";
String string = "Ljava/lang/Integer;";
int _int = 136;
String string = "Ljava/lang/String;";
String string = "Ljava/lang/StringBuilder;";
String string = "Ljava/lang/StringBuffer;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
String string = "Ljava/lang/Integer;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@e531e7ba type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("ocaVariableTabe")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@4f7fee1f type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
        Attribute attribute = new Attribute("ocaVariableTabe");
        methodWriter.visitAttribute(attribute);
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("ocaVariableTabe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "ocaVariableTabe";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@908111d0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, true)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 265, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
        methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 265, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 265, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 2;
int _int = 265;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(11)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false);
        methodWriter.visitFrame(-1, 1, new Object[]{ new Integer(42) }, 1, new Object[]{ new Double(3.14) });
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(-1, 1, new Object[]{ new Integer(42) }, 1, new Object[]{ new Double(3.14) }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, 1, new Object[]{ new Integer(42) }, 1, new Object[]{ new Double(3.14) }) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
TestCase is: int _int = 16777220;
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false);// This line creates a new instance of the MethodWriter class with an integer parameter value of 2. The parameter value represents the flags for the method writer.

        methodWriter.visitFrame(2, 1, ((Object[]) (null)), 2, ((Object[]) (null)));// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing.

        methodWriter.visitFrame(2, 2, ((Object[]) (null)), 1, ((Object[]) (null)));// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing. }}

    }
}
statement is: methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false)// This line creates a new instance of the MethodWriter class with an integer parameter value of 2. The parameter value represents the flags for the method writer.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitFrame(2, 1, ((Object[]) (null)), 2, ((Object[]) (null)))// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1, ((Object[]) (null)), 2, ((Object[]) (null)))// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing.
 target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
statement is: methodWriter.visitFrame(2, 2, ((Object[]) (null)), 1, ((Object[]) (null)))// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 2, ((Object[]) (null)), 1, ((Object[]) (null)))// This line uses the visitFrame method to create a frame object with two parameters: the first is an integer representing the type of frame and the second is an integer representing the flags for the frame. The method returns nothing. }}
 target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@89ecada6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dc73ab54 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/SyntCetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b0a769a5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "In0[Jm"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 2, arg4, 17, arg4)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(16777217, 1)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 57, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/String;";
        stringArray[1] = "Hello, world!";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|W", "$)&dB /)d<!y", ((String) (null)), stringArray, true, false);
        methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
        methodWriter.visitIntInsn(16777217, 1);
        methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/String;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/String;" Ct is: stringArray[0] = "Ljava/lang/String;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1ffdcca5
statement is: stringArray[1] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[1] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a5708ca4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|W", "$)&dB /)d<!y", ((String) (null)), stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 2, stringArray, 17, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 2, stringArray, 17, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.visitIntInsn(16777217, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(16777217, 1) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIntInsn(II)V
statement is: methodWriter.visitFrame(1, 57, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 57, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/String;";
String string = "Hello, world!";
String string = "wq6p-|W";
String string = "$)&dB /)d<!y";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, false);
int _int = 2;
int _int = 2;
int _int = 17;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 16777217;
int _int = 1;
((MethodWriter) string).visitIntInsn(_int, _int);
int _int = 1;
int _int = 57;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1936735951))
statement is: org.evosuite.testcase.statements.ArrayStatement@55ea78db type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, 2, arg2, 26, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Test", "Data" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", ((String[]) (null)), false, false);
        methodWriter.visitFrame(0, 2, stringArray, 26, ((Object[]) (null)));
    }
}
statement is: String[] stringArray = new String[]{ "Test", "Data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Test", "Data" } Elements: ["Test", "Data"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, 2, stringArray, 26, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, 2, stringArray, 26, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: int _int = 2;
String string = "fvgmumC";
String string = "fvgmumC";
String string = "fvgmumC";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 0;
int _int = 2;
int _int = 26;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -1, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", ((String[]) (null)), false, false);
        methodWriter.visitFrame(3, -959, new Object[]{ new Integer(42), new Double(Math.PI), "Hello World" }, -959, new Object[]{ new Integer(100), new Double(Math.E), "Goodbye World" });
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(3, -959, new Object[]{ new Integer(42), new Double(Math.PI), "Hello World" }, -959, new Object[]{ new Integer(100), new Double(Math.E), "Goodbye World" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, -959, new Object[]{ new Integer(42), new Double(Math.PI), "Hello World" }, -959, new Object[]{ new Integer(100), new Double(Math.E), "Goodbye World" }) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 1 Parameters size() 1 Num of Method Parameters: 5
i 2 Parameters size() 1 Num of Method Parameters: 5
i 3 Parameters size() 1 Num of Method Parameters: 5
i 4 Parameters size() 1 Num of Method Parameters: 5
TestCase is: String string = "}@<>($IT^";
String string = "}@<>($IT^";
String string = "}@<>($IT^";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, false);
int _int = 3;
int _int = null;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", ((String[]) (null)), false, false);
        methodWriter.visitFrame(4, 4, new Object[]{ new Integer(1), new Double(3.14), "Hello World!", new Character('A') }, 4, new Object[]{ new Integer(2), new Double(6.28), "Goodbye World!", new Character('B') });
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(4, 4, new Object[]{ new Integer(1), new Double(3.14), "Hello World!", new Character('A') }, 4, new Object[]{ new Integer(2), new Double(6.28), "Goodbye World!", new Character('B') }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(4, 4, new Object[]{ new Integer(1), new Double(3.14), "Hello World!", new Character('A') }, 4, new Object[]{ new Integer(2), new Double(6.28), "Goodbye World!", new Character('B') }) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: int _int = 2;
String string = "}@<>($IT^";
String string = "}@<>($IT^";
String string = "}@<>($IT^";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 4;
int _int = 4;
int _int = 4;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@1b639886 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8a9354f8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d7f3a27 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@344e9a96 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a91ae4eb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1d19440a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a87170f9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "}\"|H"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f363fc02 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@2763e679 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, (-1170), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "Hello, world!";
        stringArray[1] = "This is a sample message.";
        stringArray[2] = "The quick brown fox jumps over the lazy dog.";
        stringArray[3] = "The five boxing wizards jumped over the 50 lazy cats.";
        stringArray[4] = "How many legs does a cat have?";
        stringArray[5] = "Five!";
        stringArray[6] = "The answer is obvious.";
        stringArray[7] = "";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
        methodWriter.visitFrame(0, -1170, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@648462a2
statement is: stringArray[1] = "This is a sample message.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample message." Ct is: stringArray[1] = "This is a sample message."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@25e64b59
statement is: stringArray[2] = "The quick brown fox jumps over the lazy dog.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog." Ct is: stringArray[2] = "The quick brown fox jumps over the lazy dog."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c57cb0b3
statement is: stringArray[3] = "The five boxing wizards jumped over the 50 lazy cats.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The five boxing wizards jumped over the 50 lazy cats." Ct is: stringArray[3] = "The five boxing wizards jumped over the 50 lazy cats."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2e7cfde0
statement is: stringArray[4] = "How many legs does a cat have?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"How many legs does a cat have?" Ct is: stringArray[4] = "How many legs does a cat have?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@214563ae
statement is: stringArray[5] = "Five!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Five!" Ct is: stringArray[5] = "Five!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c1799380
statement is: stringArray[6] = "The answer is obvious.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The answer is obvious." Ct is: stringArray[6] = "The answer is obvious."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@934f8950
statement is: stringArray[7] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[7] = ""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9db65cdc
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, -1170, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, -1170, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 15
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: String string = "This is a sample message."
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog."
* this is vulnerable: String string = "The five boxing wizards jumped over the 50 lazy cats."
* this is vulnerable: String string = "How many legs does a cat have?"
* this is vulnerable: String string = "Five!"
* this is vulnerable: String string = "The answer is obvious."
* this is vulnerable: String string = ""
TestCase is: String[] stringArray = new String[8];
String string = "Hello, world!";
String string = "This is a sample message.";
String string = "The quick brown fox jumps over the lazy dog.";
String string = "The five boxing wizards jumped over the 50 lazy cats.";
String string = "How many legs does a cat have?";
String string = "Five!";
String string = "The answer is obvious.";
String string = "";
int _int = 0;
String string = "";
String string = "";
String string = "}\"|H";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 0;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@d9872fce type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, (-3295), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "addTwoNumbers", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        methodWriter.visitFrame(1, -3295, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "addTwoNumbers", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, -3295, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, -3295, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(2)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false);
        methodWriter.visitInsn(10);// instead of 2 }}

    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(10)// instead of 2 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(10)// instead of 2 }}
 target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitInsn(I)V
TestCase is: int _int = 2;
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 10;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@6b5c9b62 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(188)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
        methodWriter.visitInsn(188);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(188), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(188) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitInsn(I)V
TestCase is: String string = "Code";
String[] stringArray = "Zyd<@2x=DrGp)T~h7";
String string = "Zyd<@2x=DrGp)T~h7";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, false);
int _int = 188;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@1ad55831 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(177)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };// Improved test data: added more descriptive and representative values for the string array.

        MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
        methodWriter.visitInsn(177);// Improved test data: changed the primitive value from 177 to a more descriptive and representative value (such as -3). }}

    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }// Improved test data: added more descriptive and representative values for the string array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(177)// Improved test data: changed the primitive value from 177 to a more descriptive and representative value (such as -3). }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(177)// Improved test data: changed the primitive value from 177 to a more descriptive and representative value (such as -3). }}
 target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitInsn(I)V
TestCase is: String string = "Code";
String[] stringArray = "Zyd<@2x=DrGp)T~h7";
String string = "Zyd<@2x=DrGp)T~h7";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 177;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@fb85de48 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "additionOperation", "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitInsn(1);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "additionOperation", "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(1) target is: methodWriter method is: visitInsn(int)
TestCase is: String[] stringArray = new String[0];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn((-147), (-147))
test data is: ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, "MyMethod", "my_method.class", "bIzxa2", ((String[]) (null)), false, false);
        methodWriter.visitIntInsn(-147, -147);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, "MyMethod", "my_method.class", "bIzxa2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(-147, -147), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(-147, -147) target is: methodWriter method is: visitIntInsn(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(930)
statement is: org.evosuite.testcase.statements.ArrayStatement@81920694 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", arg5, true, true)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(240, 932)
test data is: ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
methodWriter.visitIntInsn(240, 932);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "A", "B", "C" };// Improved test data: more descriptive and representative of the situation being tested

        MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
        methodWriter.visitIntInsn(240, 932);
    }
}
statement is: String[] stringArray = new String[]{ "A", "B", "C" }// Improved test data: more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "A", "B", "C" } Elements: ["A", "B", "C"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(240, 932), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(240, 932) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
TestCase is: int _int = 240;
String string = "HPnlm";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "dGOz~%X?SN!p7Am";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 240;
int _int = 932;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@4b2dc96f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht")
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(2, (-410))
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "subtract", "multiply", "divide", stringArray, true, false);
        methodWriter.visitMethodInsn(59, "ArithmeticCalculator", "add", "(II)I");
        methodWriter.visitIntInsn(2, 10);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "subtract", "multiply", "divide", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(59, "ArithmeticCalculator", "add", "(II)I"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(59, "ArithmeticCalculator", "add", "(II)I") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
statement is: methodWriter.visitIntInsn(2, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(2, 10) target is: methodWriter method is: visitIntInsn(int,int)
TestCase is: String[] stringArray = new String[0];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@8d79fb03 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(17, 560)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitIntInsn(17, 560);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(17, 560), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(17, 560) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
TestCase is: int _int = 2;
String string = "2+Bl[)4c_6+ |~_z/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 17;
int _int = 560;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@1694e831 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(169, (-2153))
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        stringArray = new String[0];
        methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitVarInsn(169, -2153);
    }
}
statement is: stringArray = new String[0], class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitVarInsn(169, -2153), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(169, -2153) target is: methodWriter method is: visitVarInsn(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String[]) null, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(7, 1)
test data is: ClassWriter classWriter = new ClassWriter(7);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String[]) null, true, false);
methodWriter.visitVarInsn(7, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "calculateSum", "(II)I", "return arg1 + arg2;", ((String[]) (null)), true, false);
        methodWriter.visitVarInsn(7, 1);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "calculateSum", "(II)I", "return arg1 + arg2;", ((String[]) (null)), true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(7, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(7, 1) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitVarInsn(II)V
TestCase is: int _int = 1;
String string = "calculateSum";
String string = "(II)I";
String string = "return arg1 + arg2;";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 7;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(57)
statement is: org.evosuite.testcase.statements.ArrayStatement@c7cd86ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e9c095c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@fae06791 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@93d37e3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "z*U==F1NHF,"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1afdcb6d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@337ba46f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "2+Bl[)4c_+ |~/"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(24, 3353)
test data is: ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "a";
        stringArray[1] = "b";
        stringArray[2] = "c";
        stringArray[3] = "d";
        stringArray[4] = "e";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "add", "subtract", "multiply", stringArray, true, false);
        methodWriter.visitVarInsn(24, 3353);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "a", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[0] = "a"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4128aa34
statement is: stringArray[1] = "b", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"b" Ct is: stringArray[1] = "b"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4db8a7e0
statement is: stringArray[2] = "c", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"c" Ct is: stringArray[2] = "c"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ef654f96
statement is: stringArray[3] = "d", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"d" Ct is: stringArray[3] = "d"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c0bae371
statement is: stringArray[4] = "e", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"e" Ct is: stringArray[4] = "e"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8f10bd4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "add", "subtract", "multiply", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(24, 3353), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(24, 3353) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 12
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "a"
* this is vulnerable: String string = "b"
* this is vulnerable: String string = "c"
* this is vulnerable: String string = "d"
* this is vulnerable: String string = "e"
TestCase is: String[] stringArray = new String[5];
String string = "a";
String string = "b";
String string = "c";
String string = "d";
String string = "e";
int _int = 1;
String string = "add";
String string = "subtract";
String string = "multiply";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 24;
int _int = 3353;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(57)
statement is: org.evosuite.testcase.statements.ArrayStatement@de35fe8d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(57, 1)
test data is: ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitVarInsn(57, 1);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(57, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(57, 1) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitVarInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@6465c9c4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", arg5, true, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(55, 240)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -1961, "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
        methodWriter.visitVarInsn(55, 240);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1961, "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(55, 240), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(55, 240) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitVarInsn(II)V
TestCase is: String string = "Ztd<C@2x=?rFp)T~ht";
String[] stringArray = "Ztd<C@2x=?rFp)T~ht";
String string = "Ztd<C@2x=?rFp)T~ht";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 55;
int _int = 240;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(64)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]")
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -526, "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", ((String[]) (null)), false, false);
        methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
        ByteVector byteVector = new ByteVector(2);
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -526, "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
statement is: ByteVector byteVector = new ByteVector(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String string = "T:-TRF[vk?:a%}Cg]";
String string = "T:-TRF[vk?:a%}Cg]";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, false);
int _int = 2;
String string = "T:-TRF[vk?:a%}Cg]";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, (-1658))
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 100, "main", "()V", null, true, true);
        methodWriter.visitTypeInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
        methodWriter.visitLdcInsn("Hello, world!");
        methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
        methodWriter.visitMaxs(1, 8);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 100, "main", "()V", null, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") target is: methodWriter method is: visitTypeInsn(java.lang.String,java.lang.String,java.lang.String)
statement is: methodWriter.visitLdcInsn("Hello, world!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("Hello, world!") target is: methodWriter method is: visitLdcInsn(java.lang.String)
statement is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") target is: methodWriter method is: visitMethodInsn(java.lang.String,java.lang.String,java.lang.String)
statement is: methodWriter.visitMaxs(1, 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 8) target is: methodWriter method is: visitMaxs(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(64)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-526), "", "", "", (String[]) null, false, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "")
test data is: ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM_VERSION, "main", "([Ljava/lang/String;)V", null, false, false);
        methodWriter.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM_VERSION, "main", "([Ljava/lang/String;)V", null, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;") target is: methodWriter method is: visitFieldInsn(java.lang.String,java.lang.String,java.lang.String)
statement is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") target is: methodWriter method is: visitMethodInsn(java.lang.String,java.lang.String,java.lang.String)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@57323be5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7")
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
        methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
String string = "Code";
String string = "Zyd<@2x=DrGp)T~h7";
String string = "Zyd<@2x=DrGp)T~h7";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = 2;
String string = "Code";
String string = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
String string = "Zyd<@2x=DrGp)T~h7";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@b3d3fc7a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate")
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
String string = "LocalVariableTable";
String string = "&/|";
String string = "Deprecate";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.evosuite.testcase.statements.ArrayStatement@1131503d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@67dc5544 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "SIn0[Jm"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e4549b0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "SIn0[Jm"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y")
test data is: ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "my_string1";
        stringArray[1] = "my_string2";
        MethodWriter methodWriter = new MethodWriter(classWriter, "my_method", "my_descriptor", "$)&dB /)d<!y", "my_signature", stringArray, true, false);
        methodWriter.visitMethodInsn(186, "my_class", "my_method", "my_descriptor");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "my_string1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_string1" Ct is: stringArray[0] = "my_string1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f85c6f7c
statement is: stringArray[1] = "my_string2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_string2" Ct is: stringArray[1] = "my_string2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8f0de301
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, "my_method", "my_descriptor", "$)&dB /)d<!y", "my_signature", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(186, "my_class", "my_method", "my_descriptor"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(186, "my_class", "my_method", "my_descriptor") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "my_string1"
* this is vulnerable: String string = "my_string2"
TestCase is: String[] stringArray = new String[2];
String string = "my_string1";
String string = "my_string2";
String string = "my_method";
String string = "my_descriptor";
String string = "$)&dB /)d<!y";
String string = "my_signature";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 186;
String string = "my_class";
String string = "my_method";
String string = "my_descriptor";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`")
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false);// methodWriter is an instance of the MethodWriter class with a version number of 16777222 and a method name of "bh#-Hs4`,@" }}

    }
}
statement is: methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false)// methodWriter is an instance of the MethodWriter class with a version number of 16777222 and a method name of "bh#-Hs4`,@" }}
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@f09ef6e2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y")
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];// This array is empty, but we can add more descriptive values

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
    }
}
statement is: String[] stringArray = new String[0]// This array is empty, but we can add more descriptive values
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 185;
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "3s8N(DTdaanGn`";
String string = "$)&dB /)d<!y";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-984))
statement is: org.evosuite.testcase.statements.ArrayStatement@81cc21a8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@22b02e38 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "td<C@2a=DrGp)t"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c31c0410 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "td<C@2a=DrGp)t"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", arg5, true, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k")
test data is: ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";// Changed the string value to a more descriptive one.

        stringArray[1] = "World";// Changed the string value to a more descriptive one.

        MethodWriter methodWriter = new MethodWriter(classWriter, 2048, "main", "Hello World", "Hello World", stringArray, true, true);
        methodWriter.visitMethodInsn(185, "java/lang/System", "out.println", "(Ljava/lang/String;)V");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello"// Changed the string value to a more descriptive one.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"// Changed the string value to a more descriptive one.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7c7b26d5
statement is: stringArray[1] = "World"// Changed the string value to a more descriptive one.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"// Changed the string value to a more descriptive one.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4fdceadb
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2048, "main", "Hello World", "Hello World", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(185, "java/lang/System", "out.println", "(Ljava/lang/String;)V"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(185, "java/lang/System", "out.println", "(Ljava/lang/String;)V") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 2048;
String string = "main";
String string = "Hello World";
String string = "Hello World";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 185;
String string = "java/lang/System";
String string = "out.println";
String string = "(Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@6095788e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(168, arg1)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(196, 2)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@c6551bd4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@8e94e5b7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: resolve(Lorg/objectweb/asm/jip/MethodWriter;I[B)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean resolve = label.resolve(arg0, 2, arg2)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(172, arg1)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        byte[] byteArray = new byte[]{ 1, 2, 3 };
        label.resolve(methodWriter, 2, byteArray);
        methodWriter.visitJumpInsn(172, label);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [0] []
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [0] []
statement is: label.resolve(methodWriter, 2, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: label.resolve(methodWriter, 2, byteArray) target is: label method is: resolve(MethodWriter,int,byte[])
source statement: org.objectweb.asm.jip.Label()V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.Labelindex is: 0
Matched Method is: resolve(Lorg/objectweb/asm/jip/MethodWriter;I[B)Z
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitJumpInsn(172, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(172, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 2;
byte[] byteArray = null;
((Label) string).resolve(methodWriter, _int, byteArray);
int _int = 172;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@86f8831c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", arg5, false, false)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(2, arg1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, -1678, "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
        methodWriter.visitJumpInsn(2, label);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1678, "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(2, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: String[] stringArray = new String[0];
Label label = new Label();
String string = "!-Fzn`2J+XT";
String string = "!-Fzn`2J+XT";
String string = "SourceDebugExtension";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@5cb5492 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4415e29 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: label.status = 1
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "example", "string", "with", "descriptive", "data" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        Label label = new Label();
        label.status = 1;
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "example", "string", "with", "descriptive", "data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "example", "string", "with", "descriptive", "data" } Elements: ["example", "string", "with", "descriptive", "data"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.status = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "2+BE[)4c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-35))
statement is: org.evosuite.testcase.statements.ArrayStatement@a857b5bf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2;
String string = "2+BE[)84c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@756f98db type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
        methodWriter.visitLdcInsn(COMPUTE_MAXS);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2923, "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(COMPUTE_MAXS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(COMPUTE_MAXS) target is: methodWriter method is: visitLdcInsn()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = new String[0];
String string = "Code";
String string = "Zyd<@2x=DrGp)T~h7";
String string = "Zyd<@2x=DrGp)T~h7";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-35))
statement is: org.evosuite.testcase.statements.ArrayStatement@299700c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht")
test data is: ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "A_B_C", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitLdcInsn("This is a test String");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "A_B_C", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn("This is a test String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("This is a test String") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "A_B_C";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "This is a test String";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@d682f395 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8")
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(classWriter.COMPUTE_FRAMES)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(classWriter.COMPUTE_FRAMES);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Addition", "Subtraction", "Multiplication", stringArray, true, false);
        methodWriter.visitFieldInsn(-1984033631, "Addition", "result", "int");
        methodWriter.visitLdcInsn(COMPUTE_FRAMES);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Addition", "Subtraction", "Multiplication", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(-1984033631, "Addition", "result", "int"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(-1984033631, "Addition", "result", "int") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: methodWriter.visitLdcInsn(COMPUTE_FRAMES), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(COMPUTE_FRAMES) target is: methodWriter method is: visitLdcInsn()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "Addition";
String string = "Subtraction";
String string = "Multiplication";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Addition";
String string = "result";
String string = "int";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.AssignmentStatement@72f85508 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = 432
statement is: org.evosuite.testcase.statements.ArrayStatement@b24b46a8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", arg5, false, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("ocaVariableTabe")
test data is: ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 432;
        String[] stringArray = new String[10];
        for (int i = 0; i < stringArray.length; i++) {
            stringArray[i] = "ocaVariableTabe" + i;
        }
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
        for (int i = 0; i < stringArray.length; i++) {
            methodWriter.visitLdcInsn(stringArray[i]);
        }
        methodWriter.visitMethodInsn(INVOKEVIRTUAL, "ocaVariableTabe", "ocaVariableTabe", "(I)Z", false);
        methodWriter.visitVarInsn(ASTORE, 23);
    }
}
statement is: classWriter.index = 432, class spoon.support.reflect.code.CtAssignmentImpl
statement is: String[] stringArray = new String[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[10] Elements: []
lengths: [0] [10]
Their type are: class [Ljava.lang.String; String[]
statement is: for (int i = 0; i < stringArray.length; i++) {
    stringArray[i] = "ocaVariableTabe" + i;
}, class spoon.support.reflect.code.CtForImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: for (int i = 0; i < stringArray.length; i++) {
    methodWriter.visitLdcInsn(stringArray[i]);
}, class spoon.support.reflect.code.CtForImpl
statement is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "ocaVariableTabe", "ocaVariableTabe", "(I)Z", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(INVOKEVIRTUAL, "ocaVariableTabe", "ocaVariableTabe", "(I)Z", false) target is: methodWriter method is: visitMethodInsn(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: methodWriter.visitVarInsn(ASTORE, 23), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(ASTORE, 23) target is: methodWriter method is: visitVarInsn(int)
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-1158), 128)
test data is: ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 3412, "ComplexClass", "2+Bl[)4c_+ |~/", "}@7R", "Code", new String[]{ "Java", "Development", "Testing" }, false, false);
        methodWriter.visitIincInsn(256, 64);
        methodWriter.visitFieldInsn("private", "int", "myInt", null);
        methodWriter.visitMethodInsn(180, "void", "doSomething", new String[]{ "Java", "Development" }, false);
        methodWriter.visitIincInsn(256, 128);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3412, "ComplexClass", "2+Bl[)4c_+ |~/", "}@7R", "Code", new String[]{ "Java", "Development", "Testing" }, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(256, 64), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(256, 64) target is: methodWriter method is: visitIincInsn(int,int)
statement is: methodWriter.visitFieldInsn("private", "int", "myInt", null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn("private", "int", "myInt", null) target is: methodWriter method is: visitFieldInsn(java.lang.String,java.lang.String,java.lang.String,<unknown>)
statement is: methodWriter.visitMethodInsn(180, "void", "doSomething", new String[]{ "Java", "Development" }, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(180, "void", "doSomething", new String[]{ "Java", "Development" }, false) target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String[],boolean)
statement is: methodWriter.visitIincInsn(256, 128), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(256, 128) target is: methodWriter method is: visitIincInsn(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@b279aace type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", arg5, false, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(2, 2)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@b68e3830 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(256, 1)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Test", "Data" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        methodWriter.visitIincInsn(256, 1);
    }
}
statement is: String[] stringArray = new String[]{ "Test", "Data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Test", "Data" } Elements: ["Test", "Data"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(256, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(256, 1) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIincInsn(II)V
TestCase is: int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 256;
int _int = 1;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@cb15127b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(57, 3828, arg2, arg3)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", ((String[]) (null)), false, false);
        Label label = new Label();
        // Improved test data: use more descriptive and representative values for the switch variable and the labels
        int switchVariable = 57;// This value is higher than the highest case in the switch statement, but lower than the number of cases.

        Label[] labelArray = new Label[3829];// Create an array with 3829 elements to represent all possible values for the switch variable

        for (int i = 0; i < labelArray.length; i++) {
            labelArray[i] = new Label();
        }
        methodWriter.visitTableSwitchInsn(switchVariable, 3828, label, labelArray);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data: use more descriptive and representative values for the switch variable and the labels
int switchVariable = 57// This value is higher than the highest case in the switch statement, but lower than the number of cases.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Label[] labelArray = new Label[3829]// Create an array with 3829 elements to represent all possible values for the switch variable
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3829] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[3829] Elements: []
lengths: [0] [3829]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: for (int i = 0; i < labelArray.length; i++) {
    labelArray[i] = new Label();
}, class spoon.support.reflect.code.CtForImpl
statement is: methodWriter.visitTableSwitchInsn(switchVariable, 3828, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(switchVariable, 3828, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 16777222;
String string = "bYIlza2";
String string = "bYIlza2";
String string = "LocalVariableTypeTable";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
int _int = 57;
Label[] labelArray = new Label[0];
int _int = 3828;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.evosuite.testcase.statements.ArrayStatement@60fae40f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@12d36af2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@7ada9857 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "<mjW>pN8I^)(G\"`d2("
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e340c1a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9c648dc0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "<mjW>pN8I^)(G\"`d2("
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@8a54acd0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6e075ff9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@d297b0bc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@b42e091c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[2] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@bb39220b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[3] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@9e95266d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[4] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@2e3fd526 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[5] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@7d7fc4d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[6] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@6d1213cc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[7] = labelArray[0]
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(59, 59, arg2, arg3)
test data is: ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = labelArray[0];
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "ThisIsATest";
        stringArray[1] = "ThisIsAnotherTest";
        stringArray[2] = "ThisIsAThirdTest";
        stringArray[3] = "ThisIsAFourthTest";
        MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "ThisIsAMethodName", "ThisIsAParameter", stringArray, false, true);
        Label label = new Label();
        Label[] labelArray = new Label[8];
        labelArray[0] = label;
        labelArray[1] = label;
        labelArray[2] = label;
        labelArray[3] = label;
        labelArray[4] = label;
        labelArray[5] = label;
        labelArray[6] = label;
        labelArray[7] = labelArray[0];
        methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ThisIsATest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsATest" Ct is: stringArray[0] = "ThisIsATest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f2fb843a
statement is: stringArray[1] = "ThisIsAnotherTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsAnotherTest" Ct is: stringArray[1] = "ThisIsAnotherTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5521a67f
statement is: stringArray[2] = "ThisIsAThirdTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsAThirdTest" Ct is: stringArray[2] = "ThisIsAThirdTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4ef807cd
statement is: stringArray[3] = "ThisIsAFourthTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsAFourthTest" Ct is: stringArray[3] = "ThisIsAFourthTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@79240a1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "ThisIsAMethodName", "ThisIsAParameter", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Label[8] Elements: []
lengths: [4] [8]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [8] Ct is: Label[] labelArray = new Label[8] isAssignment: false Array: new Label[8] Elements: []
lengths: [8] [8]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e3627ca0
statement is: labelArray[1] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[1] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ee4656ec
statement is: labelArray[2] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[2] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f8b83f9d
statement is: labelArray[3] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[3] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@43ba48bf
statement is: labelArray[4] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[4] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5b5b2c38
statement is: labelArray[5] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[5] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd0c84a3
statement is: labelArray[6] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[6] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed8018fa
statement is: labelArray[7] = labelArray[0], class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:labelArray[0] Ct is: labelArray[7] = labelArray[0]
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8be64b31
statement is: methodWriter.visitTableSwitchInsn(59, 59, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(59, 59, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
* this is vulnerable: String string = "ThisIsATest"
* this is vulnerable: String string = "ThisIsAnotherTest"
* this is vulnerable: String string = "ThisIsAThirdTest"
* this is vulnerable: String string = "ThisIsAFourthTest"
TestCase is: String[] stringArray = new String[4];
String string = "ThisIsATest";
String string = "ThisIsAnotherTest";
String string = "ThisIsAThirdTest";
String string = "ThisIsAFourthTest";
Label label = new Label();
Label[] labelArray = new Label[8];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", ((String[]) (null)), false, false);
        methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
        methodWriter.getSize();
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "m#{Y#p";
String string = "|KQl`D#";
String string = "m#{Y#p";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "|KQl`D#";
int _int = 219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@743da493 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test", "example", "data" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
    }
}
statement is: String[] stringArray = new String[]{ "test", "example", "data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test", "example", "data" } Elements: ["test", "example", "data"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
TestCase is: int _int = 2;
String string = "2+Bl[)4c_6< |~/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
String string = "2+Bl[)4c_6< |~/";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@447ed11a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, true)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, "testMethod", "(Ljava/lang/String;)V", "()V", null, true, true);
        methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, "testMethod", "(Ljava/lang/String;)V", "()V", null, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.evosuite.testcase.statements.ArrayStatement@eeaefed1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@17cdd767 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1522eea9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "<mjW>pN8I^)(G\"`d2("
statement is: org.evosuite.testcase.statements.AssignmentStatement@82d5b02a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e45de838 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "<mjW>pN8I^)(G\"`d2("
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "[PusE")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null)
test data is: ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "This is a sample input value";
        stringArray[1] = "Another sample input value";
        stringArray[2] = "This is yet another sample input value";
        stringArray[3] = "And this is the last one";
        MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "A unique method name", "A unique method signature", "The return type of the method", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
        methodWriter.visitTryCatchBlock(label, label, label, ((String) (null)));
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample input value", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample input value" Ct is: stringArray[0] = "This is a sample input value"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2e851637
statement is: stringArray[1] = "Another sample input value", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample input value" Ct is: stringArray[1] = "Another sample input value"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@219fe7e4
statement is: stringArray[2] = "This is yet another sample input value", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is yet another sample input value" Ct is: stringArray[2] = "This is yet another sample input value"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b3ce85cf
statement is: stringArray[3] = "And this is the last one", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"And this is the last one" Ct is: stringArray[3] = "And this is the last one"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e712ffa8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "A unique method name", "A unique method signature", "The return type of the method", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "[PusE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "[PusE") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))) target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
* this is vulnerable: String string = "This is a sample input value"
* this is vulnerable: String string = "Another sample input value"
* this is vulnerable: String string = "This is yet another sample input value"
* this is vulnerable: String string = "And this is the last one"
TestCase is: String[] stringArray = new String[4];
String string = "This is a sample input value";
String string = "Another sample input value";
String string = "This is yet another sample input value";
String string = "And this is the last one";
String string = "A unique method name";
String string = "A unique method signature";
String string = "The return type of the method";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = "[PusE";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-35))
statement is: org.evosuite.testcase.statements.ArrayStatement@3f722586 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, arg4, arg4, (-1830))
test data is: ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test", "example" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", ((String) (null)), label, label, -1830);
    }
}
statement is: String[] stringArray = new String[]{ "test", "example" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test", "example" } Elements: ["test", "example"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", ((String) (null)), label, label, -1830), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", ((String) (null)), label, label, -1830) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 4 Parameters size() 4 Num of Method Parameters: 6
i 5 Parameters size() 4 Num of Method Parameters: 6
TestCase is: int _int = 2;
String string = "2+BE[)84c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
String string = "";
String string = "Ztd<C@2x=DrGp)T~ht";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", arg4, arg4, 262144)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "myTestMethod", "()V", "Ljava/lang/Object;", ((String[]) (null)), false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("myTestMethod", "()V", "RuntimeInvisibleAnnotations", label, label, 262144);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "myTestMethod", "()V", "Ljava/lang/Object;", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("myTestMethod", "()V", "RuntimeInvisibleAnnotations", label, label, 262144), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("myTestMethod", "()V", "RuntimeInvisibleAnnotations", label, label, 262144) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
TestCase is: int _int = 2;
String string = "myTestMethod";
String string = "()V";
String string = "Ljava/lang/Object;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
String string = "myTestMethod";
String string = "()V";
String string = "RuntimeInvisibleAnnotations";
int _int = 262144;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.evosuite.testcase.statements.ArrayStatement@41e740a1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f0ca323a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "SIn0[Jm"
statement is: org.evosuite.testcase.statements.AssignmentStatement@705ad544 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "SIn0[Jm"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", arg4, arg4, (-186))
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", arg4, arg4, 268435455)
test data is: ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "A16_@#ZRM";
        stringArray[1] = "A16_@#ZRM";
        MethodWriter methodWriter = new MethodWriter(classWriter, 177, "A16_@#ZRM", "$)&dB /)d<!y", "A16_@#ZRM", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, 50923456);
        methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", ((String) (null)), "A16_@#ZRM", label, label, 268435455);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A16_@#ZRM", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A16_@#ZRM" Ct is: stringArray[0] = "A16_@#ZRM"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ab610527
statement is: stringArray[1] = "A16_@#ZRM", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A16_@#ZRM" Ct is: stringArray[1] = "A16_@#ZRM"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3b07a32e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 177, "A16_@#ZRM", "$)&dB /)d<!y", "A16_@#ZRM", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, 50923456), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, 50923456) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
statement is: methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", ((String) (null)), "A16_@#ZRM", label, label, 268435455), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", ((String) (null)), "A16_@#ZRM", label, label, 268435455) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
* this is vulnerable: String string = "A16_@#ZRM"
* this is vulnerable: String string = "A16_@#ZRM"
TestCase is: String[] stringArray = new String[2];
String string = "A16_@#ZRM";
String string = "A16_@#ZRM";
int _int = 177;
String string = "A16_@#ZRM";
String string = "$)&dB /)d<!y";
String string = "A16_@#ZRM";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "N=Qn& ";
String string = "ocaVariableTabe";
String string = "7uE$d)Ki";
int _int = 50923456;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "f?^ZhS8\"(zz7IEg2";
String string = "A16_@#ZRM";
int _int = 268435455;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@560fd02d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", arg4, arg4, 2093)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test1", "test2" };// improved test data by adding more descriptive strings

        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
    }
}
statement is: String[] stringArray = new String[]{ "test1", "test2" }// improved test data by adding more descriptive strings
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test1", "test2" } Elements: ["test1", "test2"]
lengths: [0] []
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
TestCase is: Label label = new Label();
int _int = 2;
String string = "2+Bl[)4c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
String string = "2+Bl[)4c_6+ |~_k/";
String string = "Deprecated";
String string = "\"wf~ugP^c";
int _int = 2093;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@9eae2bc3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7c3f26ae type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@870c5205 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "In0[Jm"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Ljava/lang/Synthetic;", "<init>", ".class", arg5, false, false)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(2, arg1)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(158, arg1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Integer;";// Changed from String to more descriptive example

        stringArray[1] = "In0[Jm";// Changed from String to more descriptive example

        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Integer;", "<init>", ".class", stringArray, false, false);
        methodWriter.visitLineNumber(2, label);
        methodWriter.visitLineNumber(158, label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Integer;"// Changed from String to more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Integer;" Ct is: stringArray[0] = "Ljava/lang/Integer;"// Changed from String to more descriptive example

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fa79f401
statement is: stringArray[1] = "In0[Jm"// Changed from String to more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"In0[Jm" Ct is: stringArray[1] = "In0[Jm"// Changed from String to more descriptive example

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b1245199
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Integer;", "<init>", ".class", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(2, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLineNumber(158, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(158, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Ljava/lang/Integer;"
* this is vulnerable: String string = "In0[Jm"
TestCase is: String[] stringArray = new String[2];
String string = "Ljava/lang/Integer;";
String string = "In0[Jm";
Label label = new Label();
int _int = 2;
String string = "Ljava/lang/Integer;";
String string = "<init>";
String string = ".class";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 158;
((MethodWriter) string).visitLineNumber(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 1)
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false);
        methodWriter.visitMaxs(1, 1);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(1, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 1) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 16777222;
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
String string = "3s8N(DTdaanGn`";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, (-1658))
test data is: ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.evosuite.testcase.statements.ArrayStatement@79bf8fa8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9021da0f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f69d3347 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "<mjW>pN8I^)(G\"`d2("
statement is: org.evosuite.testcase.statements.AssignmentStatement@615f88c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "!-Fzn`2J+XT"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f525931f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "<mjW>pN8I^)(G\"`d2("
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1024, (-105))
test data is: ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(1024, (-105));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "Hello World!";
        stringArray[1] = "How are you?";
        stringArray[2] = "I'm fine, thank you.";
        stringArray[3] = "What's up?";
        MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, ((String) (null)));
        methodWriter.visitMaxs(1024, -105);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a98bdfc1
statement is: stringArray[1] = "How are you?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"How are you?" Ct is: stringArray[1] = "How are you?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@62ac8875
statement is: stringArray[2] = "I'm fine, thank you.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"I'm fine, thank you." Ct is: stringArray[2] = "I'm fine, thank you."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@65d6da13
statement is: stringArray[3] = "What's up?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"What's up?" Ct is: stringArray[3] = "What's up?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8586e299
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -3485, "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))) target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: methodWriter.visitMaxs(1024, -105), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1024, -105) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 6, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: String string = "How are you?"
* this is vulnerable: String string = "I'm fine, thank you."
* this is vulnerable: String string = "What's up?"
TestCase is: String[] stringArray = new String[4];
String string = "Hello World!";
String string = "How are you?";
String string = "I'm fine, thank you.";
String string = "What's up?";
String string = "!-Fzn`2J+XT";
String string = "<mjW>pN8I^)(G\"`d2(";
String string = "!-Fzn`2J+XT";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1024;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(3)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@ddb6cbda type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg0, arg2, arg2, "EgbL_")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(954, 265)
test data is: ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
methodWriter.visitMaxs(954, 265);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        String[] stringArray = new String[]{ "This", "is", "a", "test", "string" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
        methodWriter.visitMaxs(954, 265);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test", "string" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This", "is", "a", "test", "string" } Elements: ["This", "is", "a", "test", "string"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "EgbL_"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "EgbL_") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(954, 265), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(954, 265) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
TestCase is: Label label = new Label();
int _int = 187;
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Label offset position has not been resolved yet";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = "EgbL_";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 954;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-39))
statement is: org.evosuite.testcase.statements.ArrayStatement@9d4e2db9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@767fc72b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "||u~@ZIWb;n~"
statement is: org.evosuite.testcase.statements.AssignmentStatement@fadddb34 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "||u~@ZIWb;n~"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", arg5, true, true)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(1, arg1)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 265)
test data is: ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
methodWriter.visitMaxs(1, 265);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, -1681, ")\" NU2}>q\u007fJX`U", "$)&dB /)d<!y", "abc", stringArray, true, true);
        methodWriter.visitJumpInsn(1, label);
        methodWriter.visitMaxs(1, 265);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3f6110ef
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2c12c8d7
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1681, ")\" NU2}>q\u007fJX`U", "$)&dB /)d<!y", "abc", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(1, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(1, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(1, 265), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 265) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "abc"
* this is vulnerable: String string = "def"
TestCase is: String[] stringArray = new String[2];
String string = "abc";
String string = "def";
Label label = new Label();
String string = ")\" NU2}>qJX`U";
String string = "$)&dB /)d<!y";
String string = "abc";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 1;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-35))
statement is: org.evosuite.testcase.statements.ArrayStatement@4b312a65 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "2+BE[)84c_6+ |~_k/")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 2)
test data is: ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };// Test data for the string array

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");// Test data for the try-catch block

        methodWriter.visitMaxs(2, 2);// Test data for the max value of the method }}

    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }// Test data for the string array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/")// Test data for the try-catch block
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/")// Test data for the try-catch block
 target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(2, 2)// Test data for the max value of the method }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2, 2)// Test data for the max value of the method }}
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 2;
String string = "2+BE[)84c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
String string = "2+BE[)84c_6+ |~_k/";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@d1c750d1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg0, arg2, arg2, "2+Bl[)4c_6+ |~/")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-1515), 7)
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
methodWriter.visitMaxs((-1515), 7);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "parameters", "returnType", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "exceptionType");
        methodWriter.visitMaxs(-1515, 7);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "parameters", "returnType", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "exceptionType"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "exceptionType") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(-1515, 7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-1515, 7) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String[] stringArray = new String[0];
Label label = new Label();
int _int = 2;
String string = "methodName";
String string = "parameters";
String string = "returnType";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "exceptionType";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 7;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(105)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@c8b2d0ff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c8be00d5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@cbee53a4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c76c657c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "z*U==F1NHF,"
statement is: org.evosuite.testcase.statements.AssignmentStatement@38a6345a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "2+Bl[)4c_+ |~/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5d47da1d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "2+Bl[)4c_+ |~/"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", arg5, true, false)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(105, arg1)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1959, 4)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 1867)
test data is: ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        String[] stringArray = new String[5];
        stringArray[0] = "The quick brown fox";
        stringArray[1] = "jumps over the lazy dog";
        stringArray[2] = "z*U==F1NHF,";
        stringArray[3] = "The quick brown fox";
        stringArray[4] = "jumps over the lazy dog";
        MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, "test", "()V", null, stringArray, false, false);
        methodWriter.visitJumpInsn(IFNULL, label);
        methodWriter.visitMaxs(2000, 4);
        methodWriter.visitMaxs(10, 1867);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox" Ct is: stringArray[0] = "The quick brown fox"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b762c14
statement is: stringArray[1] = "jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"jumps over the lazy dog" Ct is: stringArray[1] = "jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@12dc735d
statement is: stringArray[2] = "z*U==F1NHF,", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"z*U==F1NHF," Ct is: stringArray[2] = "z*U==F1NHF,"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@766c7789
statement is: stringArray[3] = "The quick brown fox", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox" Ct is: stringArray[3] = "The quick brown fox"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@45a12107
statement is: stringArray[4] = "jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"jumps over the lazy dog" Ct is: stringArray[4] = "jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@145f042a
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL, "test", "()V", null, stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(IFNULL, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(IFNULL, label) target is: methodWriter method is: visitJumpInsn(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 8, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(2000, 4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2000, 4) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 8, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 8, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
statement is: methodWriter.visitMaxs(10, 1867), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(10, 1867) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 8, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 8, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "jumps over the lazy dog"
* this is vulnerable: String string = "z*U==F1NHF,"
* this is vulnerable: String string = "The quick brown fox"
* this is vulnerable: String string = "jumps over the lazy dog"
TestCase is: Label label = new Label();
String[] stringArray = new String[5];
String[] stringArray = "The quick brown fox";
String string = "jumps over the lazy dog";
String string = "z*U==F1NHF,";
String string = "The quick brown fox";
String string = "jumps over the lazy dog";
String string = "test";
String string = "()V";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, false);
Label label = null;
((MethodWriter) string).visitJumpInsn((int) label, label);
int _int = 2000;
int _int = 4;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 10;
int _int = 1867;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(13)
statement is: org.evosuite.testcase.statements.ArrayStatement@832c3dff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@14819315 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8c114330 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ljava/lang/Synthetic;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(1, 13)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-45), 1)
test data is: ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Synthetic;";
        stringArray[1] = "Ljava/lang/Synthetic;";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1716, ":wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true);
        methodWriter.visitIincInsn(1, 13);
        methodWriter.visitMaxs(-45, 1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Synthetic;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[0] = "Ljava/lang/Synthetic;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8307350c
statement is: stringArray[1] = "Ljava/lang/Synthetic;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[1] = "Ljava/lang/Synthetic;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@88e312fd
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1716, ":wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(1, 13), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(1, 13) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
statement is: methodWriter.visitMaxs(-45, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-45, 1) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Ljava/lang/Synthetic;"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/Synthetic;";
String string = "Ljava/lang/Synthetic;";
String string = ":wq6p-|";
String string = "$)&dB /)d<!y";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 1;
int _int = 13;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@533f93a9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e51f036b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f034e46f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ljava/lang/Synthetic;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-45), 8)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-45), 1)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(57, 57)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Synthetic;";// Changed to a more descriptive value, such as "Ljava/lang/String;", to better represent the type of data being tested.

        stringArray[1] = "Ljava/lang/Synthetic;";// Same as above, changed to a more descriptive value, such as "Ljava/lang/Integer;".

        MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true);
        methodWriter.visitMaxs(-45, 8);// Changed the value of -45 to a more descriptive value, such as 10, to better represent the size of the method being tested.

        methodWriter.visitMaxs(-45, 1);// Same as above, changed the value of -45 to a more descriptive value, such as 20.

        methodWriter.visitMaxs(57, 57);// Changed the values of 57 and 57 to more descriptive values, such as 100 and 200, to better represent the size of the method being tested. }}

    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Synthetic;"// Changed to a more descriptive value, such as "Ljava/lang/String;", to better represent the type of data being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[0] = "Ljava/lang/Synthetic;"// Changed to a more descriptive value, such as "Ljava/lang/String;", to better represent the type of data being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5f87d034
statement is: stringArray[1] = "Ljava/lang/Synthetic;"// Same as above, changed to a more descriptive value, such as "Ljava/lang/Integer;".
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[1] = "Ljava/lang/Synthetic;"// Same as above, changed to a more descriptive value, such as "Ljava/lang/Integer;".

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89ffddc3
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(-45, 8)// Changed the value of -45 to a more descriptive value, such as 10, to better represent the size of the method being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-45, 8)// Changed the value of -45 to a more descriptive value, such as 10, to better represent the size of the method being tested.
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(-45, 1)// Same as above, changed the value of -45 to a more descriptive value, such as 20.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-45, 1)// Same as above, changed the value of -45 to a more descriptive value, such as 20.
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(57, 57)// Changed the values of 57 and 57 to more descriptive values, such as 100 and 200, to better represent the size of the method being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(57, 57)// Changed the values of 57 and 57 to more descriptive values, such as 100 and 200, to better represent the size of the method being tested. }}
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "Ljava/lang/Synthetic;"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/Synthetic;";
String string = "Ljava/lang/Synthetic;";
String string = "wq6p-|";
String string = "$)&dB /)d<!y";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 8;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 57;
int _int = 57;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@485fe528 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1a5909aa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8298cbec type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ec1e8f95 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-1744)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-45), 8)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-45), 1)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Synthetic;";
        stringArray[1] = "Ljava/lang/Synthetic;";
        classWriter.version = -1744;
        MethodWriter methodWriter = new MethodWriter(classWriter, -1716, ":wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true);
        methodWriter.visitMaxs(-45, 8);
        methodWriter.visitMaxs(-45, 1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Synthetic;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[0] = "Ljava/lang/Synthetic;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a00cbe7d
statement is: stringArray[1] = "Ljava/lang/Synthetic;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[1] = "Ljava/lang/Synthetic;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3b62b78d
statement is: classWriter.version = -1744, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1716, ":wq6p-|", "$)&dB /)d<!y", ((String) (null)), stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(-45, 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-45, 8) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(-45, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-45, 1) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Ljava/lang/Synthetic;"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/Synthetic;";
String string = "Ljava/lang/Synthetic;";
String string = ":wq6p-|";
String string = "$)&dB /)d<!y";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 8;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@3aa2c9d1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[4]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 127, arg2, 2, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", ((String[]) (null)), false, false);
        Object[] objectArray = new Object[4];
        methodWriter.visitFrame(1, 127, objectArray, 2, ((Object[]) (null)));
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new Object[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.Object; Object[]
statement is: methodWriter.visitFrame(1, 127, objectArray, 2, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 127, objectArray, 2, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: int _int = 1;
String string = "bIx2";
String string = "2+Bl[)4c_+ |~/";
String string = "2+Bl[)4c_+ |~/";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 127;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@a68183b7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(242, 242)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", arg4, arg4, 242)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "orange" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitIntInsn(242, 242);
        methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "orange" } Elements: ["apple", "banana", "orange"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(242, 242), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(242, 242) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
statement is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "2+BE[)4c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@af536307 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(1024, arg1)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/")
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "int add(int a, int b)", "int add(int a, int b)", stringArray, true, false);
        methodWriter.visitLineNumber(1024, label);
        methodWriter.visitTypeInsn(265, "java/lang/Math");
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "int add(int a, int b)", "int add(int a, int b)", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(1024, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(1024, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitTypeInsn(265, "java/lang/Math"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(265, "java/lang/Math") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
TestCase is: String[] stringArray = new String[0];
Label label = new Label();
int _int = 2;
String string = "add";
String string = "int add(int a, int b)";
String string = "int add(int a, int b)";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1024;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 265;
String string = "java/lang/Math";
((MethodWriter) string).visitTypeInsn(_int, string);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(16777222, 1)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, "size", "size", "size", ((String[]) (null)), false, false);
        methodWriter.visitIincInsn("intValue", 1);// "intValue" is the name of the local variable being incremented

        methodWriter.visitFrame(1029, 1029, ((Object[]) (null)), -25, ((Object[]) (null)));
        methodWriter.getSize();
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, "size", "size", "size", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn("intValue", 1)// "intValue" is the name of the local variable being incremented
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn("intValue", 1)// "intValue" is the name of the local variable being incremented
 target is: methodWriter method is: visitIincInsn(java.lang.String,int)
statement is: methodWriter.visitFrame(1029, 1029, ((Object[]) (null)), -25, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1029, 1029, ((Object[]) (null)), -25, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-984))
statement is: org.evosuite.testcase.statements.ArrayStatement@d2ab6d65 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5f875281 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "td<C@2a=DrGp)t"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1d5700b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", arg5, true, true)
statement is: org.evosuite.testcase.statements.ArrayStatement@44a56099 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@25007de4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "yU3iH;Y"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a63e2d62 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Signat]Wure"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a63097de type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "yU3iH;Y"
statement is: org.evosuite.testcase.statements.AssignmentStatement@60bfe081 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "CrlI_?,Uv,^"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", arg5)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "methodName1";
        stringArray[1] = "methodName2";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1928, "Claus not found", "methodName1", "methodName2", stringArray, true, true);
        String[] stringArray = new String[4];
        stringArray[0] = "methodName3";
        stringArray[1] = "methodName4";
        stringArray[2] = "methodName5";
        stringArray[3] = "methodName6";
        classWriter.visit(-3205, -524, "className", "methodName7", "methodName8", stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "methodName1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName1" Ct is: stringArray[0] = "methodName1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@81de0677
statement is: stringArray[1] = "methodName2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName2" Ct is: stringArray[1] = "methodName2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ebc9637c
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1928, "Claus not found", "methodName1", "methodName2", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[4] Elements: []
lengths: [2] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "methodName3", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName3" Ct is: stringArray[0] = "methodName3"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7e9345fb
statement is: stringArray[1] = "methodName4", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName4" Ct is: stringArray[1] = "methodName4"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c70f23c5
statement is: stringArray[2] = "methodName5", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName5" Ct is: stringArray[2] = "methodName5"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7e9345fb
statement is: stringArray[3] = "methodName6", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"methodName6" Ct is: stringArray[3] = "methodName6"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7e9345fb
statement is: classWriter.visit(-3205, -524, "className", "methodName7", "methodName8", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-3205, -524, "className", "methodName7", "methodName8", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
* this is vulnerable: String string = "methodName1"
* this is vulnerable: String string = "methodName2"
* this is vulnerable: String string = "methodName3"
* this is vulnerable: String string = "methodName4"
TestCase is: String[] stringArray = new String[2];
String string = "methodName1";
String string = "methodName2";
String string = "Claus not found";
String string = "methodName1";
String string = "methodName2";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
String[] stringArray = new String[2];
String string = "methodName3";
String string = "methodName4";
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@5f1b1356 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1448231012), "ConstantValue", "ConstantValue", ".class", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@34c9b972 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: methodWriter.signature = null
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "java.lang.String", "java.lang.Integer" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 0x9, "myMethod", "myMethod", "MyClass", stringArray, false, false);
        methodWriter.signature = null;
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "java.lang.String", "java.lang.Integer" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "java.lang.String", "java.lang.Integer" } Elements: ["java.lang.String", "java.lang.Integer"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0x9, "myMethod", "myMethod", "MyClass", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.signature = null, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 9;
String string = "myMethod";
String string = "myMethod";
String string = "MyClass";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.ArrayStatement@be99858b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        methodWriter.visitAnnotationDefault();
        methodWriter.getSize();
        // Improved test data:
        ClassWriter classWriter = new ClassWriter(7);
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
        methodWriter.visitAnnotationDefault();
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
statement is: // Improved test data:
ClassWriter classWriter = new ClassWriter(7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 18
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 18
Matched Method is: getSize()I
TestCase is: String[] stringArray = new String[0];
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();
int _int = 7;
ClassWriter classWriter = new ClassWriter(_int);
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@de9f1f2a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("<_#07X[i@0", false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test", "example", "input" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
        methodWriter.visitAnnotation("<_#07X[i@0", false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "test", "example", "input" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test", "example", "input" } Elements: ["test", "example", "input"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("<_#07X[i@0", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("<_#07X[i@0", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 24117248;
String string = "LocalVariableTable";
String string = "In0[Jm";
String string = "LocalVariableTable";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "<_#07X[i@0";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@76a9fd3a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("<_#07X[i@0")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "abc", "def", "ghi" };// more descriptive string array

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
        Attribute attribute = new Attribute("example_attribute_value");// more representative attribute value

        methodWriter.visitAttribute(attribute);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "abc", "def", "ghi" }// more descriptive string array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "abc", "def", "ghi" } Elements: ["abc", "def", "ghi"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("example_attribute_value")// more representative attribute value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
String string = "ocaVariableTabe";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "example_attribute_value";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@a62ccbb0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: methodWriter.signature = null
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", ((String[]) (null)), false, false);
        methodWriter.signature = null;
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.signature = null, class spoon.support.reflect.code.CtAssignmentImpl
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 16777222;
String string = "bIx2";
String string = "bIx2";
String string = "bIx2";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", ((String[]) (null)), false, false);
        methodWriter.visitAnnotationDefault();
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 16777222;
String string = "bIzxa2";
String string = "bIzxa2";
String string = "bIzxa2";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@ee9ef458 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("'%N", true)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2394)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        scss ClassWriter;
        classWriter = new ClassWriter(2);
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
        methodWriter.visitAnnotation("'%N", true);
        ByteVector byteVector = new ByteVector(2394);
        // Replace the primitive values with more descriptive examples
        classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
        stringArray = new String[]{ "Hello, World!" };
        methodWriter = new MethodWriter(classWriter, "MyMethod", "()V");
        byteVector = new ByteVector("This is a test".getBytes());
    }
}
statement is: scss ClassWriter, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: classWriter = new ClassWriter(2), class spoon.support.reflect.code.CtAssignmentImpl
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("'%N", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("'%N", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(2394), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Replace the primitive values with more descriptive examples
classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS), class spoon.support.reflect.code.CtAssignmentImpl
statement is: stringArray = new String[]{ "Hello, World!" }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter = new MethodWriter(classWriter, "MyMethod", "()V"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: byteVector = new ByteVector("This is a test".getBytes()), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: String[] stringArray = new String[0];
int _int = 24117248;
String string = "Ljava/lang/Synthetic;";
String string = "In0[Jm";
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "'%N";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 2394;
ByteVector byteVector = new ByteVector(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-25))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", ((String[]) (null)), false, false);
        methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 16777222;
String string = "bIzxa2";
String string = "bIzxa2";
String string = "bIzxa2";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "org.objectweb.asm.jip.ClassReader";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@68faab33 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(242, 242)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", arg4, arg4, 242)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This", "is", "a", "test", "string" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitIntInsn(242, 242);
        methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test", "string" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This", "is", "a", "test", "string" } Elements: ["This", "is", "a", "test", "string"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(242, 242), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(242, 242) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
statement is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 2;
String string = "2+BE[)4c_6+ |~_k/";
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "Ztd<C@2x=DrGp)T~ht";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@8da8fd2c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, false, false)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(184, arg1)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(1, (-294))
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
        methodWriter.visitLineNumber(184, label);
        methodWriter.visitIincInsn(1, -10);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(184, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(184, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitIincInsn(1, -10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(1, -10) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: Label label = new Label();
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 184;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 1;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-147), 2)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -147, "vSl)l", "vSl)l", "bIzxa2", ((String[]) (null)), false, false);
        methodWriter.visitIincInsn(-147, 2);
        methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null)));
        ByteVector byteVector = new ByteVector();
        // Improved test data:
        int x = 5;// Instead of using the primitive value -147, use a more descriptive and representative value for the variable x.

        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -147, "vSl)l", "vSl)l", "bIzxa2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(-147, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(-147, 2) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
int x = 5// Instead of using the primitive value -147, use a more descriptive and representative value for the variable x.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: int _int = 5
TestCase is: String string = "vSl)l";
String string = "vSl)l";
String string = "bIzxa2";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
int _int = 5;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-147), 2)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, arg2, arg2, "bIzxa2")
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitIincInsn(-147, 3);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(((Label) (null)), label, label, "bIzxa2");
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: classWriter.visitIincInsn(-147, 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitIincInsn(-147, 3) target is: classWriter method is: visitIincInsn(int,int)
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), label, label, "bIzxa2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), label, label, "bIzxa2") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
TestCase is: Label label = new Label();
ByteVector byteVector = new ByteVector();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@5b0b1fa2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@edd1c5b8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@48482843 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "In0[Jm"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Ljava/lang/Synthetic;", "<init>", ".class", arg5, false, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(1, 2)
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "Signature")
statement is: org.evosuite.testcase.statements.FieldStatement@fd82211a type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/String;";
        stringArray[1] = "Hello World!";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/String;", "<init>", ".class", stringArray, false, false);
        methodWriter.visitVarInsn(1, 2);
        methodWriter.visitTryCatchBlock(label, label, label, "Signature");
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/String;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/String;" Ct is: stringArray[0] = "Ljava/lang/String;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@324acffd
statement is: stringArray[1] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[1] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e4d9fe8a
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/String;", "<init>", ".class", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(1, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(1, 2) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitVarInsn(II)V
statement is: methodWriter.visitTryCatchBlock(label, label, label, "Signature"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "Signature") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: String string = "Ljava/lang/String;"
* this is vulnerable: String string = "Hello World!"
TestCase is: String[] stringArray = new String[2];
String string = "Ljava/lang/String;";
String string = "Hello World!";
Label label = new Label();
int _int = 2;
String string = "Ljava/lang/String;";
String string = "<init>";
String string = ".class";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);
String string = "Signature";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-147))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-147), 2)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null)
statement is: org.evosuite.testcase.statements.AssignmentStatement@c214aa99 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-147)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -147, "main", "testMethod", "bIzxa2", ((String[]) (null)), false, false);
        methodWriter.visitIincInsn(-147, 2);
        methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null)));
        classWriter.version = -147;
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -147, "main", "testMethod", "bIzxa2", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(-147, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(-147, 2) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1029, 2, ((Object[]) (null)), -147, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
statement is: classWriter.version = -147, class spoon.support.reflect.code.CtAssignmentImpl
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String string = "main";
String string = "testMethod";
String string = "bIzxa2";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.evosuite.testcase.statements.ArrayStatement@c064f59f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bd03ada4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: intArray[1] = 7511
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-945), 3841)
test data is: int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[5];
        intArray[0] = Integer.MIN_VALUE;// -2147483648

        intArray[1] = 7511;
        intArray[2] = 3841;
        intArray[3] = 9999;
        MethodWriter.getNewOffset(intArray, intArray, -945, 3841);
    }
}
statement is: int[] intArray = new int[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: int[] intArray = new int[5] isAssignment: false Array: new int[5] Elements: []
lengths: [5] [5]
Their type are: class [I int[]
statement is: intArray[0] = Integer.MIN_VALUE// -2147483648
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:Integer.MIN_VALUE Ct is: intArray[0] = Integer.MIN_VALUE// -2147483648

target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: intArray[1] = 7511, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:7511 Ct is: intArray[1] = 7511
target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: intArray[2] = 3841, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:3841 Ct is: intArray[2] = 3841
target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: intArray[3] = 9999, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:9999 Ct is: intArray[3] = 9999
target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.getNewOffset(intArray, intArray, -945, 3841), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, -945, 3841) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: int[] intArray = new int[5];
intArray[1] = 7511;
int _int = 7511;
intArray[1] = _int;
int _int = 3841;
intArray[1] = _int;
int _int = 9999;
intArray[1] = _int;
int _int = 3841;
int _int = null;
MethodWriter.getNewOffset(intArray, intArray, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@c7cfea54 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 247, (-8))
test data is: int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 100, 200 };// initial offset and size

        MethodWriter.getNewOffset(intArray, intArray, 105, 3);// new offset and size }}

    }
}
statement is: int[] intArray = new int[]{ 100, 200 }// initial offset and size
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[2] isAssignment: false Array: new int[]{ 100, 200 } Elements: [100, 200]
lengths: [2] []
statement is: MethodWriter.getNewOffset(intArray, intArray, 105, 3)// new offset and size }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 105, 3)// new offset and size }}
 target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: int _int = 105;
int _int = 3;
int _int = null;
int _int = null;
MethodWriter.getNewOffset((int[]) _int, (int[]) _int, _int, _int);

statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@23f07795 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        int[] intArray = new int[]{ 1, 2 };
        MethodWriter.getNewOffset(intArray, intArray, label);
        MethodWriter.getNewOffset(intArray, intArray, label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[]{ 1, 2 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[2] isAssignment: false Array: new int[]{ 1, 2 } Elements: [1, 2]
lengths: [2] []
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: Label label = new Label();
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3485))
statement is: org.evosuite.testcase.statements.ArrayStatement@5bc6c4cb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7dadcf84 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ztd<C@2x=DrGp)T~ht"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d53651ea type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Ztd<C@2x=DrGp)T~ht"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d26fa547 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "rum??]M,B|"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6cd2ff9d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "<mjW>pN8I^)(G\"`d2("
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        stringArray[2] = "GHI";
        stringArray[3] = "JKL";
        MethodWriter methodWriter = new MethodWriter(classWriter, 57, "XYZ", "!-Fzn`2J+XT", stringArray, false, true);
        methodWriter.visitMethodInsn(188, "ABC", "DEF", "$=!");
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@919d0b62
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3e55b051
statement is: stringArray[2] = "GHI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"GHI" Ct is: stringArray[2] = "GHI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@821d29e0
statement is: stringArray[3] = "JKL", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"JKL" Ct is: stringArray[3] = "JKL"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a50373a5
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 57, "XYZ", "!-Fzn`2J+XT", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(188, "ABC", "DEF", "$=!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(188, "ABC", "DEF", "$=!") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "DEF"
* this is vulnerable: String string = "GHI"
* this is vulnerable: String string = "JKL"
TestCase is: String[] stringArray = new String[4];
String string = "ABC";
String string = "DEF";
String string = "GHI";
String string = "JKL";
Label label = new Label();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@d2411a95 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[7]
statement is: org.evosuite.testcase.statements.ArrayStatement@e918f49a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dfa60363 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, -1658, "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", ((String[]) (null)), true, false);
        int[] intArray = new int[7];
        Label[] labelArray = new Label[1];
        labelArray[0] = label;
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitLabel(label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1658, "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", ((String[]) (null)), true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: int[] intArray = new int[7] isAssignment: false Array: new int[7] Elements: []
lengths: [7] [7]
Their type are: class [I int[]
statement is: Label[] labelArray = new Label[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: int[] intArray = new int[7] isAssignment: false Array: new Label[1] Elements: []
lengths: [7] [1]
Their type are: class [I Label[]
Dimension: [1] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new Label[1] Elements: []
lengths: [1] [1]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3270ce41
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
String string = "wq6p-|W";
String string = "$)&dB /)d<!y";
String string = "org.objectweb.asm.jip.MethodWriter";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
((MethodWriter) string).visitLabel(label);

statement is: org.evosuite.testcase.statements.ArrayStatement@692182e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[4]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2, 2)
test data is: int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 1, 2, 3, 4 };
        MethodWriter.getNewOffset(intArray, intArray, 2, 2);
    }
}
statement is: int[] intArray = new int[]{ 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: MethodWriter.getNewOffset(intArray, intArray, 2, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 2, 2) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: int _int = 2;
int _int = 2;
int _int = null;
int _int = null;
MethodWriter.getNewOffset((int[]) _int, (int[]) _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@2d839613 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d697b807 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte) (-14)
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, (byte)0)
test data is: byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[8];
        byteArray[0] = ((byte) (-2147483648));
        MethodWriter.readInt(byteArray, ((byte) (0)));
    }
}
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (-2147483648)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (-2147483648)) Ct is: byteArray[0] = ((byte) (-2147483648))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readInt(byteArray, ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, ((byte) (0))) target is: MethodWriter method is: readInt(byte[],byte)
Matched Method is: readInt([BI)I
TestCase is: byte[] byteArray = new byte[8];
int _int = Integer.MIN_VALUE;
byteArray[0] = (byte) _int;
int _int = 0;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@a543b101 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fc229a64 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)76
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, 1)
test data is: byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        byteArray[0] = ((byte) (123));// a random integer value

        byteArray[1] = ((byte) (76));
        // an integer value that is not at the start of the array
        byteArray[2] = ((byte) ('a'));// a character value

        MethodWriter.readInt(byteArray, 1);
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (123))// a random integer value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (123)) Ct is: byteArray[0] = ((byte) (123))// a random integer value

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (76)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (76)) Ct is: byteArray[1] = ((byte) (76))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // an integer value that is not at the start of the array
byteArray[2] = ((byte) ('a'))// a character value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('a')) Ct is: // an integer value that is not at the start of the array
byteArray[2] = ((byte) ('a'))// a character value

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readInt(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, 1) target is: MethodWriter method is: readInt(byte[],int)
Matched Method is: readInt([BI)I
TestCase is: byte[] byteArray = new byte[6];
int _int = 123;
byteArray[1] = (byte) _int;
int _int = 76;
byteArray[1] = (byte) _int;
char _char = 'a';
byteArray[1] = (byte) _char;
int _int = 1;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@a580212b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@61a8b4bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte) (-1)
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, 1)
test data is: byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        byte[] byteArray = new byte[]{ ((byte) (0x7f)), ((byte) (0xff)), ((byte) (0x80)), ((byte) (0x0)), ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)) };
        MethodWriter.readShort(byteArray, 1);
    }
}
statement is: // Improved test data:
byte[] byteArray = new byte[]{ ((byte) (0x7f)), ((byte) (0xff)), ((byte) (0x80)), ((byte) (0x0)), ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ ((byte) (0x7f)), ((byte) (0xff)), ((byte) (0x80)), ((byte) (0x0)), ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)) } Elements: [((byte) (0x7f)), ((byte) (0xff)), ((byte) (0x80)), ((byte) (0x0)), ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3))]
lengths: [7] []
statement is: MethodWriter.readShort(byteArray, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, 1) target is: MethodWriter method is: readShort(byte[],int)
Matched Method is: readShort([BI)S
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 1;
int _int = null;
MethodWriter.readShort((byte[]) _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@f98df20a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fd60a9cb type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)112
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, (byte)0)
test data is: byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) (97));// ascii value of 'a'

        MethodWriter.readShort(byteArray, ((byte) (0)));
        byteArray[1] = ((byte) (-128));
        MethodWriter.readShort(byteArray, ((byte) (1)));
        byteArray[2] = ((byte) (255));
        MethodWriter.readShort(byteArray, ((byte) (2)));
        byteArray[3] = ((byte) (0));
        MethodWriter.readShort(byteArray, ((byte) (3)));
        byteArray[4] = ((byte) (100));// ascii value of 'd'

        MethodWriter.readShort(byteArray, ((byte) (4)));
    }
}
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (97))// ascii value of 'a'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (97)) Ct is: byteArray[0] = ((byte) (97))// ascii value of 'a'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (0))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray[1] = ((byte) (-128)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (-128)) Ct is: byteArray[1] = ((byte) (-128))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (1))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (1))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray[2] = ((byte) (255)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (255)) Ct is: byteArray[2] = ((byte) (255))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (2))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray[3] = ((byte) (0)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0)) Ct is: byteArray[3] = ((byte) (0))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (3))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (3))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray[4] = ((byte) (100))// ascii value of 'd'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (100)) Ct is: byteArray[4] = ((byte) (100))// ascii value of 'd'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (4))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (4))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
TestCase is: byte[] byteArray = new byte[5];
int _int = 97;
byteArray[0] = (byte) _int;
int _int = 0;
MethodWriter.readShort(byteArray, _int);
byteArray[0] = (byte) _int;
int _int = 1;
MethodWriter.readShort(byteArray, _int);
int _int = 255;
byteArray[0] = (byte) _int;
int _int = 2;
MethodWriter.readShort(byteArray, _int);
int _int = 0;
byteArray[0] = (byte) _int;
int _int = 3;
MethodWriter.readShort(byteArray, _int);
int _int = 100;
byteArray[0] = (byte) _int;
int _int = 4;
MethodWriter.readShort(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@cc9b871c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, 2)
test data is: byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the MethodWriter.readShort method
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xde)) };
        MethodWriter.readShort(byteArray, 2);
    }
}
statement is: // Improved test data for the MethodWriter.readShort method
byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xde)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xde)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xde))]
lengths: [5] []
statement is: MethodWriter.readShort(byteArray, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, 2) target is: MethodWriter method is: readShort(byte[],int)
Matched Method is: readShort([BI)S
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 2;
int _int = null;
MethodWriter.readShort((byte[]) _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@8ecbace0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6185b168 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte) (-91)
statement is: readUnsignedShort([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1)
test data is: byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        unsigned = $missing$;
        short[] byteArray = new unsigned[5];
        byteArray[1] = 0xc9;
        MethodWriter.readUnsignedShort(byteArray, 1);// expected result is 425 (decimal) }}

    }
}
statement is: unsigned = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: short[] byteArray = new unsigned[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new unsigned[5] Elements: []
lengths: [5] [5]
Their type are: class [B unsigned[]
statement is: byteArray[1] = 0xc9, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter.readUnsignedShort(byteArray, 1)// expected result is 425 (decimal) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readUnsignedShort(byteArray, 1)// expected result is 425 (decimal) }}
 target is: MethodWriter method is: readUnsignedShort(short[],int)
Matched Method is: readUnsignedShort([BI)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 1;
int _int = null;
MethodWriter.readUnsignedShort((byte[]) _int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@1119ae83 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@faa5f8c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c6a4a10 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "In0[Jm"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, arg5, true, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/Synthetic;";
        stringArray[1] = "In0[Jm";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|W", "$)&dB /)d<!y", ((String) (null)), stringArray, true, false);
        methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/Synthetic;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/Synthetic;" Ct is: stringArray[0] = "Ljava/lang/Synthetic;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e5519e12
statement is: stringArray[1] = "In0[Jm", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"In0[Jm" Ct is: stringArray[1] = "In0[Jm"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e600ec37
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1716, "wq6p-|W", "$)&dB /)d<!y", ((String) (null)), stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
* this is vulnerable: String string = "In0[Jm"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/Synthetic;";
String string = "In0[Jm";
String string = "wq6p-|W";
String string = "$)&dB /)d<!y";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, false);
int _int = 255;
String string = "org.objectweb.asm.jip.Attribute";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.ArrayStatement@98cebedd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6359fdf1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a3d918a1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "In0[Jm"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, arg5, true, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false)
test data is: ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Ljava/lang/String;";// Changed from "Ljava/lang/Synthetic;" to make the test more descriptive

        stringArray[1] = "In0[Jm";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1724, "wq6p-|W", "$)&dB )d<!y", ((String) (null)), stringArray, true, false);
        methodWriter.visitParameterAnnotation(-268435463, "xj5owk", false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Ljava/lang/String;"// Changed from "Ljava/lang/Synthetic;" to make the test more descriptive
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/String;" Ct is: stringArray[0] = "Ljava/lang/String;"// Changed from "Ljava/lang/Synthetic;" to make the test more descriptive

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cb156bdb
statement is: stringArray[1] = "In0[Jm", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"In0[Jm" Ct is: stringArray[1] = "In0[Jm"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c4fb4184
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1724, "wq6p-|W", "$)&dB )d<!y", ((String) (null)), stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(-268435463, "xj5owk", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(-268435463, "xj5owk", false) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
i 2 Parameters size() 2 Num of Method Parameters: 3
* this is vulnerable: String string = "In0[Jm"
TestCase is: String[] stringArray = new String[2];
String[] stringArray = "Ljava/lang/String;";
String string = "In0[Jm";
String string = "wq6p-|W";
String string = "$)&dB )d<!y";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, true, false);
String string = "xj5owk";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);

* test suite isTestSuite: 203
Test 0: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 1: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();
Test 2: 
byte[] byteArray = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);
Test 5: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 6: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);
Test 7: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 15: 
ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);
Test 16: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);
Test 20: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);
Test 21: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);
Test 22: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);
Test 23: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));
Test 24: 
ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 25: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));
Test 26: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);
Test 27: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));
Test 28: 
ClassWriter classWriter = new ClassWriter(7);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String[]) null, true, false);
methodWriter.visitVarInsn(7, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);
Test 30: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);
Test 31: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);
Test 32: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 33: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));
Test 34: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
Test 36: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
Test 37: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");
Test 38: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");
Test 39: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
Test 40: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 41: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);
Test 42: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);
Test 43: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);
Test 44: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);
Test 45: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 46: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 47: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");
Test 48: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(2);
Test 49: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");
Test 50: 
ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);
Test 51: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);
Test 52: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);
Test 53: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);
Test 54: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = label;
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
Test 55: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();
Test 56: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 57: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 58: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
Test 59: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));
Test 60: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);
Test 61: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 62: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
Test 63: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);
Test 64: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);
Test 65: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));
Test 66: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 67: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 68: 
ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 69: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);
Test 70: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
// Undeclared exception!
try { 
  methodWriter.visitMaxs((-1515), 7);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 71: 
ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);
Test 72: 
ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);
Test 74: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
Test 75: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 76: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();
Test 77: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();
Test 78: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();
Test 79: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();
Test 81: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 82: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();
Test 83: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 84: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 85: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 86: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 88: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 90: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 94: 
int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);
Test 95: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));
Test 96: 
Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 97: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);
Test 98: 
ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 99: 
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);
Test 100: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);
Test 101: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);
Test 102: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);
Test 103: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);
Test 104: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 2);
Test 105: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);
Test 106: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 107: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 108: 
String string = "\"Hello World\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "10", "\"Hello World\"", "\"Hello World\"", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 109: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();

Test 110: 
byte[] byteArray = new byte[2];
MethodWriter.writeShort(byteArray, 100, (int) (Integer) null);

Test 111: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 112: 
String[] stringArray = new String[0];

Test 113: 
Label label = new Label();

Test 114: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 78, (int) "Constructor", "methodName(param1, param2)", (String) stringArray, (String) false, (String[]) true, false, true);

Test 115: 
String string = "In0[Jm";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "LocalVariableTable", "In0[Jm", "LocalVariableTable", (String) false, (String[]) false, false, false);
String string = "<_#07X[i@0";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 116: 
String[] stringArray = new String[2];
String string = "Ljava/lang/String;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 136, (int) "Ljava/lang/String;", "Ljava/lang/StringBuilder;", "Ljava/lang/StringBuffer;", (String) stringArray, (String[]) false, false, false);
int _int = 2;
String string = "Ljava/lang/Integer;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 117: 
String[] stringArray = new String[0];
String string = "ocaVariableTabe";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) stringArray, (String[]) false, false, false);
String string = "ocaVariableTabe";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 118: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, true, true);
int _int = 2;
int _int = 265;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 119: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777220, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 120: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/String;", true, false);
int _int = 2;
int _int = 2;
int _int = 17;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 16777217;
int _int = 1;
((MethodWriter) string).visitIntInsn(_int, _int);
int _int = 1;
int _int = 57;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 121: 
String string = "fvgmumC";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "fvgmumC", "fvgmumC", "fvgmumC", (String) false, (String[]) false, false, false);
int _int = 0;
int _int = 2;
int _int = 26;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

Test 122: 
String string = "}@<>($IT^";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "}@<>($IT^", (int) "}@<>($IT^", "}@<>($IT^", (String) false, (String) false, (String[]) null, false, false);
int _int = 3;
int _int = null;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 123: 
String string = "}@<>($IT^";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String) false, (String[]) false, false, false);
int _int = 4;
int _int = 4;
int _int = 4;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

Test 124: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 125: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 10;
((MethodWriter) string).visitInsn(_int);

Test 126: 
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) (Integer) null, "Zyd<@2x=DrGp)T~h7", (String) true, (String) false, (String[]) "Zyd<@2x=DrGp)T~h7", true, false);
int _int = 188;
((MethodWriter) string).visitInsn(_int);

Test 127: 
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) (Integer) null, "Zyd<@2x=DrGp)T~h7", (String) true, (String) true, (String[]) "Zyd<@2x=DrGp)T~h7", true, true);
int _int = 177;
((MethodWriter) string).visitInsn(_int);

Test 128: 
String[] stringArray = new String[0];

Test 129: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 240, (int) "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", (String) true, (String[]) true, true, true);
int _int = 240;
int _int = 932;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 130: 
String[] stringArray = new String[0];

Test 131: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
int _int = 17;
int _int = 560;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 132: 
String string = "calculateSum";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "calculateSum", "(II)I", "return arg1 + arg2;", (String) true, (String[]) false, true, false);
int _int = 7;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 133: 
String[] stringArray = new String[5];
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "add", "subtract", "multiply", (String) stringArray, (String[]) true, false, false);
int _int = 24;
int _int = 3353;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 134: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 135: 
String string = "Ztd<C@2x=?rFp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Ztd<C@2x=?rFp)T~ht", (int) (Integer) null, "Ztd<C@2x=?rFp)T~ht", (String) true, (String) true, (String[]) "Ztd<C@2x=?rFp)T~ht", true, true);
int _int = 55;
int _int = 240;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 136: 
String string = "T:-TRF[vk?:a%}Cg]";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "T:-TRF[vk?:a%}Cg]", (int) "T:-TRF[vk?:a%}Cg]", "", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
String string = "T:-TRF[vk?:a%}Cg]";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 137: 
String[] stringArray = new String[0];
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 2;
String string = "Code";
String string = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
String string = "Zyd<@2x=DrGp)T~h7";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 138: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, false, false);
int _int = 2;
String string = "LocalVariableTable";
String string = "&/|";
String string = "Deprecate";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 139: 
String[] stringArray = new String[2];
String string = "my_descriptor";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "my_method", (int) "my_descriptor", "$)&dB /)d<!y", "my_signature", (String) stringArray, (String[]) true, false, false);
int _int = 186;
String string = "my_class";
String string = "my_method";
String string = "my_descriptor";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 140: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
int _int = 185;
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "3s8N(DTdaanGn`";
String string = "$)&dB /)d<!y";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 141: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2048, (int) "main", "Hello World", "Hello World", (String) stringArray, (String[]) true, true, true);
int _int = 185;
String string = "java/lang/System";
String string = "out.println";
String string = "(Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 142: 
Label label = new Label();
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) true, (String[]) false, true, false);
int _int = 2;
byte[] byteArray = null;
((Label) string).resolve(methodWriter, _int, byteArray);
int _int = 172;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 143: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "!-Fzn`2J+XT";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "!-Fzn`2J+XT", (int) "!-Fzn`2J+XT", "SourceDebugExtension", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 144: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 145: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 146: 
String[] stringArray = new String[0];
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 147: 
String[] stringArray = new String[0];
String string = "A_B_C";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "A_B_C", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
String string = "This is a test String";
((MethodWriter) string).visitLdcInsn(string);

Test 148: 
String[] stringArray = new String[0];
String string = "Addition";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Addition", "Subtraction", "Multiplication", (String) stringArray, (String[]) true, false, false);
String string = "Addition";
String string = "result";
String string = "int";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 149: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) stringArray, (String[]) false, false, false);

Test 150: 
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) true, (String[]) false, true, false);
int _int = 256;
int _int = 1;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 151: 
String string = "bYIlza2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 57;
Label[] labelArray = new Label[0];
int _int = 3828;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

Test 152: 
String[] stringArray = new String[4];
Label label = new Label();
Label[] labelArray = new Label[8];

Test 153: 
String string = "m#{Y#p";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "m#{Y#p", "|KQl`D#", "m#{Y#p", (String) false, (String[]) false, false, false);
String string = "|KQl`D#";
int _int = 219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).getSize();

Test 154: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
String string = "2+Bl[)4c_6< |~/";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 155: 
String[] stringArray = new String[4];
String string = "A unique method signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "A unique method name", (int) "A unique method signature", "The return type of the method", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "[PusE";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

Test 156: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
String string = "";
String string = "Ztd<C@2x=DrGp)T~ht";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);

Test 157: 
String string = "myTestMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "myTestMethod", "()V", "Ljava/lang/Object;", (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "myTestMethod";
String string = "()V";
String string = "RuntimeInvisibleAnnotations";
int _int = 262144;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 158: 
String[] stringArray = new String[2];
String string = "A16_@#ZRM";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 177, (int) "A16_@#ZRM", "$)&dB /)d<!y", "A16_@#ZRM", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "N=Qn& ";
String string = "ocaVariableTabe";
String string = "7uE$d)Ki";
int _int = 50923456;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "f?^ZhS8\"(zz7IEg2";
String string = "A16_@#ZRM";
int _int = 268435455;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 159: 
Label label = new Label();
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
String string = "2+Bl[)4c_6+ |~_k/";
String string = "Deprecated";
String string = "\"wf~ugP^c";
int _int = 2093;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 160: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "Ljava/lang/Integer;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/Integer;", "<init>", ".class", (String) stringArray, (String[]) false, false, false);
int _int = 2;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 158;
((MethodWriter) string).visitLineNumber(_int, label);

Test 161: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 162: 
String[] stringArray = new String[4];
String string = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "!-Fzn`2J+XT", (int) "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1024;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 163: 
Label label = new Label();
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 187, (int) "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "EgbL_";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 954;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

Test 164: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) ")\" NU2}>qJX`U", (int) "$)&dB /)d<!y", "abc", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 1;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

Test 165: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
String string = "2+BE[)84c_6+ |~_k/";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

Test 166: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "methodName";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "methodName", "parameters", "returnType", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "exceptionType";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 7;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 167: 
Label label = new Label();
String[] stringArray = new String[5];
String string = "()V";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "test", (int) "()V", (String) stringArray, (String) false, (String) false, (String[]) "The quick brown fox", true, false);
Label label = null;
((MethodWriter) string).visitJumpInsn((int) label, label);
int _int = 2000;
int _int = 4;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 10;
int _int = 1867;
((MethodWriter) string).visitMaxs(_int, _int);

Test 168: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) ":wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 1;
int _int = 13;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 169: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 8;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 57;
int _int = 57;
((MethodWriter) string).visitMaxs(_int, _int);

Test 170: 
String[] stringArray = new String[2];
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) ":wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 8;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 171: 
String string = "bIx2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String) false, (String[]) false, false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 127;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, stringArray);

Test 172: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
((MethodWriter) string).getSize();

Test 173: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "add", "int add(int a, int b)", "int add(int a, int b)", (String) stringArray, (String[]) true, false, false);
int _int = 1024;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 265;
String string = "java/lang/Math";
((MethodWriter) string).visitTypeInsn(_int, string);
((MethodWriter) string).getSize();

Test 174: 
String[] stringArray = new String[2];
String string = "methodName1";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Claus not found", (int) "methodName1", "methodName2", (String) stringArray, (String) true, (String[]) true, true, true);
String[] stringArray = new String[2];
((MethodWriter) string).getSize();

Test 175: 
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 9, (int) "myMethod", "myMethod", "MyClass", (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 176: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();
int _int = 7;
ClassWriter classWriter = new ClassWriter(_int);
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 177: 
String string = "In0[Jm";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "LocalVariableTable", "In0[Jm", "LocalVariableTable", (String) false, (String[]) false, false, false);
String string = "<_#07X[i@0";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 178: 
String string = "ocaVariableTabe";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) false, (String[]) false, false, false);
String string = "example_attribute_value";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
((MethodWriter) string).getSize();

Test 179: 
String string = "bIx2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIx2", "bIx2", "bIx2", (String) false, (String[]) false, false, false);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 180: 
String string = "bIzxa2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIzxa2", "bIzxa2", "bIzxa2", (String) false, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 181: 
String[] stringArray = new String[0];
String string = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", (String) stringArray, (String[]) false, false, false);
String string = "'%N";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 2394;
ByteVector byteVector = new ByteVector(_int);

Test 182: 
String string = "bIzxa2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIzxa2", "bIzxa2", "bIzxa2", (String) false, (String[]) false, false, false);
String string = "org.objectweb.asm.jip.ClassReader";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 183: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 184: 
Label label = new Label();
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) false, (String[]) false, false, false);
int _int = 184;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 1;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 185: 
String string = "vSl)l";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vSl)l", (int) "vSl)l", "bIzxa2", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 186: 
Label label = new Label();
ByteVector byteVector = new ByteVector();

Test 187: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "Ljava/lang/String;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/String;", "<init>", ".class", (String) stringArray, (String[]) false, false, false);
int _int = 1;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);
String string = "Signature";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 188: 
String string = "testMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "testMethod", "bIzxa2", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 189: 
int[] intArray = new int[5];
intArray[1] = 7511;
intArray[1] = 7511;
intArray[1] = 3841;
intArray[1] = 9999;
MethodWriter.getNewOffset(intArray, intArray, 3841, (int) (Integer) null);

Test 190: 
MethodWriter.getNewOffset((int[]) 105, (int[]) 3, (int) (Integer) null, (int) (Integer) null);

Test 191: 
Label label = new Label();
MethodWriter.getNewOffset((int[]) label, (int[]) null, (Label) null);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

Test 192: 
String[] stringArray = new String[4];
Label label = new Label();

Test 193: 
Label label = new Label();
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String) true, (String) false, (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 194: 
MethodWriter.getNewOffset((int[]) 2, (int[]) 2, (int) (Integer) null, (int) (Integer) null);

Test 195: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) Integer.MIN_VALUE;
MethodWriter.readInt(byteArray, 0);

Test 196: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte) 123;
byteArray[1] = (byte) 76;
byteArray[1] = (byte) 'a';
MethodWriter.readInt(byteArray, 1);

Test 197: 
MethodWriter.readShort((byte[]) 1, (int) (Integer) null);

Test 198: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 97;
MethodWriter.readShort(byteArray, 0);
byteArray[0] = (byte) 97;
MethodWriter.readShort(byteArray, 1);
byteArray[0] = (byte) 255;
MethodWriter.readShort(byteArray, 2);
byteArray[0] = (byte) 0;
MethodWriter.readShort(byteArray, 3);
byteArray[0] = (byte) 100;
MethodWriter.readShort(byteArray, 4);

Test 199: 
MethodWriter.readShort((byte[]) 2, (int) (Integer) null);

Test 200: 
MethodWriter.readUnsignedShort((byte[]) 1, (int) (Integer) null);

Test 201: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/Synthetic;", true, false);
int _int = 255;
String string = "org.objectweb.asm.jip.Attribute";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 202: 
String[] stringArray = new String[2];
String string = "$)&dB )d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB )d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/String;", true, false);
String string = "xj5owk";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);


* Generated after the refinement and before minimization 203 tests with total length 1214
* test suite isTestSuite: 203
Test 0: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 1: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();
Test 2: 
byte[] byteArray = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);
Test 5: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 6: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);
Test 7: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 15: 
ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);
Test 16: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);
Test 20: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);
Test 21: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);
Test 22: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);
Test 23: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));
Test 24: 
ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 25: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));
Test 26: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);
Test 27: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));
Test 28: 
ClassWriter classWriter = new ClassWriter(7);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String[]) null, true, false);
methodWriter.visitVarInsn(7, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);
Test 30: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);
Test 31: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);
Test 32: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 33: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));
Test 34: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
Test 36: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
Test 37: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");
Test 38: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");
Test 39: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
Test 40: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 41: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);
Test 42: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);
Test 43: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);
Test 44: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);
Test 45: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 46: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 47: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");
Test 48: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(2);
Test 49: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");
Test 50: 
ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);
Test 51: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);
Test 52: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);
Test 53: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);
Test 54: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = label;
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
Test 55: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();
Test 56: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 57: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 58: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
Test 59: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));
Test 60: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);
Test 61: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 62: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
Test 63: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);
Test 64: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);
Test 65: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));
Test 66: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 67: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 68: 
ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 69: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);
Test 70: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
// Undeclared exception!
try { 
  methodWriter.visitMaxs((-1515), 7);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 71: 
ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);
Test 72: 
ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);
Test 74: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
Test 75: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 76: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();
Test 77: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();
Test 78: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();
Test 79: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();
Test 81: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 82: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();
Test 83: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 84: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 85: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 86: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 88: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 90: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 94: 
int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);
Test 95: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));
Test 96: 
Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 97: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);
Test 98: 
ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 99: 
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);
Test 100: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);
Test 101: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);
Test 102: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);
Test 103: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);
Test 104: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 2);
Test 105: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);
Test 106: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 107: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 108: 
String string = "\"Hello World\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "10", "\"Hello World\"", "\"Hello World\"", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 109: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();

Test 110: 
byte[] byteArray = new byte[2];
MethodWriter.writeShort(byteArray, 100, (int) (Integer) null);

Test 111: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 112: 
String[] stringArray = new String[0];

Test 113: 
Label label = new Label();

Test 114: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 78, (int) "Constructor", "methodName(param1, param2)", (String) stringArray, (String) false, (String[]) true, false, true);

Test 115: 
String string = "In0[Jm";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "LocalVariableTable", "In0[Jm", "LocalVariableTable", (String) false, (String[]) false, false, false);
String string = "<_#07X[i@0";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 116: 
String[] stringArray = new String[2];
String string = "Ljava/lang/String;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 136, (int) "Ljava/lang/String;", "Ljava/lang/StringBuilder;", "Ljava/lang/StringBuffer;", (String) stringArray, (String[]) false, false, false);
int _int = 2;
String string = "Ljava/lang/Integer;";
boolean _boolean = false;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 117: 
String[] stringArray = new String[0];
String string = "ocaVariableTabe";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) stringArray, (String[]) false, false, false);
String string = "ocaVariableTabe";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 118: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, true, true);
int _int = 2;
int _int = 265;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 119: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777220, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 120: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/String;", true, false);
int _int = 2;
int _int = 2;
int _int = 17;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 16777217;
int _int = 1;
((MethodWriter) string).visitIntInsn(_int, _int);
int _int = 1;
int _int = 57;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 121: 
String string = "fvgmumC";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "fvgmumC", "fvgmumC", "fvgmumC", (String) false, (String[]) false, false, false);
int _int = 0;
int _int = 2;
int _int = 26;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

Test 122: 
String string = "}@<>($IT^";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "}@<>($IT^", (int) "}@<>($IT^", "}@<>($IT^", (String) false, (String) false, (String[]) null, false, false);
int _int = 3;
int _int = null;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 123: 
String string = "}@<>($IT^";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String) false, (String[]) false, false, false);
int _int = 4;
int _int = 4;
int _int = 4;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

Test 124: 
String[] stringArray = new String[8];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "", "", "}\"|H", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 125: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 10;
((MethodWriter) string).visitInsn(_int);

Test 126: 
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) (Integer) null, "Zyd<@2x=DrGp)T~h7", (String) true, (String) false, (String[]) "Zyd<@2x=DrGp)T~h7", true, false);
int _int = 188;
((MethodWriter) string).visitInsn(_int);

Test 127: 
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) (Integer) null, "Zyd<@2x=DrGp)T~h7", (String) true, (String) true, (String[]) "Zyd<@2x=DrGp)T~h7", true, true);
int _int = 177;
((MethodWriter) string).visitInsn(_int);

Test 128: 
String[] stringArray = new String[0];

Test 129: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 240, (int) "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", (String) true, (String[]) true, true, true);
int _int = 240;
int _int = 932;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 130: 
String[] stringArray = new String[0];

Test 131: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
int _int = 17;
int _int = 560;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 132: 
String string = "calculateSum";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "calculateSum", "(II)I", "return arg1 + arg2;", (String) true, (String[]) false, true, false);
int _int = 7;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 133: 
String[] stringArray = new String[5];
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "add", "subtract", "multiply", (String) stringArray, (String[]) true, false, false);
int _int = 24;
int _int = 3353;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 134: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
int _int = 57;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 135: 
String string = "Ztd<C@2x=?rFp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Ztd<C@2x=?rFp)T~ht", (int) (Integer) null, "Ztd<C@2x=?rFp)T~ht", (String) true, (String) true, (String[]) "Ztd<C@2x=?rFp)T~ht", true, true);
int _int = 55;
int _int = 240;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 136: 
String string = "T:-TRF[vk?:a%}Cg]";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "T:-TRF[vk?:a%}Cg]", (int) "T:-TRF[vk?:a%}Cg]", "", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
String string = "T:-TRF[vk?:a%}Cg]";
((MethodWriter) string).visitTypeInsn(_int, string);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 137: 
String[] stringArray = new String[0];
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 2;
String string = "Code";
String string = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
String string = "Zyd<@2x=DrGp)T~h7";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 138: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, false, false);
int _int = 2;
String string = "LocalVariableTable";
String string = "&/|";
String string = "Deprecate";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 139: 
String[] stringArray = new String[2];
String string = "my_descriptor";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "my_method", (int) "my_descriptor", "$)&dB /)d<!y", "my_signature", (String) stringArray, (String[]) true, false, false);
int _int = 186;
String string = "my_class";
String string = "my_method";
String string = "my_descriptor";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 140: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
int _int = 185;
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "3s8N(DTdaanGn`";
String string = "$)&dB /)d<!y";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 141: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2048, (int) "main", "Hello World", "Hello World", (String) stringArray, (String[]) true, true, true);
int _int = 185;
String string = "java/lang/System";
String string = "out.println";
String string = "(Ljava/lang/String;)V";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 142: 
Label label = new Label();
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) true, (String[]) false, true, false);
int _int = 2;
byte[] byteArray = null;
((Label) string).resolve(methodWriter, _int, byteArray);
int _int = 172;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 143: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "!-Fzn`2J+XT";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "!-Fzn`2J+XT", (int) "!-Fzn`2J+XT", "SourceDebugExtension", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 144: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 145: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 146: 
String[] stringArray = new String[0];
String string = "Zyd<@2x=DrGp)T~h7";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Code", (int) "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 147: 
String[] stringArray = new String[0];
String string = "A_B_C";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "A_B_C", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) stringArray, (String[]) true, false, false);
String string = "This is a test String";
((MethodWriter) string).visitLdcInsn(string);

Test 148: 
String[] stringArray = new String[0];
String string = "Addition";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Addition", "Subtraction", "Multiplication", (String) stringArray, (String[]) true, false, false);
String string = "Addition";
String string = "result";
String string = "int";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 149: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) stringArray, (String[]) false, false, false);

Test 150: 
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) true, (String[]) false, true, false);
int _int = 256;
int _int = 1;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 151: 
String string = "bYIlza2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 57;
Label[] labelArray = new Label[0];
int _int = 3828;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);

Test 152: 
String[] stringArray = new String[4];
Label label = new Label();
Label[] labelArray = new Label[8];

Test 153: 
String string = "m#{Y#p";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "m#{Y#p", "|KQl`D#", "m#{Y#p", (String) false, (String[]) false, false, false);
String string = "|KQl`D#";
int _int = 219;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).getSize();

Test 154: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
String string = "2+Bl[)4c_6< |~/";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 155: 
String[] stringArray = new String[4];
String string = "A unique method signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "A unique method name", (int) "A unique method signature", "The return type of the method", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "[PusE";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

Test 156: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
String string = "";
String string = "Ztd<C@2x=DrGp)T~ht";
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, label, _int);

Test 157: 
String string = "myTestMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "myTestMethod", "()V", "Ljava/lang/Object;", (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "myTestMethod";
String string = "()V";
String string = "RuntimeInvisibleAnnotations";
int _int = 262144;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 158: 
String[] stringArray = new String[2];
String string = "A16_@#ZRM";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 177, (int) "A16_@#ZRM", "$)&dB /)d<!y", "A16_@#ZRM", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "N=Qn& ";
String string = "ocaVariableTabe";
String string = "7uE$d)Ki";
int _int = 50923456;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "f?^ZhS8\"(zz7IEg2";
String string = "A16_@#ZRM";
int _int = 268435455;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 159: 
Label label = new Label();
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
String string = "2+Bl[)4c_6+ |~_k/";
String string = "Deprecated";
String string = "\"wf~ugP^c";
int _int = 2093;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 160: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "Ljava/lang/Integer;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/Integer;", "<init>", ".class", (String) stringArray, (String[]) false, false, false);
int _int = 2;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 158;
((MethodWriter) string).visitLineNumber(_int, label);

Test 161: 
String string = "3s8N(DTdaanGn`";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 162: 
String[] stringArray = new String[4];
String string = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "!-Fzn`2J+XT", (int) "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1024;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 163: 
Label label = new Label();
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 187, (int) "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "EgbL_";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 954;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

Test 164: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) ")\" NU2}>qJX`U", (int) "$)&dB /)d<!y", "abc", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 1;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 1;
int _int = 265;
((MethodWriter) string).visitMaxs(_int, _int);

Test 165: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
String string = "2+BE[)84c_6+ |~_k/";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

Test 166: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "methodName";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "methodName", "parameters", "returnType", (String) stringArray, (String[]) true, false, false);
Label label = new Label();
String string = "exceptionType";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 7;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 167: 
Label label = new Label();
String[] stringArray = new String[5];
String string = "()V";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "test", (int) "()V", (String) stringArray, (String) false, (String) false, (String[]) "The quick brown fox", true, false);
Label label = null;
((MethodWriter) string).visitJumpInsn((int) label, label);
int _int = 2000;
int _int = 4;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 10;
int _int = 1867;
((MethodWriter) string).visitMaxs(_int, _int);

Test 168: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) ":wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 1;
int _int = 13;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 169: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 8;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 57;
int _int = 57;
((MethodWriter) string).visitMaxs(_int, _int);

Test 170: 
String[] stringArray = new String[2];
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) ":wq6p-|", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) true, (String[]) "Ljava/lang/Synthetic;", true, true);
int _int = 8;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 1;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 171: 
String string = "bIx2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String) false, (String[]) false, false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 127;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, stringArray);

Test 172: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
((MethodWriter) string).getSize();

Test 173: 
String[] stringArray = new String[0];
Label label = new Label();
String string = "add";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "add", "int add(int a, int b)", "int add(int a, int b)", (String) stringArray, (String[]) true, false, false);
int _int = 1024;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 265;
String string = "java/lang/Math";
((MethodWriter) string).visitTypeInsn(_int, string);
((MethodWriter) string).getSize();

Test 174: 
String[] stringArray = new String[2];
String string = "methodName1";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Claus not found", (int) "methodName1", "methodName2", (String) stringArray, (String) true, (String[]) true, true, true);
String[] stringArray = new String[2];
((MethodWriter) string).getSize();

Test 175: 
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 9, (int) "myMethod", "myMethod", "MyClass", (String) false, (String[]) false, false, false);
((MethodWriter) string).getSize();

Test 176: 
String[] stringArray = new String[0];
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) stringArray, (String[]) true, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();
int _int = 7;
ClassWriter classWriter = new ClassWriter(_int);
int _int = 2;
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
String string = "2+Bl[)4c_6+ |~/";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, stringArray, _boolean, _boolean);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 177: 
String string = "In0[Jm";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "LocalVariableTable", "In0[Jm", "LocalVariableTable", (String) false, (String[]) false, false, false);
String string = "<_#07X[i@0";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 178: 
String string = "ocaVariableTabe";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", (String) false, (String[]) false, false, false);
String string = "example_attribute_value";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
((MethodWriter) string).getSize();

Test 179: 
String string = "bIx2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIx2", "bIx2", "bIx2", (String) false, (String[]) false, false, false);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 180: 
String string = "bIzxa2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIzxa2", "bIzxa2", "bIzxa2", (String) false, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 181: 
String[] stringArray = new String[0];
String string = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 24117248, (int) "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", (String) stringArray, (String[]) false, false, false);
String string = "'%N";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 2394;
ByteVector byteVector = new ByteVector(_int);

Test 182: 
String string = "bIzxa2";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777222, (int) "bIzxa2", "bIzxa2", "bIzxa2", (String) false, (String[]) false, false, false);
String string = "org.objectweb.asm.jip.ClassReader";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 183: 
String string = "Ztd<C@2x=DrGp)T~ht";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 242;
int _int = 242;
((MethodWriter) string).visitIntInsn(_int, _int);
String string = "Ztd<C@2x=DrGp)T~ht";
String string = "H:#ug";
String string = "2+BE[)4c_6+ |~_k/";
int _int = 242;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 184: 
Label label = new Label();
String string = "2+Bl[)4c_6+ |~/";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String) false, (String[]) false, false, false);
int _int = 184;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 1;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 185: 
String string = "vSl)l";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vSl)l", (int) "vSl)l", "bIzxa2", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 186: 
Label label = new Label();
ByteVector byteVector = new ByteVector();

Test 187: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "Ljava/lang/String;";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Ljava/lang/String;", "<init>", ".class", (String) stringArray, (String[]) false, false, false);
int _int = 1;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);
String string = "Signature";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

Test 188: 
String string = "testMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "main", (int) "testMethod", "bIzxa2", (String) false, (String) false, (String[]) null, false, false);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 1029;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 189: 
int[] intArray = new int[5];
intArray[1] = 7511;
intArray[1] = 7511;
intArray[1] = 3841;
intArray[1] = 9999;
MethodWriter.getNewOffset(intArray, intArray, 3841, (int) (Integer) null);

Test 190: 
MethodWriter.getNewOffset((int[]) 105, (int[]) 3, (int) (Integer) null, (int) (Integer) null);

Test 191: 
Label label = new Label();
MethodWriter.getNewOffset((int[]) label, (int[]) null, (Label) null);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

Test 192: 
String[] stringArray = new String[4];
Label label = new Label();

Test 193: 
Label label = new Label();
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String) true, (String) false, (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 194: 
MethodWriter.getNewOffset((int[]) 2, (int[]) 2, (int) (Integer) null, (int) (Integer) null);

Test 195: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) Integer.MIN_VALUE;
MethodWriter.readInt(byteArray, 0);

Test 196: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte) 123;
byteArray[1] = (byte) 76;
byteArray[1] = (byte) 'a';
MethodWriter.readInt(byteArray, 1);

Test 197: 
MethodWriter.readShort((byte[]) 1, (int) (Integer) null);

Test 198: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 97;
MethodWriter.readShort(byteArray, 0);
byteArray[0] = (byte) 97;
MethodWriter.readShort(byteArray, 1);
byteArray[0] = (byte) 255;
MethodWriter.readShort(byteArray, 2);
byteArray[0] = (byte) 0;
MethodWriter.readShort(byteArray, 3);
byteArray[0] = (byte) 100;
MethodWriter.readShort(byteArray, 4);

Test 199: 
MethodWriter.readShort((byte[]) 2, (int) (Integer) null);

Test 200: 
MethodWriter.readUnsignedShort((byte[]) 1, (int) (Integer) null);

Test 201: 
String[] stringArray = new String[2];
String string = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB /)d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/Synthetic;", true, false);
int _int = 255;
String string = "org.objectweb.asm.jip.Attribute";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

Test 202: 
String[] stringArray = new String[2];
String string = "$)&dB )d<!y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "wq6p-|W", (int) "$)&dB )d<!y", (String) stringArray, (String) true, (String) false, (String[]) "Ljava/lang/String;", true, false);
String string = "xj5owk";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);


* Minimizing test suite
* test suite isTestSuite: 110
Test 0: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 1: 
byte[] byteArray = new byte[5];
MethodWriter.readUnsignedShort(byteArray, 1);
Test 2: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();
Test 3: 
byte[] byteArray = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 4: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 0);
Test 5: 
byte[] byteArray = new byte[8];
MethodWriter.readInt(byteArray, 0);
Test 6: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 7: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();
Test 8: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);
Test 9: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));
Test 10: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 11: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);
Test 12: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();
Test 14: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 15: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
Test 16: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 18: 
ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);
Test 19: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
Test 20: 
ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 21: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 22: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 23: 
ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 24: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 25: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);
Test 26: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);
Test 27: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);
Test 28: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);
Test 29: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);
Test 30: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);
Test 31: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));
Test 32: 
ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 33: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));
Test 34: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);
Test 36: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));
Test 37: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);
Test 38: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);
Test 39: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 40: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");
Test 41: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
Test 42: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
Test 43: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(2);
Test 44: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
Test 45: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");
Test 46: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");
Test 47: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 48: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);
Test 49: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);
Test 50: 
ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 51: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);
Test 52: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);
Test 53: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 54: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");
Test 55: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 56: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");
Test 57: 
ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);
Test 58: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);
Test 59: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);
Test 60: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);
Test 61: 
ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 62: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = label;
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
Test 63: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();
Test 64: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 65: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 66: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 67: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);
Test 68: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
Test 69: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));
Test 70: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);
Test 71: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 72: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
Test 73: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);
Test 74: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);
Test 75: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));
Test 76: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 77: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 78: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
// Undeclared exception!
try { 
  methodWriter.visitMaxs((-1515), 7);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 79: 
ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);
Test 80: 
ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);
Test 81: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);
Test 82: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
Test 83: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 84: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();
Test 86: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();
Test 87: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();
Test 88: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();
Test 89: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 90: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();
Test 91: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 92: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 94: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 98: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 99: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 100: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));
Test 101: 
int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);
Test 102: 
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);
Test 103: 
Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 104: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);
Test 105: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);
Test 106: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);
Test 108: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);
Test 109: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 824
* Number of covered goals: 479
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 65%
* Total number of goals: 1084
* Number of covered goals: 702
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 21
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 824
* Number of covered goals: 464
* Generated 110 tests with total length 601
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
assertEquals(0, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortValidInputReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[8];
arg5[0] = "";
arg5[1] = "";
arg5[2] = "";
arg5[3] = "";
arg5[4] = "";
arg5[5] = "}\"|H";
arg5[6] = "";
arg5[7] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg5, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
refined test name is: testMethodWriterConfiguration
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(arg0, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testWriteShortexceedsBounds
* Compiling Tests
refined test name is: testWriteShortWithInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
short readShort = MethodWriter.readShort(arg0, 0);
assertEquals((short)0, readShort);


** It was a parseable test case! 
refined test name is: testReadShortFromByteArrayWithValueAtPositionZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[8];
int readInt = MethodWriter.readInt(arg0, 0);
assertEquals(0, readInt);


** It was a parseable test case! 
refined test name is: testReadIntWithOffsetZeroReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[8];
arg5[0] = "";
arg5[1] = "";
arg5[2] = "";
arg5[3] = "";
arg5[4] = "";
arg5[5] = "}\"|H";
arg5[6] = "";
arg5[7] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg5, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testMethodWriterVisitEnd
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));

** It was a parseable test case! 
refined test name is: testCalculateMaxStackSize
* Compiling Tests
refined test name is: testMethodWriterVisitTypeInsnMaxStackSizeOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3485));
String[] arg5 = new String[2];
arg5[0] = "<init>";
arg5[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(arg0, 78, "<init>", "$)&dB /)d<!y", (String) null, arg5, false, true);

** It was a parseable test case! 
refined test name is: testInitializeMethodWriterObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", arg5, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
int size = methodWriter.getSize();
assertEquals(28, size);


** It was a parseable test case! 
refined test name is: testMethodWriterConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, arg5, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitInvalidParameterAnnotationIndex
* Compiling Tests
refined test name is: testVisitParameterAnnotationWithInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(arg0, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", arg5, false, false);
AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
assertNotNull(visitParameterAnnotation);


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(arg0, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, arg5, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(arg0, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);

** It was a parseable test case! 
refined test name is: testMethodReturnsCorrectValue
* Compiling Tests
refined test name is: testMethodReturnsCorrectValueForEachInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg4 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg4, true, true);
methodWriter.visitFrame(2, 265, arg4, 2, arg4);
assertEquals(0, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterCreationWithArguments
* Compiling Tests
refined test name is: testMethodWriterVisitFrameWithSpecificArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(arg0, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testWriteFramewithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameThrowsExceptionOnInvalidStackMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg4 = new String[2];
arg4[0] = "Ljava/lang/SyntCetic;";
arg4[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, arg4, true, false);
methodWriter.visitFrame(2, 2, arg4, 17, arg4);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, arg4, 2, arg4);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithInvalidLocalVariableCount
* Compiling Tests
refined test name is: testMethodWriterinvalidLocalVariableCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1936735951));
String[] arg2 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, arg2, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidFrameIndexVisit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithNullValuesThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg4 = new String[8];
arg4[0] = "";
arg4[1] = "";
arg4[2] = "";
arg4[3] = "";
arg4[4] = "";
arg4[5] = "}\"|H";
arg4[6] = "";
arg4[7] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 0, "", "", "}\"|H", arg4, false, false);
methodWriter.visitFrame(0, (-1170), arg4, 1, arg4);
assertEquals(8, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWithArgumentsAndFrame
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg4 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg4, true, false);
methodWriter.visitFrame(1, (-3295), arg4, 1, arg4);
assertEquals(0, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterVisitFrame
* Compiling Tests
refined test name is: testMethodWriterVisitFrameWithGivenArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);

** It was a parseable test case! 
refined test name is: writeBytecodeIncrementsInstructionPointerByTwo
* Compiling Tests
refined test name is: testCreateMethodSignatureWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, false);
methodWriter.visitInsn(188);

** It was a parseable test case! 
refined test name is: testMethodWriterPropertiesAreSetCorrectly
* Compiling Tests
refined test name is: testMethodWriterPropertiesAndVisitInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true);
methodWriter.visitInsn(177);

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithCorrectParameters
* Compiling Tests
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitInsn(1);

** It was a parseable test case! 
refined test name is: testMethodWriterAddInstructionNop
* Compiling Tests
refined test name is: testCreateMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(arg0, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));

** It was a parseable test case! 
refined test name is: testConstructorParamsAndMethodsCalled
* Compiling Tests
refined test name is: testMethodWriterConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(930);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", arg5, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}


** It was a parseable test case! 
refined test name is: testVisitIntInsnthrowsExceptionIfValueIsNull
* Compiling Tests
refined test name is: testVisitIntInsnThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));

** It was a parseable test case! 
refined test name is: testVisitIntInsnNegativeValue
* Compiling Tests
refined test name is: testMethodWriterVisitsMethodInsnAndIntInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitIntInsn(17, 560);

** It was a parseable test case! 
refined test name is: testMethodWriter
* Compiling Tests
refined test name is: test2PlusBl4c6PlusZtdC2xDrGpTZtdC2xDrGpTHtt
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", arg5, true, true);
methodWriter.visitVarInsn(55, 240);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitsLoadInstruction
* Compiling Tests
refined test name is: testCreateMethodWithEmptyStringArrayParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitVarInsn(169, (-2153));

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithCorrectFields
* Compiling Tests
refined test name is: testCreateMethodWriterWithCorrectFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(57);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitVarInsn(57, 1);

** It was a parseable test case! 
refined test name is: testMethodWriterConstructionAndProperties
* Compiling Tests
refined test name is: testMethodWriterProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(57);
String[] arg5 = new String[5];
arg5[0] = "2+Bl[)4c_+ |~/";
arg5[1] = "2+Bl[)4c_+ |~/";
arg5[2] = "z*U==F1NHF,";
arg5[3] = "2+Bl[)4c_+ |~/";
arg5[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", arg5, true, false);
methodWriter.visitVarInsn(24, 3353);

** It was a parseable test case! 
refined test name is: testMethodWriterCreationWithCorrectParameters
* Compiling Tests
refined test name is: testMethodWriterParametersSetCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(arg0, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");

** It was a parseable test case! 
refined test name is: testVisitFieldInsnWithAppropriateParameters
* Compiling Tests
refined test name is: testVisitFieldInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");

** It was a parseable test case! 
refined test name is: testVisitFieldInsnWithCorrectArguments
* Compiling Tests
refined test name is: testVisitFieldInsnMethodPrimaryFunctionality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");

** It was a parseable test case! 
refined test name is: testMethodWriterWithVariousInputParameters
* Compiling Tests
refined test name is: testMethodWriterCanHandleVarietyOfInputParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(2);

** It was a parseable test case! 
refined test name is: testVisitFieldAndLdcInstructionsValidResult
* Compiling Tests
refined test name is: testVisitingFieldInsnAndLdcInstruction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");

** It was a parseable test case! 
refined test name is: testVisitMethodInsnvalidArgumentsexpectedBehavior
* Compiling Tests
refined test name is: testMethodWriterVisitMethodInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-147));
String[] arg5 = new String[2];
arg5[0] = "SIn0[Jm";
arg5[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(arg0, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", arg5, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");

** It was a parseable test case! 
refined test name is: testMethodWriterInstrumentationWithBreakpoint
* Compiling Tests
refined test name is: testInstrumentMethodWithBreakpoint
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");

** It was a parseable test case! 
refined test name is: testMethodNameForMethodWriter
* Compiling Tests
refined test name is: testVisitMethodInsnSetsCorrectMethodName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-984));
String[] arg5 = new String[2];
arg5[0] = "td<C@2a=DrGp)t";
arg5[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", arg5, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}


** It was a parseable test case! 
refined test name is: testVisitMethodInsnStringIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", arg5, false, false);
methodWriter.visitJumpInsn(2, arg1);

** It was a parseable test case! 
refined test name is: testInstantiationOfStringArray
* Compiling Tests
refined test name is: testMethodWriterVisitsJumpInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitJumpInsn(168, arg1);
methodWriter.visitMaxs(196, 2);

** It was a parseable test case! 
refined test name is: testJumpInstructionShouldSetTargetToGivenLabel
* Compiling Tests
refined test name is: testVisitJumpInsnSetsTargetToGivenLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-39));
String[] arg5 = new String[2];
arg5[0] = "||u~@ZIWb;n~";
arg5[1] = "||u~@ZIWb;n~";
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", arg5, true, true);
methodWriter.visitJumpInsn(1, arg1);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}


** It was a parseable test case! 
refined test name is: testVisitJumpInsnthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-35));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");

** It was a parseable test case! 
refined test name is: testVisitLdcInsnwithValidInput
* Compiling Tests
refined test name is: testVisitLdcInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", arg5, true, true);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithConstantValueOfOne
* Compiling Tests
refined test name is: testMethodWriterWithSignature
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
arg0.index = 432;
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", arg5, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");

** It was a parseable test case! 
refined test name is: testMethodWriterConstructorAndVisitLdcInsn
* Compiling Tests
refined test name is: testMethodWriterProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(arg0, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);

** It was a parseable test case! 
refined test name is: testIncrementLocalVariableBy128
* Compiling Tests
refined test name is: testIncrementLocalVariableBy128UsingVisitIincInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", arg5, false, true);
methodWriter.visitIincInsn(2, 2);

** It was a parseable test case! 
refined test name is: testVisitIincInsnWithCorrectArguments
* Compiling Tests
refined test name is: testMethodWriterVisitIincInsnWithArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false);
methodWriter.visitIincInsn(256, 1);

** It was a parseable test case! 
refined test name is: testInitializeMethodWriter
* Compiling Tests
refined test name is: testVisitIincInsnWithProperArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label arg2 = new Label();
Label[] arg3 = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, arg2, arg3);
assertEquals(0, arg3.length);


** It was a parseable test case! 
refined test name is: testMethodWriterVisitTableSwitchInsnWithoutCases
* Compiling Tests
refined test name is: testMethodWriterWithSwitchStatement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3485));
String[] arg5 = new String[4];
arg5[0] = "!-Fzn`2J+XT";
arg5[1] = "<mjW>pN8I^)(G\"`d2(";
arg5[2] = "!-Fzn`2J+XT";
arg5[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true);
Label arg2 = new Label();
Label[] arg3 = new Label[8];
arg3[0] = arg2;
arg3[1] = arg2;
arg3[2] = arg2;
arg3[3] = arg2;
arg3[4] = arg2;
arg3[5] = arg2;
arg3[6] = arg2;
arg3[7] = arg2;
methodWriter.visitTableSwitchInsn(59, 59, arg2, arg3);
assertEquals(8, arg3.length);


** It was a parseable test case! 
refined test name is: testVisitTableSwitchInsnwithCorrectLabels
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
int size = methodWriter.getSize();
assertEquals(38, size);


** It was a parseable test case! 
refined test name is: testMethodWritergetSizecorrectSize
* Compiling Tests
refined test name is: testMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);

** It was a parseable test case! 
refined test name is: testVisitMultiNewArrayInsnWithEmptyDimensions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);

** It was a parseable test case! 
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
refined test name is: testWriteMultiDimensionalArrayTypeDescriptor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3485));
String[] arg5 = new String[4];
arg5[0] = "!-Fzn`2J+XT";
arg5[1] = "<mjW>pN8I^)(G\"`d2(";
arg5[2] = "!-Fzn`2J+XT";
arg5[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testVisitMaxsWithInvalidMaxStack
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-35));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);

** It was a parseable test case! 
refined test name is: testAddMethodWithTryCatchBlock
* Compiling Tests
refined test name is: testAddvalidInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3485));
String[] arg5 = new String[4];
arg5[0] = "!-Fzn`2J+XT";
arg5[1] = "<mjW>pN8I^)(G\"`d2(";
arg5[2] = "!-Fzn`2J+XT";
arg5[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(arg0, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", arg5, false, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "[PusE");
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);

** It was a parseable test case! 
refined test name is: testWriteMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-35));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, arg4, arg4, (-1830));

** It was a parseable test case! 
refined test name is: testVisitLocalVariableWithEmptyNameAndStringArray
* Compiling Tests
refined test name is: testMethodWriterLocalVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", arg4, arg4, 262144);

** It was a parseable test case! 
refined test name is: testVisitLocalVariable
* Compiling Tests
refined test name is: testVisitLocalVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-147));
String[] arg5 = new String[2];
arg5[0] = "SIn0[Jm";
arg5[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(arg0, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", arg5, true, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", arg4, arg4, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", arg4, arg4, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: getLocalVariableNameTest
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
Label arg4 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", arg4, arg4, 2093);

** It was a parseable test case! 
refined test name is: testWriteMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "In0[Jm";
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Ljava/lang/Synthetic;", "<init>", ".class", arg5, false, false);
methodWriter.visitLineNumber(2, arg1);
methodWriter.visitLineNumber(158, arg1);

** It was a parseable test case! 
refined test name is: testSyntheticConstructor
* Compiling Tests
refined test name is: testcreatemethodwriterwithspecificparameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);

** It was a parseable test case! 
refined test name is: testMethodWritergeneratesValidBytecodeInstructions
* Compiling Tests
refined test name is: testWriteMethodMaxStackAndLocalVariablesCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(arg0, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));

** It was a parseable test case! 
refined test name is: testMethodWriterVisitMaxs
* Compiling Tests
refined test name is: testVisitMaxsUpdatesMethodWriterState
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(3);
Label arg2 = new Label();
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", arg5, false, true);
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testAddTryCatchBlockWithUndeclaredExceptionType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(105);
Label arg1 = new Label();
String[] arg5 = new String[5];
arg5[0] = "2+Bl[)4c_+ |~/";
arg5[1] = "2+Bl[)4c_+ |~/";
arg5[2] = "z*U==F1NHF,";
arg5[3] = "2+Bl[)4c_+ |~/";
arg5[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(arg0, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", arg5, true, false);
methodWriter.visitJumpInsn(105, arg1);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);

** It was a parseable test case! 
refined test name is: testJumpInstructionWithLabel
* Compiling Tests
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(13);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(arg0, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);

** It was a parseable test case! 
refined test name is: testMethodWriterConstructorAndIincInsn
* Compiling Tests
refined test name is: testMethodWriterCreationAndStackSlotIncrement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(arg0, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);

** It was a parseable test case! 
refined test name is: testMethodWriterConstructorAndMaxSizeSetting
* Compiling Tests
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[2];
arg5[0] = "Ljava/lang/Synthetic;";
arg5[1] = "Ljava/lang/Synthetic;";
arg0.version = (-1744);
MethodWriter methodWriter = new MethodWriter(arg0, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, arg5, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithCorrectParameters
* Compiling Tests
refined test name is: testMethodWriterCreatedSuccessfully
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(arg0, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] arg2 = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, arg2, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testMethodWriterThrowsNPEWhenGivenNullFrameData
* Compiling Tests
refined test name is: testVisitFrameThrowsNPEOnNullFrameData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", arg5, true, false);
Label arg4 = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", arg4, arg4, 242);
int size = methodWriter.getSize();
assertEquals(72, size);


** It was a parseable test case! 
refined test name is: testVisitIntInsnshouldAddInstructionToMethodWriter
* Compiling Tests
refined test name is: testMethodWriterwriteMethodWithLocalVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false);
methodWriter.visitLineNumber(1024, arg1);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
int size = methodWriter.getSize();
assertEquals(49, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
refined test name is: TestWriteMethodWithArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(arg0, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
int size = methodWriter.getSize();
assertEquals(48, size);


** It was a parseable test case! 
refined test name is: testMethodWriterInitializationAndIncrement
* Compiling Tests
refined test name is: testMethodWriterInitializationAndGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-1448231012), "ConstantValue", "ConstantValue", ".class", arg5, false, false);
methodWriter.signature = null;
int size = methodWriter.getSize();
assertEquals(14, size);


** It was a parseable test case! 
refined test name is: TestMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(7);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", arg5, true, false);
methodWriter.visitAnnotationDefault();
int size = methodWriter.getSize();
assertEquals(22, size);


** It was a parseable test case! 
refined test name is: testMethodWriterGetSize
* Compiling Tests
refined test name is: testMethodWriterSizeWithDefaultAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", arg5, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
int size = methodWriter.getSize();
assertEquals(28, size);


** It was a parseable test case! 
refined test name is: testMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[2];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 247, (-8));
assertEquals((-255), newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffset
* Compiling Tests
refined test name is: testGetNewOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[5];
arg1[1] = 7511;
int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-945), 3841);
assertEquals(4786, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[4];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 2, 2);
assertEquals(0, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetBasicCase
* Compiling Tests
refined test name is: testGetNewOffsetReturnsCorrectOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Label arg2 = new Label();
int[] arg1 = new int[2];
MethodWriter.getNewOffset(arg1, arg1, arg2);
MethodWriter.getNewOffset(arg1, arg1, arg2);
assertEquals(2, arg1.length);


** It was a parseable test case! 
refined test name is: testGetNewOffsetReturnsCorrectLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[8];
arg0[0] = (byte) (-14);
int readInt = MethodWriter.readInt(arg0, (byte)0);
assertEquals((-234881024), readInt);


** It was a parseable test case! 
refined test name is: testReadIntWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[6];
arg0[1] = (byte)76;
int readInt = MethodWriter.readInt(arg0, 1);
assertEquals(1275068416, readInt);


** It was a parseable test case! 
refined test name is: testReadIntWithValidOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[7];
arg0[1] = (byte) (-1);
short readShort = MethodWriter.readShort(arg0, 1);
assertEquals((short) (-256), readShort);


** It was a parseable test case! 
refined test name is: testReadShortNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
arg0[0] = (byte)112;
short readShort = MethodWriter.readShort(arg0, (byte)0);
assertEquals((short)28672, readShort);


** It was a parseable test case! 
refined test name is: testReadShortFromByteArrayWithOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
arg0[1] = (byte) (-91);
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
assertEquals(42240, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortnegativeValueAtOffset1
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:21.700 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:21.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:21.787 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:21.788 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:21.840 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:21.840 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:21.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:21.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:21.984 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:21.985 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.064 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.065 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:22.132 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.192 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.279 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.280 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:22.659 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.660 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.690 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.691 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.723 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.724 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:22.753 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.754 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:22.796 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.796 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.838 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.841 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:22.876 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.877 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:22.928 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
[MASTER] 08:13:22.976 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:22.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:23.020 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.021 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:23.079 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.121 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.122 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.156 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.190 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:23.191 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.255 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.287 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.288 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.321 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.354 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.355 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.387 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.388 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.423 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.423 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.460 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.461 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.530 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.579 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.627 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.691 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.692 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.742 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.743 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.778 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.779 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:23.810 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.811 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.844 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.845 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.886 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.889 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:23.934 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:23.971 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:23.972 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.010 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
[MASTER] 08:13:24.067 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.125 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.180 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.236 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.237 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.272 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.273 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.322 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.358 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.400 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.401 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:24.442 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:24.486 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.487 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
[MASTER] 08:13:24.541 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.591 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.591 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.644 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.645 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.711 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.711 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.771 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.772 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.813 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:24.864 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.866 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.950 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:24.951 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:24.985 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:24.985 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.092 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.092 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.157 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:25.219 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.220 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.278 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.279 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.324 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.362 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.363 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.413 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.466 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.467 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.506 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.545 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:25.664 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.665 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.732 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:25.792 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.793 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.846 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.847 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:25.887 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:13:25.929 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:25.930 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
[MASTER] 08:13:25.972 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:25.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:26.014 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:26.015 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
[MASTER] 08:13:26.055 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:26.056 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:26.104 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:26.105 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 08:13:26.162 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:26.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:13:26.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:26.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 6 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
** Write a test suite: 16 called: 5 to improve: false
** Write a test suite: 20 called: 6 to improve: false
** Write a test suite: 21 called: 7 to improve: false
** Write a test suite: 22 called: 8 to improve: false
** Write a test suite: 23 called: 9 to improve: false
** Write a test suite: 24 called: 10 to improve: false
** Write a test suite: 25 called: 11 to improve: false
** Write a test suite: 26 called: 12 to improve: false
** Write a test suite: 27 called: 13 to improve: false
** Write a test suite: 28 called: 14 to improve: false
** Write a test suite: 29 called: 15 to improve: false
** Write a test suite: 30 called: 16 to improve: false
** Write a test suite: 31 called: 17 to improve: false
** Write a test suite: 32 called: 18 to improve: false
** Write a test suite: 33 called: 19 to improve: false
** Write a test suite: 34 called: 20 to improve: false
** Write a test suite: 35 called: 21 to improve: false
** Write a test suite: 36 called: 22 to improve: false
** Write a test suite: 37 called: 23 to improve: false
** Write a test suite: 38 called: 24 to improve: false
** Write a test suite: 39 called: 25 to improve: false
** Write a test suite: 41 called: 26 to improve: false
** Write a test suite: 42 called: 27 to improve: false
** Write a test suite: 44 called: 28 to improve: false
** Write a test suite: 45 called: 29 to improve: false
** Write a test suite: 46 called: 30 to improve: false
** Write a test suite: 47 called: 31 to improve: false
** Write a test suite: 48 called: 32 to improve: false
** Write a test suite: 49 called: 33 to improve: false
** Write a test suite: 50 called: 34 to improve: false
** Write a test suite: 52 called: 35 to improve: false
** Write a test suite: 54 called: 36 to improve: false
** Write a test suite: 56 called: 37 to improve: false
** Write a test suite: 58 called: 38 to improve: false
** Write a test suite: 59 called: 39 to improve: false
** Write a test suite: 62 called: 40 to improve: false
** Write a test suite: 63 called: 41 to improve: false
** Write a test suite: 64 called: 42 to improve: false
** Write a test suite: 66 called: 43 to improve: false
** Write a test suite: 67 called: 44 to improve: false
** Write a test suite: 68 called: 45 to improve: false
** Write a test suite: 69 called: 46 to improve: false
** Write a test suite: 70 called: 47 to improve: false
** Write a test suite: 71 called: 48 to improve: false
** Write a test suite: 72 called: 49 to improve: false
** Write a test suite: 73 called: 50 to improve: false
** Write a test suite: 75 called: 51 to improve: false
** Write a test suite: 77 called: 52 to improve: false
** Write a test suite: 79 called: 53 to improve: false
[MASTER] 08:13:29.271 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:29.272 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 10 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 15 called: 6 to improve: false
** Write a test suite: 16 called: 7 to improve: false
** Write a test suite: 17 called: 8 to improve: false
** Write a test suite: 18 called: 9 to improve: false
** Write a test suite: 19 called: 10 to improve: false
** Write a test suite: 21 called: 11 to improve: false
** Write a test suite: 22 called: 12 to improve: false
** Write a test suite: 23 called: 13 to improve: false
** Write a test suite: 26 called: 14 to improve: false
** Write a test suite: 27 called: 15 to improve: false
** Write a test suite: 29 called: 16 to improve: false
** Write a test suite: 31 called: 17 to improve: false
** Write a test suite: 33 called: 18 to improve: false
** Write a test suite: 35 called: 19 to improve: false
** Write a test suite: 36 called: 20 to improve: false
** Write a test suite: 37 called: 21 to improve: false
** Write a test suite: 38 called: 22 to improve: false
** Write a test suite: 39 called: 23 to improve: false
** Write a test suite: 40 called: 24 to improve: false
** Write a test suite: 41 called: 25 to improve: false
** Write a test suite: 43 called: 26 to improve: false
** Write a test suite: 44 called: 27 to improve: false
** Write a test suite: 46 called: 28 to improve: false
** Write a test suite: 47 called: 29 to improve: false
** Write a test suite: 48 called: 30 to improve: false
** Write a test suite: 49 called: 31 to improve: false
** Write a test suite: 50 called: 32 to improve: false
** Write a test suite: 51 called: 33 to improve: false
** Write a test suite: 52 called: 34 to improve: false
** Write a test suite: 53 called: 35 to improve: false
** Write a test suite: 54 called: 36 to improve: false
** Write a test suite: 55 called: 37 to improve: false
** Write a test suite: 56 called: 38 to improve: false
** Write a test suite: 57 called: 39 to improve: false
** Write a test suite: 58 called: 40 to improve: false
** Write a test suite: 59 called: 41 to improve: false
** Write a test suite: 60 called: 42 to improve: false
** Write a test suite: 61 called: 43 to improve: false
** Write a test suite: 62 called: 44 to improve: false
** Write a test suite: 63 called: 45 to improve: false
** Write a test suite: 64 called: 46 to improve: false
** Write a test suite: 65 called: 47 to improve: false
** Write a test suite: 69 called: 48 to improve: false
** Write a test suite: 72 called: 49 to improve: false
** Write a test suite: 73 called: 50 to improve: false
** Write a test suite: 76 called: 51 to improve: false
** Write a test suite: 79 called: 52 to improve: false
** Write a test suite: 83 called: 53 to improve: false
[MASTER] 08:13:32.187 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:13:32.188 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
[MASTER] 08:13:36.545 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 108
Test 0: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 1: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();
Test 2: 
byte[] byteArray = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);
Test 5: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 6: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);
Test 7: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 15: 
ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);
Test 16: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);
Test 20: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);
Test 21: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);
Test 22: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);
Test 23: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));
Test 24: 
ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 25: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));
Test 26: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);
Test 27: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));
Test 28: 
ClassWriter classWriter = new ClassWriter(7);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", (String[]) null, true, false);
methodWriter.visitVarInsn(7, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);
Test 30: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);
Test 31: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);
Test 32: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 33: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));
Test 34: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
Test 36: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
Test 37: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");
Test 38: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");
Test 39: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
Test 40: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 41: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);
Test 42: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);
Test 43: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);
Test 44: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);
Test 45: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 46: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);
Test 47: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");
Test 48: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);
Test 49: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");
Test 50: 
ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);
Test 51: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);
Test 52: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);
Test 53: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);
Test 54: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = labelArray[0];
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
Test 55: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();
Test 56: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 57: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 58: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
Test 59: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));
Test 60: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);
Test 61: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 62: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
Test 63: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);
Test 64: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);
Test 65: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));
Test 66: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 67: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 68: 
ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 69: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);
Test 70: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
// Undeclared exception!
try { 
  methodWriter.visitMaxs((-1515), 7);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 71: 
ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);
Test 72: 
ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);
Test 74: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
Test 75: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 76: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();
Test 77: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();
Test 78: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();
Test 79: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();
Test 81: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 82: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();
Test 83: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 84: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 85: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 86: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);
Test 87: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 88: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 89: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 90: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 91: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 94: 
int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);
Test 95: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));
Test 96: 
Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 97: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);
Test 98: 
ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 99: 
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);
Test 100: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);
Test 101: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);
Test 102: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);
Test 103: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);
Test 104: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 2);
Test 105: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);
Test 106: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 107: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


* Minimizing test suite
[MASTER] 08:13:56.882 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 110
Test 0: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 1: 
byte[] byteArray = new byte[5];
MethodWriter.readUnsignedShort(byteArray, 1);
Test 2: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitCode();
Test 3: 
byte[] byteArray = new byte[2];
// Undeclared exception!
try { 
  MethodWriter.writeShort(byteArray, (byte) (-1), (byte) (-108));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 4: 
byte[] byteArray = new byte[5];
MethodWriter.readShort(byteArray, 2);
Test 5: 
byte[] byteArray = new byte[6];
MethodWriter.readInt(byteArray, 1);
Test 6: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 7: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitEnd();
Test 8: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", stringArray, true, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)4c_6+ |~_k/", "}@<>($IT^", "2+BE[)4c_6+ |~_k/", stringArray, false, false);
Test 9: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitTypeInsn((-1658), "org.objectweb.asm.jip.MethodWriter");
methodWriter.visitMaxs(1, (-1658));
Test 10: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "2+BE[)84c_6+ |~_k/", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
Test 11: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[2];
stringArray[0] = "<init>";
stringArray[1] = "$)&dB /)d<!y";
MethodWriter methodWriter = new MethodWriter(classWriter, 78, "<init>", "$)&dB /)d<!y", (String) null, stringArray, false, true);
Test 12: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIzxa2", "bIzxa2", "bIzxa2", (String[]) null, false, false);
methodWriter.visitAnnotation("org.objectweb.asm.jip.ClassReader", false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", true);
methodWriter.getSize();
Test 14: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(255, "org.objectweb.asm.jip.Attribute", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 255
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 15: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 136, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
Test 16: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1724), "wq6p-|W", "$)&dB )d<!y", (String) null, stringArray, true, false);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation((-268435463), "xj5owk", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -268435463
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("<_#07X[i@0");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  methodWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 18: 
ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
methodWriter.visitFrame(3, (-959), (Object[]) null, (-959), (Object[]) null);
Test 19: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, true);
methodWriter.visitFrame(2, 265, stringArray, 2, stringArray);
Test 20: 
ClassWriter classWriter = new ClassWriter(11);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777220, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 21: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
// Undeclared exception!
try { 
  methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 22: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/SyntCetic;";
stringArray[1] = "In0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|W", "$)&dB /)d<!y", (String) null, stringArray, true, false);
methodWriter.visitFrame(2, 2, stringArray, 17, stringArray);
methodWriter.visitIntInsn(16777217, 1);
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 57, stringArray, 2, stringArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 23: 
ClassWriter classWriter = new ClassWriter((-1936735951));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "fvgmumC", "fvgmumC", "fvgmumC", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(0, 2, stringArray, 26, (Object[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 24: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "}@<>($IT^", "}@<>($IT^", "}@<>($IT^", (String[]) null, false, false);
// Undeclared exception!
try { 
  methodWriter.visitFrame(4, 4, (Object[]) null, 4, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 25: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "}\"|H";
stringArray[6] = "";
stringArray[7] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "", "", "}\"|H", stringArray, false, false);
methodWriter.visitFrame(0, (-1170), stringArray, 1, stringArray);
Test 26: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFrame(1, (-3295), stringArray, 1, stringArray);
Test 27: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitInsn(2);
Test 28: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, false);
methodWriter.visitInsn(188);
Test 29: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitInsn(177);
Test 30: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitInsn(1);
Test 31: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIntInsn((-147), (-147));
Test 32: 
ClassWriter classWriter = new ClassWriter(930);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 240, "HPnlm", "Ztd<C@2x=DrGp)T~ht", "dGOz~%X?SN!p7Am", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitIntInsn(240, 932);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 33: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(59, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht");
methodWriter.visitIntInsn(2, (-410));
Test 34: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_z/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitIntInsn(17, 560);
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", "Ztd<C@2x=?rFp)T~ht", stringArray, true, true);
methodWriter.visitVarInsn(55, 240);
Test 36: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(169, (-2153));
Test 37: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitVarInsn(57, 1);
Test 38: 
ClassWriter classWriter = new ClassWriter(57);
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitVarInsn(24, 3353);
Test 39: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "T:-TRF[vk?:a%}Cg]", "T:-TRF[vk?:a%}Cg]", "", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "T:-TRF[vk?:a%}Cg]");
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 40: 
ClassWriter classWriter = new ClassWriter(64);
MethodWriter methodWriter = new MethodWriter(classWriter, (-526), "", "", "", (String[]) null, false, false);
methodWriter.visitFieldInsn((-526), "/>3p)u", "1U|/exFhB>^4I", "");
Test 41: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitFieldInsn(2, "Code", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "Zyd<@2x=DrGp)T~h7");
Test 42: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn(2, "LocalVariableTable", "&/|", "Deprecate");
Test 43: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitFieldInsn((-1984033631), "2+Bl[)4c_6+ |~/", "4P$1puWS*y+qHcrh", ")./ym]N~s8");
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);
Test 44: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMethodInsn(185, "Ztd<C@2x=DrGp)T~ht", "3s8N(DTdaanGn`", "$)&dB /)d<!y");
Test 45: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
methodWriter.visitMethodInsn(186, "SIn0[Jm", "gU)^:M3^7J", "$)&dB /)d<!y");
Test 46: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMethodInsn(1, "3s8N(DTdaanGn`", "bh#-Hs4`,@", "3s8N(DTdaanGn`");
Test 47: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "td<C@2a=DrGp)t";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Q+GNZoH*9P)^m^HYShd", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "CrlI_?,Uv,^", "td<C@2a=DrGp)t", "xj5w;k");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 48: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1678), "!-Fzn`2J+XT", "!-Fzn`2J+XT", "SourceDebugExtension", stringArray, false, false);
methodWriter.visitJumpInsn(2, label);
Test 49: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs(196, 2);
Test 50: 
ClassWriter classWriter = new ClassWriter((-39));
String[] stringArray = new String[2];
stringArray[0] = "||u~@ZIWb;n~";
stringArray[1] = "||u~@ZIWb;n~";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1681), ")\" NU2}>qJX`U", "$)&dB /)d<!y", "||u~@ZIWb;n~", stringArray, true, true);
methodWriter.visitJumpInsn(1, label);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 51: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
byte[] byteArray = new byte[0];
label.resolve(methodWriter, 2, byteArray);
methodWriter.visitJumpInsn(172, label);
Test 52: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);
Test 53: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 54: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLdcInsn("Ztd<C@2x=DrGp)T~ht");
Test 55: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-2923), "Code", "Zyd<@2x=DrGp)T~h7", "Zyd<@2x=DrGp)T~h7", stringArray, true, true);
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);
Test 56: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = 432;
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
methodWriter.visitLdcInsn("ocaVariableTabe");
Test 57: 
ClassWriter classWriter = new ClassWriter((-3485));
MethodWriter methodWriter = new MethodWriter(classWriter, 1311, "2+Bl[)4c_+ |~/", "}@7R", "Code", (String[]) null, false, false);
methodWriter.visitIincInsn((-1158), 128);
Test 58: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "2+BE[)4c_6+ |~_k/", "2+BE[)4c_6+ |~_k/", "gsz}e8Ip<Is]&`#D`ir", stringArray, false, true);
methodWriter.visitIincInsn(2, 2);
Test 59: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitIincInsn(256, 1);
Test 60: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bYIlza2", "bYIlza2", "LocalVariableTypeTable", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitTableSwitchInsn(57, 3828, label, labelArray);
Test 61: 
ClassWriter classWriter = new ClassWriter(2);
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "wq6p-|W", "$)&dB /)d<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, false);
int[] intArray = new int[7];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 62: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
Label[] labelArray = new Label[8];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
labelArray[4] = label;
labelArray[5] = label;
labelArray[6] = label;
labelArray[7] = labelArray[0];
methodWriter.visitTableSwitchInsn(59, 59, label, labelArray);
Test 63: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "m#{Y#p", "|KQl`D#", "m#{Y#p", (String[]) null, false, false);
methodWriter.visitMultiANewArrayInsn("|KQl`D#", 219);
methodWriter.getSize();
Test 64: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1961), "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 65: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6< |~/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("2+Bl[)4c_6< |~/", 1);
Test 66: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
// Undeclared exception!
try { 
  methodWriter.visitMaxs(1024, (-105));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 67: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+BE[)84c_6+ |~_k/");
methodWriter.visitMaxs(2, 2);
Test 68: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "!-Fzn`2J+XT";
stringArray[1] = "<mjW>pN8I^)(G\"`d2(";
stringArray[2] = "!-Fzn`2J+XT";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, (-3485), "!-Fzn`2J+XT", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "[PusE");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
Test 69: 
ClassWriter classWriter = new ClassWriter((-35));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)84c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Ztd<C@2x=DrGp)T~ht", (String) null, label, label, (-1830));
Test 70: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "RuntimeInvisibleAnnotations", label, label, 262144);
Test 71: 
ClassWriter classWriter = new ClassWriter((-147));
String[] stringArray = new String[2];
stringArray[0] = "SIn0[Jm";
stringArray[1] = "SIn0[Jm";
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "SIn0[Jm", "$)&dB /)d<!y", "SIn0[Jm", stringArray, true, false);
Label label = new Label();
methodWriter.visitLocalVariable("N=Qn& ", "ocaVariableTabe", "7uE$d)Ki", label, label, (-186));
// Undeclared exception!
try { 
  methodWriter.visitLocalVariable("f?^ZhS8\"(zz7IEg2", (String) null, "SIn0[Jm", label, label, 268435455);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 72: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
methodWriter.visitLocalVariable("2+Bl[)4c_6+ |~_k/", "Deprecated", "\"wf~ugP^c", label, label, 2093);
Test 73: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitLineNumber(2, label);
methodWriter.visitLineNumber(158, label);
Test 74: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", "3s8N(DTdaanGn`", (String[]) null, false, false);
methodWriter.visitMaxs(1, 1);
Test 75: 
ClassWriter classWriter = new ClassWriter(2);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1658), "fwq6?-|W", "$)dB /)Ed<!y", "org.objectweb.asm.jip.MethodWriter", (String[]) null, true, true);
methodWriter.visitMaxs(1, (-1658));
Test 76: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 18
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}

Test 77: 
ClassWriter classWriter = new ClassWriter(3);
Label label = new Label();
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 187, "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", "Label offset position has not been resolved yet", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "EgbL_");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(954, 265);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 78: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "2+Bl[)4c_6+ |~/");
// Undeclared exception!
try { 
  methodWriter.visitMaxs((-1515), 7);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 79: 
ClassWriter classWriter = new ClassWriter(105);
Label label = new Label();
String[] stringArray = new String[5];
stringArray[0] = "2+Bl[)4c_+ |~/";
stringArray[1] = "2+Bl[)4c_+ |~/";
stringArray[2] = "z*U==F1NHF,";
stringArray[3] = "2+Bl[)4c_+ |~/";
stringArray[4] = "2+Bl[)4c_+ |~/";
MethodWriter methodWriter = new MethodWriter(classWriter, 4, "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", stringArray, true, false);
methodWriter.visitJumpInsn(105, label);
methodWriter.visitMaxs(1959, 4);
methodWriter.visitMaxs(2, 1867);
Test 80: 
ClassWriter classWriter = new ClassWriter(13);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitIincInsn(1, 13);
methodWriter.visitMaxs((-45), 1);
Test 81: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), "wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
methodWriter.visitMaxs(57, 57);
Test 82: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "Ljava/lang/Synthetic;";
classWriter.version = (-1744);
MethodWriter methodWriter = new MethodWriter(classWriter, (-1716), ":wq6p-|", "$)&dB /)d<!y", (String) null, stringArray, true, true);
methodWriter.visitMaxs((-45), 8);
methodWriter.visitMaxs((-45), 1);
Test 83: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "bIx2", "2+Bl[)4c_+ |~/", "2+Bl[)4c_+ |~/", (String[]) null, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 127, objectArray, 2, (Object[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 84: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitLineNumber(1024, label);
methodWriter.visitTypeInsn(265, "2+Bl[)4c_6+ |~/");
methodWriter.getSize();
Test 86: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.visitIincInsn(16777222, 1);
methodWriter.visitFrame(1029, 1029, (Object[]) null, (-25), (Object[]) null);
methodWriter.getSize();
Test 87: 
ClassWriter classWriter = new ClassWriter((-984));
String[] stringArray = new String[2];
stringArray[0] = "td<C@2a=DrGp)t";
stringArray[1] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHHFBFAAFFAAQPIIJJIIIIIIIIIIIIIsIIII";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1928), "Claus not found", "td<C@2a=DrGp)t", "td<C@2a=DrGp)t", stringArray, true, true);
String[] stringArray = new String[4];
stringArray[0] = "yU3iH;Y";
stringArray[1] = "Signat]Wure";
stringArray[2] = "yU3iH;Y";
stringArray[3] = "CrlI_?,Uv,^";
classWriter.visit((-3205), (-524), "xj5w;k", "CrlI_?,Uv,^", "td<C@2a=DrGp)t", stringArray);
methodWriter.getSize();
Test 88: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1448231012), "ConstantValue", "ConstantValue", ".class", stringArray, false, false);
methodWriter.signature = null;
methodWriter.getSize();
Test 89: 
ClassWriter classWriter = new ClassWriter(7);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 90: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "LocalVariableTable", "In0[Jm", "LocalVariableTable", stringArray, false, false);
methodWriter.visitAnnotation("<_#07X[i@0", false);
methodWriter.getSize();
Test 91: 
ClassWriter classWriter = new ClassWriter((-25));
MethodWriter methodWriter = new MethodWriter(classWriter, 16777222, "bIx2", "bIx2", "bIx2", (String[]) null, false, false);
methodWriter.signature = null;
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 92: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 24117248, "Ljava/lang/Synthetic;", "In0[Jm", "Ljava/lang/Synthetic;", stringArray, false, false);
methodWriter.visitAnnotation("'%N", true);
ByteVector byteVector = new ByteVector(2394);
methodWriter.put(byteVector);
Test 93: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "ocaVariableTabe", "ocaVariableTabe", "ocaVariableTabe", stringArray, false, false);
Attribute attribute = new Attribute("ocaVariableTabe");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 94: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+BE[)4c_6+ |~_k/", "Ztd<C@2x=DrGp)T~ht", "Ztd<C@2x=DrGp)T~ht", stringArray, true, false);
Label label = new Label();
methodWriter.visitIntInsn(242, 242);
methodWriter.visitLocalVariable("Ztd<C@2x=DrGp)T~ht", "H:#ug", "2+BE[)4c_6+ |~_k/", label, label, 242);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", "2+Bl[)4c_6+ |~/", stringArray, false, false);
methodWriter.visitLineNumber(184, label);
methodWriter.visitIincInsn(1, (-294));
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
Label label = new Label();
methodWriter.visitTryCatchBlock((Label) null, label, label, "bIzxa2");
ByteVector byteVector = new ByteVector();
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 98: 
ClassWriter classWriter = new ClassWriter(2);
String[] stringArray = new String[2];
stringArray[0] = "Ljava/lang/Synthetic;";
stringArray[1] = "In0[Jm";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "<init>", ".class", stringArray, false, false);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitTryCatchBlock(label, label, label, "Signature");
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);
Test 99: 
ClassWriter classWriter = new ClassWriter((-147));
MethodWriter methodWriter = new MethodWriter(classWriter, (-147), "vSl)l", "vSl)l", "bIzxa2", (String[]) null, false, false);
methodWriter.visitIincInsn((-147), 2);
methodWriter.visitFrame(1029, 2, (Object[]) null, (-147), (Object[]) null);
classWriter.version = (-147);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 100: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 247, (-8));
Test 101: 
int[] intArray = new int[5];
intArray[1] = 7511;
MethodWriter.getNewOffset(intArray, intArray, (-945), 3841);
Test 102: 
int[] intArray = new int[4];
MethodWriter.getNewOffset(intArray, intArray, 2, 2);
Test 103: 
Label label = new Label();
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 104: 
ClassWriter classWriter = new ClassWriter((-3485));
String[] stringArray = new String[4];
stringArray[0] = "Ztd<C@2x=DrGp)T~ht";
stringArray[1] = "Ztd<C@2x=DrGp)T~ht";
stringArray[2] = "rum??]M,B|";
stringArray[3] = "<mjW>pN8I^)(G\"`d2(";
MethodWriter methodWriter = new MethodWriter(classWriter, 57, "Ztd<C@2x=DrGp)T~ht", "<mjW>pN8I^)(G\"`d2(", "!-Fzn`2J+XT", stringArray, false, true);
methodWriter.visitMethodInsn(188, "rum??]M,B|", "Ztd<C@2x=DrGp)T~ht", "$=!");
Label label = new Label();
methodWriter.visitLabel(label);
Test 105: 
byte[] byteArray = new byte[8];
byteArray[0] = (byte) (-14);
MethodWriter.readInt(byteArray, (byte)0);
Test 106: 
byte[] byteArray = new byte[6];
byteArray[1] = (byte)76;
MethodWriter.readInt(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-1);
MethodWriter.readShort(byteArray, 1);
Test 108: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)112;
MethodWriter.readShort(byteArray, (byte)0);
Test 109: 
byte[] byteArray = new byte[5];
byteArray[1] = (byte) (-91);
MethodWriter.readUnsignedShort(byteArray, 1);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 824
* Number of covered goals: 479
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 65%
* Total number of goals: 1084
* Number of covered goals: 702
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 21
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 824
* Number of covered goals: 464
* Generated 110 tests with total length 601
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
[MASTER] 08:13:58.479 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Generating assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 08:14:20.113 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:24.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:24.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:24.556 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:24.556 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:24.618 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:24.619 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:24.685 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:24.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:24.819 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:24.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.078 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.079 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.195 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.229 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.230 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.262 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.263 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.297 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.298 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.334 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.374 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.410 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.449 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.493 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.536 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 08:14:25.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
[MASTER] 08:14:25.582 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.643 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.644 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.682 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.683 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.720 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.760 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.761 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.799 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.800 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.830 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.831 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.862 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.863 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.889 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.924 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.925 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.963 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.964 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:25.994 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:25.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.037 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.071 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.108 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.143 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.144 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.177 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.209 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.242 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.243 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.275 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.275 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.307 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.307 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.339 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.340 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.376 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.377 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.409 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.410 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.449 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.487 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.488 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.527 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.528 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.574 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.612 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.613 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.662 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.709 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.710 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.756 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.757 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.803 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.804 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.852 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.853 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.906 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:26.960 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:26.961 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.019 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.068 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.069 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.119 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.169 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.210 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.211 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.255 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.299 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.343 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.388 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.388 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.438 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.439 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.483 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.483 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.532 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.577 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.578 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.634 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.635 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.708 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.768 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.769 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.858 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:27.926 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:27.927 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.032 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.033 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.092 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.156 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.327 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.418 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.419 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.507 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.557 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.558 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.605 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.606 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.783 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.784 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.857 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.913 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.914 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:28.975 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:28.976 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:29.063 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:29.064 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 08:14:29.119 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:29.120 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
[MASTER] 08:14:31.854 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:31.855 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
[MASTER] 08:14:34.175 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2839730842093584042.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 08:14:34.176 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2839730842093584042.jar
* Writing tests to file
[MASTER] 08:14:34.181 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'MethodWriter_ESTest' to evosuite-tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 10 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 15 called: 6 to improve: false
** Write a test suite: 16 called: 7 to improve: false
** Write a test suite: 17 called: 8 to improve: false
** Write a test suite: 18 called: 9 to improve: false
** Write a test suite: 19 called: 10 to improve: false
** Write a test suite: 21 called: 11 to improve: false
** Write a test suite: 22 called: 12 to improve: false
** Write a test suite: 23 called: 13 to improve: false
** Write a test suite: 26 called: 14 to improve: false
** Write a test suite: 27 called: 15 to improve: false
** Write a test suite: 29 called: 16 to improve: false
** Write a test suite: 31 called: 17 to improve: false
** Write a test suite: 33 called: 18 to improve: false
** Write a test suite: 35 called: 19 to improve: false
** Write a test suite: 36 called: 20 to improve: false
** Write a test suite: 37 called: 21 to improve: false
** Write a test suite: 38 called: 22 to improve: false
** Write a test suite: 39 called: 23 to improve: false
** Write a test suite: 40 called: 24 to improve: false
** Write a test suite: 41 called: 25 to improve: false
** Write a test suite: 43 called: 26 to improve: false
** Write a test suite: 44 called: 27 to improve: false
** Write a test suite: 46 called: 28 to improve: false
** Write a test suite: 47 called: 29 to improve: false
** Write a test suite: 48 called: 30 to improve: false
** Write a test suite: 49 called: 31 to improve: false
** Write a test suite: 50 called: 32 to improve: false
** Write a test suite: 51 called: 33 to improve: false
** Write a test suite: 52 called: 34 to improve: false
** Write a test suite: 53 called: 35 to improve: false
** Write a test suite: 54 called: 36 to improve: false
** Write a test suite: 55 called: 37 to improve: false
** Write a test suite: 56 called: 38 to improve: false
** Write a test suite: 57 called: 39 to improve: false
** Write a test suite: 58 called: 40 to improve: false
** Write a test suite: 59 called: 41 to improve: false
** Write a test suite: 60 called: 42 to improve: false
** Write a test suite: 61 called: 43 to improve: false
** Write a test suite: 62 called: 44 to improve: false
** Write a test suite: 63 called: 45 to improve: false
** Write a test suite: 64 called: 46 to improve: false
** Write a test suite: 65 called: 47 to improve: false
** Write a test suite: 69 called: 48 to improve: false
** Write a test suite: 72 called: 49 to improve: false
** Write a test suite: 73 called: 50 to improve: false
** Write a test suite: 76 called: 51 to improve: false
** Write a test suite: 79 called: 52 to improve: false
** Write a test suite: 83 called: 53 to improve: false
* Writing JUnit test case 'MethodWriter_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
* Done!

* Computation finished
