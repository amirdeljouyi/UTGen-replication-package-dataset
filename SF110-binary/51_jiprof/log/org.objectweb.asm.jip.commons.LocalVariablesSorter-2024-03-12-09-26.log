* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.commons.LocalVariablesSorter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 19523
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.commons.LocalVariablesSorter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 299
* Using seed 1710235600084
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 91 / 299
[Progress:>                             0%] [Cov:>                                  0%][Progress:>                             1%] [Cov:>                                  0%][Progress:>                             1%] [Cov:==>                                7%][MASTER] 09:26:45.571 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.objectweb.asm.jip.commons.LocalVariablesSorter canUseFunctionalMocks=false, canBeMocked: false
[Progress:>                             1%] [Cov:==>                                8%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             2%] [Cov:===========>                       33%][Progress:>                             2%] [Cov:===========>                       33%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:=====================>             60%][Progress:>                             2%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:======================>            64%][Progress:>                             2%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:========================>          69%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:=========================>         72%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            6%] [Cov:=============================>     83%][Progress:=>                            6%] [Cov:=============================>     83%][Progress:=>                            6%] [Cov:=============================>     83%][Progress:=>                            6%] [Cov:=============================>     83%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           7%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:===============================>   90%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  93%][Progress:===>                          13%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         14%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         15%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       21%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      25%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:========>                     29%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    31%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:=========>                    33%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:==========>                   36%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 40%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:============================> 96%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>97%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>98%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:=============================>99%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%][Progress:==============================100%] [Cov:================================>  94%]
* Search finished after 201s and 1251 generations, 998245 statements, best individual has fitness: 10.0
* Generated before the refinement 32 tests with total length 163
statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, arg4, arg4, 102)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, label, label, 102);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        Label label = new Label();
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitLocalVariable("expectedResult", "9lUNKC)\";G+pwEw1Y", ((String) (null)), label, label, 102);
        // Test with a string that has only one character
        localVariablesSorter.visitLocalVariable("inputString", "abc", ((String) (null)), label, label, 102);
        // Test with a string that has multiple characters and special characters
        localVariablesSorter.visitLocalVariable("inputString", "abc def ghi jkl mno pqr stu vwx yz", ((String) (null)), label, label, 102);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitLocalVariable("expectedResult", "9lUNKC)\";G+pwEw1Y", ((String) (null)), label, label, 102), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitLocalVariable("expectedResult", "9lUNKC)\";G+pwEw1Y", ((String) (null)), label, label, 102) target is: localVariablesSorter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 5
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: // Test with a string that has only one character
localVariablesSorter.visitLocalVariable("inputString", "abc", ((String) (null)), label, label, 102), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test with a string that has only one character
localVariablesSorter.visitLocalVariable("inputString", "abc", ((String) (null)), label, label, 102) target is: localVariablesSorter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 5
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: // Test with a string that has multiple characters and special characters
localVariablesSorter.visitLocalVariable("inputString", "abc def ghi jkl mno pqr stu vwx yz", ((String) (null)), label, label, 102), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test with a string that has multiple characters and special characters
localVariablesSorter.visitLocalVariable("inputString", "abc def ghi jkl mno pqr stu vwx yz", ((String) (null)), label, label, 102) target is: localVariablesSorter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 5
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
int _int = 2112;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
String string = "expectedResult";
String string = "9lUNKC)\";G+pwEw1Y";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
String string = "inputString";
String string = "abc";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
String string = "inputString";
String string = "abc def ghi jkl mno pqr stu vwx yz";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitIincInsn(0, 0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitIincInsn(0, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitIincInsn(0, 5);// Change the primitive value from 0 to 5 to make the test data more descriptive and representative of the situation being tested. }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitIincInsn(0, 5)// Change the primitive value from 0 to 5 to make the test data more descriptive and representative of the situation being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitIincInsn(0, 5)// Change the primitive value from 0 to 5 to make the test data more descriptive and representative of the situation being tested. }}
 target is: localVariablesSorter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitIincInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1633;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 0;
int _int = 5;
((LocalVariablesSorter) _int).visitIincInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitMaxs(0, 1392510721)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitMaxs(0, 1392510721);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitMaxs(0, 1392510721);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitMaxs(0, 1392510721), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitMaxs(0, 1392510721) target is: localVariablesSorter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitMaxs(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1633;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 0;
int _int = 1392510721;
((LocalVariablesSorter) _int).visitMaxs(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", arg2)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", methodAdapter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter("a negative number indicating the maximum number of local variables that can be sorted", "a string representing the method signature", methodAdapter);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter("a negative number indicating the maximum number of local variables that can be sorted", "a string representing the method signature", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "a negative number indicating the maximum number of local variables that can be sorted";
String string = "a string representing the method signature";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, string, methodAdapter);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(21, 98)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(21, 98);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(21, 0xfffffff0);// Integer value that is greater than 32 bits

        localVariablesSorter.visitVarInsn(21, 1.5F);// Float value that is not an integer

        localVariablesSorter.visitVarInsn(21, 'A');// Character value

        localVariablesSorter.visitVarInsn(21, "hello");// String value

        localVariablesSorter.visitVarInsn(21, true);// Boolean value }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(21, 0xfffffff0)// Integer value that is greater than 32 bits
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, 0xfffffff0)// Integer value that is greater than 32 bits
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(21, 1.5F)// Float value that is not an integer
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, 1.5F)// Float value that is not an integer
 target is: localVariablesSorter method is: visitVarInsn(int,float)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(21, 'A')// Character value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, 'A')// Character value
 target is: localVariablesSorter method is: visitVarInsn(int,char)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(21, "hello")// String value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, "hello")// String value
 target is: localVariablesSorter method is: visitVarInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(21, true)// Boolean value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(21, true)// Boolean value }}
 target is: localVariablesSorter method is: visitVarInsn(int,boolean)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 98;
String string = "H)A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 21;
int _int = (-16);
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
int _int = 21;
float _float = 1.5F;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _float);
int _int = 21;
char _char = 'A';
((LocalVariablesSorter) _int).visitVarInsn(_int, _char);
int _int = 21;
String string = "hello";
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) string);
int _int = 21;
boolean _boolean = true;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _boolean);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(24, 2)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(24, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(24, 2);// Changed the primitive value and String to more descriptive examples }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(24, 2)// Changed the primitive value and String to more descriptive examples }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(24, 2)// Changed the primitive value and String to more descriptive examples }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1633;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 24;
int _int = 2;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(22, 1)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(22, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(22, 1);// this line has a primitive value of 1 which is not descriptive enough, let's change it to a more illustrative example }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(22, 1)// this line has a primitive value of 1 which is not descriptive enough, let's change it to a more illustrative example }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(22, 1)// this line has a primitive value of 1 which is not descriptive enough, let's change it to a more illustrative example }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 10;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 22;
int _int = 1;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(23, 54)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(23, 54);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(ALOAD, 10);// Load an integer value (10) onto the operand stack }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(ALOAD, 10)// Load an integer value (10) onto the operand stack }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(ALOAD, 10)// Load an integer value (10) onto the operand stack }}
 target is: localVariablesSorter method is: visitVarInsn(int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 2112;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 10;
int _int = null;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(54, 54)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(54, 54);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn("intType", 54);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn("intType", 54), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn("intType", 54) target is: localVariablesSorter method is: visitVarInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
String string = "intType";
int _int = 54;
((LocalVariablesSorter) _int).visitVarInsn((int) string, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(55, 8)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(55, 8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter("localVariableIndex", "H)A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(55, "maxLocalVariableIndex");
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter("localVariableIndex", "H)A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(55, "maxLocalVariableIndex"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(55, "maxLocalVariableIndex") target is: localVariablesSorter method is: visitVarInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "localVariableIndex";
String string = "H)A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, string, methodAdapter);
int _int = 55;
String string = "maxLocalVariableIndex";
((LocalVariablesSorter) string).visitVarInsn(_int, (int) string);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(56, 7)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(56, 7);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(56, 7);// This line has been changed to a more descriptive example, such as: localVariablesSorter.visitVarInsn(56, 10); }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(56, 7)// This line has been changed to a more descriptive example, such as: localVariablesSorter.visitVarInsn(56, 10); }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(56, 7)// This line has been changed to a more descriptive example, such as: localVariablesSorter.visitVarInsn(56, 10); }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1633;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 56;
int _int = 7;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(57, 3314)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(57, 3314);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(57, 1234);// Using a more descriptive value for the variable index (e.g., 1234 instead of 3314) }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(57, 1234)// Using a more descriptive value for the variable index (e.g., 1234 instead of 3314) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(57, 1234)// Using a more descriptive value for the variable index (e.g., 1234 instead of 3314) }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 57;
int _int = 1234;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(124, 124)
statement is: org.evosuite.testcase.statements.ArrayStatement@e951b61e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[2]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), 5, arg4, 1657, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(124, 124);
        Object[] objectArray = new Object[2];
        objectArray[0] = "Test String";
        objectArray[1] = "Test Object";
        localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(124, 124), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(124, 124) target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: Object[] objectArray = new Object[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Object[] objectArray = new Object[2] isAssignment: false Array: new Object[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = "Test String", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Test String" Ct is: objectArray[0] = "Test String"
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = "Test Object", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Test Object" Ct is: objectArray[1] = "Test Object"
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 124;
int _int = 124;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
Object[] objectArray = new Object[2];
int _int = 5;
int _int = 1657;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.ArrayStatement@525c23b9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[2]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), 5, arg4, 1657, arg4)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
        Object[] objectArray = new Object[2];
        objectArray[0] = 1;// primitive value changed to a more descriptive example

        objectArray[1] = "hello";// String value changed to a more representative example

        localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Object[] objectArray = new Object[2] isAssignment: false Array: new Object[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = 1// primitive value changed to a more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:1 Ct is: objectArray[0] = 1// primitive value changed to a more descriptive example

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = "hello"// String value changed to a more representative example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"hello" Ct is: objectArray[1] = "hello"// String value changed to a more representative example

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, 5, objectArray, 1657, objectArray) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Object[] objectArray = new Object[2];
int _int = 5;
int _int = 1657;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.ArrayStatement@626733f4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[9]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame(55, 1, arg2, 0, (Object[]) null)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
localVariablesSorter.visitFrame(55, 1, objectArray, 0, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
        Object[] objectArray = new Object[9];
        localVariablesSorter.visitFrame(55, 1, objectArray, 0, ((Object[]) (null)));
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: Object[] objectArray = new Object[9] isAssignment: false Array: new Object[9] Elements: []
lengths: [9] [9]
Their type are: class [Ljava.lang.Object; Object[]
statement is: localVariablesSorter.visitFrame(55, 1, objectArray, 0, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(55, 1, objectArray, 0, ((Object[]) (null))) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1633;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Object[] objectArray = new Object[9];
int _int = 55;
int _int = 1;
int _int = 0;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", arg2)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(690, 20)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), 0, (Object[]) null, 130, (Object[]) null)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(690, 20);
localVariablesSorter.visitFrame((-1), 0, (Object[]) null, 130, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(LLOAD, 20);
        localVariablesSorter.visitFrame(-1, 0, null, -1, new Object[]{ "Hello", 1L, 3.14 });
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
statement is: localVariablesSorter.visitVarInsn(LLOAD, 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(LLOAD, 20) target is: localVariablesSorter method is: visitVarInsn(int)
statement is: localVariablesSorter.visitFrame(-1, 0, null, -1, new Object[]{ "Hello", 1L, 3.14 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, 0, null, -1, new Object[]{ "Hello", 1L, 3.14 }) target is: localVariablesSorter method is: visitFrame(int,int,<unknown>,int,java.lang.Object[])
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1617;
String string = "H)A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 40;
String string = "H)A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);
Type type = Type.LONG_TYPE;

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@4797d9f5 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.DOUBLE_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(10, 1606)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
        Type type = Type.DOUBLE_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(10, 1606);
        localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null)));
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.DOUBLE_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.DOUBLE_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.DOUBLE_TYPE Type DOUBLE_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
statement is: localVariablesSorter.visitVarInsn(10, 1606), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(10, 1606) target is: localVariablesSorter method is: visitVarInsn(int,int)
statement is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null))) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);
Type type = Type.DOUBLE_TYPE;

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@230e7eea type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.BOOLEAN_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(10, 1606)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
        Type type = Type.BOOLEAN_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(10, 1606);
        localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null)));
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.BOOLEAN_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.BOOLEAN_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.BOOLEAN_TYPE Type BOOLEAN_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
statement is: localVariablesSorter.visitVarInsn(10, 1606), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(10, 1606) target is: localVariablesSorter method is: visitVarInsn(int,int)
statement is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (null))) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1fbf46 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.FLOAT_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(40, 1606)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(40, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
        Type type = Type.FLOAT_TYPE;
        localVariablesSorter.newLocal(type);
        localVariablesSorter.visitVarInsn(40, 1606);
        localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (new Float(3.14))));
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.FLOAT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.FLOAT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.FLOAT_TYPE Type FLOAT_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
statement is: localVariablesSorter.visitVarInsn(40, 1606), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(40, 1606) target is: localVariablesSorter method is: visitVarInsn(int,int)
statement is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (new Float(3.14)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitFrame(-1, -1888, ((Object[]) (null)), 1606, ((Object[]) (new Float(3.14)))) target is: localVariablesSorter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 1606;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);
Type type = Type.FLOAT_TYPE;

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@ba0fd8a0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.CHAR_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
        Type type = Type.CHAR_TYPE;
        localVariablesSorter.newLocal(type);
        // Improved test data: use a more descriptive variable name and a longer String value
        String variableName = "myCharVariable";
        String stringValue = "This is a more descriptive string value.";
        localVariablesSorter.newLocal(STRING_TYPE, variableName, stringValue);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.CHAR_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.CHAR_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.CHAR_TYPE Type CHAR_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
statement is: // Improved test data: use a more descriptive variable name and a longer String value
String variableName = "myCharVariable", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "This is a more descriptive string value.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariablesSorter.newLocal(STRING_TYPE, variableName, stringValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(STRING_TYPE, variableName, stringValue) target is: localVariablesSorter method is: newLocal(java.lang.String,java.lang.String)
* this is vulnerable: String string = "myCharVariable"
* this is vulnerable: String string = "This is a more descriptive string value."
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 3034;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter) _int).newLocal(type);
String string = "myCharVariable";
String string = "This is a more descriptive string value.";

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@a2d8bea type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.BYTE_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
        Type type = Type.INT_TYPE;// changed from Type.BYTE_TYPE to be more descriptive

        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.INT_TYPE// changed from Type.BYTE_TYPE to be more descriptive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.INT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.BYTE_TYPE Type BYTE_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = Type.BYTE_TYPE;
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@4eb982e6 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.SHORT_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
        Type type = Type.SHORT_TYPE;
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.SHORT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.SHORT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.SHORT_TYPE Type SHORT_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 4;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1129), "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@79503a9b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.INT_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1129), "H)9A=`tu", methodAdapter);
Type type = Type.INT_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-1129, "H)9A=`tu", methodAdapter);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-1129, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.INT_TYPE Type INT_TYPE
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodAdapter, methodAdapter);
Type type = Type.INT_TYPE;
((LocalVariablesSorter) string).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", arg2)
statement is: getType(Ljava/lang/String;)Lorg/objectweb/asm/jip/Type; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.getType("[.p")
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[.p");
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
        Type type = Type.getType("[Ljava.lang.String");
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.getType("[Ljava.lang.String"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getType("[Ljava.lang.String") target is: Type method is: getType(java.lang.String)
Matched Method is: getType(Ljava/lang/String;)Lorg/objectweb/asm/jip/Type;
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1241579778;
String string = "H)9=`;h)u";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
String string = "[Ljava.lang.String";
Type type = Type.getType(string);
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@99aa08ee type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.VOID_TYPE
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.VOID_TYPE;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
        Type localVariableType = Type.getObjectType("java/lang/String");
        localVariablesSorter.newLocal(localVariableType);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type localVariableType = Type.getObjectType("java/lang/String"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Type.getObjectType("java/lang/String") target is: Type method is: getObjectType(java.lang.String)
statement is: localVariablesSorter.newLocal(localVariableType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(localVariableType) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 4;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = null;
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1fbf46 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.FLOAT_TYPE
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.AssignmentStatement@d8865cb type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: localVariablesSorter.nextLocal = 181
statement is: newLocal(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocal = localVariablesSorter.newLocal(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.nextLocal = 181;
localVariablesSorter.newLocal(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        Type type = Type.FLOAT_TYPE;
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
        localVariablesSorter.nextLocal = 181;
        localVariablesSorter.newLocal(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.FLOAT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.FLOAT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.FLOAT_TYPE Type FLOAT_TYPE
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.nextLocal = 181, class spoon.support.reflect.code.CtAssignmentImpl
statement is: localVariablesSorter.newLocal(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocal(type) target is: localVariablesSorter method is: newLocal(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 5
Matched Method is: newLocal(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
int _int = 2112;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
((LocalVariablesSorter) _int).newLocal(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(3, 5)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitVarInsn(2221, 5)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(3, 5);
localVariablesSorter.visitVarInsn(2221, 5);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
        localVariablesSorter.visitVarInsn(3, 5);// This instruction sorts the fifth variable on the stack as an integer

        localVariablesSorter.visitVarInsn(2221, 5);// This instruction sorts the fifth variable on the stack as a long }}

    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitVarInsn(3, 5)// This instruction sorts the fifth variable on the stack as an integer
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(3, 5)// This instruction sorts the fifth variable on the stack as an integer
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
statement is: localVariablesSorter.visitVarInsn(2221, 5)// This instruction sorts the fifth variable on the stack as a long }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitVarInsn(2221, 5)// This instruction sorts the fifth variable on the stack as a long }}
 target is: localVariablesSorter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 4
Matched Method is: visitVarInsn(II)V
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 2112;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 3;
int _int = 5;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);
int _int = 2221;
int _int = 5;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "H)9A=`tu", arg2)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.visitIincInsn(196, 0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "H)9A=`tu", localVariablesSorter);
localVariablesSorter.visitIincInsn(196, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "sortedVariableNames", methodAdapter);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "sortedVariableNames", localVariablesSorter);
        localVariablesSorter.visitIincInsn(sortingIndex, 0);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "sortedVariableNames", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "sortedVariableNames", localVariablesSorter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.visitIincInsn(sortingIndex, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.visitIincInsn(sortingIndex, 0) target is: localVariablesSorter method is: visitIincInsn(int)
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
String string = "sortedVariableNames";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
int _int = 2;
String string = "sortedVariableNames";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", arg2)
statement is: org.evosuite.testcase.statements.AssignmentStatement@94fa94a6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: localVariablesSorter.nextLocal = (-3270)
statement is: Class<String> class = String.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.String>
statement code is: Class<String> class = String.class
statement is: getType(Ljava/lang/Class;)Lorg/objectweb/asm/jip/Type; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.getType(arg0)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.nextLocal = (-3270);
Class<String> class = String.class;
Type type = Type.getType(class);
localVariablesSorter.newLocalMapping(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        methodAdapter = new MethodAdapter(methodVisitor);
        localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
        nextLocal = -3270;
        type = Type.getType("java.lang.String");
    }
}
statement is: methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtAssignmentImpl
statement is: localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter), class spoon.support.reflect.code.CtAssignmentImpl
statement is: nextLocal = -3270, class spoon.support.reflect.code.CtAssignmentImpl
statement is: type = Type.getType("java.lang.String"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1fbf46 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.FLOAT_TYPE
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2)
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.newLocalMapping(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        Type type = Type.FLOAT_TYPE;
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
        localVariablesSorter.newLocalMapping(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.FLOAT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.FLOAT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.FLOAT_TYPE Type FLOAT_TYPE
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: localVariablesSorter.newLocalMapping(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type) target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 5
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
int _int = 2112;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
((LocalVariablesSorter) _int).newLocalMapping(type);

statement is: mock(interface org.objectweb.asm.jip.MethodVisitor) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.objectweb.asm.jip.MethodVisitor
statement code is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer())
statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter(arg0)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-6), "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1fbf46 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.FLOAT_TYPE
statement is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newLocalMapping = localVariablesSorter.newLocalMapping(arg0)
test data is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-6), "H)9A=`tu", methodAdapter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocalMapping(type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
        MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-6, "H)9A=`tu", methodAdapter);
        Type type = Type.FLOAT_TYPE;
        localVariablesSorter.newLocalMapping(type);
    }
}
statement is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(MethodVisitor.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: MethodVisitor argument is: MethodVisitor.class
Matched Method is: mock(interface org.objectweb.asm.jip.MethodVisitor)
statement is: MethodAdapter methodAdapter = new MethodAdapter(methodVisitor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(-6, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.FLOAT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.FLOAT_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.FLOAT_TYPE Type FLOAT_TYPE
statement is: localVariablesSorter.newLocalMapping(type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.newLocalMapping(type) target is: localVariablesSorter method is: newLocalMapping(Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: newLocalMapping(Lorg/objectweb/asm/jip/Type;)I
TestCase is: MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) string, (String) methodAdapter, methodAdapter);
Type type = Type.FLOAT_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

statement is: org.objectweb.asm.jip.MethodAdapter(Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodAdapter
statement code is: MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null)
statement is: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.commons.LocalVariablesSorter
statement code is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@354b686 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.Type
statement code is: Type type = Type.LONG_TYPE
statement is: setLocalType(ILorg/objectweb/asm/jip/Type;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: localVariablesSorter.setLocalType(40, arg1)
test data is: MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
Type type = Type.LONG_TYPE;
localVariablesSorter.setLocalType(40, type);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodAdapter methodAdapter = new MethodAdapter(((MethodVisitor) (null)));
        LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
        Type type = Type.LONG_TYPE;
        localVariablesSorter.setLocalType(40, type);
    }
}
statement is: MethodAdapter methodAdapter = new MethodAdapter(((MethodVisitor) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Type type = Type.LONG_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.LONG_TYPE is Type
CtField is: public static org.objectweb.asm.jip.Type org.objectweb.asm.jip.Type.LONG_TYPE Type LONG_TYPE
statement is: localVariablesSorter.setLocalType(40, type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: localVariablesSorter.setLocalType(40, type) target is: localVariablesSorter method is: setLocalType(int,Type)
source statement: org.objectweb.asm.jip.commons.LocalVariablesSorter(ILjava/lang/String;Lorg/objectweb/asm/jip/MethodVisitor;)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.commons.LocalVariablesSorterindex is: 3
Matched Method is: setLocalType(ILorg/objectweb/asm/jip/Type;)V
TestCase is: MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
int _int = 40;
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, methodAdapter);
Type type = Type.LONG_TYPE;
int _int = 40;
((LocalVariablesSorter) _int).setLocalType(_int, type);

* test suite isTestSuite: 63
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, label, label, 102);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitIincInsn(0, 0);
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitMaxs(0, 1392510721);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = null;
try {
  localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", methodAdapter);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(21, 98);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(24, 2);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(22, 1);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(23, 54);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(54, 54);
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(55, 8);
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(56, 7);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(57, 3314);
Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(55, 1, objectArray, 0, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 15: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(690, 20);
localVariablesSorter.visitFrame((-1), 0, (Object[]) null, 130, (Object[]) null);
Test 16: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 17: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 18: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(40, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 19: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1129), "H)9A=`tu", methodAdapter);
Type type = Type.INT_TYPE;
localVariablesSorter.newLocal(type);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[.p");
localVariablesSorter.newLocal(type);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.VOID_TYPE;
// Undeclared exception!
try { 
  localVariablesSorter.newLocal(type);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.nextLocal = 181;
localVariablesSorter.newLocal(type);
Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(3, 5);
localVariablesSorter.visitVarInsn(2221, 5);
Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "H)9A=`tu", localVariablesSorter);
localVariablesSorter.visitIincInsn(196, 0);
Test 28: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.nextLocal = (-3270);
Class<String> class = String.class;
Type type = Type.getType(class);
localVariablesSorter.newLocalMapping(type);
Test 29: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.newLocalMapping(type);
Test 30: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-6), "H)9A=`tu", methodAdapter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocalMapping(type);
Test 31: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
Type type = Type.LONG_TYPE;
localVariablesSorter.setLocalType(40, type);
Test 32: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
int _int = 2112;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitLocalVariable("expectedResult", "9lUNKC)\";G+pwEw1Y", (String) label, label, (Label) 102, (int) (Integer) null);
String string = "inputString";
String string = "abc";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
String string = "inputString";
String string = "abc def ghi jkl mno pqr stu vwx yz";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 33: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitIincInsn(0, 5);

Test 34: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitMaxs(0, 1392510721);

Test 35: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "a negative number indicating the maximum number of local variables that can be sorted", "a string representing the method signature", methodAdapter);

Test 36: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 98;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
((LocalVariablesSorter)98).visitVarInsn(21, (-16));
int _int = 21;
float _float = 1.5F;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _float);
int _int = 21;
char _char = 'A';
((LocalVariablesSorter) _int).visitVarInsn(_int, _char);
int _int = 21;
String string = "hello";
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) string);
int _int = 21;
boolean _boolean = true;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _boolean);

Test 37: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitVarInsn(24, 2);

Test 38: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)10).visitVarInsn(22, 1);

Test 39: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitVarInsn(10, (int) (Integer) null);

Test 40: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1606).visitVarInsn((int) "intType", 54);

Test 41: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "localVariableIndex";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "localVariableIndex", "H)A=`tu", methodAdapter);
int _int = 55;
String string = "maxLocalVariableIndex";
((LocalVariablesSorter) string).visitVarInsn(_int, (int) string);

Test 42: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitVarInsn(56, 7);

Test 43: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)0).visitVarInsn(57, 1234);

Test 44: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)0).visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
int _int = 5;
int _int = 1657;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 45: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
((LocalVariablesSorter)0).visitFrame(5, (int) objectArray, (Object[]) 1657, (int) objectArray, (Object[]) null);

Test 46: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
((LocalVariablesSorter)1633).visitFrame(55, 1, objectArray, 0, (Object[]) null);

Test 47: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;

Test 48: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;

Test 49: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;

Test 50: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;

Test 51: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter)3034).newLocal(type);

Test 52: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
((LocalVariablesSorter)0).newLocal(type);

Test 53: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter)4).newLocal(type);

Test 54: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "H)9A=`tu", (String) methodAdapter, methodAdapter);
Type type = Type.INT_TYPE;
((LocalVariablesSorter) string).newLocal(type);

Test 55: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1241579778;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[Ljava.lang.String");
((LocalVariablesSorter) _int).newLocal(type);

Test 56: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)4).newLocal((Type) null);

Test 57: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).newLocal(type);

Test 58: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 2112;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitVarInsn(3, 5);
int _int = 2221;
int _int = 5;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 59: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "sortedVariableNames", methodAdapter);
int _int = 2;
String string = "sortedVariableNames";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);

Test 60: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).newLocalMapping(type);

Test 61: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "H)9A=`tu", (String) methodAdapter, methodAdapter);
Type type = Type.FLOAT_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

Test 62: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter)40).setLocalType(40, type);


* Generated after the refinement and before minimization 63 tests with total length 343
* test suite isTestSuite: 63
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, label, label, 102);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitIincInsn(0, 0);
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitMaxs(0, 1392510721);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = null;
try {
  localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", methodAdapter);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(21, 98);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(24, 2);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(22, 1);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(23, 54);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(54, 54);
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(55, 8);
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(56, 7);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(57, 3314);
Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(55, 1, objectArray, 0, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 15: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(690, 20);
localVariablesSorter.visitFrame((-1), 0, (Object[]) null, 130, (Object[]) null);
Test 16: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 17: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 18: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(40, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 19: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1129), "H)9A=`tu", methodAdapter);
Type type = Type.INT_TYPE;
localVariablesSorter.newLocal(type);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[.p");
localVariablesSorter.newLocal(type);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.VOID_TYPE;
// Undeclared exception!
try { 
  localVariablesSorter.newLocal(type);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.nextLocal = 181;
localVariablesSorter.newLocal(type);
Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(3, 5);
localVariablesSorter.visitVarInsn(2221, 5);
Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "H)9A=`tu", localVariablesSorter);
localVariablesSorter.visitIincInsn(196, 0);
Test 28: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.nextLocal = (-3270);
Class<String> class = String.class;
Type type = Type.getType(class);
localVariablesSorter.newLocalMapping(type);
Test 29: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.newLocalMapping(type);
Test 30: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-6), "H)9A=`tu", methodAdapter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocalMapping(type);
Test 31: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
Type type = Type.LONG_TYPE;
localVariablesSorter.setLocalType(40, type);
Test 32: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
int _int = 2112;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitLocalVariable("expectedResult", "9lUNKC)\";G+pwEw1Y", (String) label, label, (Label) 102, (int) (Integer) null);
String string = "inputString";
String string = "abc";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
String string = "inputString";
String string = "abc def ghi jkl mno pqr stu vwx yz";
int _int = 102;
int _int = null;
((LocalVariablesSorter) _int).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 33: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitIincInsn(0, 5);

Test 34: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitMaxs(0, 1392510721);

Test 35: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "a negative number indicating the maximum number of local variables that can be sorted", "a string representing the method signature", methodAdapter);

Test 36: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 98;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
((LocalVariablesSorter)98).visitVarInsn(21, (-16));
int _int = 21;
float _float = 1.5F;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _float);
int _int = 21;
char _char = 'A';
((LocalVariablesSorter) _int).visitVarInsn(_int, _char);
int _int = 21;
String string = "hello";
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) string);
int _int = 21;
boolean _boolean = true;
((LocalVariablesSorter) _int).visitVarInsn(_int, (int) _boolean);

Test 37: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitVarInsn(24, 2);

Test 38: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)10).visitVarInsn(22, 1);

Test 39: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitVarInsn(10, (int) (Integer) null);

Test 40: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1606).visitVarInsn((int) "intType", 54);

Test 41: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "localVariableIndex";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "localVariableIndex", "H)A=`tu", methodAdapter);
int _int = 55;
String string = "maxLocalVariableIndex";
((LocalVariablesSorter) string).visitVarInsn(_int, (int) string);

Test 42: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)1633).visitVarInsn(56, 7);

Test 43: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)0).visitVarInsn(57, 1234);

Test 44: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 0;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)0).visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
int _int = 5;
int _int = 1657;
Object[] objectArray = null;
((LocalVariablesSorter) _int).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 45: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
((LocalVariablesSorter)0).visitFrame(5, (int) objectArray, (Object[]) 1657, (int) objectArray, (Object[]) null);

Test 46: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
((LocalVariablesSorter)1633).visitFrame(55, 1, objectArray, 0, (Object[]) null);

Test 47: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;

Test 48: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;

Test 49: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;

Test 50: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;

Test 51: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
((LocalVariablesSorter)3034).newLocal(type);

Test 52: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
((LocalVariablesSorter)0).newLocal(type);

Test 53: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
((LocalVariablesSorter)4).newLocal(type);

Test 54: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "H)9A=`tu", (String) methodAdapter, methodAdapter);
Type type = Type.INT_TYPE;
((LocalVariablesSorter) string).newLocal(type);

Test 55: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 1241579778;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[Ljava.lang.String");
((LocalVariablesSorter) _int).newLocal(type);

Test 56: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)4).newLocal((Type) null);

Test 57: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).newLocal(type);

Test 58: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
int _int = 2112;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).visitVarInsn(3, 5);
int _int = 2221;
int _int = 5;
((LocalVariablesSorter) _int).visitVarInsn(_int, _int);

Test 59: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "sortedVariableNames", methodAdapter);
int _int = 2;
String string = "sortedVariableNames";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(_int, string, localVariablesSorter);

Test 60: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
((LocalVariablesSorter)2112).newLocalMapping(type);

Test 61: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
String string = "H)9A=`tu";
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((int) "H)9A=`tu", (String) methodAdapter, methodAdapter);
Type type = Type.FLOAT_TYPE;
((LocalVariablesSorter) string).newLocalMapping(type);

Test 62: 
MethodAdapter methodAdapter = new MethodAdapter((MethodVisitor) null);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)9A=`tu", methodAdapter);
Type type = Type.LONG_TYPE;
((LocalVariablesSorter)40).setLocalType(40, type);


* Minimizing test suite
* test suite isTestSuite: 32
Test 0: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Label label = new Label();
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, label, label, 102);
Test 1: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitIincInsn(0, 0);
Test 2: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitMaxs(0, 1392510721);
Test 3: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = null;
try {
  localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", methodAdapter);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(21, 98);
Test 5: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(57, 3314);
Test 6: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(22, 1);
Test 7: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(23, 54);
Test 8: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(24, 2);
Test 9: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(54, 54);
Test 10: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(55, 8);
Test 11: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(56, 7);
Test 12: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(3, 5);
localVariablesSorter.visitVarInsn(2221, 5);
Test 13: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[2];
localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
Test 14: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", methodAdapter);
Object[] objectArray = new Object[9];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame(55, 1, objectArray, 0, (Object[]) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClassReader.accept() should be called with EXPAND_FRAMES flag
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}

Test 15: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
localVariablesSorter.visitVarInsn(124, 124);
Object[] objectArray = new Object[2];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 5, objectArray, 1657, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(40, "H)A=`tu", localVariablesSorter);
Type type = Type.LONG_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(690, 20);
localVariablesSorter.visitFrame((-1), 0, (Object[]) null, 130, (Object[]) null);
Test 17: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.DOUBLE_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 18: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.BOOLEAN_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(10, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 19: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", localVariablesSorter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocal(type);
localVariablesSorter.visitVarInsn(40, 1606);
localVariablesSorter.visitFrame((-1), (-1888), (Object[]) null, 1606, (Object[]) null);
Test 20: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(3034, "H)9A=`tu", methodAdapter);
Type type = Type.CHAR_TYPE;
localVariablesSorter.newLocal(type);
Test 21: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
Type type = Type.BYTE_TYPE;
localVariablesSorter.newLocal(type);
Test 22: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.SHORT_TYPE;
localVariablesSorter.newLocal(type);
Test 23: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-1129), "H)9A=`tu", methodAdapter);
Type type = Type.INT_TYPE;
localVariablesSorter.newLocal(type);
Test 24: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1241579778, "H)9=`;h)u", methodAdapter);
Type type = Type.getType("[.p");
localVariablesSorter.newLocal(type);
Test 25: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(4, "H)9A=`tu", methodAdapter);
Type type = Type.VOID_TYPE;
// Undeclared exception!
try { 
  localVariablesSorter.newLocal(type);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.nextLocal = 181;
localVariablesSorter.newLocal(type);
Test 27: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", methodAdapter);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2, "H)9A=`tu", localVariablesSorter);
localVariablesSorter.visitIincInsn(196, 0);
Test 28: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", methodAdapter);
localVariablesSorter.nextLocal = (-3270);
Class<String> class = String.class;
Type type = Type.getType(class);
localVariablesSorter.newLocalMapping(type);
Test 29: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
Type type = Type.FLOAT_TYPE;
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", methodAdapter);
localVariablesSorter.newLocalMapping(type);
Test 30: 
MethodVisitor methodVisitor = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter methodAdapter = new MethodAdapter(methodVisitor);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter((-6), "H)9A=`tu", methodAdapter);
Type type = Type.FLOAT_TYPE;
localVariablesSorter.newLocalMapping(type);
Test 31: 
Type type = Type.LONG_TYPE;
// Undeclared exception!
try { 
  ((LocalVariablesSorter)40).setLocalType(40, type);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 87
* Number of covered goals: 86
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 110
* Number of covered goals: 110
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 83%
* Total number of goals: 6
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 87
* Number of covered goals: 79
* Generated 32 tests with total length 161
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
Label arg4 = new Label();
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2);
localVariablesSorter.visitLocalVariable("", "9lUNKC)\";G+pwEw1Y", (String) null, arg4, arg4, 102);

** It was a parseable test case! 
refined test name is: testLocalVariableInitialization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2);
localVariablesSorter.visitIincInsn(0, 0);

** It was a parseable test case! 
refined test name is: testVisitIincInsnMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2);
localVariablesSorter.visitMaxs(0, 1392510721);

** It was a parseable test case! 
refined test name is: testVisitMaxs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = null;
try {
  localVariablesSorter = new LocalVariablesSorter((-550), "tlkd^{Ci0;)},,SE", arg2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.commons.LocalVariablesSorter", e);
}


** It was a parseable test case! 
refined test name is: testConstructorThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(98, "H)A=`tu", arg2);
localVariablesSorter.visitVarInsn(21, 98);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
refined test name is: testMethodVisitorIsCalledWithUniqueIdentifier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(57, 3314);

** It was a parseable test case! 
refined test name is: testMethodVisitorLocalVariablesSorter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(10, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(22, 1);

** It was a parseable test case! 
refined test name is: testVisitVarInsnOpcode22Variable1
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(23, 54);

** It was a parseable test case! 
refined test name is: testSortedLocalVariablesAreUsedInMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(24, 2);

** It was a parseable test case! 
refined test name is: testVisitingVarInsnWithIndex2
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1606, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(54, 54);

** It was a parseable test case! 
refined test name is: testvisitVarInsnthrowsAssumptionViolationException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1617, "H)A=`tu", arg2);
localVariablesSorter.visitVarInsn(55, 8);

** It was a parseable test case! 
refined test name is: testVisitVarInsnWithMaxLocalsExceeded
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(1633, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(56, 7);

** It was a parseable test case! 
refined test name is: testVisitVarInsnWithOpcode56AndIndex7
* Compiling Tests
refined test name is: testVisitVarInsnWithOpcode56AndIndex7
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(2112, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(3, 5);
localVariablesSorter.visitVarInsn(2221, 5);

** It was a parseable test case! 
refined test name is: testAddInstructionsToLocalVariablesSorter
* Compiling Tests
refined test name is: testAddInstructionsToLocalVariablesSorter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2);
Object[] arg4 = new Object[2];
localVariablesSorter.visitFrame((-1), 5, arg4, 1657, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testVisitFrameWithLocalVariablesSorter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MethodVisitor arg0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
MethodAdapter arg2 = new MethodAdapter(arg0);
LocalVariablesSorter localVariablesSorter = new LocalVariablesSorter(0, "H)9A=`tu", arg2);
localVariablesSorter.visitVarInsn(124, 124);
Object[] arg4 = new Object[2];
// Undeclared exception!
try { 
  localVariablesSorter.visitFrame((-1), 5, arg4, 1657, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Type", e);
}


** It was a parseable test case! 
refined test name is: testVisitFramethrowsNPEWhenArgumentIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:28.593 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:28.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:28.781 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:28.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:28.881 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:28.882 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.040 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 09:46:29.135 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.264 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.463 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.467 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.622 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.738 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.740 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.845 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:29.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:29.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 09:46:30.175 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.176 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 09:46:30.458 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.460 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:30.534 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 09:46:30.591 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.592 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
[MASTER] 09:46:30.751 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 10 called: 2 to improve: false
[MASTER] 09:46:30.919 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar8647573913679323598.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 09:46:30.920 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8647573913679323598.jar
[MASTER] 09:46:30.956 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* Computation finished
