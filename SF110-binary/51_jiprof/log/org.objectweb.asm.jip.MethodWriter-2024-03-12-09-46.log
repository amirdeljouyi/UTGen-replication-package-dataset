* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.MethodWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 20580
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.MethodWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2786
* Using seed 1710236792653
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 320 / 2786
[Progress:>                             0%] [Cov:=>                                 4%][Progress:>                             1%] [Cov:==>                                6%][Progress:>                             1%] [Cov:====>                              12%][Progress:>                             1%] [Cov:====>                              14%][Progress:>                             2%] [Cov:=====>                             16%][Progress:>                             2%] [Cov:=====>                             17%][Progress:>                             2%] [Cov:========>                          23%][Progress:>                             2%] [Cov:========>                          25%][Progress:>                             3%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:===========>                       33%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:==============>                    40%][Progress:=>                            4%] [Cov:==============>                    41%][Progress:=>                            4%] [Cov:==============>                    42%][Progress:=>                            4%] [Cov:===============>                   44%][Progress:=>                            5%] [Cov:===============>                   44%][Progress:=>                            5%] [Cov:================>                  46%][Progress:=>                            5%] [Cov:================>                  46%][Progress:=>                            5%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          11%] [Cov:=================>                 49%][Progress:===>                          12%] [Cov:=================>                 49%][Progress:===>                          12%] [Cov:=================>                 50%][Progress:===>                          12%] [Cov:=================>                 50%][Progress:===>                          12%] [Cov:=================>                 50%][Progress:===>                          12%] [Cov:=================>                 50%][Progress:===>                          12%] [Cov:=================>                 50%][Progress:===>                          12%] [Cov:=================>                 51%][Progress:===>                          13%] [Cov:==================>                52%][Progress:===>                          13%] [Cov:==================>                52%][Progress:===>                          13%] [Cov:==================>                52%][Progress:===>                          13%] [Cov:==================>                52%][Progress:===>                          13%] [Cov:==================>                52%][Progress:====>                         14%] [Cov:==================>                52%][Progress:====>                         14%] [Cov:==================>                52%][Progress:====>                         14%] [Cov:==================>                53%][Progress:====>                         16%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               56%][Progress:======>                       20%] [Cov:===================>               57%][Progress:======>                       20%] [Cov:===================>               57%][Progress:======>                       21%] [Cov:===================>               57%][Progress:======>                       21%] [Cov:===================>               57%][Progress:======>                       21%] [Cov:===================>               57%][Progress:======>                       21%] [Cov:====================>              58%][Progress:======>                       21%] [Cov:====================>              58%][Progress:======>                       21%] [Cov:====================>              58%][Progress:======>                       21%] [Cov:====================>              58%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:====================>              59%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       23%] [Cov:=====================>             60%][Progress:=======>                      25%] [Cov:=====================>             60%][Progress:=======>                      25%] [Cov:=====================>             60%][Progress:=======>                      25%] [Cov:=====================>             60%][Progress:=======>                      26%] [Cov:=====================>             60%][Progress:=======>                      26%] [Cov:=====================>             60%][Progress:=======>                      26%] [Cov:=====================>             60%][Progress:========>                     29%] [Cov:=====================>             60%][Progress:========>                     29%] [Cov:=====================>             60%][Progress:========>                     29%] [Cov:=====================>             60%][Progress:========>                     29%] [Cov:=====================>             61%][Progress:========>                     29%] [Cov:=====================>             61%][Progress:========>                     29%] [Cov:=====================>             61%][Progress:========>                     29%] [Cov:=====================>             61%][Progress:========>                     29%] [Cov:=====================>             61%][Progress:=========>                    32%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   35%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:==========>                   36%] [Cov:=====================>             62%][Progress:===========>                  37%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:======================>            63%][Progress:============>                 40%] [Cov:======================>            63%][Progress:============>                 40%] [Cov:======================>            63%][Progress:============>                 40%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 42%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                44%] [Cov:======================>            63%][Progress:=============>                45%] [Cov:======================>            63%][Progress:=============>                45%] [Cov:======================>            63%][Progress:=============>                45%] [Cov:======================>            63%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:==============>               49%] [Cov:======================>            64%][Progress:===============>              50%] [Cov:======================>            64%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    84%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%]
* Search finished after 204s and 548 generations, 443363 statements, best individual has fitness: 1137.0
* Generated before the refinement 118 tests with total length 681
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1241)
statement is: org.evosuite.testcase.statements.ArrayStatement@3eacf80 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ccf15cab type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@da616c17 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8636f2a1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@81989a66 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "Code"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b4df889c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "Code"
statement is: org.evosuite.testcase.statements.AssignmentStatement@18e4bdbe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "Code"
statement is: org.evosuite.testcase.statements.AssignmentStatement@79f9589b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "E8"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Code", "Code", "E8", arg5, false, false)
statement is: visitCode()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitCode()
test data is: ClassWriter classWriter = new ClassWriter(1241);
String[] stringArray = new String[7];
stringArray[0] = "E8";
stringArray[1] = "E8";
stringArray[2] = "E8";
stringArray[3] = "Code";
stringArray[4] = "Code";
stringArray[5] = "Code";
stringArray[6] = "E8";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Code", "Code", "E8", stringArray, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        stringArray[2] = "Charlie";
        stringArray[3] = "David";
        stringArray[4] = "Eve";
        stringArray[5] = "Frank";
        stringArray[6] = "Grace";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Smith", "John", "123 Main St", stringArray, false, false);
        methodWriter.visitCode();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d671eb28
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a78ebec6
statement is: stringArray[2] = "Charlie", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Charlie" Ct is: stringArray[2] = "Charlie"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3a509226
statement is: stringArray[3] = "David", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"David" Ct is: stringArray[3] = "David"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aba161b9
statement is: stringArray[4] = "Eve", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Eve" Ct is: stringArray[4] = "Eve"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4c7c62a4
statement is: stringArray[5] = "Frank", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Frank" Ct is: stringArray[5] = "Frank"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e6856102
statement is: stringArray[6] = "Grace", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Grace" Ct is: stringArray[6] = "Grace"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dc901e01
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Smith", "John", "123 Main St", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitCode() target is: methodWriter method is: visitCode()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 14
Matched Method is: visitCode()V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
* this is vulnerable: String string = "Charlie"
* this is vulnerable: String string = "David"
* this is vulnerable: String string = "Eve"
* this is vulnerable: String string = "Frank"
* this is vulnerable: String string = "Grace"
TestCase is: String[] stringArray = new String[7];
String string = "Alice";
String string = "Bob";
String string = "Charlie";
String string = "David";
String string = "Eve";
String string = "Frank";
String string = "Grace";
int _int = 2;
String string = "Smith";
String string = "John";
String string = "123 Main St";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitCode();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1241)
statement is: org.evosuite.testcase.statements.ArrayStatement@b02dd397 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d4dd3831 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1714c6bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8058ed12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a566c434 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@28613d9f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "E8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@25ef588f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "Code"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1232ae0e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "E8"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Code", "Code", "E8", arg5, false, false)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(1241);
String[] stringArray = new String[7];
stringArray[0] = "E8";
stringArray[1] = "E8";
stringArray[2] = "E8";
stringArray[3] = "E8";
stringArray[4] = "E8";
stringArray[5] = "Code";
stringArray[6] = "E8";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Code", "Code", "E8", stringArray, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        stringArray[2] = "XYZ";
        stringArray[3] = "GHI";
        stringArray[4] = "JKL";
        stringArray[5] = "MNO";
        stringArray[6] = "PQR";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Code", "Code", "E8", stringArray, false, false);
        methodWriter.visitEnd();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@402947d7
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@76700ab0
statement is: stringArray[2] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[2] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@304ab6fc
statement is: stringArray[3] = "GHI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"GHI" Ct is: stringArray[3] = "GHI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dfd1ab73
statement is: stringArray[4] = "JKL", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"JKL" Ct is: stringArray[4] = "JKL"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cc57d91f
statement is: stringArray[5] = "MNO", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MNO" Ct is: stringArray[5] = "MNO"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@62e54f25
statement is: stringArray[6] = "PQR", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"PQR" Ct is: stringArray[6] = "PQR"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8a9e1ee6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Code", "Code", "E8", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitEnd() target is: methodWriter method is: visitEnd()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 14
Matched Method is: visitEnd()V
* this is vulnerable: String string = "ABC"
* this is vulnerable: String string = "DEF"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "GHI"
* this is vulnerable: String string = "JKL"
* this is vulnerable: String string = "MNO"
* this is vulnerable: String string = "PQR"
TestCase is: String[] stringArray = new String[7];
String string = "ABC";
String string = "DEF";
String string = "XYZ";
String string = "GHI";
String string = "JKL";
String string = "MNO";
String string = "PQR";
int _int = 2;
String string = "Code";
String string = "Code";
String string = "E8";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitEnd();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 24, "org.objectweb.asm.jip.Type", "]*tyc)@8Bvf", "org.objectweb.asm.jip.Type", (String[]) null, true, true)
test data is: ClassWriter classWriter = new ClassWriter((-1897));
MethodWriter methodWriter = new MethodWriter(classWriter, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
MethodWriter methodWriter = new MethodWriter(classWriter, 24, "org.objectweb.asm.jip.Type", "]*tyc)@8Bvf", "org.objectweb.asm.jip.Type", (String[]) null, true, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "org.objectweb.asm.jip.Type", "]*tyc)@8Bvf", "org.objectweb.asm.jip.Type", ((String[]) (null)), false, true);
        MethodWriter methodWriter = new MethodWriter(classWriter, 24, "org.objectweb.asm.jip.Type", "org.objectweb.asm.jip.Type", ((String[]) (null)), true, true);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "org.objectweb.asm.jip.Type", "]*tyc)@8Bvf", "org.objectweb.asm.jip.Type", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 24, "org.objectweb.asm.jip.Type", "org.objectweb.asm.jip.Type", ((String[]) (null)), true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "org.objectweb.asm.jip.Type";
String string = "]*tyc)@8Bvf";
String string = "org.objectweb.asm.jip.Type";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, true);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1815))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "<init>", "<init>", "Shd", (String[]) null, true, true)
test data is: ClassWriter classWriter = new ClassWriter((-1815));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "Shd", (String[]) null, true, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "Shd", ((String[]) (null)), true, true);
        // Improved test data:
        ClassWriter classWriter = new ClassWriter(9);// Using a more descriptive value for the ClassWriter's buffer size.

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "Shd", ((String[]) (null)), true, true);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "Shd", ((String[]) (null)), true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
ClassWriter classWriter = new ClassWriter(9)// Using a more descriptive value for the ClassWriter's buffer size.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "<init>", "<init>", "Shd", ((String[]) (null)), true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 2;
String string = "<init>";
String string = "<init>";
String string = "Shd";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 9;
ClassWriter classWriter = new ClassWriter(_int);
int _int = 2;
String string = "<init>";
String string = "<init>";
String string = "Shd";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter(classWriter, _int, string, string, string, (String[]) _boolean, _boolean, true);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@f15fe0c0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3a580761 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(4, (-763), arg4, 906, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", stringArray, true, false);
methodWriter.visitFrame(4, (-763), stringArray, 906, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "hello";
        stringArray[1] = "world";
        MethodWriter methodWriter = new MethodWriter(classWriter, 10, "hello", "world", stringArray, true, false);
        methodWriter.visitFrame(4, -763, stringArray, 906, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@38a92ddc
statement is: stringArray[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray[1] = "world"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2365010f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 10, "hello", "world", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(4, -763, stringArray, 906, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(4, -763, stringArray, 906, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
* this is vulnerable: String string = "hello"
* this is vulnerable: String string = "world"
TestCase is: String[] stringArray = new String[1];
String string = "hello";
String string = "world";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(184)
statement is: org.evosuite.testcase.statements.ArrayStatement@8aecfdb2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dc04a679 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "vode"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "vode", "vode", "vode", arg5, false, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitParameterAnnotation = (AnnotationWriter)methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true)
test data is: ClassWriter classWriter = new ClassWriter(184);
String[] stringArray = new String[1];
stringArray[0] = "vode";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vode", "vode", "vode", stringArray, false, false);
methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.example.MyClass";// replaced 184 with a more descriptive name for the class being written

        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "doSomething", "void", "Ljava/lang/String;", stringArray, false, false);
        methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.MyClass"// replaced 184 with a more descriptive name for the class being written
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.MyClass" Ct is: stringArray[0] = "com.example.MyClass"// replaced 184 with a more descriptive name for the class being written

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dd1528ae
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "doSomething", "void", "Ljava/lang/String;", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
* this is vulnerable: String string = "com.example.MyClass"
TestCase is: String[] stringArray = new String[1];
String string = "com.example.MyClass";
int _int = 2;
String string = "doSomething";
String string = "void";
String string = "Ljava/lang/String;";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
String string = "Ljava/lang/Synthetic;";
boolean _boolean = true;
((MethodWriter) string).visitParameterAnnotation(_int, string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1823))
statement is: org.evosuite.testcase.statements.ArrayStatement@8999d772 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c3494c8c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "9wvl"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "9wvl", arg5, true, true)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(766, 766, arg4, 766, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1823));
String[] stringArray = new String[1];
stringArray[0] = "9wvl";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "9wvl", stringArray, true, true);
methodWriter.visitFrame(766, 766, stringArray, 766, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "myMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "myMethod", "myMethod", "myException", stringArray, true, false);
        methodWriter.visitFrame(766, 766, stringArray, 766, stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[0] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6ae280fb
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "myMethod", "myMethod", "myException", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(766, 766, stringArray, 766, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(766, 766, stringArray, 766, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "myMethod"
TestCase is: String[] stringArray = new String[1];
String string = "myMethod";
int _int = 1;
String string = "myMethod";
String string = "myMethod";
String string = "myException";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 766;
int _int = 766;
int _int = 766;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@7b6aa960 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2b4272c5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3592, "", "", "", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@ccb9cf4a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[6]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 2, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "", "", "", stringArray, false, false);
Object[] objectArray = new Object[6];
methodWriter.visitFrame((-1), 2, objectArray, 1, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ACC_PUBLIC, "main", "([Ljava/lang/String;)V", null, stringArray, false, false);
        Object[] objectArray = new Object[]{ new Integer(42), new Double(3.14) };
        methodWriter.visitFrame(-1, 2, objectArray, 1, objectArray);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [1] []
Dimension: [] Ct is: Object[] objectArray = new Object[6] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [6] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ACC_PUBLIC, "main", "([Ljava/lang/String;)V", null, stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[]{ new Integer(42), new Double(3.14) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[]{ new Integer(42), new Double(3.14) } Elements: [new Integer(42), new Double(3.14)]
lengths: [1] []
Dimension: [] Ct is: Object[] objectArray = new Object[6] isAssignment: false Array: new Object[]{ new Integer(42), new Double(3.14) } Elements: [new Integer(42), new Double(3.14)]
lengths: [6] []
statement is: methodWriter.visitFrame(-1, 2, objectArray, 1, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, 2, objectArray, 1, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 4
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
TestCase is: String string = "main";
String[] stringArray = "([Ljava/lang/String;)V";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, (String) _boolean, (String) _boolean, "", stringArray, false, false);
int _int = 2;
int _int = 1;
Object[] objectArray = null;
int _int = null;
Object[] objectArray = null;
((MethodWriter) _boolean).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@a9229665 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@91a0702b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@61d1c035 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fa78d9b8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[0] = (Object) "java/lang/dyn/Dynamic"
statement is: org.evosuite.testcase.statements.AssignmentStatement@de0b586d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[1] = (Object) "java/lang/dyn/Dynamic"
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 2, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
Object[] objectArray = new Object[2];
objectArray[0] = (Object) "java/lang/dyn/Dynamic";
objectArray[1] = (Object) "java/lang/dyn/Dynamic";
methodWriter.visitFrame((-1), 2, objectArray, 1, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java/lang/dyn/Dynamic";
        MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM5, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
        Object[] objectArray = new Object[2];
        objectArray[0] = ((Object) ("java/lang/dyn/Dynamic"));
        objectArray[1] = ((Object) ("java/lang/dyn/Dynamic"));
        methodWriter.visitFrame(F_NEW, 2, objectArray, 1, objectArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java/lang/dyn/Dynamic", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/lang/dyn/Dynamic" Ct is: stringArray[0] = "java/lang/dyn/Dynamic"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@66801286
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM5, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [2] Ct is: Object[] objectArray = new Object[2] isAssignment: false Array: new Object[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[0] = ((Object) ("java/lang/dyn/Dynamic")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("java/lang/dyn/Dynamic")) Ct is: objectArray[0] = ((Object) ("java/lang/dyn/Dynamic"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1358faa5
statement is: objectArray[1] = ((Object) ("java/lang/dyn/Dynamic")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("java/lang/dyn/Dynamic")) Ct is: objectArray[1] = ((Object) ("java/lang/dyn/Dynamic"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@79a70aeb
statement is: methodWriter.visitFrame(F_NEW, 2, objectArray, 1, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(F_NEW, 2, objectArray, 1, objectArray) target is: methodWriter method is: visitFrame(int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
TestCase is: String[] stringArray = new String[1];
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Object[] objectArray = new Object[2];
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
int _int = 2;
int _int = 1;
Object[] objectArray = null;
((MethodWriter) string).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@6f8525d3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fd9e87db type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1961), 252, arg4, (-1839), arg4)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, (-1920), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
methodWriter.visitFrame((-1961), 252, stringArray, (-1839), stringArray);
methodWriter.visitFrame(2, (-1920), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Test Data: Testing MethodWriter";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Test Data: Testing MethodWriter", "Test Data: Testing MethodWriter", "Test Data: Testing MethodWriter", stringArray, false, false);
        methodWriter.visitFrame(1, 252, stringArray, 1, stringArray);
        methodWriter.visitFrame(2, -1961, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Test Data: Testing MethodWriter", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test Data: Testing MethodWriter" Ct is: stringArray[0] = "Test Data: Testing MethodWriter"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@126a7c9
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Test Data: Testing MethodWriter", "Test Data: Testing MethodWriter", "Test Data: Testing MethodWriter", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, 252, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 252, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.visitFrame(2, -1961, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, -1961, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Test Data: Testing MethodWriter"
TestCase is: String[] stringArray = new String[1];
String string = "Test Data: Testing MethodWriter";
int _int = 2;
String string = "Test Data: Testing MethodWriter";
String string = "Test Data: Testing MethodWriter";
String string = "Test Data: Testing MethodWriter";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
int _int = 252;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 2;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(12)
statement is: org.evosuite.testcase.statements.ArrayStatement@df2ec246 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@258cfe03 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3592, 1758, arg4, 3592, arg4)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(2344, 750)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1758, Integer.MAX_VALUE, arg4, 12, arg4)
test data is: ClassWriter classWriter = new ClassWriter(12);
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
methodWriter.visitFrame(3592, 1758, stringArray, 3592, stringArray);
methodWriter.visitIntInsn(2344, 750);
methodWriter.visitFrame(1758, Integer.MAX_VALUE, stringArray, 12, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java/lang/dyn/Dynamic";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
        methodWriter.visitFrame(3592, Integer.MAX_VALUE, stringArray, 12, stringArray);
        methodWriter.visitIntInsn(2344, 750);
        methodWriter.visitFrame(1758, Integer.MAX_VALUE, stringArray, 12, stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java/lang/dyn/Dynamic", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/lang/dyn/Dynamic" Ct is: stringArray[0] = "java/lang/dyn/Dynamic"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@23d0fc36
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(3592, Integer.MAX_VALUE, stringArray, 12, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3592, Integer.MAX_VALUE, stringArray, 12, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
statement is: methodWriter.visitIntInsn(2344, 750), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(2344, 750) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIntInsn(II)V
statement is: methodWriter.visitFrame(1758, Integer.MAX_VALUE, stringArray, 12, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1758, Integer.MAX_VALUE, stringArray, 12, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
TestCase is: String[] stringArray = new String[1];
String string = "java/lang/dyn/Dynamic";
int _int = 3592;
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 3592;
int _int = 12;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);
int _int = 2344;
int _int = 750;
((MethodWriter) string).visitIntInsn(_int, _int);
int _int = 1758;
int _int = 12;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@cb1e5e8d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2f8d4074 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "AI1gdnL"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1446028814), 262144, arg4, (-1446028814), arg4)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, 3, arg4, 5, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = "AI1gdnL";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false);
methodWriter.visitFrame((-1446028814), 262144, stringArray, (-1446028814), stringArray);
methodWriter.visitFrame(3, 3, stringArray, 5, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "AI1gdnL";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false);
        methodWriter.visitFrame(-1446028814, 262144, stringArray, -1446028814, stringArray);
        methodWriter.visitFrame(3, 3, stringArray, 5, stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "AI1gdnL", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"AI1gdnL" Ct is: stringArray[0] = "AI1gdnL"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fd3a72b2
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(-1446028814, 262144, stringArray, -1446028814, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1446028814, 262144, stringArray, -1446028814, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
statement is: methodWriter.visitFrame(3, 3, stringArray, 5, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, 3, stringArray, 5, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "AI1gdnL"
TestCase is: String[] stringArray = new String[1];
String string = "AI1gdnL";
int _int = 2;
String string = "AI1gdnL";
String string = "AI1gdnL";
String string = "AI1gdnL";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 262144;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, stringArray, _int, stringArray);
int _int = 3;
int _int = 3;
int _int = 5;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1815))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Shd", "Shd", "Shd", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, (-1815), (Object[]) null, 1, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1815));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Shd", "Shd", "Shd", (String[]) null, false, false);
methodWriter.visitFrame(1, (-1815), (Object[]) null, 1, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello", "Hello", "Hello", new String[]{ "World" }, false, false);
        methodWriter.visitFrame(1, 20, new Object[]{ null }, 1, new Object[]{ new Integer(5) });
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello", "Hello", "Hello", new String[]{ "World" }, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, 20, new Object[]{ null }, 1, new Object[]{ new Integer(5) }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 20, new Object[]{ null }, 1, new Object[]{ new Integer(5) }) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
TestCase is: int _int = 2;
String string = "Hello";
String string = "Hello";
String string = "Hello";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 20;
int _int = 1;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1815))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Shd", "Shd", "Shd", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 2, (Object[]) null, (-1), (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1815));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Shd", "Shd", "Shd", (String[]) null, false, false);
methodWriter.visitFrame(2, 2, (Object[]) null, (-1), (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Shd", "Shd", "Shd", ((String[]) (null)), false, false);
        methodWriter.visitFrame(2, 2, ((Object[]) (null)), -1, ((Object[]) (null)));// Use a more descriptive value for the local variable count }}

    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Shd", "Shd", "Shd", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 2, ((Object[]) (null)), -1, ((Object[]) (null)))// Use a more descriptive value for the local variable count }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 2, ((Object[]) (null)), -1, ((Object[]) (null)))// Use a more descriptive value for the local variable count }}
 target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
TestCase is: int _int = 2;
String string = "Shd";
String string = "Shd";
String string = "Shd";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 2;
int _int = 2;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Ljava/lang/Synthetic;", "", "", (String[]) null, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, 1, (Object[]) null, 13, (Object[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-1));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "", "", (String[]) null, false, false);
methodWriter.visitFrame(3, 1, (Object[]) null, 13, (Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "", "", ((String[]) (null)), false, false);
        methodWriter.visitFrame(3, 1, ((Object[]) (new Object[]{ "Ljava/util/ArrayList;" })), new Object[]{ new Integer(5) }, new Object[]{ new String("Hello, world!") }, 13, ((Object[]) (null)));
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Ljava/lang/Synthetic;", "", "", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(3, 1, ((Object[]) (new Object[]{ "Ljava/util/ArrayList;" })), new Object[]{ new Integer(5) }, new Object[]{ new String("Hello, world!") }, 13, ((Object[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, 1, ((Object[]) (new Object[]{ "Ljava/util/ArrayList;" })), new Object[]{ new Integer(5) }, new Object[]{ new String("Hello, world!") }, 13, ((Object[]) (null))) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],java.lang.Object[],java.lang.Object[],int,java.lang.Object[])
TestCase is: int _int = 2;
String string = "Ljava/lang/Synthetic;";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(21)
statement is: org.evosuite.testcase.statements.ArrayStatement@9f4b6605 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7cebeb4b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "'"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3592, "'", "'", "'", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, 2, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(21);
String[] stringArray = new String[1];
stringArray[0] = "'";
MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "'", "'", "'", stringArray, false, false);
methodWriter.visitFrame(0, 2, stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "hello";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "hello", "hello", "hello", stringArray, false, false);
        methodWriter.visitFrame(0, 2, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a327aa83
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "hello", "hello", "hello", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, 2, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, 2, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "hello"
TestCase is: String[] stringArray = new String[1];
String string = "hello";
int _int = 3592;
String string = "hello";
String string = "hello";
String string = "hello";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 0;
int _int = 2;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@77208938 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5c6f54ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1867), "~MX|q|H<q&!1kML}", "pfdB-IElSo@H", "pfdB-IElSo@H", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, (-1867), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1867), "~MX|q|H<q&!1kML}", "pfdB-IElSo@H", "pfdB-IElSo@H", stringArray, false, false);
methodWriter.visitFrame(0, (-1867), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] strArr = new String[2];
        strArr[0] = "Hello";
        strArr[1] = "World";
        MethodWriter mw = new MethodWriter(classWriter, -1, "~MX|q|H<q&!1kML", "pfdB-IElSo@H", "pfdB-IElSo@H", strArr, false, false);
        mw.visitFrame(0, -1, strArr, 2, strArr);
    }
}
statement is: String[] strArr = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: strArr[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : strArr[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: strArr[0] = "Hello"
target : strArr class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed5710ef
statement is: strArr[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : strArr[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: strArr[1] = "World"
target : strArr class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@48872328
statement is: MethodWriter mw = new MethodWriter(classWriter, -1, "~MX|q|H<q&!1kML", "pfdB-IElSo@H", "pfdB-IElSo@H", strArr, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mw.visitFrame(0, -1, strArr, 2, strArr), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mw.visitFrame(0, -1, strArr, 2, strArr) target is: mw method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[1];
String string = "Hello";
String string = "World";
String string = "~MX|q|H<q&!1kML";
String string = "pfdB-IElSo@H";
String string = "pfdB-IElSo@H";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 0;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1836))
statement is: org.evosuite.testcase.statements.ArrayStatement@3969bb63 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@af1d08ae type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 2, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1836));
String[] stringArray = new String[1];
stringArray[0] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitFrame(1, 2, stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "", "", stringArray, false, false);
        methodWriter.visitFrame(1, 2, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a9b8f579
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c8a6c6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, 2, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 2, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[1];
String string = "Hello";
String string = "World";
int _int = 1;
String string = "main";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
int _int = 2;
int _int = 1;
((MethodWriter) _int).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@db50f5d0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@68a1a34b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1867), "u]`XW^A", ")wvlzKo", "u]`XW^A", arg5, false, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(2)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1867), "u]`XW^A", ")wvlzKo", "u]`XW^A", stringArray, false, false);
methodWriter.visitInsn(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1867, "u]`XW^A", stringArray[0], "u]`XW^A", stringArray, false, false);
        methodWriter.visitInsn(2);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb438831
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1867, "u]`XW^A", stringArray[0], "u]`XW^A", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(2) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitInsn(I)V
TestCase is: String[] stringArray = new String[1];
String[] stringArray = "The quick brown fox jumps over the lazy dog";
String string = "u]`XW^A";
String string = "u]`XW^A";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, false, false);
int _int = 2;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@67901362 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5f60c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(1)
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", stringArray, true, false);
methodWriter.visitInsn(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, world!";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Hello, world!", "]Ytyc)p@8Bvf", "Hello, world!", stringArray, true, false);
        methodWriter.visitInsn(1);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40b49838
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Hello, world!", "]Ytyc)p@8Bvf", "Hello, world!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(1) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitInsn(I)V
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, world!";
String string = "Hello, world!";
String string = "]Ytyc)p@8Bvf";
String string = "Hello, world!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 1;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@9c7f54e9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@26c96174 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(186)
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", stringArray, true, false);
methodWriter.visitInsn(186);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a sample string";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "This is a sample string", ")wvlzKo", "]Ytyc)p@8Bvf", "This is a sample string", stringArray, true, false);
        methodWriter.visitInsn(186);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0] = "This is a sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b13dacb9
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "This is a sample string", ")wvlzKo", "]Ytyc)p@8Bvf", "This is a sample string", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(186), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(186) target is: methodWriter method is: visitInsn(int)
* this is vulnerable: String string = "This is a sample string"
TestCase is: String[] stringArray = new String[1];
String string = "This is a sample string";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@2bf52094 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@eab2ef15 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "StackMapTable"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1500, "StackMapTable", "]Ytyc)p@8Bvf", "!0L", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(172)
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = "StackMapTable";
MethodWriter methodWriter = new MethodWriter(classWriter, 1500, "StackMapTable", "]Ytyc)p@8Bvf", "!0L", stringArray, true, false);
methodWriter.visitInsn(172);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "StackMapTable";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1500, "com/example/StackMapTable", "myMethod", "!0L", stringArray, true, false);
        methodWriter.visitInsn(172);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "StackMapTable", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"StackMapTable" Ct is: stringArray[0] = "StackMapTable"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ff004ec8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1500, "com/example/StackMapTable", "myMethod", "!0L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(172), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(172) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitInsn(I)V
* this is vulnerable: String string = "StackMapTable"
TestCase is: String[] stringArray = new String[1];
String string = "StackMapTable";
int _int = 1500;
String string = "com/example/StackMapTable";
String string = "myMethod";
String string = "!0L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 172;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(191)
test data is: ClassWriter classWriter = new ClassWriter((-1897));
MethodWriter methodWriter = new MethodWriter(classWriter, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
methodWriter.visitInsn(191);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "someString", "anotherString", "yetAnotherString", ((String[]) (null)), false, true);
        methodWriter.visitInsn(191);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "someString", "anotherString", "yetAnotherString", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(191), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(191) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitInsn(I)V
TestCase is: String string = "someString";
String string = "anotherString";
String string = "yetAnotherString";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, true);
int _int = 191;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@cc018f5b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, ")JvlK", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", arg5, true, true)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(1, 22)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ")JvlK", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, true);
methodWriter.visitIntInsn(1, 22);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, ")JvlK", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, true);
        methodWriter.visitIntInsn(1, 22);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, ")JvlK", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(1, 22), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(1, 22) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
TestCase is: int _int = 1;
String string = ")JvlK";
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 1;
int _int = 22;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@99d24c1b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@92e6b30a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "):~|_"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "):~|_", "]Ytyc)p@8Bvf", "):~|_", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "]Ytyc)p@8Bvf", "):~|_", "IlU")
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(2, (-1161))
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = "):~|_";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "):~|_", "]Ytyc)p@8Bvf", "):~|_", stringArray, true, false);
methodWriter.visitFieldInsn(1, "]Ytyc)p@8Bvf", "):~|_", "IlU");
methodWriter.visitIntInsn(2, (-1161));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Happy Path";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Happy Path", "Test Case #1", "):~|_", stringArray, true, false);
        methodWriter.visitFieldInsn(1, "):~|_", "Happy Path", "IlU");
        methodWriter.visitIntInsn(2, -563);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Happy Path", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Happy Path" Ct is: stringArray[0] = "Happy Path"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8d00d67d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Happy Path", "Test Case #1", "):~|_", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(1, "):~|_", "Happy Path", "IlU"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "):~|_", "Happy Path", "IlU") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitIntInsn(2, -563), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(2, -563) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIntInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Happy Path"
TestCase is: String[] stringArray = new String[1];
String string = "Happy Path";
int _int = 1;
String string = "Happy Path";
String string = "Test Case #1";
String string = "):~|_";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
String string = "):~|_";
String string = "Happy Path";
String string = "IlU";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@3d9089ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@937b4ec1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1513, ")wvjlKo", "]Ytyc)p@8Bvf", "!0L", arg5, true, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(17, (-837))
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1513, ")wvjlKo", "]Ytyc)p@8Bvf", "!0L", stringArray, true, false);
methodWriter.visitIntInsn(17, (-837));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Hello";
        stringArray[1] = "World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1513, "Hello World!", "[Ytyc)p@8Bvf", "!0L", stringArray, true, false);
        methodWriter.visitIntInsn(17, -837);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[5] Elements: []
lengths: [1] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9e348a7b
statement is: stringArray[1] = "World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World!" Ct is: stringArray[1] = "World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b57ef6a3
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1513, "Hello World!", "[Ytyc)p@8Bvf", "!0L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(17, -837), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(17, -837) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIntInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello";
String string = "World!";
int _int = 1513;
String string = "Hello World!";
String string = "[Ytyc)p@8Bvf";
String string = "!0L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 17;
int _int = null;
((MethodWriter) _int).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@97d3124c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@579e908b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "pL"
statement is: org.evosuite.testcase.statements.AssignmentStatement@38ea1c2d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ")wvjlKo"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f85fae3f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "]Ytyc)pXBvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@12c06ace type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "WkB ,A|Nw:7pyx5w<-}"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9d550b58 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "]Ytyc)pXBvf"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 169, ")wvjlKo", "]Ytyc)pXBvf", "pL", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(169, (-791))
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[5];
stringArray[0] = "pL";
stringArray[1] = ")wvjlKo";
stringArray[2] = "]Ytyc)pXBvf";
stringArray[3] = "WkB ,A|Nw:7pyx5w<-}";
stringArray[4] = "]Ytyc)pXBvf";
MethodWriter methodWriter = new MethodWriter(classWriter, 169, ")wvjlKo", "]Ytyc)pXBvf", "pL", stringArray, true, false);
methodWriter.visitVarInsn(169, (-791));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "userName";// The first element of the array is set to "userName" to represent a parameter name.

        stringArray[1] = "password";// The second element of the array is set to "password" to represent another parameter name.

        stringArray[2] = "isAdmin";// The third element of the array is set to "isAdmin" to represent a boolean flag indicating whether the method is static or not.

        stringArray[3] = "validateUser";// The fourth element of the array is set to "validateUser" to represent a method name.

        stringArray[4] = "userDetails";// The fifth element of the array is set to "userDetails" to represent another method name.

        MethodWriter methodWriter = new MethodWriter(classWriter, 169, ")wvjlKo", "]Ytyc)pXBvf", "userName", stringArray, true, false);// A MethodWriter object is created with the class writer, access flag, return type, and parameter names.

        methodWriter.visitVarInsn(169, -791);// The method visitor is called to write the method data to the class file. }}

    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "userName"// The first element of the array is set to "userName" to represent a parameter name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"userName" Ct is: stringArray[0] = "userName"// The first element of the array is set to "userName" to represent a parameter name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f83ce17b
statement is: stringArray[1] = "password"// The second element of the array is set to "password" to represent another parameter name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"password" Ct is: stringArray[1] = "password"// The second element of the array is set to "password" to represent another parameter name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d3676615
statement is: stringArray[2] = "isAdmin"// The third element of the array is set to "isAdmin" to represent a boolean flag indicating whether the method is static or not.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"isAdmin" Ct is: stringArray[2] = "isAdmin"// The third element of the array is set to "isAdmin" to represent a boolean flag indicating whether the method is static or not.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5e4a95b3
statement is: stringArray[3] = "validateUser"// The fourth element of the array is set to "validateUser" to represent a method name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"validateUser" Ct is: stringArray[3] = "validateUser"// The fourth element of the array is set to "validateUser" to represent a method name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2d398f05
statement is: stringArray[4] = "userDetails"// The fifth element of the array is set to "userDetails" to represent another method name.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"userDetails" Ct is: stringArray[4] = "userDetails"// The fifth element of the array is set to "userDetails" to represent another method name.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4119b539
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 169, ")wvjlKo", "]Ytyc)pXBvf", "userName", stringArray, true, false)// A MethodWriter object is created with the class writer, access flag, return type, and parameter names.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(169, -791)// The method visitor is called to write the method data to the class file. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(169, -791)// The method visitor is called to write the method data to the class file. }}
 target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 12
Matched Method is: visitVarInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "userName"
* this is vulnerable: String string = "password"
* this is vulnerable: String string = "isAdmin"
* this is vulnerable: String string = "validateUser"
* this is vulnerable: String string = "userDetails"
TestCase is: String[] stringArray = new String[5];
String string = "userName";
String string = "password";
String string = "isAdmin";
String string = "validateUser";
String string = "userDetails";
int _int = 169;
String string = ")wvjlKo";
String string = "]Ytyc)pXBvf";
String string = "userName";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 169;
int _int = null;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@8c81d407 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f38f60fe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")JvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")JvlzKo", "]Ytyc)p@8Bvf", ")JvlzKo", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(1, 2)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")JvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")JvlzKo", "]Ytyc)p@8Bvf", ")JvlzKo", stringArray, true, false);
methodWriter.visitVarInsn(1, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test message";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello World!", "This is a test message", "Hello World!", stringArray, true, false);
        methodWriter.visitVarInsn(1, 2);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test message", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test message" Ct is: stringArray[0] = "This is a test message"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@733f975
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello World!", "This is a test message", "Hello World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(1, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(1, 2) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "This is a test message"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test message";
int _int = 2;
String string = "Hello World!";
String string = "This is a test message";
String string = "Hello World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@b33565f8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9bdde674 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvrjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", arg5, true, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(24, 166)
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvrjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", stringArray, true, true);
methodWriter.visitVarInsn(24, 166);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test String";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is a test String", stringArray, true, true);
        methodWriter.visitVarInsn(24, 166);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test String", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test String" Ct is: stringArray[0] = "This is a test String"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@133b4eb7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is a test String", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(24, 166), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(24, 166) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "This is a test String"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test String";
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
String string = "This is a test String";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = 24;
int _int = 166;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@e3092a18 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f6bb8376 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 172, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(55, 22)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 172, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", stringArray, true, false);
methodWriter.visitVarInsn(55, 22);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 172, "Hello World!", "]Ytyc)p@8Bvf", "Hello World!", stringArray, true, false);
        methodWriter.visitVarInsn(55, 22);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@35e59f6f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 172, "Hello World!", "]Ytyc)p@8Bvf", "Hello World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(55, 22), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(55, 22) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "Hello World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello World!";
int _int = 172;
String string = "Hello World!";
String string = "]Ytyc)p@8Bvf";
String string = "Hello World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 55;
int _int = 22;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(57, 3)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
methodWriter.visitVarInsn(57, 3);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        methodWriter.visitVarInsn(57, 3);
    }
}
statement is: methodWriter.visitVarInsn(57, 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(57, 3) target is: methodWriter method is: visitVarInsn(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(312)
statement is: org.evosuite.testcase.statements.ArrayStatement@e330d7ec type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 267386880, "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", arg5, false, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(1, 267386880)
test data is: ClassWriter classWriter = new ClassWriter(312);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 267386880, "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", stringArray, false, false);
methodWriter.visitVarInsn(1, 267386880);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 267386880, "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", stringArray, false, false);
        methodWriter.visitVarInsn(1, 267386880);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 267386880, "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", "ZI*K^6>J0]F<YJF94MG", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(1, 267386880), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(1, 267386880) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitVarInsn(II)V
TestCase is: int _int = 267386880;
String string = "ZI*K^6>J0]F<YJF94MG";
String string = "ZI*K^6>J0]F<YJF94MG";
String string = "ZI*K^6>J0]F<YJF94MG";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 267386880;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1882))
statement is: org.evosuite.testcase.statements.ArrayStatement@73fdc6e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cfe36c9b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1497, ")wvlzKo", "]Ypyc)p@8Bvf", ")wvlzKo", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "]Ypyc)p@8Bvf")
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(54, 5)
test data is: ClassWriter classWriter = new ClassWriter((-1882));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1497, ")wvlzKo", "]Ypyc)p@8Bvf", ")wvlzKo", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "]Ypyc)p@8Bvf");
methodWriter.visitVarInsn(54, 5);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test string";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1497, "This is a test string", "[This is a test string]", "This is a test string", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "[This is a test string]");
        methodWriter.visitVarInsn(54, 5);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f003ff74
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1497, "This is a test string", "[This is a test string]", "This is a test string", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "[This is a test string]"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "[This is a test string]") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitVarInsn(54, 5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(54, 5) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "This is a test string"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string";
int _int = 1497;
String string = "This is a test string";
String string = "[This is a test string]";
String string = "This is a test string";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
String string = "[This is a test string]";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 54;
int _int = 5;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1879), "]Ytyc)p@8Bvf", "=PdKJ])-", "]Ytyc)p@8Bvf", (String[]) null, false, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(2, "]Ytyc)p@8Bvf")
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, (-1879), "]Ytyc)p@8Bvf", "=PdKJ])-", "]Ytyc)p@8Bvf", (String[]) null, false, false);
methodWriter.visitTypeInsn(2, "]Ytyc)p@8Bvf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 50, "com.example.TestClass", "testMethod", "com.example.TestClass", ((String[]) (null)), false, false);// Added class name and method name to make it more representative of the situation being tested

        methodWriter.visitTypeInsn(2, "java/lang/String");// Replaced ]Ytyc)p@8Bvf with java/lang/String to make it more descriptive }}

    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 50, "com.example.TestClass", "testMethod", "com.example.TestClass", ((String[]) (null)), false, false)// Added class name and method name to make it more representative of the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(2, "java/lang/String")// Replaced ]Ytyc)p@8Bvf with java/lang/String to make it more descriptive }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(2, "java/lang/String")// Replaced ]Ytyc)p@8Bvf with java/lang/String to make it more descriptive }}
 target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
TestCase is: int _int = 50;
String string = "com.example.TestClass";
String string = "testMethod";
String string = "com.example.TestClass";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 2;
String string = "java/lang/String";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1823))
statement is: org.evosuite.testcase.statements.ArrayStatement@2f65ec25 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@52e2e1d2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "vSv7"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "vSv7", arg5, true, true)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(1, "vSv7")
test data is: ClassWriter classWriter = new ClassWriter((-1823));
String[] stringArray = new String[1];
stringArray[0] = "vSv7";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "vSv7", stringArray, true, true);
methodWriter.visitTypeInsn(1, "vSv7");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java.lang.Integer";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "add", "java.lang.Integer", stringArray, true, true);
        methodWriter.visitTypeInsn(1, "java.lang.Integer");
        methodWriter.visitLdcInsn(234);// Using a constant value of 234 to represent the sum of an integer argument and 234 }}

    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Integer", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Integer" Ct is: stringArray[0] = "java.lang.Integer"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cee0b1a4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "add", "add", "java.lang.Integer", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(1, "java.lang.Integer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(1, "java.lang.Integer") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
statement is: methodWriter.visitLdcInsn(234)// Using a constant value of 234 to represent the sum of an integer argument and 234 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(234)// Using a constant value of 234 to represent the sum of an integer argument and 234 }}
 target is: methodWriter method is: visitLdcInsn(int)
* this is vulnerable: String string = "java.lang.Integer"
TestCase is: String[] stringArray = new String[1];
String string = "java.lang.Integer";
int _int = 2;
String string = "add";
String string = "add";
String string = "java.lang.Integer";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 1;
String string = "java.lang.Integer";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@219b6864 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9d53fb97 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", arg5, true, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(2, ")wvjlKo")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", stringArray, true, false);
methodWriter.visitTypeInsn(2, ")wvjlKo");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java.lang.Math";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "pow", "(DD)D", "java.lang.Math", stringArray, true, false);
        methodWriter.visitTypeInsn(2, "java.lang.Math");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Math", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Math" Ct is: stringArray[0] = "java.lang.Math"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7e7e2d88
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "pow", "(DD)D", "java.lang.Math", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(2, "java.lang.Math"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(2, "java.lang.Math") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
* this is vulnerable: String string = "java.lang.Math"
TestCase is: String[] stringArray = new String[1];
String string = "java.lang.Math";
String string = "pow";
String string = "(DD)D";
String string = "java.lang.Math";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 2;
String string = "java.lang.Math";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "Ljava/lang/Synthetic;", ";mKwDW- @DSrOZP 3Zh", ";mKwDW- @DSrOZP 3Zh")
test data is: ClassWriter classWriter = new ClassWriter((-1897));
MethodWriter methodWriter = new MethodWriter(classWriter, (-2503), "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
methodWriter.visitFieldInsn(1, "Ljava/lang/Synthetic;", ";mKwDW- @DSrOZP 3Zh", ";mKwDW- @DSrOZP 3Zh");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "myMethod", "myMethod", "myMethod", ((String[]) (null)), false, true);
        methodWriter.visitFieldInsn(1, "Ljava/lang/Synthetic;", ";mKwDW- @DSrOZP 3Zh", ";mKwDW- @DSrOZP 3Zh");
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "myMethod", "myMethod", "myMethod", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(1, "Ljava/lang/Synthetic;", ";mKwDW- @DSrOZP 3Zh", ";mKwDW- @DSrOZP 3Zh"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "Ljava/lang/Synthetic;", ";mKwDW- @DSrOZP 3Zh", ";mKwDW- @DSrOZP 3Zh") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String string = "myMethod";
String string = "myMethod";
String string = "myMethod";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, true);
int _int = 1;
String string = "Ljava/lang/Synthetic;";
String string = ";mKwDW- @DSrOZP 3Zh";
String string = ";mKwDW- @DSrOZP 3Zh";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@dc13db99 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-438), "]Ytyc)@8Bv", "]Ytyc)@8Bv", "]Ytyc)@8Bv", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(179, "]Ytyc)@8Bv", "]Ytyc)@8Bv", "E8")
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-438), "]Ytyc)@8Bv", "]Ytyc)@8Bv", "]Ytyc)@8Bv", stringArray, true, false);
methodWriter.visitFieldInsn(179, "]Ytyc)@8Bv", "]Ytyc)@8Bv", "E8");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -438, "myMethod", "myMethod", "myMethod", stringArray, true, false);
        methodWriter.visitFieldInsn(179, "java/lang/String", "MY_FIELD", "Ljava/lang/String;");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -438, "myMethod", "myMethod", "myMethod", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(179, "java/lang/String", "MY_FIELD", "Ljava/lang/String;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(179, "java/lang/String", "MY_FIELD", "Ljava/lang/String;") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
String string = "myMethod";
String string = "myMethod";
String string = "myMethod";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 179;
String string = "java/lang/String";
String string = "MY_FIELD";
String string = "Ljava/lang/String;";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1862))
statement is: org.evosuite.testcase.statements.ArrayStatement@eec19c7f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@72b34fb6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "StackMapTable"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "StackMapTable", "]YtKc)p@8Bvf", "!0L", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(180, "StackMapTable", "!0L", "StackMapTable")
test data is: ClassWriter classWriter = new ClassWriter((-1862));
String[] stringArray = new String[1];
stringArray[0] = "StackMapTable";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "StackMapTable", "]YtKc)p@8Bvf", "!0L", stringArray, true, false);
methodWriter.visitFieldInsn(180, "StackMapTable", "!0L", "StackMapTable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "StackOverflow";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "StackOverflow", "]YtKc)p@8Bvf", "!0L", stringArray, true, false);
        methodWriter.visitFieldInsn(180, "StackOverflow", "!0L", "StackOverflow");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "StackOverflow", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"StackOverflow" Ct is: stringArray[0] = "StackOverflow"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@516bfb46
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "StackOverflow", "]YtKc)p@8Bvf", "!0L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(180, "StackOverflow", "!0L", "StackOverflow"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(180, "StackOverflow", "!0L", "StackOverflow") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "StackOverflow"
TestCase is: String[] stringArray = new String[1];
String string = "StackOverflow";
int _int = 1;
String string = "StackOverflow";
String string = "]YtKc)p@8Bvf";
String string = "!0L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 180;
String string = "StackOverflow";
String string = "!0L";
String string = "StackOverflow";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@6078e1af type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@79dcdce0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(62, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "Ds")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", stringArray, true, false);
methodWriter.visitFieldInsn(62, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "Ds");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.example.ClassName";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Test Method: Verify that the correct implementation is used when calling the method with a null input.", "Return Type", "Test Description", stringArray, true, false);
        methodWriter.visitFieldInsn(62, "Return Type", "Field Name", "Field Type");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.ClassName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.ClassName" Ct is: stringArray[0] = "com.example.ClassName"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@32683f79
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Test Method: Verify that the correct implementation is used when calling the method with a null input.", "Return Type", "Test Description", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(62, "Return Type", "Field Name", "Field Type"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(62, "Return Type", "Field Name", "Field Type") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "com.example.ClassName"
TestCase is: String[] stringArray = new String[1];
String string = "com.example.ClassName";
String string = "Test Method: Verify that the correct implementation is used when calling the method with a null input.";
String string = "Return Type";
String string = "Test Description";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 62;
String string = "Return Type";
String string = "Field Name";
String string = "Field Type";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1878))
statement is: org.evosuite.testcase.statements.ArrayStatement@1b456b6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(167, "J xJW4wr4I8ZPV^", "=3bVGU", "J xJW4wr4I8ZPV^")
test data is: ClassWriter classWriter = new ClassWriter((-1878));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, false);
methodWriter.visitFieldInsn(167, "J xJW4wr4I8ZPV^", "=3bVGU", "J xJW4wr4I8ZPV^");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Example 1", "Example 2", "Example 3" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -1878, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, false);
        methodWriter.visitFieldInsn(167, "J xJW4wr4I8ZPV^", "=3bVGU", "J xJW4wr4I8ZPV^");
    }
}
statement is: String[] stringArray = new String[]{ "Example 1", "Example 2", "Example 3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Example 1", "Example 2", "Example 3" } Elements: ["Example 1", "Example 2", "Example 3"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1878, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(167, "J xJW4wr4I8ZPV^", "=3bVGU", "J xJW4wr4I8ZPV^"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(167, "J xJW4wr4I8ZPV^", "=3bVGU", "J xJW4wr4I8ZPV^") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String string = "]Ytyc)p@8Bvf";
String[] stringArray = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, false);
int _int = 167;
String string = "J xJW4wr4I8ZPV^";
String string = "=3bVGU";
String string = "J xJW4wr4I8ZPV^";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@24f95fc8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bf1500dd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wvjlKo", "]Ytyc)@8Bv", "WpL", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn(")wvjlKo", (-3274))
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "WpL", "E8", "E8")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wvjlKo", "]Ytyc)@8Bv", "WpL", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(")wvjlKo", (-3274));
methodWriter.visitFieldInsn(1, "WpL", "E8", "E8");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "hello";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1234, "hello", "world", "foo", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("hello", 2345);
        methodWriter.visitFieldInsn(1, "foo", "bar", "baz");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e761efd0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1234, "hello", "world", "foo", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("hello", 2345), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("hello", 2345) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitFieldInsn(1, "foo", "bar", "baz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "foo", "bar", "baz") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "hello"
TestCase is: String[] stringArray = new String[1];
String string = "hello";
int _int = 1234;
String string = "hello";
String string = "world";
String string = "foo";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "hello";
int _int = 2345;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = 1;
String string = "foo";
String string = "bar";
String string = "baz";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@e1c9a238 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ";/J;T{", "]Ytyc)p@8Bvf", "", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(186, "]Ytyc)p@8Bvf", "java/lang/Throwable", "]*tyc)@8Bvf")
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ";/J;T{", "]Ytyc)p@8Bvf", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "]Ytyc)p@8Bvf", "java/lang/Throwable", "]*tyc)@8Bvf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "hello";
        stringArray[1] = "world";
        stringArray[2] = "foo";
        stringArray[3] = "bar";
        stringArray[4] = "baz";
        MethodWriter methodWriter = new MethodWriter(classWriter, 5, "Ljava/lang/String;", "[Ljava/lang/Object;", stringArray, false, false);
        methodWriter.visitMethodInsn(186, "Ljava/lang/String;", "java/util/List", "]Ytyc)p@8Bvf");
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[5] Elements: []
lengths: [0] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray[1] = "world"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "foo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"foo" Ct is: stringArray[2] = "foo"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "bar", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"bar" Ct is: stringArray[3] = "bar"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "baz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"baz" Ct is: stringArray[4] = "baz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 5, "Ljava/lang/String;", "[Ljava/lang/Object;", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(186, "Ljava/lang/String;", "java/util/List", "]Ytyc)p@8Bvf"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(186, "Ljava/lang/String;", "java/util/List", "]Ytyc)p@8Bvf") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
TestCase is: String[] stringArray = new String[0];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@1efaeb6c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dbd13e44 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wj}lKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), ")wj}lKo", "]Ytyc)p@8Bvf", ")wj}lKo", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(186, ")wj}lKo", ")wj}lKo", "Bck:z`fN=w9gBS")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wj}lKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), ")wj}lKo", "]Ytyc)p@8Bvf", ")wj}lKo", stringArray, true, false);
methodWriter.visitMethodInsn(186, ")wj}lKo", ")wj}lKo", "Bck:z`fN=w9gBS");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, world!";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Hello, world!", "This is a test method.", "Hello, world!", stringArray, true, false);
        methodWriter.visitMethodInsn(186, "Hello, world!", "Hello, world!", "Bck:z`fN=w9gBS");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b57525c1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1854, "Hello, world!", "This is a test method.", "Hello, world!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(186, "Hello, world!", "Hello, world!", "Bck:z`fN=w9gBS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(186, "Hello, world!", "Hello, world!", "Bck:z`fN=w9gBS") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, world!";
String string = "Hello, world!";
String string = "This is a test method.";
String string = "Hello, world!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 186;
String string = "Hello, world!";
String string = "Hello, world!";
String string = "Bck:z`fN=w9gBS";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@d3b40aee type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@68ae7c99 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(5, "]Ytyc)p@8Bvf", ")wvlzKo", "]Ytyc)p@8Bvf")
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ")wvlzKo", "]Ytyc)p@8Bvf", ")wvlzKo", stringArray, true, false);
methodWriter.visitMethodInsn(5, "]Ytyc)p@8Bvf", ")wvlzKo", "]Ytyc)p@8Bvf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Goodbye World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Goodbye World!", "This is a test method.", "Goodbye World!", stringArray, true, false);
        methodWriter.visitMethodInsn(5, "This is a test method.", "Goodbye World!", "This is a test method.");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Goodbye World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye World!" Ct is: stringArray[0] = "Goodbye World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb2f61a8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Goodbye World!", "This is a test method.", "Goodbye World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(5, "This is a test method.", "Goodbye World!", "This is a test method."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(5, "This is a test method.", "Goodbye World!", "This is a test method.") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "Goodbye World!"
TestCase is: String[] stringArray = new String[1];
String string = "Goodbye World!";
int _int = 1;
String string = "Goodbye World!";
String string = "This is a test method.";
String string = "Goodbye World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 5;
String string = "This is a test method.";
String string = "Goodbye World!";
String string = "This is a test method.";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@a50e7f3f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b8bd98c9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ewvj\"Ko"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), "Ewvj\"Ko", "]Ytyc)p@8Bvf", "Ewvj\"Ko", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("zj>$z?x_x`Oah6;?Fe[", (-1854))
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn((-1854), "Ewvj\"Ko", "Ewvj\"Ko", "5+)5[$9tQ/")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = "Ewvj\"Ko";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), "Ewvj\"Ko", "]Ytyc)p@8Bvf", "Ewvj\"Ko", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("zj>$z?x_x`Oah6;?Fe[", (-1854));
methodWriter.visitMethodInsn((-1854), "Ewvj\"Ko", "Ewvj\"Ko", "5+)5[$9tQ/");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This", "is", "a", "test" };// using more descriptive values in the array

        MethodWriter methodWriter = new MethodWriter(classWriter, 1234, "TestClass", "testMethod", "void", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/String", 1234);// using a more descriptive type for the parameter }}

    }
}
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test" }// using more descriptive values in the array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[]{ "This", "is", "a", "test" } Elements: ["This", "is", "a", "test"]
lengths: [1] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1234, "TestClass", "testMethod", "void", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 1234)// using a more descriptive type for the parameter }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 1234)// using a more descriptive type for the parameter }}
 target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
TestCase is: int _int = 1234;
String string = "TestClass";
String string = "testMethod";
String string = "void";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
String string = "java/lang/String";
int _int = 1234;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@3a66025d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@40509dc8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn((-1839), arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 3592, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn((-1839), label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.example.MyClass";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "com.example.MyClass", "com.example.MyClass", "com.example.MyClass", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitJumpInsn(GOTO, label);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.MyClass" Ct is: stringArray[0] = "com.example.MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c6e924d8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "com.example.MyClass", "com.example.MyClass", "com.example.MyClass", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(GOTO, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(GOTO, label) target is: methodWriter method is: visitJumpInsn(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "com.example.MyClass"
TestCase is: String[] stringArray = new String[1];
String string = "com.example.MyClass";
int _int = 0;
String string = "com.example.MyClass";
String string = "com.example.MyClass";
String string = "com.example.MyClass";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
Label label = null;
((MethodWriter) string).visitJumpInsn((int) label, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(2, arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "**_tyc)@8Bvf", "**_tyc)@8Bvf", "**_tyc)@8Bvf", ((String[]) (null)), false, true);
        Label label = new Label();
        methodWriter.visitJumpInsn(2, label);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "**_tyc)@8Bvf", "**_tyc)@8Bvf", "**_tyc)@8Bvf", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(2, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 1;
String string = "**_tyc)@8Bvf";
String string = "**_tyc)@8Bvf";
String string = "**_tyc)@8Bvf";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1878))
statement is: org.evosuite.testcase.statements.ArrayStatement@d8d5f371 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(168, arg1)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-450), (-1878))
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-5), (-453))
test data is: ClassWriter classWriter = new ClassWriter((-1878));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(168, label);
methodWriter.visitMaxs((-450), (-1878));
methodWriter.visitMaxs((-5), (-453));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 15, "fruitName", "fruitColor", "fruitTaste", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitJumpInsn(168, label);
        methodWriter.visitMaxs(40, -15);
        methodWriter.visitMaxs(5, -20);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 15, "fruitName", "fruitColor", "fruitTaste", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(168, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(168, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(40, -15), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(40, -15) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(5, -20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(5, -20) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 15;
String string = "fruitName";
String string = "fruitColor";
String string = "fruitTaste";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
int _int = 168;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 40;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 5;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1878))
statement is: org.evosuite.testcase.statements.ArrayStatement@4307bdc7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "Y7q]Sa *N\"gw7_|#", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(167, arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1878));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "Y7q]Sa *N\"gw7_|#", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(167, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -1878, "methodName", "methodDescriptor", "exceptions", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
        methodWriter.visitJumpInsn(167, label);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1878, "methodName", "methodDescriptor", "exceptions", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitJumpInsn(167, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(167, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: String[] stringArray = new String[0];
String string = "methodName";
String string = "methodDescriptor";
String string = "exceptions";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 167;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-321))
statement is: org.evosuite.testcase.statements.ArrayStatement@462d075b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5505ed46 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvrjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.AssignmentStatement@d02d0db2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: label.status = 1
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-321));
String[] stringArray = new String[1];
stringArray[0] = ")wvrjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", stringArray, true, true);
Label label = new Label();
label.status = 1;
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "([Ljava/lang/String;)V", "Hello, World!", stringArray, true, true);
        Label label = new Label();
        label.status = 1;
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5daaba36
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "([Ljava/lang/String;)V", "Hello, World!", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.status = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";
int _int = 1;
String string = "main";
String string = "([Ljava/lang/String;)V";
String string = "Hello, World!";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "some_method", "public void some_method()", "return this.some_field;", ((String[]) (null)), false, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "some_method", "public void some_method()", "return this.some_field;", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 1;
String string = "some_method";
String string = "public void some_method()";
String string = "return this.some_field;";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@ca787b87 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, (int[]) null, arg2)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, (int[]) null, labelArray);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", null, false, true);
        Label label = new Label();
        Label[] labelArray = new Label[0];
        methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray);
        methodWriter.visitLabel(label);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", null, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[0] Elements: []
lengths: [0] [0]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 1;
String string = "]*tyc)@8Bvf";
String string = "]*tyc)@8Bvf";
String string = "]*tyc)@8Bvf";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@163560fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b04da72e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "."
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ".", ".", ".", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ".";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ".", ".", ".", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "AwesomeClassName";// This string is more descriptive of the situation being tested.

        MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ".", ".", ".", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "AwesomeClassName"// This string is more descriptive of the situation being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"AwesomeClassName" Ct is: stringArray[0] = "AwesomeClassName"// This string is more descriptive of the situation being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@db997534
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ".", ".", ".", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "AwesomeClassName"
TestCase is: String[] stringArray = new String[1];
String string = "AwesomeClassName";
String string = ".";
String string = ".";
String string = ".";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@39ffc5da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@56202d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")JvlK"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", arg5, false, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(2)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")JvlK";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", stringArray, false, false);
methodWriter.visitLdcInsn(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", ")JvlK", stringArray, false, false);
        methodWriter.visitLdcInsn(2);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c23f954
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", ")JvlK", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(2) target is: methodWriter method is: visitLdcInsn(int)
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@4638a550 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9b2d9e83 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvFl"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvFl", arg5, true, true)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn("]Ytyc)p@8Bvf")
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvFl";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvFl", stringArray, true, true);
methodWriter.visitLdcInsn("]Ytyc)p@8Bvf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test String";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvFl", stringArray, true, true);
        methodWriter.visitLdcInsn("This is a test String");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test String", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test String" Ct is: stringArray[0] = "This is a test String"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1a37b13
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvFl", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn("This is a test String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("This is a test String") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "This is a test String"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test String";
int _int = 2;
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
String string = ")wvFl";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
String string = "This is a test String";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@141aeb9e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ce253088 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")JvlK"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("7p", 262144)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(2)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")JvlK";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("7p", 262144);
methodWriter.visitLdcInsn(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "(I)V";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "(I)V", "(Ljava/lang/String;)V", "(I)V", stringArray, false, true);
        methodWriter.visitMultiANewArrayInsn("7p", 262144);
        methodWriter.visitLdcInsn(2);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "(I)V", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"(I)V" Ct is: stringArray[0] = "(I)V"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@19939b5c
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "(I)V", "(Ljava/lang/String;)V", "(I)V", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("7p", 262144), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("7p", 262144) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitLdcInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(2) target is: methodWriter method is: visitLdcInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "(I)V"
TestCase is: String[] stringArray = new String[1];
String string = "(I)V";
int _int = 0;
String string = "(I)V";
String string = "(Ljava/lang/String;)V";
String string = "(I)V";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "7p";
int _int = 262144;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = 2;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(184)
statement is: org.evosuite.testcase.statements.ArrayStatement@180deac7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ef2f1645 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "vode"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "vode", "vode", "vode", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(384, (-1732))
test data is: ClassWriter classWriter = new ClassWriter(184);
String[] stringArray = new String[1];
stringArray[0] = "vode";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "vode", "vode", "vode", stringArray, false, false);
methodWriter.visitIincInsn(384, (-1732));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "void", "void", stringArray, false, false);
        methodWriter.visitIincInsn(384, -1732);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5b460d72
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "main", "void", "void", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(384, -1732), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(384, -1732) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Hello World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello World!";
int _int = 1;
String string = "main";
String string = "void";
String string = "void";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 384;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@854a801c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bb12bd5d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")~|_"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1497, ")~|_", "]Ytyc)p@8Bvf", ")~|_", arg5, true, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(1, 2)
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = ")~|_";
MethodWriter methodWriter = new MethodWriter(classWriter, 1497, ")~|_", "]Ytyc)p@8Bvf", ")~|_", stringArray, true, false);
methodWriter.visitIincInsn(1, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];// Use an array of 5 strings to simulate a more complex scenario with multiple possible inputs.

        stringArray[0] = "apple";
        stringArray[1] = "banana";
        stringArray[2] = "cherry";
        stringArray[3] = "date";
        stringArray[4] = "elderberry";// Add a range of strings to the array to test edge cases and unexpected inputs.

        MethodWriter methodWriter = new MethodWriter(classWriter, 1000, stringArray, "[Ytyc)p@8Bvf", true, false);// Use a large value for the method writer's constant pool size to simulate a larger codebase.

        methodWriter.visitIincInsn(5, 10);// Increment the value of variable 5 by 10 to test the effectiveness of the test data. }}

    }
}
statement is: String[] stringArray = new String[5]// Use an array of 5 strings to simulate a more complex scenario with multiple possible inputs.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[5] Elements: []
lengths: [1] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "apple", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"apple" Ct is: stringArray[0] = "apple"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b1815af6
statement is: stringArray[1] = "banana", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"banana" Ct is: stringArray[1] = "banana"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ba08fcae
statement is: stringArray[2] = "cherry", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cherry" Ct is: stringArray[2] = "cherry"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b130aa02
statement is: stringArray[3] = "date", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"date" Ct is: stringArray[3] = "date"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e05a5ee2
statement is: stringArray[4] = "elderberry"// Add a range of strings to the array to test edge cases and unexpected inputs.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"elderberry" Ct is: stringArray[4] = "elderberry"// Add a range of strings to the array to test edge cases and unexpected inputs.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b87ab97c
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1000, stringArray, "[Ytyc)p@8Bvf", true, false)// Use a large value for the method writer's constant pool size to simulate a larger codebase.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(5, 10)// Increment the value of variable 5 by 10 to test the effectiveness of the test data. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(5, 10)// Increment the value of variable 5 by 10 to test the effectiveness of the test data. }}
 target is: methodWriter method is: visitIincInsn(int,int)
* this is vulnerable: String string = "apple"
* this is vulnerable: String string = "banana"
* this is vulnerable: String string = "cherry"
* this is vulnerable: String string = "date"
* this is vulnerable: String string = "elderberry"
TestCase is: String[] stringArray = new String[1];
String string = "apple";
String string = "banana";
String string = "cherry";
String string = "date";
String string = "elderberry";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-299))
statement is: org.evosuite.testcase.statements.ArrayStatement@495627fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c54c431a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvrjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", arg5, true, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(70, 1)
test data is: ClassWriter classWriter = new ClassWriter((-299));
String[] stringArray = new String[1];
stringArray[0] = ")wvrjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", stringArray, true, true);
methodWriter.visitIincInsn(70, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "hello";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "hello", "hello", "hello", stringArray, true, true);
        methodWriter.visitIincInsn(70, 1);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f760f09f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "hello", "hello", "hello", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(70, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(70, 1) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "hello"
TestCase is: String[] stringArray = new String[1];
String string = "hello";
int _int = 1;
String string = "hello";
String string = "hello";
String string = "hello";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 70;
int _int = 1;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@ee7656ec type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2bd887f9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wv-lzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 187, ")wv-lzKo", "LocalVriableTypTable", (String) null, arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(57, 1366)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wv-lzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 187, ")wv-lzKo", "LocalVriableTypTable", (String) null, stringArray, false, false);
methodWriter.visitIincInsn(57, 1366);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 97, "Hello, World!", "LocalVriableTypTable", ((String) (null)), stringArray, false, false);
        methodWriter.visitIincInsn(57, 1366);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2890eee1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 97, "Hello, World!", "LocalVriableTypTable", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(57, 1366), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(57, 1366) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";
int _int = 97;
String string = "Hello, World!";
String string = "LocalVriableTypTable";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 57;
int _int = 1366;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@822f3ae5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@39e37448 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvrjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", arg5, true, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(2, (-1436))
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvrjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", stringArray, true, true);
methodWriter.visitIincInsn(2, (-1436));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a descriptive and representative string";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is another descriptive and representative string", stringArray, true, true);
        methodWriter.visitIincInsn(2, -1436);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a descriptive and representative string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a descriptive and representative string" Ct is: stringArray[0] = "This is a descriptive and representative string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3c5e43cd
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is another descriptive and representative string", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(2, -1436), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(2, -1436) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "This is a descriptive and representative string"
TestCase is: String[] stringArray = new String[1];
String string = "This is a descriptive and representative string";
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
String string = "This is another descriptive and representative string";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = 2;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1886))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2503), "]*tyc)@tPvf", "]*tyc)@tPvf", "]*tyc)@tPvf", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@bc372950 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, (int[]) null, arg2)
test data is: ClassWriter classWriter = new ClassWriter((-1886));
MethodWriter methodWriter = new MethodWriter(classWriter, (-2503), "]*tyc)@tPvf", "]*tyc)@tPvf", "]*tyc)@tPvf", (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, (int[]) null, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "]*tyc)@tPvf", "]*tyc)@tPvf", "]*tyc)@tPvf", ((String[]) (null)), false, false);
        Label label = new Label();
        Label[] labelArray = new Label[1];
        labelArray[0] = new Label();
        methodWriter.visitLookupSwitchInsn(label, ((int[]) (1)), 2, 3, labelArray);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2503, "]*tyc)@tPvf", "]*tyc)@tPvf", "]*tyc)@tPvf", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[1] Elements: []
lengths: [0] [1]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = new Label(), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new Label() Ct is: labelArray[0] = new Label()
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
statement is: methodWriter.visitLookupSwitchInsn(label, ((int[]) (1)), 2, 3, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, ((int[]) (1)), 2, 3, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],int,int,Label[])
TestCase is: String string = "]*tyc)@tPvf";
String string = "]*tyc)@tPvf";
String string = "]*tyc)@tPvf";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) _boolean, (String) _boolean, (String[]) null, false, false);
Label label = new Label();
Label[] labelArray = new Label[0];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@21e1783f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@35c5d0e5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@dc927233 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(4088, 2, arg2, arg3)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
Label[] labelArray = new Label[2];
labelArray[0] = label;
labelArray[1] = label;
methodWriter.visitTableSwitchInsn(4088, 2, label, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, accessFlags, methodName, methodDesc, signature, isConstructor, hasExceptionHandlers);
        Label label = new Label();
        Label[] labelArray = new Label[2];
        labelArray[0] = label;
        labelArray[1] = label;
        methodWriter.visitTableSwitchInsn(4088, 2, label, labelArray);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, accessFlags, methodName, methodDesc, signature, isConstructor, hasExceptionHandlers), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Label[] labelArray = new Label[2] isAssignment: false Array: new Label[2] Elements: []
lengths: [2] [2]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f8bb9ef4
statement is: labelArray[1] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[1] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1f2ab83b
statement is: methodWriter.visitTableSwitchInsn(4088, 2, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(4088, 2, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
TestCase is: Label label = new Label();
Label[] labelArray = new Label[2];

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@fa4a85d6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@771ff467 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjl"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvjl", arg5, true, true)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("]Ytyc)p@8Bvf", 68)
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wvjl";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvjl", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("]Ytyc)p@8Bvf", 68);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, world!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvjl", stringArray, true, true);
        methodWriter.visitMultiANewArrayInsn("]Ytyc)p@8Bvf", 68);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3dbdf3da
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvjl", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("]Ytyc)p@8Bvf", 68), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("]Ytyc)p@8Bvf", 68) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, world!";
int _int = 1;
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
String string = ")wvjl";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
String string = "]Ytyc)p@8Bvf";
int _int = 68;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@ade29b04 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@581cba44 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo")
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo");
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";// This is a more descriptive and representative string to test the method writer's ability to handle different types of data.

        MethodWriter methodWriter = new MethodWriter(classWriter, 3536, "Hello, World!", "Hello, World!", "Hello, World!", stringArray, false, false);
        methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!");// This is a more descriptive and representative label to test the method writer's ability to handle different types of data.

        methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!");// This is another example of a try-catch block with a more descriptive and representative label. }}

    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!"// This is a more descriptive and representative string to test the method writer's ability to handle different types of data.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"// This is a more descriptive and representative string to test the method writer's ability to handle different types of data.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1232cad0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3536, "Hello, World!", "Hello, World!", "Hello, World!", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!")// This is a more descriptive and representative label to test the method writer's ability to handle different types of data.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!")// This is a more descriptive and representative label to test the method writer's ability to handle different types of data.
 target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 4
i 2 Parameters size() 1 Num of Method Parameters: 4
i 3 Parameters size() 1 Num of Method Parameters: 4
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!")// This is another example of a try-catch block with a more descriptive and representative label. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!")// This is another example of a try-catch block with a more descriptive and representative label. }}
 target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 4
i 2 Parameters size() 1 Num of Method Parameters: 4
i 3 Parameters size() 1 Num of Method Parameters: 4
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";
int _int = 3536;
String string = "Hello, World!";
String string = "Hello, World!";
String string = "Hello, World!";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Hello, World!";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);
String string = "Hello, World!";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1815))
statement is: org.evosuite.testcase.statements.ArrayStatement@9eb83a74 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@54f6c2f1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvrjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable((String) null, "B%V=N!aqvs!NU", (String) null, arg4, arg4, (-340))
test data is: ClassWriter classWriter = new ClassWriter((-1815));
String[] stringArray = new String[1];
stringArray[0] = ")wvrjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1436), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", ")wvrjlKo", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable((String) null, "B%V=N!aqvs!NU", (String) null, label, label, (-340));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test string";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is a test string", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLocalVariable(((String) (null)), "B%V=N!aqvs!NU", ((String) (null)), label, label, -340);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3ca0d7c7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1436, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "This is a test string", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable(((String) (null)), "B%V=N!aqvs!NU", ((String) (null)), label, label, -340), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable(((String) (null)), "B%V=N!aqvs!NU", ((String) (null)), label, label, -340) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 3 Parameters size() 3 Num of Method Parameters: 6
i 4 Parameters size() 3 Num of Method Parameters: 6
i 5 Parameters size() 3 Num of Method Parameters: 6
* this is vulnerable: String string = "This is a test string"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string";
String string = "]Ytyc)p@8Bvf";
String string = "]Ytyc)p@8Bvf";
String string = "This is a test string";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
Label label = new Label();
String string = "B%V=N!aqvs!NU";
Label label = null;
Label label = null;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, (String) label, (String) label, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", arg4, arg4, (-1879))
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("MoJn=`qQX,\"<", "MoJn=`qQX,\"<", "boolean", arg4, arg4, 2)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, (-1879));
methodWriter.visitLocalVariable("MoJn=`qQX,\"<", "MoJn=`qQX,\"<", "boolean", label, label, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", ((String[]) (null)), false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, -1879);
        methodWriter.visitLocalVariable("MoJn=`qQX,\"<", "MoJn=`qQX,\"<", "boolean", label, label, 2);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, -1879), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, -1879) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: methodWriter.visitLocalVariable("MoJn=`qQX,\"<", "MoJn=`qQX,\"<", "boolean", label, label, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("MoJn=`qQX,\"<", "MoJn=`qQX,\"<", "boolean", label, label, 2) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
TestCase is: int _int = 1;
String string = "]*tyc)@8Bvf";
String string = "]*tyc)@8Bvf";
String string = "]*tyc)@8Bvf";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
String string = "]*tyc)@8Bvf";
String string = "LineNumberTable";
String string = "java/lang/Throwable";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
String string = "MoJn=`qQX,\"<";
String string = "MoJn=`qQX,\"<";
String string = "boolean";
int _int = 2;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1823))
statement is: org.evosuite.testcase.statements.ArrayStatement@7cae67c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f5f8e8b7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "9wvl"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "9wvl", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("]Ytyc)p@8Bvf", "y='&cG}^", "y='&cG}^", arg4, arg4, 735)
test data is: ClassWriter classWriter = new ClassWriter((-1823));
String[] stringArray = new String[1];
stringArray[0] = "9wvl";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "9wvl", stringArray, true, true);
Label label = new Label();
methodWriter.visitLocalVariable("]Ytyc)p@8Bvf", "y='&cG}^", "y='&cG}^", label, label, 735);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "com.example.MyClass";
        stringArray[1] = "myMethod";
        stringArray[2] = "()V";
        stringArray[3] = "Ljava/lang/String;";
        stringArray[4] = "Hello, world!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, true);
        Label label = new Label();
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[5] Elements: []
lengths: [1] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.MyClass" Ct is: stringArray[0] = "com.example.MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@736226ba
statement is: stringArray[1] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[1] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@940b402f
statement is: stringArray[2] = "()V", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"()V" Ct is: stringArray[2] = "()V"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6992cc1d
statement is: stringArray[3] = "Ljava/lang/String;", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ljava/lang/String;" Ct is: stringArray[3] = "Ljava/lang/String;"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c69a479e
statement is: stringArray[4] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[4] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a15aba9a
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "com.example.MyClass"
* this is vulnerable: String string = "myMethod"
* this is vulnerable: String string = "()V"
* this is vulnerable: String string = "Ljava/lang/String;"
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[1];
String string = "com.example.MyClass";
String string = "myMethod";
String string = "()V";
String string = "Ljava/lang/String;";
String string = "Hello, world!";
Label label = new Label();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@8382af70 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c8303c17 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(2358, arg1)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(20, arg1)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(2358, label);
methodWriter.visitLineNumber(20, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Java";// This string represents a valid input for the method being tested.

        MethodWriter methodWriter = new MethodWriter(classWriter, -1839, "Java", "Java", "Java", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLineNumber(2358, label);
        methodWriter.visitLineNumber(20, label);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Java"// This string represents a valid input for the method being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[0] = "Java"// This string represents a valid input for the method being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@30727cee
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1839, "Java", "Java", "Java", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(2358, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(2358, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLineNumber(20, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(20, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Java"
TestCase is: String[] stringArray = new String[1];
String string = "Java";
String string = "Java";
String string = "Java";
String string = "Java";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
int _int = 2358;
((MethodWriter) string).visitLineNumber(_int, label);
int _int = 20;
((MethodWriter) string).visitLineNumber(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1878))
statement is: org.evosuite.testcase.statements.ArrayStatement@c66c7b5c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", arg5, true, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 2)
test data is: ClassWriter classWriter = new ClassWriter((-1878));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-1878), "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", "]Ytyc)p@8Bvf", stringArray, true, false);
methodWriter.visitMaxs(1, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        MethodWriter methodWriter = /* valid method writer instance */
        new MethodWriter(classWriter, "sampleMethodName", "void", "int", "float", stringArray, false, true);
        methodWriter.visitMaxs(10, 20);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: MethodWriter methodWriter = /* valid method writer instance */
new MethodWriter(classWriter, "sampleMethodName", "void", "int", "float", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(10, 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(10, 20) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: String string = "sampleMethodName";
String string = "void";
String string = "int";
String string = "float";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 10;
int _int = 20;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@ba6600a4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a272cc7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@db82d4c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f340b253 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c54560a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@83398df8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "r)Y$-s"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", arg5, false, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-1839), (-1839))
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-1839), (-1839))
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(185, 255)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[5];
stringArray[0] = "r)Y$-s";
stringArray[1] = "]Ytyc)p@8Bvf";
stringArray[2] = "]Ytyc)p@8Bvf";
stringArray[3] = "r)Y$-s";
stringArray[4] = "r)Y$-s";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
methodWriter.visitMaxs((-1839), (-1839));
methodWriter.visitMaxs((-1839), (-1839));
methodWriter.visitMaxs(185, 255);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "HelloWorld";// Test case 1: Simple Hello World program

        stringArray[1] = "Welcome to Java!";// Test case 2: Printing a welcome message

        stringArray[2] = "This is a test string.";// Test case 3: Using a longer string as input

        stringArray[3] = "r)Y$-s";// Test case 4: Empty string as input

        stringArray[4] = " ";// Test case 5: Single space as input

        MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
        methodWriter.visitMaxs(-1839, -1839);
        methodWriter.visitMaxs(-1839, -1839);
        methodWriter.visitMaxs(185, 255);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "HelloWorld"// Test case 1: Simple Hello World program
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"HelloWorld" Ct is: stringArray[0] = "HelloWorld"// Test case 1: Simple Hello World program

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b572eb7
statement is: stringArray[1] = "Welcome to Java!"// Test case 2: Printing a welcome message
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Welcome to Java!" Ct is: stringArray[1] = "Welcome to Java!"// Test case 2: Printing a welcome message

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e74253ee
statement is: stringArray[2] = "This is a test string."// Test case 3: Using a longer string as input
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string." Ct is: stringArray[2] = "This is a test string."// Test case 3: Using a longer string as input

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b868c27
statement is: stringArray[3] = "r)Y$-s"// Test case 4: Empty string as input
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"r)Y$-s" Ct is: stringArray[3] = "r)Y$-s"// Test case 4: Empty string as input

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e28bb87e
statement is: stringArray[4] = " "// Test case 5: Single space as input
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:" " Ct is: stringArray[4] = " "// Test case 5: Single space as input

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f223bad1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(-1839, -1839), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-1839, -1839) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(-1839, -1839), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-1839, -1839) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: methodWriter.visitMaxs(185, 255), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(185, 255) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "HelloWorld"
* this is vulnerable: String string = "Welcome to Java!"
* this is vulnerable: String string = "This is a test string."
* this is vulnerable: String string = "r)Y$-s"
* this is vulnerable: String string = " "
TestCase is: String[] stringArray = new String[5];
String string = "HelloWorld";
String string = "Welcome to Java!";
String string = "This is a test string.";
String string = "r)Y$-s";
String string = " ";
String string = ")wvlzKo";
String string = "r)Y$-s";
String string = "r)Y$-s";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
int _int = null;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = null;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);
int _int = 185;
int _int = 255;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@a75efe06 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@89ce4c29 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a973799d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@36e701cf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@31bbaeff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc097a4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "r)Y$-s"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", arg5, false, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(7, "yC.X(h:9c", "org.objectweb.asm.jip.ClassAdapter", "r)Y$-s")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(185, 255)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[5];
stringArray[0] = "r)Y$-s";
stringArray[1] = "]Ytyc)p@8Bvf";
stringArray[2] = "]Ytyc)p@8Bvf";
stringArray[3] = "r)Y$-s";
stringArray[4] = "r)Y$-s";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
methodWriter.visitMethodInsn(7, "yC.X(h:9c", "org.objectweb.asm.jip.ClassAdapter", "r)Y$-s");
methodWriter.visitMaxs(185, 255);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Name of the first person";
        stringArray[1] = "Name of the second person";
        stringArray[2] = "Name of the third person";
        stringArray[3] = "Name of the fourth person";
        stringArray[4] = "Name of the fifth person";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ")wvlzKo", "abc", "def", stringArray, false, true);
        methodWriter.visitMethodInsn(7, "yC.X(h:9c", "org.objectweb.asm.jip.ClassAdapter", "Name of the first person");
        methodWriter.visitMaxs(185, 255);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Name of the first person", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Name of the first person" Ct is: stringArray[0] = "Name of the first person"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40f88c62
statement is: stringArray[1] = "Name of the second person", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Name of the second person" Ct is: stringArray[1] = "Name of the second person"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d314e444
statement is: stringArray[2] = "Name of the third person", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Name of the third person" Ct is: stringArray[2] = "Name of the third person"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aab3b9e0
statement is: stringArray[3] = "Name of the fourth person", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Name of the fourth person" Ct is: stringArray[3] = "Name of the fourth person"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@737c11e1
statement is: stringArray[4] = "Name of the fifth person", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Name of the fifth person" Ct is: stringArray[4] = "Name of the fifth person"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@30c3bc68
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1839, ")wvlzKo", "abc", "def", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(7, "yC.X(h:9c", "org.objectweb.asm.jip.ClassAdapter", "Name of the first person"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(7, "yC.X(h:9c", "org.objectweb.asm.jip.ClassAdapter", "Name of the first person") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(185, 255), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(185, 255) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "Name of the first person"
* this is vulnerable: String string = "Name of the second person"
* this is vulnerable: String string = "Name of the third person"
* this is vulnerable: String string = "Name of the fourth person"
* this is vulnerable: String string = "Name of the fifth person"
TestCase is: String[] stringArray = new String[5];
String string = "Name of the first person";
String string = "Name of the second person";
String string = "Name of the third person";
String string = "Name of the fourth person";
String string = "Name of the fifth person";
String string = ")wvlzKo";
String string = "abc";
String string = "def";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
int _int = 7;
String string = "yC.X(h:9c";
String string = "org.objectweb.asm.jip.ClassAdapter";
String string = "Name of the first person";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
int _int = 185;
int _int = 255;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1815))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")wvrjlKo", ")wvrjlKo", ")wvrjlKo", (String[]) null, false, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 2)
test data is: ClassWriter classWriter = new ClassWriter((-1815));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")wvrjlKo", ")wvrjlKo", ")wvrjlKo", (String[]) null, false, false);
methodWriter.visitMaxs(1, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AwesomeClass", "main", "()V", ((String[]) (null)), false, false);
        methodWriter.visitMaxs(1, 2);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AwesomeClass", "main", "()V", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(1, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 2) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 2;
String string = "AwesomeClass";
String string = "main";
String string = "()V";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@e9c94a63 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@568630c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5402b869 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c6cf9240 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "]Ytyc)p@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@66b16f5f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@51fbec3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "r)Y$-s"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", arg5, false, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(1, (-1856118277))
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-1839), (-1839))
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[5];
stringArray[0] = "r)Y$-s";
stringArray[1] = "]Ytyc)p@8Bvf";
stringArray[2] = "]Ytyc)p@8Bvf";
stringArray[3] = "r)Y$-s";
stringArray[4] = "r)Y$-s";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
methodWriter.visitIincInsn(1, (-1856118277));
methodWriter.visitMaxs((-1839), (-1839));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        stringArray[2] = "ghi";
        stringArray[3] = "jkl";
        stringArray[4] = "mno";
        MethodWriter methodWriter = new MethodWriter(classWriter, 100, "myMethod", "abc", "def", stringArray, false, true);
        methodWriter.visitIincInsn(1, 1234567890);
        methodWriter.visitMaxs(100, 100);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@528510fe
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b14ba407
statement is: stringArray[2] = "ghi", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ghi" Ct is: stringArray[2] = "ghi"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aec6b79f
statement is: stringArray[3] = "jkl", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"jkl" Ct is: stringArray[3] = "jkl"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@88934663
statement is: stringArray[4] = "mno", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"mno" Ct is: stringArray[4] = "mno"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@16e341e4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 100, "myMethod", "abc", "def", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(1, 1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(1, 1234567890) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 12
Matched Method is: visitIincInsn(II)V
statement is: methodWriter.visitMaxs(100, 100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(100, 100) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 12
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "abc"
* this is vulnerable: String string = "def"
* this is vulnerable: String string = "ghi"
* this is vulnerable: String string = "jkl"
* this is vulnerable: String string = "mno"
TestCase is: String[] stringArray = new String[5];
String string = "abc";
String string = "def";
String string = "ghi";
String string = "jkl";
String string = "mno";
int _int = 100;
String string = "myMethod";
String string = "abc";
String string = "def";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 1;
int _int = 1234567890;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 100;
int _int = 100;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@d387ade0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5f392d12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@97cd86c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6daf8946 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ")wvlzKo"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1d3ebdbe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "r)Y$-s"
statement is: org.evosuite.testcase.statements.AssignmentStatement@aa4c65a9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "r)Y$-s"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", arg5, false, true)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-1839), (-1839))
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(285212681, 255)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[5];
stringArray[0] = "r)Y$-s";
stringArray[1] = "r)Y$-s";
stringArray[2] = ")wvlzKo";
stringArray[3] = "r)Y$-s";
stringArray[4] = "r)Y$-s";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
methodWriter.visitMaxs((-1839), (-1839));
methodWriter.visitMaxs(285212681, 255);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "r)Y$-s";
        stringArray[1] = "r)Y$-s";
        stringArray[2] = ")wvlzKo";
        stringArray[3] = "r)Y$-s";
        stringArray[4] = "r)Y$-s";
        MethodWriter methodWriter = new MethodWriter(classWriter, MethodWriter.MAX_STACK, MethodWriter.MAX_LOCALS, ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true);
        methodWriter.visitMaxs(MAX_STACK, MAX_LOCALS);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "r)Y$-s", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"r)Y$-s" Ct is: stringArray[0] = "r)Y$-s"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d6193b65
statement is: stringArray[1] = "r)Y$-s", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"r)Y$-s" Ct is: stringArray[1] = "r)Y$-s"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@65e1a584
statement is: stringArray[2] = ")wvlzKo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:")wvlzKo" Ct is: stringArray[2] = ")wvlzKo"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@13477f83
statement is: stringArray[3] = "r)Y$-s", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"r)Y$-s" Ct is: stringArray[3] = "r)Y$-s"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2982dc4b
statement is: stringArray[4] = "r)Y$-s", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"r)Y$-s" Ct is: stringArray[4] = "r)Y$-s"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4591be33
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, MethodWriter.MAX_STACK, MethodWriter.MAX_LOCALS, ")wvlzKo", "r)Y$-s", "r)Y$-s", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(MAX_STACK, MAX_LOCALS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(MAX_STACK, MAX_LOCALS) target is: methodWriter method is: visitMaxs()
* this is vulnerable: String string = "r)Y$-s"
* this is vulnerable: String string = "r)Y$-s"
* this is vulnerable: String string = ")wvlzKo"
* this is vulnerable: String string = "r)Y$-s"
* this is vulnerable: String string = "r)Y$-s"
TestCase is: String[] stringArray = new String[5];
String string = "r)Y$-s";
String string = "r)Y$-s";
String string = ")wvlzKo";
String string = "r)Y$-s";
String string = "r)Y$-s";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1811))
statement is: org.evosuite.testcase.statements.ArrayStatement@14276b50 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@526640e8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1969937382), "", "", "", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@14b5bc42 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[6]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 2, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-1811));
String[] stringArray = new String[1];
stringArray[0] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1969937382), "", "", "", stringArray, false, false);
Object[] objectArray = new Object[6];
methodWriter.visitFrame(1, 2, objectArray, 1, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test string";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1969937382, "", "", "", stringArray, false, false);
        Object[] objectArray = new Object[6];
        methodWriter.visitFrame(1, 2, objectArray, 1, objectArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bc254241
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1969937382, "", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[6] Elements: []
lengths: [1] [6]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [6] Ct is: Object[] objectArray = new Object[6] isAssignment: false Array: new Object[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.Object; Object[]
statement is: methodWriter.visitFrame(1, 2, objectArray, 1, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 2, objectArray, 1, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "This is a test string"
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string";
String string = "";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Object[] objectArray = new Object[6];
int _int = 1;
int _int = 2;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1824))
statement is: org.evosuite.testcase.statements.ArrayStatement@87d9d896 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@993d8505 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")(wlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")(wlKo", ")(wlKo", "value ", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@148cc4b type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: methodWriter.classReaderOffset = (-1824)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1824));
String[] stringArray = new String[1];
stringArray[0] = ")(wlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")(wlKo", ")(wlKo", "value ", stringArray, false, false);
methodWriter.classReaderOffset = (-1824);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello World", "Hello World", "value ", stringArray, false, false);
        methodWriter.classReaderOffset = 0;
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World" Ct is: stringArray[0] = "Hello World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1402322e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello World", "Hello World", "value ", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.classReaderOffset = 0, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
* this is vulnerable: String string = "Hello World"
TestCase is: String[] stringArray = new String[1];
String string = "Hello World";
int _int = 2;
String string = "Hello World";
String string = "Hello World";
String string = "value ";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@3f92f47e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, (int[]) null, arg2)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", arg4, arg4, (-1879))
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, (int[]) null, labelArray);
methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, (-1879));
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "addNumbers", "addNumbers", "(II)I", new String[]{ "x", "y" }, false, true);
        Label label = new Label();
        Label[] labelArray = new Label[0];
        methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray);
        methodWriter.visitLocalVariable("x", "I", null, label, label, 8);
        methodWriter.visitLocalVariable("y", "I", null, label, label, 8);
        methodWriter.getSize();
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "addNumbers", "addNumbers", "(II)I", new String[]{ "x", "y" }, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[0] Elements: []
lengths: [0] [0]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, new int[]{ 1, 2, 3 }, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitLocalVariable("x", "I", null, label, label, 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("x", "I", null, label, label, 8) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,<unknown>,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: methodWriter.visitLocalVariable("y", "I", null, label, label, 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("y", "I", null, label, label, 8) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,<unknown>,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 1;
String string = "addNumbers";
String string = "addNumbers";
String string = "(II)I";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
String string = "x";
String string = "I";
int _int = 8;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
String string = "y";
String string = "I";
int _int = 8;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@fa51687d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d1d094 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1839), ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn(")wvlzKo", 1)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(783, arg1)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1839), ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn(")wvlzKo", 1);
Label label = new Label();
methodWriter.visitLineNumber(783, label);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1839, "main", "()V", "Hello World!", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/String", 1);
        Label label = new Label();
        methodWriter.visitLineNumber(783, label);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9f81bf5d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1839, "main", "()V", "Hello World!", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(783, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(783, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
* this is vulnerable: String string = "Hello World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello World!";
String string = "main";
String string = "()V";
String string = "Hello World!";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
String string = "java/lang/String";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
Label label = new Label();
int _int = 783;
((MethodWriter) string).visitLineNumber(_int, label);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-11))
statement is: org.evosuite.testcase.statements.ArrayStatement@1e119cb3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ad58c376 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-11), 1758, arg4, (-11), arg4)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-11));
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1);
methodWriter.visitFrame((-11), 1758, stringArray, (-11), stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "java/lang/Object";
        stringArray[1] = "java/util/List";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/String", "java/lang/Integer", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/Object", 2);
        methodWriter.visitFrame(-1, 6578, stringArray, -1, stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java/lang/Object", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/lang/Object" Ct is: stringArray[0] = "java/lang/Object"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2bdc1ace
statement is: stringArray[1] = "java/util/List", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/util/List" Ct is: stringArray[1] = "java/util/List"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fc1c1eb7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/String", "java/lang/Integer", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/Object", 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/Object", 2) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
statement is: methodWriter.visitFrame(-1, 6578, stringArray, -1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, 6578, stringArray, -1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
* this is vulnerable: String string = "java/lang/Object"
* this is vulnerable: String string = "java/util/List"
TestCase is: String[] stringArray = new String[1];
String string = "java/lang/Object";
String string = "java/util/List";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@688ef4c7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b2dea477 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn(")wvlzKo", 1)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1961), 252, arg4, (-1839), arg4)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(592, 252, ")wvlzKo", ")*1p", ")*1p", arg5)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn(")wvlzKo", 1);
methodWriter.visitFrame((-1961), 252, stringArray, (-1839), stringArray);
classWriter.visit(592, 252, ")wvlzKo", ")*1p", ")*1p", stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "helloWorld", "helloWorld", "helloWorld", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/String", 2);
        methodWriter.visitFrame(-1961, 512, new String[]{ "Hello", "World" }, -1073741824, new String[]{ "Hello", "World" });
        classWriter.visit(592, 512, "helloWorld", "java/lang/String", "java/lang/String", stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [1] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "helloWorld", "helloWorld", "helloWorld", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/String", 2) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitFrame(-1961, 512, new String[]{ "Hello", "World" }, -1073741824, new String[]{ "Hello", "World" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1961, 512, new String[]{ "Hello", "World" }, -1073741824, new String[]{ "Hello", "World" }) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 1 Parameters size() 1 Num of Method Parameters: 5
i 2 Parameters size() 1 Num of Method Parameters: 5
i 3 Parameters size() 1 Num of Method Parameters: 5
i 4 Parameters size() 1 Num of Method Parameters: 5
statement is: classWriter.visit(592, 512, "helloWorld", "java/lang/String", "java/lang/String", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(592, 512, "helloWorld", "java/lang/String", "java/lang/String", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 1;
String string = "helloWorld";
String string = "helloWorld";
String string = "helloWorld";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "java/lang/String";
int _int = 2;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = 512;
int _int = null;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@b87f75d2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b16d05 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1867), ")wvlzKo", "]Ytyc)p@8Bvf", "WpL", arg5, false, false)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(54, 54, "]Ytyc)p@8Bvf", "cq~lsZ", "WpL", arg5)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1867), ")wvlzKo", "]Ytyc)p@8Bvf", "WpL", stringArray, false, false);
classWriter.visit(54, 54, "]Ytyc)p@8Bvf", "cq~lsZ", "WpL", stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "MyTestClassName";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1867, "MyTestClassName", "MyTestMethodName", "WpL", stringArray, false, false);
        classWriter.visit(54, 54, "MyTestClassName", "MyTestMethodName", "WpL", stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "MyTestClassName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MyTestClassName" Ct is: stringArray[0] = "MyTestClassName"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd026489
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1867, "MyTestClassName", "MyTestMethodName", "WpL", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.visit(54, 54, "MyTestClassName", "MyTestMethodName", "WpL", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(54, 54, "MyTestClassName", "MyTestMethodName", "WpL", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
* this is vulnerable: String string = "MyTestClassName"
TestCase is: String[] stringArray = new String[1];
String string = "MyTestClassName";
String string = "MyTestClassName";
String string = "MyTestMethodName";
String string = "WpL";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@f245b895 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@46aa1a06 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wj}lKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2337, ")wj}lKo", "]Ytyc)p@8Bvf", (String) null, arg5, false, false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = ")wj}lKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2337, ")wj}lKo", "]Ytyc)p@8Bvf", (String) null, stringArray, false, false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Lorem ipsum dolor sit amet";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2337, "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", ((String) (null)), stringArray, false, false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Lorem ipsum dolor sit amet", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Lorem ipsum dolor sit amet" Ct is: stringArray[0] = "Lorem ipsum dolor sit amet"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@12723ddf
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2337, "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
* this is vulnerable: String string = "Lorem ipsum dolor sit amet"
TestCase is: String[] stringArray = new String[1];
String string = "Lorem ipsum dolor sit amet";
int _int = 2337;
String string = "Lorem ipsum dolor sit amet";
String string = "consectetur adipiscing elit";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1854))
statement is: org.evosuite.testcase.statements.ArrayStatement@deb08009 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c04bacc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "h\"N'"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1854), "h\"N'", "]Ytyc)@8Bv", "WpL", arg5, true, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1854));
String[] stringArray = new String[1];
stringArray[0] = "h\"N'";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1854), "h\"N'", "]Ytyc)@8Bv", "WpL", stringArray, true, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Hello, world!";
        stringArray[1] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        stringArray[2] = "abcdefghijklmnopqrstuvwxyz";
        MethodWriter methodWriter = new MethodWriter(classWriter, 123456789, "myMethod", "()V", "this is my method", stringArray, true, false);
        methodWriter.visitAnnotationDefault();
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1a182ad4
statement is: stringArray[1] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABCDEFGHIJKLMNOPQRSTUVWXYZ" Ct is: stringArray[1] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3f72e42d
statement is: stringArray[2] = "abcdefghijklmnopqrstuvwxyz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abcdefghijklmnopqrstuvwxyz" Ct is: stringArray[2] = "abcdefghijklmnopqrstuvwxyz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@11891e93
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 123456789, "myMethod", "()V", "this is my method", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: getSize()I
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, world!";
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String string = "abcdefghijklmnopqrstuvwxyz";
int _int = 123456789;
String string = "myMethod";
String string = "()V";
String string = "this is my method";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1853))
statement is: org.evosuite.testcase.statements.ArrayStatement@27e7bea1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b25eaaf3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1853), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", arg5, true, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("Code", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1853));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1853), ")wvjlKo", "]Ytyc)p@8Bvf", ")wvjlKo", stringArray, true, false);
methodWriter.visitAnnotation("Code", true);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "A descriptive and representative value for a String";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1853, "A descriptive and representative value for a String", "A descriptive and representative value for a String", stringArray, true, false);
        methodWriter.visitAnnotation("Code", true);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A descriptive and representative value for a String", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A descriptive and representative value for a String" Ct is: stringArray[0] = "A descriptive and representative value for a String"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7637d13e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1853, "A descriptive and representative value for a String", "A descriptive and representative value for a String", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("Code", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("Code", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
* this is vulnerable: String string = "A descriptive and representative value for a String"
TestCase is: String[] stringArray = new String[1];
String string = "A descriptive and representative value for a String";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1897))
statement is: org.evosuite.testcase.statements.ArrayStatement@b67c18dc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@31067573 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "AI1gdnL"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("iy7tW", false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1897));
String[] stringArray = new String[1];
stringArray[0] = "AI1gdnL";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false);
methodWriter.visitAnnotation("iy7tW", false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "AI1gdnL";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false);
        methodWriter.visitAnnotation("iy7tW", false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "AI1gdnL", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"AI1gdnL" Ct is: stringArray[0] = "AI1gdnL"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fea6a57b
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AI1gdnL", "AI1gdnL", "AI1gdnL", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("iy7tW", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("iy7tW", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: getSize()I
* this is vulnerable: String string = "AI1gdnL"
TestCase is: String[] stringArray = new String[1];
String string = "AI1gdnL";
int _int = 2;
String string = "AI1gdnL";
String string = "AI1gdnL";
String string = "AI1gdnL";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "iy7tW";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1824))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Shd", "Shd", "Shd", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("Shd")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1824));
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Shd", "Shd", "Shd", (String[]) null, false, false);
Attribute attribute = new Attribute("Shd");
methodWriter.visitAttribute(attribute);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "methodDescriptor", "className", ((String[]) (null)), false, false);
        Attribute attribute = new Attribute("attributeName");
        methodWriter.visitAttribute(attribute);
        methodWriter.getSize();
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "methodName", "methodDescriptor", "className", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("attributeName"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "methodName";
String string = "methodDescriptor";
String string = "className";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
String string = "attributeName";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1824))
statement is: org.evosuite.testcase.statements.ArrayStatement@8fa1438 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@972e9420 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")(wlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")(wlKo", ")(wlKo", ")(wlKo", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@92738d1f type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: methodWriter.classReaderOffset = (-1824)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1824));
String[] stringArray = new String[1];
stringArray[0] = ")(wlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")(wlKo", ")(wlKo", ")(wlKo", stringArray, false, false);
methodWriter.classReaderOffset = (-1824);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "exampleParameter";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "exampleMethodName", "int", "int[]", stringArray, false, false);
        methodWriter.classReaderOffset = "exampleOffset";
        ByteVector byteVector = new ByteVector(100);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "exampleParameter", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"exampleParameter" Ct is: stringArray[0] = "exampleParameter"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1942c217
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "exampleMethodName", "int", "int[]", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.classReaderOffset = "exampleOffset", class spoon.support.reflect.code.CtAssignmentImpl
statement is: ByteVector byteVector = new ByteVector(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "exampleParameter"
TestCase is: String[] stringArray = new String[1];
String string = "exampleParameter";
int _int = 2;
String string = "exampleMethodName";
String string = "int";
String string = "int[]";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 100;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1298)
statement is: org.evosuite.testcase.statements.ArrayStatement@35459594 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4b920288 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")JvlK"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(2)
statement is: org.evosuite.testcase.statements.FieldStatement@3b5a94bb type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(1298);
String[] stringArray = new String[1];
stringArray[0] = ")JvlK";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, ")JvlK", "]Ytyc)p@8Bvf", ")JvlK", stringArray, true, false);
methodWriter.visitLdcInsn(2);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", "]Ytyc)p@8Bvf", "Hello, World!", stringArray, true, false);
        methodWriter.visitLdcInsn(2);
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6dac0ead
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello, World!", "]Ytyc)p@8Bvf", "Hello, World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(2) target is: methodWriter method is: visitLdcInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";
int _int = 2;
String string = "Hello, World!";
String string = "]Ytyc)p@8Bvf";
String string = "Hello, World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
((MethodWriter) string).visitLdcInsn(_int);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1791))
statement is: org.evosuite.testcase.statements.ArrayStatement@2770a34c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b21c1afc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Exceptions"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1791), "value ", "/Dq>xYl", (String) null, arg5, false, false)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1791));
String[] stringArray = new String[1];
stringArray[0] = "Exceptions";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1791), "value ", "/Dq>xYl", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Exceptional situations";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1791, "value ", "/Dq>xYl", ((String) (null)), stringArray, false, false);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Exceptional situations", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Exceptional situations" Ct is: stringArray[0] = "Exceptional situations"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d9c28633
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1791, "value ", "/Dq>xYl", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String[] stringArray = new String[1];
String[] stringArray = "Exceptional situations";
String string = "value ";
String string = "/Dq>xYl";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, (String) stringArray, (String) _boolean, (String) _boolean, stringArray, false, false);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(16777226)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
ByteVector byteVector = new ByteVector(16777226);
methodWriter.visitAnnotationDefault();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Method", "ReturnType", "Name", ((String[]) (null)), false, true);
        ByteVector byteVector = new ByteVector(16777226);
        methodWriter.visitAnnotationDefault();
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Method", "ReturnType", "Name", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(16777226), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 1;
String string = "Method";
String string = "ReturnType";
String string = "Name";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
int _int = 16777226;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@ed0267e3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6fdb1744 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvjlKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3548, ")wvjlKo", ")wvjlKo", ")wvjlKo", arg5, false, false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation(")wvjlKo", true)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvjlKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 3548, ")wvjlKo", ")wvjlKo", ")wvjlKo", stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.visitAnnotation(")wvjlKo", true);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3548, "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", stringArray, false, false);
        ByteVector byteVector = new ByteVector(2);
        methodWriter.visitAnnotation("Lorem ipsum dolor sit amet, consectetur adipiscing elit", true);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Lorem ipsum dolor sit amet, consectetur adipiscing elit" Ct is: stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89553b16
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3548, "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("Lorem ipsum dolor sit amet, consectetur adipiscing elit", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("Lorem ipsum dolor sit amet, consectetur adipiscing elit", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
TestCase is: String[] stringArray = new String[1];
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
int _int = 3548;
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@28eeaacc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-669), ")wvlKo", "value ", ")wvlKo", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation(")wvlKo", false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(127)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-669), ")wvlKo", "value ", ")wvlKo", stringArray, false, false);
methodWriter.visitAnnotation(")wvlKo", false);
ByteVector byteVector = new ByteVector(127);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -669, ")wvlKo", "value ", ")wvlKo", stringArray, false, false);
        methodWriter.visitAnnotation(")wvlKo", false);
        ByteVector byteVector = new ByteVector(((short) (127)));// Changed the primitive value from 127 to (short) 127 to make it more descriptive and representative of the situation being tested.

        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -669, ")wvlKo", "value ", ")wvlKo", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation(")wvlKo", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation(")wvlKo", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(((short) (127)))// Changed the primitive value from 127 to (short) 127 to make it more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: String[] stringArray = new String[0];
String string = ")wvlKo";
String string = "value ";
String string = ")wvlKo";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
String string = ")wvlKo";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);
int _int = 127;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@84b3754d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@aac2e736 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Ljava/lang/Synthetic;"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("Ljava/lang/Synthetic;")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@5505a23e type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = "Ljava/lang/Synthetic;";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray, false, false);
Attribute attribute = new Attribute("Ljava/lang/Synthetic;");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "A synthetic method";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "A synthetic method", "A synthetic method", "A synthetic method", stringArray, false, false);
        Attribute attribute = new Attribute("A synthetic method");
        methodWriter.visitAttribute(attribute);
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A synthetic method", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A synthetic method" Ct is: stringArray[0] = "A synthetic method"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@969aeb78
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "A synthetic method", "A synthetic method", "A synthetic method", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("A synthetic method"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: String string = "A synthetic method"
TestCase is: String[] stringArray = new String[1];
String string = "A synthetic method";
int _int = 1;
String string = "A synthetic method";
String string = "A synthetic method";
String string = "A synthetic method";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "A synthetic method";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1879))
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@f90f9598 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, (int[]) null, arg2)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", arg4, arg4, (-1879))
statement is: org.evosuite.testcase.statements.FieldStatement@ff263974 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1879));
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", (String[]) null, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, (int[]) null, labelArray);
methodWriter.visitLocalVariable("]*tyc)@8Bvf", "LineNumberTable", "java/lang/Throwable", label, label, (-1879));
ByteVector byteVector = classWriter.pool;
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "methodName", "java/lang/Object", "java/lang/String", ((String[]) (null)), false, true);
        Label label = new Label();
        Label[] labelArray = new Label[0];
        methodWriter.visitLookupSwitchInsn(label, ((int[]) (null)), labelArray);
        methodWriter.visitLocalVariable("variableName", "LineNumberTable", "java/lang/Throwable", label, label, -1879);
        ByteVector byteVector = classWriter.pool;
        methodWriter.put(byteVector);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "methodName", "java/lang/Object", "java/lang/String", ((String[]) (null)), false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[0] Elements: []
lengths: [0] [0]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: methodWriter.visitLookupSwitchInsn(label, ((int[]) (null)), labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, ((int[]) (null)), labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitLocalVariable("variableName", "LineNumberTable", "java/lang/Throwable", label, label, -1879), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("variableName", "LineNumberTable", "java/lang/Throwable", label, label, -1879) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: org.objectweb.asm.jip.ByteVector org.objectweb.asm.jip.ClassWriter.pool ByteVector pool
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 1, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
String string = "methodName";
String string = "java/lang/Object";
String string = "java/lang/String";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
String string = "variableName";
String string = "LineNumberTable";
String string = "java/lang/Throwable";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
ByteVector byteVector = null;
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(12)
statement is: org.evosuite.testcase.statements.ArrayStatement@8fbd31c2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@886f3f37 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(5213)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(1758, arg1)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(12);
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1);
ByteVector byteVector = new ByteVector(5213);
Label label = new Label();
methodWriter.visitLineNumber(1758, label);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java/lang/dyn/Dynamic";// Changed to a more descriptive value that is relevant to the method being tested.

        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1);
        ByteVector byteVector = new ByteVector(5213);// Changed to a more representative value that is likely to occur in the test data.

        Label label = new Label();
        methodWriter.visitLineNumber(1758, label);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java/lang/dyn/Dynamic"// Changed to a more descriptive value that is relevant to the method being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/lang/dyn/Dynamic" Ct is: stringArray[0] = "java/lang/dyn/Dynamic"// Changed to a more descriptive value that is relevant to the method being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ea0d1fcc
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: ByteVector byteVector = new ByteVector(5213)// Changed to a more representative value that is likely to occur in the test data.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(1758, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(1758, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
TestCase is: String[] stringArray = new String[1];
String string = "java/lang/dyn/Dynamic";
int _int = 1;
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "java/lang/dyn/Dynamic";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = 5213;
ByteVector byteVector = new ByteVector(_int);
Label label = new Label();
int _int = 1758;
((MethodWriter) string).visitLineNumber(_int, label);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(12)
statement is: org.evosuite.testcase.statements.ArrayStatement@e092f04b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ccf8c2f4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java/lang/dyn/Dynamic"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(12, 1758, arg4, 12, arg4)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(5213)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(12);
String[] stringArray = new String[1];
stringArray[0] = "java/lang/dyn/Dynamic";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1);
methodWriter.visitFrame(12, 1758, stringArray, 12, stringArray);
ByteVector byteVector = new ByteVector(5213);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "java/lang/dyn/Dynamic";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1);
        methodWriter.visitFrame(12, 1758, stringArray, 12, stringArray);
        ByteVector byteVector = new ByteVector(5213);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java/lang/dyn/Dynamic", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java/lang/dyn/Dynamic" Ct is: stringArray[0] = "java/lang/dyn/Dynamic"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4d39645e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", "java/lang/dyn/Dynamic", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("java/lang/dyn/Dynamic", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitFrame(12, 1758, stringArray, 12, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(12, 1758, stringArray, 12, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: ByteVector byteVector = new ByteVector(5213), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "java/lang/dyn/Dynamic"
TestCase is: String[] stringArray = new String[1];
String string = "java/lang/dyn/Dynamic";
int _int = 1;
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
String string = "java/lang/dyn/Dynamic";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "java/lang/dyn/Dynamic";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = 12;
int _int = 1758;
int _int = 12;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 5213;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1867))
statement is: org.evosuite.testcase.statements.ArrayStatement@969790bf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@94cba60a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo")
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(2, 0)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1867));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, ")wvlzKo");
methodWriter.visitVarInsn(2, 0);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3536, "main", "([Ljava/lang/String;)V", "()wvlzKo", stringArray, false, false);
        methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!");
        methodWriter.visitVarInsn(2, 0);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e801e39f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3536, "main", "([Ljava/lang/String;)V", "()wvlzKo", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(((Label) (null)), ((Label) (null)), ((Label) (null)), "Hello, World!") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 4
i 2 Parameters size() 1 Num of Method Parameters: 4
i 3 Parameters size() 1 Num of Method Parameters: 4
statement is: methodWriter.visitVarInsn(2, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(2, 0) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitVarInsn(II)V
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Hello, World!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, World!";
int _int = 3536;
String string = "main";
String string = "([Ljava/lang/String;)V";
String string = "()wvlzKo";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Hello, World!";
Label label = null;
Label label = null;
String string = null;
((MethodWriter) string).visitTryCatchBlock((Label) string, label, label, string);
int _int = 2;
int _int = 0;
((MethodWriter) string).visitVarInsn(_int, _int);
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1839))
statement is: org.evosuite.testcase.statements.ArrayStatement@d9b739dc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ab1e090 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")wvlzKo"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn((-1856196771), "h>\"0YxL(c#n8{1", "3e8*2h|'[U:KaM", "org.objectweb.asm.jip.Label")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(31)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1839));
String[] stringArray = new String[1];
stringArray[0] = ")wvlzKo";
MethodWriter methodWriter = new MethodWriter(classWriter, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
Label label = new Label();
methodWriter.visitFieldInsn((-1856196771), "h>\"0YxL(c#n8{1", "3e8*2h|'[U:KaM", "org.objectweb.asm.jip.Label");
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
ByteVector byteVector = new ByteVector(31);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = ")wvlzKo";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitFieldInsn(-1856196771, "h>\"0YxL(c#n8{1", "3e8*2h|'[U:KaM", "org.objectweb.asm.jip.Label");
        methodWriter.visitTryCatchBlock(label, label, label, ((String) (null)));
        ByteVector byteVector = new ByteVector(31);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = ")wvlzKo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:")wvlzKo" Ct is: stringArray[0] = ")wvlzKo"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ea81f79
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3536, ")wvlzKo", ")wvlzKo", ")wvlzKo", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(-1856196771, "h>\"0YxL(c#n8{1", "3e8*2h|'[U:KaM", "org.objectweb.asm.jip.Label"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(-1856196771, "h>\"0YxL(c#n8{1", "3e8*2h|'[U:KaM", "org.objectweb.asm.jip.Label") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))) target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: ByteVector byteVector = new ByteVector(31), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = ")wvlzKo"
TestCase is: String[] stringArray = new String[1];
String string = ")wvlzKo";
int _int = 3536;
String string = ")wvlzKo";
String string = ")wvlzKo";
String string = ")wvlzKo";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "h>\"0YxL(c#n8{1";
String string = "3e8*2h|'[U:KaM";
String string = "org.objectweb.asm.jip.Label";
String string = null;
((MethodWriter) string).visitFieldInsn((int) string, string, string, string);
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 31;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-11))
statement is: org.evosuite.testcase.statements.ArrayStatement@8cf70e11 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c743807b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "]*tyc)@8Bvf"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("]*tyc)@8Bvf", 1)
statement is: org.evosuite.testcase.statements.ArrayStatement@350c25a7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1fad9267 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "vjlKo"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2b8cca92 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "vjlKo"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b15062dd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "vjlKo"
statement is: org.evosuite.testcase.statements.AssignmentStatement@679e357e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "]*tyc)@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@92368fda type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "]*tyc)@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e968bf0c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "]*tyc)@8Bvf"
statement is: org.evosuite.testcase.statements.AssignmentStatement@86ea901a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "]*tyc)@8Bvf"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-2028598467), 1758, "]*tyc)@8Bvf", "vjlKo", "vjlKo", arg5)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-11), 1758, arg4, (-11), arg4)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(5219)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-11));
String[] stringArray = new String[1];
stringArray[0] = "]*tyc)@8Bvf";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "]*tyc)@8Bvf", "]*tyc)@8Bvf", "]*tyc)@8Bvf", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("]*tyc)@8Bvf", 1);
String[] stringArray = new String[7];
stringArray[0] = "vjlKo";
stringArray[1] = "vjlKo";
stringArray[2] = "vjlKo";
stringArray[3] = "]*tyc)@8Bvf";
stringArray[4] = "]*tyc)@8Bvf";
stringArray[5] = "]*tyc)@8Bvf";
stringArray[6] = "]*tyc)@8Bvf";
classWriter.visit((-2028598467), 1758, "]*tyc)@8Bvf", "vjlKo", "vjlKo", stringArray);
methodWriter.visitFrame((-11), 1758, stringArray, (-11), stringArray);
ByteVector byteVector = new ByteVector(5219);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "my_method";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "my_method", "my_method", "my_method", stringArray, false, false);
        methodWriter.visitMultiANewArrayInsn("my_array_type", 1);
        String[] stringArray = new String[7];
        stringArray[0] = "my_first_argument";
        stringArray[1] = "my_second_argument";
        stringArray[2] = "my_third_argument";
        stringArray[3] = "my_fourth_argument";
        stringArray[4] = "my_fifth_argument";
        stringArray[5] = "my_sixth_argument";
        stringArray[6] = "my_seventh_argument";
        classWriter.visit(-2028598467, 1758, "my_method", "my_first_argument", "my_second_argument", stringArray);
        methodWriter.visitFrame(-11, 1758, stringArray, -11, stringArray);
        ByteVector byteVector = new ByteVector(5219);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "my_method", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_method" Ct is: stringArray[0] = "my_method"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@df241474
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "my_method", "my_method", "my_method", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("my_array_type", 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("my_array_type", 1) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[7] Elements: []
lengths: [1] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "my_first_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_first_argument" Ct is: stringArray[0] = "my_first_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb27a33c
statement is: stringArray[1] = "my_second_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_second_argument" Ct is: stringArray[1] = "my_second_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb196191
statement is: stringArray[2] = "my_third_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_third_argument" Ct is: stringArray[2] = "my_third_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a02df70a
statement is: stringArray[3] = "my_fourth_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_fourth_argument" Ct is: stringArray[3] = "my_fourth_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e747a485
statement is: stringArray[4] = "my_fifth_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_fifth_argument" Ct is: stringArray[4] = "my_fifth_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b7de296a
statement is: stringArray[5] = "my_sixth_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_sixth_argument" Ct is: stringArray[5] = "my_sixth_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8fb43aa4
statement is: stringArray[6] = "my_seventh_argument", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"my_seventh_argument" Ct is: stringArray[6] = "my_seventh_argument"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b4f0c94d
statement is: classWriter.visit(-2028598467, 1758, "my_method", "my_first_argument", "my_second_argument", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-2028598467, 1758, "my_method", "my_first_argument", "my_second_argument", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: methodWriter.visitFrame(-11, 1758, stringArray, -11, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-11, 1758, stringArray, -11, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
statement is: ByteVector byteVector = new ByteVector(5219), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "my_method"
* this is vulnerable: String string = "my_first_argument"
* this is vulnerable: String string = "my_second_argument"
* this is vulnerable: String string = "my_third_argument"
* this is vulnerable: String string = "my_fourth_argument"
* this is vulnerable: String string = "my_fifth_argument"
* this is vulnerable: String string = "my_sixth_argument"
* this is vulnerable: String string = "my_seventh_argument"
TestCase is: String[] stringArray = new String[1];
String string = "my_method";
int _int = 1;
String string = "my_method";
String string = "my_method";
String string = "my_method";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "my_array_type";
int _int = 1;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
String[] stringArray = new String[1];
String string = "my_first_argument";
String string = "my_second_argument";
String string = "my_third_argument";
String string = "my_fourth_argument";
String string = "my_fifth_argument";
String string = "my_sixth_argument";
String string = "my_seventh_argument";
int _int = 1758;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, stringArray, _int, stringArray);
int _int = 5219;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@403a5a42 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[1]
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: Label label = new Label();
int[] intArray = new int[1];
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        int[] intArray = new int[]{ 1, 2, 3 };// Changed to more descriptive example of an integer array

        MethodWriter.getNewOffset(intArray, intArray, label);
        MethodWriter.getNewOffset(intArray, intArray, label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[]{ 1, 2, 3 }// Changed to more descriptive example of an integer array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[1] isAssignment: false Array: new int[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [1] []
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: Label label = new Label();
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);
int[] intArray = null;
Label label = null;
MethodWriter.getNewOffset((int[]) label, intArray, label);

statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@d67f19c2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dfc256fb type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: intArray[0] = 2
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: Label label = new Label();
int[] intArray = new int[5];
intArray[0] = 2;
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        int[] intArray = new int[5];
        intArray[0] = 2;
        MethodWriter.getNewOffset(intArray, intArray, label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: int[] intArray = new int[5] isAssignment: false Array: new int[5] Elements: []
lengths: [5] [5]
Their type are: class [I int[]
statement is: intArray[0] = 2, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:2 Ct is: intArray[0] = 2
target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
int[] intArray = new int[5];
int _int = 2;
intArray[0] = _int;
MethodWriter.getNewOffset(intArray, intArray, label);

statement is: org.evosuite.testcase.statements.ArrayStatement@78a7773 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[7]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-4086), 994)
test data is: int[] intArray = new int[7];
MethodWriter.getNewOffset(intArray, intArray, (-4086), 994);

** It was a parseable test case! 
* Computation finished
