* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.MethodWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 6239
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.MethodWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2786
* Using seed 1710242331917
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 320 / 2786
[Progress:>                             2%] [Cov:===>                               11%][Progress:>                             3%] [Cov:===>                               11%][Progress:>                             3%] [Cov:====>                              13%][Progress:=>                            6%] [Cov:=====>                             15%][Progress:=>                            6%] [Cov:======>                            19%][Progress:=>                            6%] [Cov:========>                          24%][Progress:=>                            6%] [Cov:========>                          25%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:============>                      36%][Progress:===>                          10%] [Cov:============>                      36%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     39%][Progress:===>                          10%] [Cov:=============>                     39%][Progress:===>                          10%] [Cov:==============>                    40%][Progress:===>                          10%] [Cov:==============>                    40%][Progress:===>                          10%] [Cov:==============>                    42%][Progress:===>                          11%] [Cov:==============>                    42%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:================>                  46%][Progress:===>                          11%] [Cov:================>                  46%][Progress:===>                          12%] [Cov:================>                  46%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:=================>                 49%][Progress:===>                          12%] [Cov:=================>                 49%][Progress:===>                          12%] [Cov:=================>                 49%][Progress:===>                          13%] [Cov:=================>                 49%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 50%][Progress:===>                          13%] [Cov:=================>                 51%][Progress:===>                          13%] [Cov:=================>                 51%][Progress:===>                          13%] [Cov:==================>                52%][Progress:====>                         14%] [Cov:==================>                52%][Progress:====>                         14%] [Cov:==================>                53%][Progress:====>                         14%] [Cov:==================>                53%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:===================>               55%][Progress:====>                         15%] [Cov:===================>               55%][Progress:====>                         15%] [Cov:===================>               55%][Progress:====>                         15%] [Cov:===================>               55%][Progress:====>                         15%] [Cov:===================>               56%][Progress:====>                         15%] [Cov:===================>               56%][Progress:====>                         15%] [Cov:===================>               56%][Progress:====>                         15%] [Cov:===================>               56%][Progress:=====>                        18%] [Cov:===================>               56%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        18%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:=====>                        19%] [Cov:===================>               57%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:=====================>             60%][Progress:======>                       22%] [Cov:=====================>             61%][Progress:======>                       23%] [Cov:=====================>             61%][Progress:=======>                      25%] [Cov:=====================>             61%][Progress:=======>                      25%] [Cov:=====================>             61%][Progress:=======>                      25%] [Cov:=====================>             61%][Progress:=======>                      25%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:========>                     27%] [Cov:=====================>             61%][Progress:========>                     27%] [Cov:=====================>             61%][Progress:========>                     27%] [Cov:=====================>             61%][Progress:========>                     27%] [Cov:=====================>             61%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     27%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     28%] [Cov:=====================>             62%][Progress:========>                     29%] [Cov:=====================>             62%][Progress:========>                     29%] [Cov:=====================>             62%][Progress:=========>                    31%] [Cov:=====================>             62%][Progress:=========>                    31%] [Cov:=====================>             62%][Progress:=========>                    31%] [Cov:=====================>             62%][Progress:=========>                    31%] [Cov:=====================>             62%][Progress:=========>                    32%] [Cov:=====================>             62%][Progress:=========>                    32%] [Cov:=====================>             62%][Progress:=========>                    32%] [Cov:=====================>             62%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    33%] [Cov:======================>            63%][Progress:=========>                    33%] [Cov:======================>            63%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  37%] [Cov:======================>            65%][Progress:===========>                  38%] [Cov:======================>            65%][Progress:===========>                  38%] [Cov:======================>            65%][Progress:===========>                  38%] [Cov:======================>            65%][Progress:===========>                  38%] [Cov:======================>            65%][Progress:============>                 40%] [Cov:======================>            65%][Progress:============>                 40%] [Cov:======================>            65%][Progress:============>                 40%] [Cov:=======================>           66%][Progress:============>                 41%] [Cov:=======================>           66%][Progress:============>                 41%] [Cov:=======================>           66%][Progress:============>                 43%] [Cov:=======================>           66%][Progress:============>                 43%] [Cov:=======================>           66%][Progress:============>                 43%] [Cov:=======================>           66%][Progress:============>                 43%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           66%][Progress:=============>                44%] [Cov:=======================>           68%][Progress:=============>                44%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:=======================>           68%][Progress:=============>                46%] [Cov:=======================>           68%][Progress:=============>                46%] [Cov:=======================>           68%][Progress:=============>                46%] [Cov:=======================>           68%][Progress:==============>               48%] [Cov:=======================>           68%][Progress:==============>               48%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:==============>               49%] [Cov:=======================>           68%][Progress:===============>              52%] [Cov:=======================>           68%][Progress:===============>              52%] [Cov:=======================>           68%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          69%][Progress:=================>            57%] [Cov:========================>          69%][Progress:=================>            57%] [Cov:========================>          69%][Progress:=================>            57%] [Cov:========================>          69%][Progress:=================>            57%] [Cov:========================>          69%][Progress:=================>            57%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:==================>           61%] [Cov:========================>          69%][Progress:===================>          64%] [Cov:========================>          69%][Progress:===================>          64%] [Cov:========================>          69%][Progress:===================>          66%] [Cov:========================>          69%][Progress:===================>          66%] [Cov:========================>          69%][Progress:===================>          66%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         67%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:====================>         68%] [Cov:========================>          69%][Progress:=====================>        71%] [Cov:========================>          69%][Progress:=====================>        71%] [Cov:========================>          69%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   88%] [Cov:========================>          70%][Progress:==========================>   88%] [Cov:========================>          70%][Progress:==========================>   88%] [Cov:========================>          70%][Progress:==========================>   88%] [Cov:========================>          70%][Progress:===========================>  90%] [Cov:========================>          70%][Progress:===========================>  90%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:============================> 95%] [Cov:========================>          70%][Progress:============================> 95%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%]
* Search finished after 202s and 454 generations, 411575 statements, best individual has fitness: 965.0
* Generated before the refinement 114 tests with total length 735
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@edc7adf7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dda45b2a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@b890f048 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-8), "", "<init>", "<init>", arg5, false, false)
statement is: visitCode()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitCode()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 10, "", "getRandomNumber", "getRandomNumber", stringArray, false, false);
        methodWriter.visitCode();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f015b7b
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed27587d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 10, "", "getRandomNumber", "getRandomNumber", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitCode() target is: methodWriter method is: visitCode()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitCode()V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 10;
String string = "";
String string = "getRandomNumber";
String string = "getRandomNumber";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitCode();

statement is: org.evosuite.testcase.statements.ArrayStatement@9719f1d4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: writeShort([BII)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.writeShort(arg0, 2, (-1803))
test data is: byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[8];
        MethodWriter.writeShort(byteArray, 2, ((short) (-1803)));
    }
}
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: MethodWriter.writeShort(byteArray, 2, ((short) (-1803))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.writeShort(byteArray, 2, ((short) (-1803))) target is: MethodWriter method is: writeShort(byte[],int,short)
Matched Method is: writeShort([BII)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[8];
int _int = 2;
int _int = null;
MethodWriter.writeShort(byteArray, _int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@3a447d24 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2abe388c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r4Tgh!0hQt!;@\"onI"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", arg5, false, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "username";
        stringArray[1] = "password";
        stringArray[2] = "admin";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
        methodWriter.visitAnnotationDefault();
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "username", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"username" Ct is: stringArray[0] = "username"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@31c06e47
statement is: stringArray[1] = "password", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"password" Ct is: stringArray[1] = "password"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d677d933
statement is: stringArray[2] = "admin", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"admin" Ct is: stringArray[2] = "admin"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@32166a05
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "username"
* this is vulnerable: String string = "password"
TestCase is: String[] stringArray = new String[1];
String string = "username";
String string = "password";
String string = "admin";
int _int = 16777216;
String string = "G.tPVT_";
String string = "r4Tgh!0hQt!;@\"onI";
String string = "hzgl";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@37c9ab14 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f2124290 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "~33'$~gY+"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c7066cd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Htz"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", arg5, false, false)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
        methodWriter.visitEnd();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8913891a
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4a0d63a9
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitEnd() target is: methodWriter method is: visitEnd()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitEnd()V
* this is vulnerable: String string = "abc"
* this is vulnerable: String string = "def"
TestCase is: String[] stringArray = new String[2];
String string = "abc";
String string = "def";
int _int = 2;
String string = "kxoM,hErWC{y";
String string = "kxoM,hErWC{y";
String string = "iSm";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
((MethodWriter) string).visitEnd();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false)
test data is: ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "Ljava/lang/Object;", "methodName", "(Ljava/lang/String;)V", ((String[]) (null)), false, false);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "Ljava/lang/Object;", "methodName", "(Ljava/lang/String;)V", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 2002;
String string = "Ljava/lang/Object;";
String string = "methodName";
String string = "(Ljava/lang/String;)V";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.evosuite.testcase.statements.ArrayStatement@c4440610 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2002, "z", "StackMapTable", "", arg5, false, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(2002, "z")
test data is: ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        stringArray[2] = "Charlie";
        stringArray[3] = "David";
        stringArray[4] = "Eve";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
        methodWriter.visitTypeInsn(2002, "z");
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[5] Elements: []
lengths: [0] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Charlie", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Charlie" Ct is: stringArray[2] = "Charlie"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "David", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"David" Ct is: stringArray[3] = "David"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Eve", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Eve" Ct is: stringArray[4] = "Eve"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(2002, "z"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(2002, "z") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
int _int = 2002;
String string = "z";
String string = "StackMapTable";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2002;
String string = "z";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@a8646f7f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@94fb5c18 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2e9ea38c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "<init>", "<init>", (String) null, arg5, false, true)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "Deprecated";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", ((String) (null)), stringArray, false, true);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bf5d6bec
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@72b505ef
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", ((String) (null)), stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "Deprecated";
int _int = 1;
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3))
statement is: org.evosuite.testcase.statements.ArrayStatement@c2154df type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg5, true, true)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, (-3), arg4, (-2), arg4)
test data is: ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 171, "main", "main", "(Ljava/lang/String;)V", stringArray, true, true);
        methodWriter.visitFrame(2, 0, stringArray, -1, null);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 171, "main", "main", "(Ljava/lang/String;)V", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(2, 0, stringArray, -1, null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 0, stringArray, -1, null) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,<unknown>)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 5
i 3 Parameters size() 2 Num of Method Parameters: 5
i 4 Parameters size() 2 Num of Method Parameters: 5
TestCase is: int _int = 171;
String string = "main";
String string = "main";
String string = "(Ljava/lang/String;)V";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 2;
int _int = 0;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@16dac6ed type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@aca06975 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@387dc8fa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitParameterAnnotation = (AnnotationWriter)methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";// A long, random string to test the maximum length of a string in a class file.

        stringArray[1] = "Deprecated";
        MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
        methodWriter.visitParameterAnnotation(-1863, "Ljava/lang/Synthetic;", false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"// A long, random string to test the maximum length of a string in a class file.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABCDEFGHIJKLMNOPQRSTUVWXYZ" Ct is: stringArray[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"// A long, random string to test the maximum length of a string in a class file.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@73a04220
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c64acfb4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitParameterAnnotation(-1863, "Ljava/lang/Synthetic;", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitParameterAnnotation(-1863, "Ljava/lang/Synthetic;", false) target is: methodWriter method is: visitParameterAnnotation(int,java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
i 2 Parameters size() 2 Num of Method Parameters: 3
* this is vulnerable: String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String string = "Deprecated";
int _int = 12;
String string = "";
String string = "Signature";
String string = "Deprecated";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777252)
statement is: org.evosuite.testcase.statements.ArrayStatement@d95db4b1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e88c7fe3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "&v.Mc#>FR"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6ffb6a8f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "&v.Mc#>FR"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("&v.Mc#>FR")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(292552704)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Lorem ipsum dolor sit amet";
        stringArray[1] = "consectetur adipiscing elit";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", stringArray, false, false);
        Attribute attribute = new Attribute("Ut enim ad minim veniam");
        methodWriter.visitAttribute(attribute);
        ByteVector byteVector = new ByteVector(292552704);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Lorem ipsum dolor sit amet", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Lorem ipsum dolor sit amet" Ct is: stringArray[0] = "Lorem ipsum dolor sit amet"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6f40507b
statement is: stringArray[1] = "consectetur adipiscing elit", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"consectetur adipiscing elit" Ct is: stringArray[1] = "consectetur adipiscing elit"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c88007c3
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("Ut enim ad minim veniam"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: ByteVector byteVector = new ByteVector(292552704), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "Lorem ipsum dolor sit amet"
* this is vulnerable: String string = "consectetur adipiscing elit"
TestCase is: String[] stringArray = new String[2];
String string = "Lorem ipsum dolor sit amet";
String string = "consectetur adipiscing elit";
int _int = 2;
String string = "Lorem ipsum dolor sit amet";
String string = "consectetur adipiscing elit";
String string = "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "Ut enim ad minim veniam";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 292552704;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@9016d5cf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6fe340b2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P7$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a319889a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P7$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 1, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        stringArray[2] = "Java";
        stringArray[3] = "Programming";
        stringArray[4] = "Languages";
        MethodWriter methodWriter = new MethodWriter(classWriter, 10, "Hello", "World", "Java", stringArray, false, false);
        methodWriter.visitFrame(5, 1, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[5] Elements: []
lengths: [2] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5878e72
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e769934e
statement is: stringArray[2] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[2] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5878e72
statement is: stringArray[3] = "Programming", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Programming" Ct is: stringArray[3] = "Programming"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5878e72
statement is: stringArray[4] = "Languages", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Languages" Ct is: stringArray[4] = "Languages"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b5878e72
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 10, "Hello", "World", "Java", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(5, 1, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(5, 1, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 10;
String string = "Hello";
String string = "World";
String string = "Java";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 5;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2253))
statement is: org.evosuite.testcase.statements.ArrayStatement@fd7998e6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a7de4679 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P3$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c19dd7a1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P3$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@3318af86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[4]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), 1, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "someMethod", "someOtherMethod" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -1, ";P3$", ";P3$", ";P3$", stringArray, false, false);
        Object[] objectArray = new Object[4];
        methodWriter.visitFrame(-1, 1, objectArray, 2, objectArray);
    }
}
statement is: String[] stringArray = new String[]{ "someMethod", "someOtherMethod" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "someMethod", "someOtherMethod" } Elements: ["someMethod", "someOtherMethod"]
lengths: [2] []
Dimension: [] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new String[]{ "someMethod", "someOtherMethod" } Elements: ["someMethod", "someOtherMethod"]
lengths: [4] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1, ";P3$", ";P3$", ";P3$", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Object[4] Elements: []
lengths: [2] [4]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [4] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new Object[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.Object; Object[]
statement is: methodWriter.visitFrame(-1, 1, objectArray, 2, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, 1, objectArray, 2, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
TestCase is: String string = ";P3$";
String[] stringArray = ";P3$";
String string = ";P3$";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 2;
Object[] objectArray = null;
((MethodWriter) _boolean).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@8a4b0144 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6c63a47 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P7$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ff1d2138 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P7$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@6e452444 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[4]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame((-1), (-1), arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "foo";
        stringArray[1] = "bar";
        MethodWriter methodWriter = new MethodWriter(classWriter, 10, "baz", "qux", "foobar", stringArray, false, false);
        Object[] objectArray = new Object[4];
        methodWriter.visitFrame(-1, -1, objectArray, 2, objectArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "foo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"foo" Ct is: stringArray[0] = "foo"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@63f36ff1
statement is: stringArray[1] = "bar", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"bar" Ct is: stringArray[1] = "bar"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6070a5c7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 10, "baz", "qux", "foobar", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Object[4] Elements: []
lengths: [2] [4]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [4] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new Object[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.Object; Object[]
statement is: methodWriter.visitFrame(-1, -1, objectArray, 2, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(-1, -1, objectArray, 2, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 3 Parameters size() 3 Num of Method Parameters: 5
i 4 Parameters size() 3 Num of Method Parameters: 5
* this is vulnerable: String string = "foo"
* this is vulnerable: String string = "bar"
TestCase is: String[] stringArray = new String[2];
String string = "foo";
String string = "bar";
int _int = 10;
String string = "baz";
String string = "qux";
String string = "foobar";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Object[] objectArray = new Object[4];
int _int = 2;
int _int = null;
Object[] objectArray = null;
((MethodWriter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@6ea8411b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc4ec8c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@b16aa0d7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(267, (-1105), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Test Data 1";// Improved test data

        stringArray[1] = "Test Data 2";// Improved test data

        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
        methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray);
        methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Test Data 1"// Improved test data
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test Data 1" Ct is: stringArray[0] = "Test Data 1"// Improved test data

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c65cf3c3
statement is: stringArray[1] = "Test Data 2"// Improved test data
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test Data 2" Ct is: stringArray[1] = "Test Data 2"// Improved test data

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b24c12c7
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
statement is: methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "Test Data 1"
* this is vulnerable: String string = "Test Data 2"
TestCase is: String[] stringArray = new String[2];
String string = "Test Data 1";
String string = "Test Data 2";
int _int = 16777186;
String string = "";
String string = "-&s6hYw):K";
String string = "";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 16777186;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);
int _int = 267;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@2cbe1e6a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8a86a064 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1ea117b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(76, "")
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(267, (-1105), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "com.example.TestClass";
        stringArray[1] = "testMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "com.example.TestClass", "testMethod", stringArray, true, false);
        methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray);
        methodWriter.visitTypeInsn(76, "java.lang.String");
        methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.TestClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.TestClass" Ct is: stringArray[0] = "com.example.TestClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@706d4f94
statement is: stringArray[1] = "testMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"testMethod" Ct is: stringArray[1] = "testMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8bd91b58
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "com.example.TestClass", "testMethod", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(16777186, -1105, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
statement is: methodWriter.visitTypeInsn(76, "java.lang.String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(76, "java.lang.String") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
statement is: methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(267, -1105, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
* this is vulnerable: String string = "com.example.TestClass"
* this is vulnerable: String string = "testMethod"
TestCase is: String[] stringArray = new String[2];
String string = "com.example.TestClass";
String string = "testMethod";

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4096)
statement is: org.evosuite.testcase.statements.ArrayStatement@a6f11f02 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d291bfc2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Stac\"k;ap"
statement is: org.evosuite.testcase.statements.AssignmentStatement@14080b4c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Stac\"k;ap"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, 1, arg4, 4096, arg4)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(3, 891, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "MyClass";
        stringArray[1] = "myMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 3, "MyClass", "myMethod", "void", stringArray, false, false);
        methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
        methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MyClass" Ct is: stringArray[0] = "MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5bdc919e
statement is: stringArray[1] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[1] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bc6d471e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 3, "MyClass", "myMethod", "void", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: methodWriter.visitFrame(3, 891, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(3, 891, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "MyClass"
* this is vulnerable: String string = "myMethod"
TestCase is: String[] stringArray = new String[2];
String string = "MyClass";
String string = "myMethod";
int _int = 3;
String string = "MyClass";
String string = "myMethod";
String string = "void";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 3;
int _int = 1;
int _int = 4096;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 3;
int _int = 891;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2168))
statement is: org.evosuite.testcase.statements.ArrayStatement@fbc78438 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6d7290b5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a09695f3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@126a6d1f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@897dca8b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@28494f30 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2168), "", "", "", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(4, (-2168), arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "ThisIsATest";
        stringArray[1] = "ThisIsAnotherTest";
        stringArray[2] = "ThisIsYetAnotherTest";
        stringArray[3] = "ThisIsTheLastTest";
        stringArray[4] = "ThisIsTheFinalTest";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2168, "", "", "", stringArray, false, false);
        methodWriter.visitFrame(4, -2168, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ThisIsATest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsATest" Ct is: stringArray[0] = "ThisIsATest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c303d9ab
statement is: stringArray[1] = "ThisIsAnotherTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsAnotherTest" Ct is: stringArray[1] = "ThisIsAnotherTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c20cf511
statement is: stringArray[2] = "ThisIsYetAnotherTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsYetAnotherTest" Ct is: stringArray[2] = "ThisIsYetAnotherTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@25e9e1e5
statement is: stringArray[3] = "ThisIsTheLastTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsTheLastTest" Ct is: stringArray[3] = "ThisIsTheLastTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@74976e4c
statement is: stringArray[4] = "ThisIsTheFinalTest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsTheFinalTest" Ct is: stringArray[4] = "ThisIsTheFinalTest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a1004140
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2168, "", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(4, -2168, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(4, -2168, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 7, type org.objectweb.asm.jip.MethodWriterindex is: 11
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
* this is vulnerable: String string = "ThisIsATest"
* this is vulnerable: String string = "ThisIsAnotherTest"
* this is vulnerable: String string = "ThisIsYetAnotherTest"
* this is vulnerable: String string = "ThisIsTheLastTest"
* this is vulnerable: String string = "ThisIsTheFinalTest"
TestCase is: String[] stringArray = new String[5];
String string = "ThisIsATest";
String string = "ThisIsAnotherTest";
String string = "ThisIsYetAnotherTest";
String string = "ThisIsTheLastTest";
String string = "ThisIsTheFinalTest";
String string = "";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 4;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777229)
statement is: org.evosuite.testcase.statements.ArrayStatement@66a36e83 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@14c6cdb4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@af6d9809 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 0, "L", "L", "L", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(0, 1, arg4, 1, arg4)
test data is: ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "Deprecated";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
        methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd140a46
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@42d47f8e
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(0, 1, stringArray, 1, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(0, 1, stringArray, 1, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "Deprecated";
int _int = 0;
String string = "L";
String string = "L";
String string = "L";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 0;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2253))
statement is: org.evosuite.testcase.statements.ArrayStatement@566978f8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f1db67dd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P3$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9a7c783b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P3$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg5, false, false)
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 1, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a test";
        stringArray[1] = "Another test";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2253, "test", "test", "test", stringArray, false, false);
        methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test" Ct is: stringArray[0] = "This is a test"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@47da25ce
statement is: stringArray[1] = "Another test", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another test" Ct is: stringArray[1] = "Another test"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@666d4321
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2253, "test", "test", "test", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFrame(1, 1, stringArray, 2, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 1, stringArray, 2, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "This is a test"
* this is vulnerable: String string = "Another test"
TestCase is: String[] stringArray = new String[2];
String string = "This is a test";
String string = "Another test";
String string = "test";
String string = "test";
String string = "test";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3))
statement is: org.evosuite.testcase.statements.ArrayStatement@63b962de type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg5, true, true)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn((-3))
test data is: ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitInsn((-3));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1000, "myMethodName", "myMethodDescription", "myMethodSignature", stringArray, true, true);
        methodWriter.visitInsn(255);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1000, "myMethodName", "myMethodDescription", "myMethodSignature", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(255), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(255) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitInsn(I)V
TestCase is: int _int = 1000;
String string = "myMethodName";
String string = "myMethodDescription";
String string = "myMethodSignature";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 255;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@a2d3c36c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@32e02ac5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "'P;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f94888cc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "'P;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "'P;$", "-&s6hYw):", "'P;$", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(1)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "My name is John";
        stringArray[1] = "I am 30 years old";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "My name is John", "-&s6hYw):", "I am 30 years old", stringArray, true, false);
        methodWriter.visitInsn(1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "My name is John", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"My name is John" Ct is: stringArray[0] = "My name is John"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1e9f7201
statement is: stringArray[1] = "I am 30 years old", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"I am 30 years old" Ct is: stringArray[1] = "I am 30 years old"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed1a3f63
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "My name is John", "-&s6hYw):", "I am 30 years old", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(1) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitInsn(I)V
* this is vulnerable: String string = "My name is John"
* this is vulnerable: String string = "I am 30 years old"
TestCase is: String[] stringArray = new String[2];
String string = "My name is John";
String string = "I am 30 years old";
String string = "My name is John";
String string = "-&s6hYw):";
String string = "I am 30 years old";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 1;
((MethodWriter) string).visitInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777229)
statement is: org.evosuite.testcase.statements.ArrayStatement@f1b8f5f2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3d5d07a9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@ed3bd99f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false)
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(191)
test data is: ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 0xfffffff, "", "-&s6hYw):K", "", stringArray, false, false);
        methodWriter.visitInsn(AASTORE, "Ljava/lang/String;->length()");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@436d7c66
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@11fafda0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0xfffffff, "", "-&s6hYw):K", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(AASTORE, "Ljava/lang/String;->length()"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(AASTORE, "Ljava/lang/String;->length()") target is: methodWriter method is: visitInsn(java.lang.String)
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 268435455;
String string = "";
String string = "-&s6hYw):K";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@f1e419fc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@199ecc85 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9adb8025 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P;$", "-&s6hYw):", ";P;$", arg5, true, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn((-2268), 90)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIntInsn((-2268), 90);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "Goodbye, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, 5, "main", "(I)V", null, stringArray, true, false);
        methodWriter.visitIntInsn(5, 90);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd1825bf
statement is: stringArray[1] = "Goodbye, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye, World!" Ct is: stringArray[1] = "Goodbye, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f20e30e9
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 5, "main", "(I)V", null, stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(5, 90), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(5, 90) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIntInsn(II)V
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "Goodbye, World!"
TestCase is: String[] stringArray = new String[2];
String string = "Hello, World!";
String string = "Goodbye, World!";
int _int = 5;
String string = "main";
String string = "(I)V";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 5;
int _int = 90;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@f1fa1efe type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "Htz", "Xg)AS", "Xg)AS", arg5, true, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(188, 74)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banana", "Orange" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
        methodWriter.visitIntInsn(188, 74);
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banana", "Orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Apple", "Banana", "Orange" } Elements: ["Apple", "Banana", "Orange"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(188, 74), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(188, 74) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitIntInsn(II)V
TestCase is: int _int = 16777241;
String string = "Htz";
String string = "Xg)AS";
String string = "Xg)AS";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 188;
int _int = 74;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@5de9e051 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 276, "H", "Xg)AS", "Code", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX")
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(1, 276)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
        methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");// Changed the field name from "Htz" to "happyTurtle" and the value from "y+N3b1iX" to "🐢"

        methodWriter.visitIntInsn(1, 276);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX")// Changed the field name from "Htz" to "happyTurtle" and the value from "y+N3b1iX" to "🐢"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX")// Changed the field name from "Htz" to "happyTurtle" and the value from "y+N3b1iX" to "🐢"
 target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.visitIntInsn(1, 276), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(1, 276) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIntInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 276;
String string = "H";
String string = "Xg)AS";
String string = "Code";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
String string = "Xg)AS";
String string = "Htz";
String string = "y+N3b1iX";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 1;
int _int = 276;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: org.evosuite.testcase.statements.ArrayStatement@4d8f4e4f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@be8455a1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";"
statement is: org.evosuite.testcase.statements.AssignmentStatement@42aaff57 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "boolean"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, ";", "", ";", arg5, false, false)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(17, 17)
test data is: ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = ";";
        stringArray[1] = "boolean";
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
        methodWriter.visitIntInsn(17, 17);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = ";", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:";" Ct is: stringArray[0] = ";"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@47696d43
statement is: stringArray[1] = "boolean", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"boolean" Ct is: stringArray[1] = "boolean"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@77cca87f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(17, 17), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(17, 17) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIntInsn(II)V
* this is vulnerable: String string = ";"
* this is vulnerable: String string = "boolean"
TestCase is: String[] stringArray = new String[2];
String string = ";";
String string = "boolean";
int _int = 1;
String string = ";";
String string = "";
String string = ";";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 17;
int _int = 17;
((MethodWriter) string).visitIntInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@3af4d7c2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2bb5e1da type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f5ca9b24 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "L"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(169, 41)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
        methodWriter.visitVarInsn(169, 41);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f999b79b
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1e762143
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(169, 41), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(169, 41) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Bob";
int _int = 16777186;
String string = "L";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 169;
int _int = 41;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@57de0412 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(22, 2)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
        methodWriter.visitVarInsn(22, 100);// Load the integer value 100 onto the stack }}

    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(22, 100)// Load the integer value 100 onto the stack }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(22, 100)// Load the integer value 100 onto the stack }}
 target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitVarInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 16777241;
String string = "XH+l";
String string = "Xg)AS";
String string = "Xg)AS";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 22;
int _int = 100;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@56ac2482 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-883), "", "')$'o}k +1R-", "", arg5, false, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(24, 1)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -883, "", "')$'o}k +1R-", "", stringArray, false, true);
        methodWriter.visitVarInsn(24, 1);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -883, "", "')$'o}k +1R-", "", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(24, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(24, 1) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitVarInsn(II)V
TestCase is: String string = "";
String[] stringArray = "')$'o}k +1R-";
String string = "";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, true);
int _int = 24;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777249)
statement is: org.evosuite.testcase.statements.ArrayStatement@decf7fa1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1dd4f3b6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Htz"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e987a360 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "AnnotationDefault"
statement is: org.evosuite.testcase.statements.AssignmentStatement@bf7d98cf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@93bef042 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "Htz"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d88ff063 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a7585875 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "Htz"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8ebabcf3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "')'o}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4fa7095b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = "Htz"
statement is: org.evosuite.testcase.statements.AssignmentStatement@34f22706 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[8] = "Htz"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(55, 16777249)
test data is: ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[9];
        stringArray[0] = "Htz";
        stringArray[1] = "AnnotationDefault";
        stringArray[2] = "\"";
        stringArray[3] = "Htz";
        stringArray[4] = "\"";
        stringArray[5] = "Htz";
        stringArray[6] = "789)o}k +1R-";
        stringArray[7] = "Htz";
        stringArray[8] = "Htz";
        MethodWriter methodWriter = new MethodWriter(classWriter, 33, "789)o}k +1R-", "789)o}k +1R-", "\"", stringArray, true, false);
        methodWriter.visitVarInsn(55, 33);
    }
}
statement is: String[] stringArray = new String[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[9] Elements: []
lengths: [9] [9]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Htz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Htz" Ct is: stringArray[0] = "Htz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@37f214d9
statement is: stringArray[1] = "AnnotationDefault", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"AnnotationDefault" Ct is: stringArray[1] = "AnnotationDefault"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e5a44f20
statement is: stringArray[2] = "\"", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"" Ct is: stringArray[2] = "\""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@de28ea8f
statement is: stringArray[3] = "Htz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Htz" Ct is: stringArray[3] = "Htz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@32d714e3
statement is: stringArray[4] = "\"", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"\"" Ct is: stringArray[4] = "\""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@98475387
statement is: stringArray[5] = "Htz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Htz" Ct is: stringArray[5] = "Htz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@755a6d61
statement is: stringArray[6] = "789)o}k +1R-", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"789)o}k +1R-" Ct is: stringArray[6] = "789)o}k +1R-"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a319dc63
statement is: stringArray[7] = "Htz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Htz" Ct is: stringArray[7] = "Htz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@146e6fb3
statement is: stringArray[8] = "Htz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[8] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Htz" Ct is: stringArray[8] = "Htz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a356d260
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 33, "789)o}k +1R-", "789)o}k +1R-", "\"", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(55, 33), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(55, 33) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 11, type org.objectweb.asm.jip.MethodWriterindex is: 16
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "Htz"
* this is vulnerable: String string = "AnnotationDefault"
* this is vulnerable: String string = "\""
* this is vulnerable: String string = "Htz"
* this is vulnerable: String string = "\""
* this is vulnerable: String string = "Htz"
* this is vulnerable: String string = "789)o}k +1R-"
* this is vulnerable: String string = "Htz"
* this is vulnerable: String string = "Htz"
TestCase is: String[] stringArray = new String[9];
String string = "Htz";
String string = "AnnotationDefault";
String string = "\"";
String string = "Htz";
String string = "\"";
String string = "Htz";
String string = "789)o}k +1R-";
String string = "Htz";
String string = "Htz";
int _int = 33;
String string = "789)o}k +1R-";
String string = "789)o}k +1R-";
String string = "\"";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 55;
int _int = 33;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@63a3307f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cfff007c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@f2bdc3ff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@70c4034f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1fbab623 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@195b01b9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@44b0e184 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ee733979 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@62f21178 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = "')'o.]}k +1R-"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(57, 187)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "This is a sample test case.";
        stringArray[1] = "This is another sample test case.";
        stringArray[2] = "This is yet another sample test case.";
        stringArray[3] = "This is a fourth sample test case.";
        stringArray[4] = "This is a fifth sample test case.";
        stringArray[5] = "This is a sixth sample test case.";
        stringArray[6] = "This is a seventh sample test case.";
        stringArray[7] = "This is an eighth sample test case.";
        MethodWriter methodWriter = new MethodWriter(classWriter, 70, "This is the first parameter.", "This is the second parameter.", "This is the third parameter.", stringArray, true, false);
        methodWriter.visitVarInsn(57, 187);
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample test case." Ct is: stringArray[0] = "This is a sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@39b67aa
statement is: stringArray[1] = "This is another sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another sample test case." Ct is: stringArray[1] = "This is another sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7b3b8f6
statement is: stringArray[2] = "This is yet another sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is yet another sample test case." Ct is: stringArray[2] = "This is yet another sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@90cb180e
statement is: stringArray[3] = "This is a fourth sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a fourth sample test case." Ct is: stringArray[3] = "This is a fourth sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2b60e0f6
statement is: stringArray[4] = "This is a fifth sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a fifth sample test case." Ct is: stringArray[4] = "This is a fifth sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cda27761
statement is: stringArray[5] = "This is a sixth sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sixth sample test case." Ct is: stringArray[5] = "This is a sixth sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b6475cf5
statement is: stringArray[6] = "This is a seventh sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a seventh sample test case." Ct is: stringArray[6] = "This is a seventh sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@428a014e
statement is: stringArray[7] = "This is an eighth sample test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is an eighth sample test case." Ct is: stringArray[7] = "This is an eighth sample test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c104285a
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 70, "This is the first parameter.", "This is the second parameter.", "This is the third parameter.", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(57, 187), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(57, 187) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 15
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "This is a sample test case."
* this is vulnerable: String string = "This is another sample test case."
* this is vulnerable: String string = "This is yet another sample test case."
* this is vulnerable: String string = "This is a fourth sample test case."
* this is vulnerable: String string = "This is a fifth sample test case."
* this is vulnerable: String string = "This is a sixth sample test case."
* this is vulnerable: String string = "This is a seventh sample test case."
* this is vulnerable: String string = "This is an eighth sample test case."
TestCase is: String[] stringArray = new String[8];
String string = "This is a sample test case.";
String string = "This is another sample test case.";
String string = "This is yet another sample test case.";
String string = "This is a fourth sample test case.";
String string = "This is a fifth sample test case.";
String string = "This is a sixth sample test case.";
String string = "This is a seventh sample test case.";
String string = "This is an eighth sample test case.";
int _int = 70;
String string = "This is the first parameter.";
String string = "This is the second parameter.";
String string = "This is the third parameter.";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 57;
int _int = 187;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@ebb4b05b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@456b57f4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "W"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a4103d2a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(1, 1)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "A";
        stringArray[1] = ";P;$";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "A", "-&s6hYw):", "A", stringArray, true, false);
        methodWriter.visitVarInsn(1, 1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A" Ct is: stringArray[0] = "A"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e4a718e7
statement is: stringArray[1] = ";P;$", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:";P;$" Ct is: stringArray[1] = ";P;$"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@131fa900
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "A", "-&s6hYw):", "A", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(1, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(1, 1) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "A"
* this is vulnerable: String string = ";P;$"
TestCase is: String[] stringArray = new String[2];
String string = "A";
String string = ";P;$";
String string = "A";
String string = "-&s6hYw):";
String string = "A";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777245)
statement is: org.evosuite.testcase.statements.ArrayStatement@a36b2351 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b0dd05d8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a89c5d7c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(170, 2)
test data is: ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "Welcome to Java";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
        methodWriter.visitVarInsn(170, 2);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1743b29a
statement is: stringArray[1] = "Welcome to Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Welcome to Java" Ct is: stringArray[1] = "Welcome to Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fad8e0b6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(170, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(170, 2) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitVarInsn(II)V
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "Welcome to Java"
TestCase is: String[] stringArray = new String[2];
String string = "Hello, World!";
String string = "Welcome to Java";
int _int = 2;
String string = "Htz";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 170;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@2c28840b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777224, "", "')'o}k +1R-", "", arg5, false, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(54, 256)
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "This is a test method for testing the effects of using the MethodWriter class in Java.", "", stringArray, false, true);
        methodWriter.visitVarInsn(54, 256);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "This is a test method for testing the effects of using the MethodWriter class in Java.", "", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitVarInsn(54, 256), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(54, 256) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitVarInsn(II)V
TestCase is: String[] stringArray = new String[0];
int _int = 16777224;
String string = "";
String string = "This is a test method for testing the effects of using the MethodWriter class in Java.";
String string = "";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 54;
int _int = 256;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-779))
statement is: org.evosuite.testcase.statements.ArrayStatement@5677c6c8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "vX6B_-)w^]ZjDHjb")
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(132, 1172)
test data is: ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -779, "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
        methodWriter.visitVarInsn(132, 1172);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -779, "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitVarInsn(132, 1172), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitVarInsn(132, 1172) target is: methodWriter method is: visitVarInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitVarInsn(II)V
TestCase is: String[] stringArray = new String[0];
String string = "vX6B_-)w^]ZjDHjb";
String string = "')'o.]}k 1R-";
String string = "vX6B_-)w^]ZjDHjb";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
Label label = new Label();
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 132;
int _int = 1172;
((MethodWriter) string).visitVarInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@1a8ac862 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-883), "8", "')$'o}k +1R-", "8", arg5, false, true)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(2, "d>@v[F")
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -883, "8", "')$'o}k +1R-", "8", stringArray, false, true);
        methodWriter.visitTypeInsn(2, "d>@v[F");
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -883, "8", "')$'o}k +1R-", "8", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(2, "d>@v[F"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(2, "d>@v[F") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
TestCase is: String string = "8";
String[] stringArray = "')$'o}k +1R-";
String string = "8";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, true);
int _int = 2;
String string = "d>@v[F";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@c14d8d5e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@acafb69d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@67560cb3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@bab50dc6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3ac6c31a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d43a8736 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8aea0aec type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@901a20fc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "')'o.]}k +1R-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a8d8474c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = "')'o.]}k +1R-"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false)
statement is: visitTypeInsn(ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTypeInsn(187, "Signam3re")
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "This is a test description for the first test case.";
        stringArray[1] = "This is a test description for the second test case.";
        stringArray[2] = "This is a test description for the third test case.";
        stringArray[3] = "This is a test description for the fourth test case.";
        stringArray[4] = "This is a test description for the fifth test case.";
        stringArray[5] = "This is a test description for the sixth test case.";
        stringArray[6] = "This is a test description for the seventh test case.";
        stringArray[7] = "This is a test description for the eighth test case.";
        MethodWriter methodWriter = new MethodWriter(classWriter, 70, "TestClass", "testMethod", "void", stringArray, true, false);
        methodWriter.visitTypeInsn(187, "java/lang/String");
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test description for the first test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the first test case." Ct is: stringArray[0] = "This is a test description for the first test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@be5220d
statement is: stringArray[1] = "This is a test description for the second test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the second test case." Ct is: stringArray[1] = "This is a test description for the second test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a2e81b03
statement is: stringArray[2] = "This is a test description for the third test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the third test case." Ct is: stringArray[2] = "This is a test description for the third test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d4e8b950
statement is: stringArray[3] = "This is a test description for the fourth test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the fourth test case." Ct is: stringArray[3] = "This is a test description for the fourth test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ddbef203
statement is: stringArray[4] = "This is a test description for the fifth test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the fifth test case." Ct is: stringArray[4] = "This is a test description for the fifth test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a30b28ca
statement is: stringArray[5] = "This is a test description for the sixth test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the sixth test case." Ct is: stringArray[5] = "This is a test description for the sixth test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c3f330cc
statement is: stringArray[6] = "This is a test description for the seventh test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the seventh test case." Ct is: stringArray[6] = "This is a test description for the seventh test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@38f4d49d
statement is: stringArray[7] = "This is a test description for the eighth test case.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test description for the eighth test case." Ct is: stringArray[7] = "This is a test description for the eighth test case."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@701876c6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 70, "TestClass", "testMethod", "void", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTypeInsn(187, "java/lang/String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTypeInsn(187, "java/lang/String") target is: methodWriter method is: visitTypeInsn(int,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 10, type org.objectweb.asm.jip.MethodWriterindex is: 15
Matched Method is: visitTypeInsn(ILjava/lang/String;)V
* this is vulnerable: String string = "This is a test description for the first test case."
* this is vulnerable: String string = "This is a test description for the second test case."
* this is vulnerable: String string = "This is a test description for the third test case."
* this is vulnerable: String string = "This is a test description for the fourth test case."
* this is vulnerable: String string = "This is a test description for the fifth test case."
* this is vulnerable: String string = "This is a test description for the sixth test case."
* this is vulnerable: String string = "This is a test description for the seventh test case."
* this is vulnerable: String string = "This is a test description for the eighth test case."
TestCase is: String[] stringArray = new String[8];
String string = "This is a test description for the first test case.";
String string = "This is a test description for the second test case.";
String string = "This is a test description for the third test case.";
String string = "This is a test description for the fourth test case.";
String string = "This is a test description for the fifth test case.";
String string = "This is a test description for the sixth test case.";
String string = "This is a test description for the seventh test case.";
String string = "This is a test description for the eighth test case.";
int _int = 70;
String string = "TestClass";
String string = "testMethod";
String string = "void";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 187;
String string = "java/lang/String";
((MethodWriter) string).visitTypeInsn(_int, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@bc61a4fb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT")
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, 123456789, "TestMethod", "This is a test method.", "RZSW\"0~(==\"aBysT", stringArray, false, true);
        methodWriter.visitFieldInsn(218, "java/lang/Exception", "exceptions", "Ljava/util/List;");
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 123456789, "TestMethod", "This is a test method.", "RZSW\"0~(==\"aBysT", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(218, "java/lang/Exception", "exceptions", "Ljava/util/List;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(218, "java/lang/Exception", "exceptions", "Ljava/util/List;") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[0];
int _int = 123456789;
String string = "TestMethod";
String string = "This is a test method.";
String string = "RZSW\"0~(==\"aBysT";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 218;
String string = "java/lang/Exception";
String string = "exceptions";
String string = "Ljava/util/List;";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(251)
statement is: org.evosuite.testcase.statements.ArrayStatement@a06b468b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8eb2405b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c8992077 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "L"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 251, "L", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^")
test data is: ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "L";
        MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@135240a4
statement is: stringArray[1] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[1] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40daccd6
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "L"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "L";
int _int = 251;
String string = "L";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@8a5767b2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c52a7e42 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a281debe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated")
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "java.lang.StringBuilder";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
        methodWriter.visitFieldInsn(2, "java.lang.StringBuilder", "org.objectweb.asm.jip.ByteVector", "org.objectweb.asm.jip.ByteVector");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b08c7c61
statement is: stringArray[1] = "java.lang.StringBuilder", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.StringBuilder" Ct is: stringArray[1] = "java.lang.StringBuilder"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@195db8c4
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitFieldInsn(2, "java.lang.StringBuilder", "org.objectweb.asm.jip.ByteVector", "org.objectweb.asm.jip.ByteVector"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(2, "java.lang.StringBuilder", "org.objectweb.asm.jip.ByteVector", "org.objectweb.asm.jip.ByteVector") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "java.lang.StringBuilder"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "java.lang.StringBuilder";
int _int = 16777216;
String string = "<init>";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 2;
String string = "java.lang.StringBuilder";
String string = "org.objectweb.asm.jip.ByteVector";
String string = "org.objectweb.asm.jip.ByteVector";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@2849b1e1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b46e760f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6955377 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "L"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@")
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";// Changed the primitive value to a more descriptive example, such as "ABC"

        stringArray[1] = "L";// Changed the primitive value to a more descriptive example, such as "XYZ"

        MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L"// Changed the primitive value to a more descriptive example, such as "ABC"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"// Changed the primitive value to a more descriptive example, such as "ABC"

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cd9aa32c
statement is: stringArray[1] = "L"// Changed the primitive value to a more descriptive example, such as "XYZ"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[1] = "L"// Changed the primitive value to a more descriptive example, such as "XYZ"

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d7cdaf61
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "L"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "L";
int _int = 16777216;
String string = "<init>";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(553)
statement is: org.evosuite.testcase.statements.ArrayStatement@92552b52 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1639, "Hm/tz", "Hm/tz", "Hm/tz", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz")
test data is: ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
        methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: int _int = 1639;
String string = "Hm/tz";
String string = "Hm/tz";
String string = "Hm/tz";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 185;
String string = "Hm/tz";
String string = "Hm/tz";
String string = "Hm/tz";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@38a69116 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS")
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This is a sample string.", "Another string in the array." };
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
        methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
    }
}
statement is: String[] stringArray = new String[]{ "This is a sample string.", "Another string in the array." }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This is a sample string.", "Another string in the array." } Elements: ["This is a sample string.", "Another string in the array."]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: int _int = 16777241;
String string = "XH+l";
String string = "Xg)AS";
String string = "Xg)AS";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 168;
String string = "A?L";
String string = "Xg)AS";
String string = "Xg)AS";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777229)
statement is: org.evosuite.testcase.statements.ArrayStatement@1993cf45 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b55eb66 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@8928cac2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("", (-501))
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-")
test data is: ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "ABC123";
        stringArray[1] = "XYZ456";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("", -501);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC123", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC123" Ct is: stringArray[0] = "ABC123"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a2edbb8
statement is: stringArray[1] = "XYZ456", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ456" Ct is: stringArray[1] = "XYZ456"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@19918159
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("", -501), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("", -501) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "ABC123"
* this is vulnerable: String string = "XYZ456"
TestCase is: String[] stringArray = new String[2];
String string = "ABC123";
String string = "XYZ456";
int _int = 16777229;
String string = "";
String string = "-&s6hYw):K";
String string = "";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "";
int _int = null;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777212)
statement is: org.evosuite.testcase.statements.ArrayStatement@6cbe198f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "F6}A}w:N~hq(g)Z", "", arg5, false, false)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short")
test data is: ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "input1", "input2", "input3" };
        MethodWriter methodWriterA = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
        methodWriterA.visitMethodInsn(186, "testMethodA", "", "short");
    }
}
statement is: String[] stringArray = new String[]{ "input1", "input2", "input3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "input1", "input2", "input3" } Elements: ["input1", "input2", "input3"]
lengths: [0] []
statement is: MethodWriter methodWriterA = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriterA.visitMethodInsn(186, "testMethodA", "", "short"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriterA.visitMethodInsn(186, "testMethodA", "", "short") target is: methodWriterA method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
TestCase is: int _int = 1;
String string = "";
String string = "F6}A}w:N~hq(g)Z";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
int _int = 186;
String string = "testMethodA";
String string = "";
String string = "short";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@e6ea0c8c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b983031e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";CP;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@44587e7f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";CP;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(178, arg1)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello, World!";
        stringArray[1] = "Goodbye, World!";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Hello, World!", "-&s6hYw):", "Goodbye, World!", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitJumpInsn(178, label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, World!" Ct is: stringArray[0] = "Hello, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5308d5ea
statement is: stringArray[1] = "Goodbye, World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Goodbye, World!" Ct is: stringArray[1] = "Goodbye, World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3e354742
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Hello, World!", "-&s6hYw):", "Goodbye, World!", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(178, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(178, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: String string = "Goodbye, World!"
TestCase is: String[] stringArray = new String[2];
String string = "Hello, World!";
String string = "Goodbye, World!";
String string = "Hello, World!";
String string = "-&s6hYw):";
String string = "Goodbye, World!";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
int _int = 178;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@e54f0c68 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", arg5, true, true)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(167, arg1)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello, World!", "Goodbye, World!" };
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TestMethod", "(Ljava/lang/String;)V", "()V", stringArray, true, true);
        methodWriter.visitJumpInsn(167, label);
    }
}
statement is: String[] stringArray = new String[]{ "Hello, World!", "Goodbye, World!" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello, World!", "Goodbye, World!" } Elements: ["Hello, World!", "Goodbye, World!"]
lengths: [0] []
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TestMethod", "(Ljava/lang/String;)V", "()V", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(167, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(167, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
int _int = 16777241;
String string = "TestMethod";
String string = "(Ljava/lang/String;)V";
String string = "()V";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
int _int = 167;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@965319b9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XXH+l", "Xg)AS", "Xg)AS", arg5, true, false)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(168, arg1)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(168, arg1)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Jump to label", "Jump to another label" };
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
        methodWriter.visitJumpInsn(168, label);
        methodWriter.visitJumpInsn(168, new Label());
    }
}
statement is: String[] stringArray = new String[]{ "Jump to label", "Jump to another label" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Jump to label", "Jump to another label" } Elements: ["Jump to label", "Jump to another label"]
lengths: [0] []
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitJumpInsn(168, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(168, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitJumpInsn(168, new Label()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(168, new Label()) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
int _int = 16777241;
String string = "XXH+l";
String string = "Xg)AS";
String string = "Xg)AS";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
int _int = 168;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 168;
Label label = new Label();
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@8bbfc9e5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(2, arg1)
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -853, "", "\')\'o}k  \"+1R-", "", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
        methodWriter.visitJumpInsn(2, label);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -853, "", "\')\'o}k  \"+1R-", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitJumpInsn(2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitJumpInsn(2, label) target is: methodWriter method is: visitJumpInsn(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V
TestCase is: String[] stringArray = new String[0];
String string = "";
String string = "')'o}k  \"+1R-";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.evosuite.testcase.statements.ArrayStatement@88b046d1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.AssignmentStatement@31c6263f type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: label.status = (-1181)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banana", "Orange" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
        Label label = new Label();
        label.status = -1181;
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banana", "Orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Apple", "Banana", "Orange" } Elements: ["Apple", "Banana", "Orange"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.status = -1181, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: int _int = 2002;
String string = "-.TI|t";
String string = "ec";
String string = "!2:W uG.AP.nP9Fsrdv";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@1973cad1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, false, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@333fd111 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@510f26d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "')~o}k +1Rl", "", stringArray, false, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
        int[] intArray = new int[]{ 0, 1, 2 };
        Label[] labelArray = new Label[3];
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "')~o}k +1Rl", "", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: int[] intArray = new int[]{ 0, 1, 2 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 0, 1, 2 } Elements: [0, 1, 2]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 0, 1, 2 } Elements: [0, 1, 2]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new int[]{ 0, 1, 2 } Elements: [0, 1, 2]
lengths: [0] []
statement is: Label[] labelArray = new Label[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[3] Elements: []
lengths: [0] [3]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [3] Ct is: int[] intArray = new int[8] isAssignment: false Array: new Label[3] Elements: []
lengths: [8] [3]
Their type are: class [I Label[]
Dimension: [3] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[3] Elements: []
lengths: [0] [3]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
TestCase is: String string = "";
String[] stringArray = "')~o}k +1Rl";
String string = "";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@b5972709 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@56336d39 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r4Tgh!0hQt!;@\"onI"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        stringArray[1] = "The slow red turtle crawls under the big tree";
        stringArray[2] = "The fast blue bird flies over the small house";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", stringArray, "hzgl", false, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4599093f
statement is: stringArray[1] = "The slow red turtle crawls under the big tree", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The slow red turtle crawls under the big tree" Ct is: stringArray[1] = "The slow red turtle crawls under the big tree"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@43f9b99c
statement is: stringArray[2] = "The fast blue bird flies over the small house", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The fast blue bird flies over the small house" Ct is: stringArray[2] = "The fast blue bird flies over the small house"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5f82c79f
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", stringArray, "hzgl", false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog"
* this is vulnerable: String string = "The slow red turtle crawls under the big tree"
* this is vulnerable: String string = "The fast blue bird flies over the small house"
TestCase is: String[] stringArray = new String[1];
String string = "The quick brown fox jumps over the lazy dog";
String string = "The slow red turtle crawls under the big tree";
String string = "The fast blue bird flies over the small house";
Label label = new Label();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@91e690a9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5a427a83 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";CP;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@165e2ce4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";CP;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(";CP;$")
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Hello", "-&s6hYw):", "World", stringArray, true, false);
        methodWriter.visitLdcInsn("Hello");
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@933a23b4
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8c9585a8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Hello", "-&s6hYw):", "World", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn("Hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn("Hello") target is: methodWriter method is: visitLdcInsn(java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
String string = "Hello";
String string = "-&s6hYw):";
String string = "World";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
String string = "Hello";
((MethodWriter) string).visitLdcInsn(string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@950e8279 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@aa60c9ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@fffb49b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, true)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(1)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a sample string";
        stringArray[1] = "Another sample string";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
        methodWriter.visitLdcInsn(1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0] = "This is a sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f40677f1
statement is: stringArray[1] = "Another sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample string" Ct is: stringArray[1] = "Another sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9c788695
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(1) target is: methodWriter method is: visitLdcInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "This is a sample string"
* this is vulnerable: String string = "Another sample string"
TestCase is: String[] stringArray = new String[2];
String string = "This is a sample string";
String string = "Another sample string";
int _int = 16777186;
String string = "";
String string = "-&s6hYw):K";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, true);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@5e77ec86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9ed74801 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@84fd5b6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "L"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("L", 16777186)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(classWriter.COMPUTE_MAXS);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "L";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("L", 16777186);
        methodWriter.visitLdcInsn(COMPUTE_MAXS);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a2e39b44
statement is: stringArray[1] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[1] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@de34e5d1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("L", 16777186), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("L", 16777186) target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitLdcInsn(COMPUTE_MAXS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(COMPUTE_MAXS) target is: methodWriter method is: visitLdcInsn()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "L"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "L";
int _int = 16777186;
String string = "L";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "L";
int _int = 16777186;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@a3582e60 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d21948ec type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@c7c4f723 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f28e30e6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = 647
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false)
statement is: visitLdcInsn(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLdcInsn(1)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "ThisIsATest";
        stringArray[1] = "Deprecated";
        classWriter.index = 647;
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
        methodWriter.visitLdcInsn(1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ThisIsATest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ThisIsATest" Ct is: stringArray[0] = "ThisIsATest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c599227a
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ca7aca95
statement is: classWriter.index = 647, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLdcInsn(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLdcInsn(1) target is: methodWriter method is: visitLdcInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLdcInsn(Ljava/lang/Object;)V
* this is vulnerable: String string = "ThisIsATest"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "ThisIsATest";
String string = "Deprecated";
int _int = 1;
String string = "";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@59968468 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4a764476 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@eb06980d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", arg5, true, true)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(202, 1493)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Bob";
        MethodWriter methodWriter = new MethodWriter(classWriter, -975, "2tB)7S", "-&s6hYw):K", "Deprecated", stringArray, true, true);
        methodWriter.visitIincInsn(20202, 1493);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d7e8d2b6
statement is: stringArray[1] = "Bob", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob" Ct is: stringArray[1] = "Bob"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fbb99d56
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -975, "2tB)7S", "-&s6hYw):K", "Deprecated", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(20202, 1493), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(20202, 1493) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Bob"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Bob";
String string = "2tB)7S";
String string = "-&s6hYw):K";
String string = "Deprecated";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
int _int = 20202;
int _int = 1493;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@5bbf41fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@76c8e73c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b0b1a126 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P;$"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P;$", "-&s6hYw):", ";P;$", arg5, true, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-5549), (-1652))
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@a5b29283 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7f4a7250 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8225da8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(28, 28)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Alice";
        stringArray[1] = "Deprecated";
        MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
        methodWriter.visitIincInsn(28, 28);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Alice", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice" Ct is: stringArray[0] = "Alice"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed9aad6
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f126bde3
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(28, 28), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(28, 28) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitIincInsn(II)V
* this is vulnerable: String string = "Alice"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "Alice";
String string = "Deprecated";
int _int = 12;
String string = "";
String string = "Signature";
String string = "Deprecated";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 28;
int _int = 28;
((MethodWriter) string).visitIincInsn(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.evosuite.testcase.statements.ArrayStatement@f0ffe74 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b1a587bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "StackMap"
statement is: org.evosuite.testcase.statements.AssignmentStatement@721a547e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Code"
statement is: org.evosuite.testcase.statements.AssignmentStatement@48a0741c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "!2:W uG.AP.nP9Fsrdv"
statement is: org.evosuite.testcase.statements.AssignmentStatement@db0667ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "StackMap"
statement is: org.evosuite.testcase.statements.AssignmentStatement@45d29974 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "Code"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "Code", "Code", "StackMap", arg5, false, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("StackMap", 2002)
test data is: ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@c969389 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", arg5, true, true)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banana", "Orange" };
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banana", "Orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Apple", "Banana", "Orange" } Elements: ["Apple", "Banana", "Orange"]
lengths: [0] []
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@499e07ab type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "")
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "')~o}k +1Rl")
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "',~o}k +1Rl", "", stringArray, true, true);
        Label label = new Label();
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "',~o}k +1Rl", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[0];
String string = "";
String string = "',~o}k +1Rl";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, true);
Label label = new Label();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@b2b46413 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@648cc590 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@276c7fdf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "Signature", (String) null, arg4, arg4, 252)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "John Doe";
        stringArray[1] = "Jane Smith";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("firstName", "Ljava/lang/String;", ((String) (null)), label, label, 252);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "John Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"John Doe" Ct is: stringArray[0] = "John Doe"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f3edae69
statement is: stringArray[1] = "Jane Smith", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Jane Smith" Ct is: stringArray[1] = "Jane Smith"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@134c8447
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("firstName", "Ljava/lang/String;", ((String) (null)), label, label, 252), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("firstName", "Ljava/lang/String;", ((String) (null)), label, label, 252) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
* this is vulnerable: String string = "John Doe"
* this is vulnerable: String string = "Jane Smith"
TestCase is: String[] stringArray = new String[2];
String string = "John Doe";
String string = "Jane Smith";
int _int = 2;
String string = "Htz";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "firstName";
String string = "Ljava/lang/String;";
int _int = 252;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@debd2aa8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ea25d7f8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@2db237f8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", arg4, arg4, (-1899))
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Test data 1";
        stringArray[1] = "Test data 2";
        MethodWriter methodWriter = new MethodWriter(classWriter, ACC_PUBLIC, "Htz", "", "", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("", "", "", label, label, NO_INDEX);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Test data 1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test data 1" Ct is: stringArray[0] = "Test data 1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9bae9d70
statement is: stringArray[1] = "Test data 2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Test data 2" Ct is: stringArray[1] = "Test data 2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fdf712da
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, ACC_PUBLIC, "Htz", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("", "", "", label, label, NO_INDEX), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("", "", "", label, label, NO_INDEX) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
i 5 Parameters size() 5 Num of Method Parameters: 6
* this is vulnerable: String string = "Test data 1"
* this is vulnerable: String string = "Test data 2"
TestCase is: String[] stringArray = new String[2];
String string = "Test data 1";
String string = "Test data 2";
String string = "Htz";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@7d0bf0f0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ef16e660 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@57be8567 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", arg4, arg4, 28)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "JAVA";
        stringArray[1] = "DEVELOPER";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, METHOD_WRITER_INITIALIZATION, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "JAVA", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"JAVA" Ct is: stringArray[0] = "JAVA"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1dfe1ad1
statement is: stringArray[1] = "DEVELOPER", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEVELOPER" Ct is: stringArray[1] = "DEVELOPER"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@49f41d67
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, METHOD_WRITER_INITIALIZATION, "<init>", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "JAVA"
* this is vulnerable: String string = "DEVELOPER"
TestCase is: String[] stringArray = new String[2];
String string = "JAVA";
String string = "DEVELOPER";
Label label = new Label();
String string = "<init>";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777229)
statement is: org.evosuite.testcase.statements.ArrayStatement@a2d906ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3fc71e7d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6b8f44fa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "<init>", "-&s6hYw):K", "L", arg5, true, false)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", arg4, arg4, 16777229)
test data is: ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "A";
        stringArray[1] = "B";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
        methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A" Ct is: stringArray[0] = "A"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@23a26fd8
statement is: stringArray[1] = "B", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"B" Ct is: stringArray[1] = "B"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9e51ecaa
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
* this is vulnerable: String string = "A"
* this is vulnerable: String string = "B"
TestCase is: String[] stringArray = new String[2];
String string = "A";
String string = "B";
Label label = new Label();
int _int = 16777229;
String string = "<init>";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = ";P7$";
String string = "Deprecated";
String string = "L";
int _int = 16777229;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@5b2a84c4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a636b4e8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "W"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1b0f08b9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P7$"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", arg4, arg4, 1)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Java";
        stringArray[1] = ";P7$";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Java", "-&s6hYw):", "Java", stringArray, true, false);
        methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[0] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8c3224e3
statement is: stringArray[1] = ";P7$", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:";P7$" Ct is: stringArray[1] = ";P7$"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@13a2ede5
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "Java", "-&s6hYw):", "Java", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
* this is vulnerable: String string = "Java"
* this is vulnerable: String string = ";P7$"
TestCase is: String[] stringArray = new String[2];
String string = "Java";
String string = ";P7$";
Label label = new Label();
String string = "Java";
String string = "-&s6hYw):";
String string = "Java";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
String string = "\"";
String string = "RuntimeVisibleParameterAnnotations";
String string = ";P7$";
int _int = 1;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@ab9653fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@68757eb3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@12177ba0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-7), "L", "<init>", "<init>", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(22, arg1)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber((-654), arg1)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Deprecated";// changed to a more descriptive value

        stringArray[1] = "Deprecated";// changed to a more descriptive value

        MethodWriter methodWriter = new MethodWriter(classWriter, -7, "L", "<init>", "<init>", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLineNumber(22, label);
        methodWriter.visitLineNumber(-654, label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Deprecated"// changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[0] = "Deprecated"// changed to a more descriptive value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3f69bc29
statement is: stringArray[1] = "Deprecated"// changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"// changed to a more descriptive value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fc2f238
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -7, "L", "<init>", "<init>", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLineNumber(22, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(22, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLineNumber(-654, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(-654, label) target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "Deprecated";
String string = "Deprecated";
String string = "L";
String string = "<init>";
String string = "<init>";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Label label = new Label();
int _int = 22;
((MethodWriter) string).visitLineNumber(_int, label);
Label label = null;
((MethodWriter) string).visitLineNumber((int) label, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777239)
statement is: org.evosuite.testcase.statements.ArrayStatement@9e0b825e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@90364035 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a325a817 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@89f385c3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@663286f8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ee4d8bbd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "Signature"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ace3a1ae type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "Signature"
statement is: org.evosuite.testcase.statements.AssignmentStatement@db62749 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 1024)
test data is: ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Deprecated";// This value is not meaningful in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.

        stringArray[1] = "Deprecated";// Same as above, this value does not provide enough information to understand the purpose of the array element.

        stringArray[2] = "Deprecated";// As above.

        stringArray[3] = "Deprecated";// As above.

        stringArray[4] = "Signature";// This is a more meaningful value, as it indicates that the method has a signature associated with it.

        stringArray[5] = "Signature";// Same as above, this value does not provide enough information to understand the purpose of the array element.

        stringArray[6] = "";// An empty string is not particularly informative in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.

        MethodWriter methodWriter = new MethodWriter(classWriter, -1, "", "Signature", "", stringArray, false, false);
        methodWriter.visitMaxs(2, 1024);
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Deprecated"// This value is not meaningful in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[0] = "Deprecated"// This value is not meaningful in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@489be382
statement is: stringArray[1] = "Deprecated"// Same as above, this value does not provide enough information to understand the purpose of the array element.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"// Same as above, this value does not provide enough information to understand the purpose of the array element.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4fcfac7a
statement is: stringArray[2] = "Deprecated"// As above.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[2] = "Deprecated"// As above.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@47ed045d
statement is: stringArray[3] = "Deprecated"// As above.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[3] = "Deprecated"// As above.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@86c80701
statement is: stringArray[4] = "Signature"// This is a more meaningful value, as it indicates that the method has a signature associated with it.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Signature" Ct is: stringArray[4] = "Signature"// This is a more meaningful value, as it indicates that the method has a signature associated with it.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8425685a
statement is: stringArray[5] = "Signature"// Same as above, this value does not provide enough information to understand the purpose of the array element.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Signature" Ct is: stringArray[5] = "Signature"// Same as above, this value does not provide enough information to understand the purpose of the array element.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb17a0f8
statement is: stringArray[6] = ""// An empty string is not particularly informative in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[6] = ""// An empty string is not particularly informative in this context. A more descriptive example would be a specific method or field that has been marked as deprecated.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d9da8bfb
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1, "", "Signature", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMaxs(2, 1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2, 1024) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 13
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Signature"
* this is vulnerable: String string = "Signature"
* this is vulnerable: String string = ""
TestCase is: String[] stringArray = new String[7];
String string = "Deprecated";
String string = "Deprecated";
String string = "Deprecated";
String string = "Deprecated";
String string = "Signature";
String string = "Signature";
String string = "";
String string = "";
String string = "Signature";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = 2;
int _int = 1024;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@7dfe7b50 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(5, (-2505))
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "')~o}k +1Rl", "", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, ((String) (null)));
        methodWriter.visitMaxs(5, -2505);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -856, "", "')~o}k +1Rl", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, ((String) (null))) target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: methodWriter.visitMaxs(5, -2505), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(5, -2505) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "";
String[] stringArray = "')~o}k +1Rl";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 5;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@ae04e9e2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "')~o}k +1Rl")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(16777223, 16777223)
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
methodWriter.visitMaxs(16777223, 16777223);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -123456789, "someMethod", "This is a test method", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "This is a test try/catch block");
        methodWriter.visitMaxs(0xffffff, 123456789);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -123456789, "someMethod", "This is a test method", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "This is a test try/catch block"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "This is a test try/catch block") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
statement is: methodWriter.visitMaxs(0xffffff, 123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(0xffffff, 123456789) target is: methodWriter method is: visitMaxs(int,int)
TestCase is: String[] stringArray = new String[0];
Label label = new Label();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@383e40b3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", arg5, true, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.AssignmentStatement@181ce5ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: label.next = label
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-853), 2)
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This", "is", "a", "test" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -853, "tc W(Aler2^x#(D", "\')\'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
        methodWriter.visitMethodInsn(1, "\')\'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
        Label label = new Label();
        label.next = label;
        methodWriter.visitLabel(label);
        methodWriter.visitMaxs(-853, 2);
    }
}
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This", "is", "a", "test" } Elements: ["This", "is", "a", "test"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -853, "tc W(Aler2^x#(D", "\')\'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(1, "\')\'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(1, "\')\'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.next = label, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(-853, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(-853, 2) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "tc W(Aler2^x#(D";
String[] stringArray = "')'k  \"+1-";
String string = "tc W(Aler2^x#(D";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 1;
String string = "')'k  \"+1-";
String string = "tc W(Aler2^x#(D";
String string = "tc W(Aler2^x#(D";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@d5d443d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 188, "", "')'o}k +1R-", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@7af84f32 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@33073b00 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2895b63a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(188, 1)
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        Label[] labelArray = new Label[]{ label, new Label(), new Label() };
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitMaxs(188, 1);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [1] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [1] []
statement is: Label[] labelArray = new Label[]{ label, new Label(), new Label() }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[]{ label, new Label(), new Label() } Elements: [label, new Label(), new Label()]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new Label[]{ label, new Label(), new Label() } Elements: [label, new Label(), new Label()]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new Label[]{ label, new Label(), new Label() } Elements: [label, new Label(), new Label()]
lengths: [1] []
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: methodWriter.visitMaxs(188, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(188, 1) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 188;
String string = "";
String string = "')'o}k +1R-";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 188;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777226)
statement is: org.evosuite.testcase.statements.ArrayStatement@9c7eecc9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@151d863d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@207e3115 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "", "-&s6hYw):", "", arg5, true, false)
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(16777226, 16777226)
test data is: ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a sample test case";
        stringArray[1] = "This is another sample test case";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
        methodWriter.visitTryCatchBlock(label, label, label, "");
        methodWriter.visitMaxs(1000, 1000);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample test case", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample test case" Ct is: stringArray[0] = "This is a sample test case"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1081d4f5
statement is: stringArray[1] = "This is another sample test case", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another sample test case" Ct is: stringArray[1] = "This is another sample test case"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aafb362a
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(1000, 1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1000, 1000) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "This is a sample test case"
* this is vulnerable: String string = "This is another sample test case"
TestCase is: String[] stringArray = new String[2];
String string = "This is a sample test case";
String string = "This is another sample test case";
Label label = new Label();
int _int = 16777226;
String string = "";
String string = "-&s6hYw):";
String string = "";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1000;
int _int = 1000;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777226)
statement is: org.evosuite.testcase.statements.ArrayStatement@78e56d11 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a6605814 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "r"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6712a76b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "r"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "r", "-&s6hYw):", "r", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "r")
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 1)
test data is: ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
methodWriter.visitMaxs(2, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "Hello", "greet", "Hello", stringArray, true, false);
        Label tryLabel = new Label();
        Label catchLabel = new Label();
        methodWriter.visitTryCatchBlock(tryLabel, catchLabel, catchLabel, "Hello");
        methodWriter.visitMaxs(2, 1);
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "Hello", "greet", "Hello", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label tryLabel = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label catchLabel = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(tryLabel, catchLabel, catchLabel, "Hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(tryLabel, catchLabel, catchLabel, "Hello") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitMaxs(2, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2, 1) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 16777226;
String string = "Hello";
String string = "greet";
String string = "Hello";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
Label label = new Label();
String string = "Hello";
((MethodWriter) _boolean).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 1;
((MethodWriter) _boolean).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@44a5e055 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c74c23af type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ";P;$"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e2eac54b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ";P;$"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P;$", "-&s6hYw):", ";P;$", arg5, true, false)
statement is: visitMultiANewArrayInsn(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMultiANewArrayInsn(";P;$", (-2514))
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 1)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];// Replace 2 with 5 to make it more descriptive

        stringArray[0] = "myMethod";
        stringArray[1] = "myLabel";
        stringArray[2] = "myClassName";
        stringArray[3] = "myClassSignature";
        stringArray[4] = "myClassAccess";// Replace -&s6hYw): with more descriptive examples like myMethod, myLabel, myClassName, myClassSignature, and myClassAccess to make it more representative of the situation being tested.

        Label label = new Label();// Remove this line since it's not necessary for testing

        MethodWriter methodWriter = new MethodWriter(classWriter, 20, "myMethod", "-&s6hYw):", "myClassName", stringArray, true, false);
        methodWriter.visitMultiANewArrayInsn("myClassName", 5);// Replace -2514 with 5 to make it more descriptive

        methodWriter.visitLabel(label);// Remove this line since it's not necessary for testing

        methodWriter.visitMaxs(1, 1);// Remove this line since it's not necessary for testing }}

    }
}
statement is: String[] stringArray = new String[5]// Replace 2 with 5 to make it more descriptive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[5] Elements: []
lengths: [2] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myMethod" Ct is: stringArray[0] = "myMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b43d892
statement is: stringArray[1] = "myLabel", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myLabel" Ct is: stringArray[1] = "myLabel"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f703d31e
statement is: stringArray[2] = "myClassName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myClassName" Ct is: stringArray[2] = "myClassName"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b43d892
statement is: stringArray[3] = "myClassSignature", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myClassSignature" Ct is: stringArray[3] = "myClassSignature"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b43d892
statement is: stringArray[4] = "myClassAccess"// Replace -&s6hYw): with more descriptive examples like myMethod, myLabel, myClassName, myClassSignature, and myClassAccess to make it more representative of the situation being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"myClassAccess" Ct is: stringArray[4] = "myClassAccess"// Replace -&s6hYw): with more descriptive examples like myMethod, myLabel, myClassName, myClassSignature, and myClassAccess to make it more representative of the situation being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b43d892
statement is: Label label = new Label()// Remove this line since it's not necessary for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 20, "myMethod", "-&s6hYw):", "myClassName", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMultiANewArrayInsn("myClassName", 5)// Replace -2514 with 5 to make it more descriptive
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMultiANewArrayInsn("myClassName", 5)// Replace -2514 with 5 to make it more descriptive
 target is: methodWriter method is: visitMultiANewArrayInsn(java.lang.String,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitMultiANewArrayInsn(Ljava/lang/String;I)V
statement is: methodWriter.visitLabel(label)// Remove this line since it's not necessary for testing
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label)// Remove this line since it's not necessary for testing
 target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(1, 1)// Remove this line since it's not necessary for testing }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 1)// Remove this line since it's not necessary for testing }}
 target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 10
Matched Method is: visitMaxs(II)V
* this is vulnerable: String string = "myMethod"
* this is vulnerable: String string = "myLabel"
TestCase is: String[] stringArray = new String[2];
String string = "myMethod";
String string = "myLabel";
Label label = new Label();
int _int = 20;
String string = "myMethod";
String string = "-&s6hYw):";
String string = "myClassName";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "myClassName";
int _int = 5;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).visitLabel(label);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@67a5d25c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-857), "", "')~o}k +1Rl", "", arg5, true, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs((-384), 172)
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 0xffffff, "", "~o}k +1Rl", "", stringArray, true, false);
        Label label = new Label();
        methodWriter.visitLabel(label);
        methodWriter.visitLabel(label);
        methodWriter.visitMaxs(0xffffff, 172);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 0xffffff, "", "~o}k +1Rl", "", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(0xffffff, 172), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(0xffffff, 172) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: int _int = 16777215;
String string = "";
String string = "~o}k +1Rl";
String string = "";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
((MethodWriter) string).visitLabel(label);
int _int = 16777215;
int _int = 172;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-779))
statement is: org.evosuite.testcase.statements.ArrayStatement@582262d0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true)
statement is: visitVarInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitVarInsn(1, 2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(252, 50)
test data is: ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world", "this", "is", "a", "test" };
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world", "this", "is", "a", "test" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world", "this", "is", "a", "test" } Elements: ["hello", "world", "this", "is", "a", "test"]
lengths: [0] []
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@563c2528 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-857), "", "')~o}k +1Rl", "", arg5, true, true)
statement is: visitIntInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIntInsn(15, (-898))
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@97d4119f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@47766caa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(1, 512)
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -857, "", "')~o}k +1Rl", "", stringArray, true, true);
        methodWriter.visitIntInsn(15, -898);
        Label label = new Label();
        methodWriter.visitLabel(label);
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        Label[] labelArray = new Label[]{ label, label, label, label, label };
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitMaxs(1, 512);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -857, "", "')~o}k +1Rl", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIntInsn(15, -898), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIntInsn(15, -898) target is: methodWriter method is: visitIntInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitIntInsn(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [0] []
statement is: Label[] labelArray = new Label[]{ label, label, label, label, label }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[]{ label, label, label, label, label } Elements: [label, label, label, label, label]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new Label[]{ label, label, label, label, label } Elements: [label, label, label, label, label]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[]{ label, label, label, label, label } Elements: [label, label, label, label, label]
lengths: [0] []
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: methodWriter.visitMaxs(1, 512), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(1, 512) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
TestCase is: String string = "";
String[] stringArray = "')~o}k +1Rl";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
int _int = 15;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1;
int _int = 512;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@e7d51a4f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a872921e type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-384)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-857), "", "')~o}k +1Rl", "", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@70270fc2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@1404b4c0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(0, 2)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test", "example", "input" };
        classWriter.version = -384;
        MethodWriter methodWriter = new MethodWriter(classWriter, -857, "", "')~o}k +1Rl", "", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
        int[] intArray = new int[]{ 10, 20, 30 };
        Label[] labelArray = new Label[]{ new Label(), new Label() };
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitMaxs(0, 2);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "test", "example", "input" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test", "example", "input" } Elements: ["test", "example", "input"]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new String[]{ "test", "example", "input" } Elements: ["test", "example", "input"]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new String[]{ "test", "example", "input" } Elements: ["test", "example", "input"]
lengths: [0] []
statement is: classWriter.version = -384, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -857, "", "')~o}k +1Rl", "", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: int[] intArray = new int[]{ 10, 20, 30 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new int[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [0] []
statement is: Label[] labelArray = new Label[]{ new Label(), new Label() }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[]{ new Label(), new Label() } Elements: [new Label(), new Label()]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new Label[]{ new Label(), new Label() } Elements: [new Label(), new Label()]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[]{ new Label(), new Label() } Elements: [new Label(), new Label()]
lengths: [0] []
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: methodWriter.visitMaxs(0, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(0, 2) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: getSize()I
TestCase is: String string = "";
String[] stringArray = "')~o}k +1Rl";
String string = "";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
((MethodWriter) _boolean).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777223)
statement is: org.evosuite.testcase.statements.ArrayStatement@d4db8de6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3bedb1af type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-384)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-857), "I", "')~o}k +1Rl", "I", arg5, true, true)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@fd649c11 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@4fc27cd6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLookupSwitchInsn(arg0, arg1, arg2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(0, 2)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(185, (-2386))
test data is: ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world" };
        classWriter.version = -384;
        MethodWriter methodWriter = new MethodWriter(classWriter, -857, "I", "')~o}k +1Rl", "I", stringArray, true, true);
        Label label = new Label();
        methodWriter.visitLabel(label);
        int[] intArray = new int[]{ 1, 2, 3 };
        Label[] labelArray = new Label[]{ label, label, label };
        methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
        methodWriter.visitMaxs(0, 2);
        methodWriter.visitMaxs(185, -2386);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [0] []
statement is: classWriter.version = -384, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -857, "I", "')~o}k +1Rl", "I", stringArray, true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: int[] intArray = new int[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new int[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new int[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [0] []
statement is: Label[] labelArray = new Label[]{ label, label, label }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [0] []
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [8] []
Dimension: [] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[]{ label, label, label } Elements: [label, label, label]
lengths: [0] []
statement is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLookupSwitchInsn(label, intArray, labelArray) target is: methodWriter method is: visitLookupSwitchInsn(Label,int[],Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitLookupSwitchInsn(Lorg/objectweb/asm/jip/Label;[I[Lorg/objectweb/asm/jip/Label;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
statement is: methodWriter.visitMaxs(0, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(0, 2) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
statement is: methodWriter.visitMaxs(185, -2386), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(185, -2386) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitMaxs(II)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "I";
String[] stringArray = "')~o}k +1Rl";
String string = "I";
boolean _boolean = true;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 185;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-779))
statement is: org.evosuite.testcase.statements.ArrayStatement@ec78f3f6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true)
statement is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb")
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "vX6B_-)w^]ZjDHjb")
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
statement is: visitMaxs(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitMaxs(2, 2)
test data is: ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        MethodWriter methodWriter = new MethodWriter(classWriter, -779, "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
        methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
        Label label = new Label();
        methodWriter.visitTryCatchBlock(label, label, label, "Exception");
        methodWriter.visitLabel(label);
        methodWriter.visitMaxs(2, 2);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -779, "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb") target is: methodWriter method is: visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMethodInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitTryCatchBlock(label, label, label, "Exception"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "Exception") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitMaxs(2, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitMaxs(2, 2) target is: methodWriter method is: visitMaxs(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 6
Matched Method is: visitMaxs(II)V
TestCase is: String[] stringArray = new String[0];
String string = "vX6B_-)w^]ZjDHjb";
String string = "')'o.]}k 1R-";
String string = "vX6B_-)w^]ZjDHjb";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, true);
int _int = 252;
String string = "')'o.]}k 1R-";
String string = "vX6B_-)w^]ZjDHjb";
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
String string = "Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2268))
statement is: org.evosuite.testcase.statements.ArrayStatement@215fd4fd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9c48e320 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "org.objectweb.asm.jip.Attribute"
statement is: org.evosuite.testcase.statements.AssignmentStatement@49cc5b8c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "org.objectweb.asm.jip.Attribute"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", arg5, false, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@dc035dae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[8]
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(1, 1, arg4, 2, arg4)
test data is: ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "org.objectweb.asm.jip.Attribute";
        stringArray[1] = "org.objectweb.asm.jip.Attribute";
        MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
        Object[] objectArray = new Object[8];
        methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "org.objectweb.asm.jip.Attribute", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"org.objectweb.asm.jip.Attribute" Ct is: stringArray[0] = "org.objectweb.asm.jip.Attribute"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@665d47fb
statement is: stringArray[1] = "org.objectweb.asm.jip.Attribute", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"org.objectweb.asm.jip.Attribute" Ct is: stringArray[1] = "org.objectweb.asm.jip.Attribute"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8a6d99a
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -2268, "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Object[8] Elements: []
lengths: [2] [8]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [8] Ct is: Object[] objectArray = new Object[8] isAssignment: false Array: new Object[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.Object; Object[]
statement is: methodWriter.visitFrame(1, 1, objectArray, 2, objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(1, 1, objectArray, 2, objectArray) target is: methodWriter method is: visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 8
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
* this is vulnerable: String string = "org.objectweb.asm.jip.Attribute"
* this is vulnerable: String string = "org.objectweb.asm.jip.Attribute"
TestCase is: String[] stringArray = new String[2];
String string = "org.objectweb.asm.jip.Attribute";
String string = "org.objectweb.asm.jip.Attribute";
String string = "org.objectweb.asm.jip.Attribute";
String string = "org.objectweb.asm.jip.Attribute";
String string = "org.objectweb.asm.jip.Attribute";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
Object[] objectArray = new Object[8];
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777245)
statement is: org.evosuite.testcase.statements.ArrayStatement@7c98accc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4b1d6a7c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a08e67b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: org.evosuite.testcase.statements.AssignmentStatement@7b754ba0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: methodWriter.classReaderOffset = 11
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        MethodWriter methodWriter = Mockito.mock(MethodWriter.class);
        String[] parameterNames = new String[]{ "param1", "param2" };
        // Act
        int methodSize = methodWriter.getSize(parameterNames);
        // Assert
        assertEquals(10, methodSize);
    }
}
statement is: // Arrange
MethodWriter methodWriter = Mockito.mock(MethodWriter.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Mockito.mock(MethodWriter.class) target is: Mockito method is: mock(java.lang.Class)
statement is: String[] parameterNames = new String[]{ "param1", "param2" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "param1", "param2" } Elements: ["param1", "param2"]
lengths: [2] []
statement is: // Act
int methodSize = methodWriter.getSize(parameterNames), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize(parameterNames) target is: methodWriter method is: getSize(java.lang.String[])
statement is: // Assert
assertEquals(10, methodSize), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals(10, methodSize) target is:  method is: assertEquals(int,int)
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@cc48840c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@af9c8fa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8dd2352 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195)
statement is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFieldInsn(1, "=8", "Htz", "")
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitLocalVariable("", "", "", label, label, 195);
        methodWriter.visitFieldInsn(1, "=8", "Htz", "");
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fdfec9f8
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e8489ef5
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitLocalVariable("", "", "", label, label, 195), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("", "", "", label, label, 195) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,Label,Label,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V
statement is: methodWriter.visitFieldInsn(1, "=8", "Htz", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFieldInsn(1, "=8", "Htz", "") target is: methodWriter method is: visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitFieldInsn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: getSize()I
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 2;
String string = "Htz";
String string = "";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = 195;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
int _int = 1;
String string = "=8";
String string = "Htz";
String string = "";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@607de28f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@91dbb567 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@c600b5f6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@6612f006 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1bde37c5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@3437deb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@ee82803b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@61f35a9c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "g!V~yHe\""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(190)
statement is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLineNumber(1103, arg1)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[1] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[2] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[3] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[4] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[5] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        stringArray[6] = "g!V~yHe\"";// Changed to a more descriptive and representative value

        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitInsn(190);// Changed to a more descriptive and representative value

        methodWriter.visitLineNumber(1103, label);// Changed to a more descriptive and representative value

        classWriter.toByteArray();// Changed to a more descriptive and representative value }}

    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[0] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bd62cc1
statement is: stringArray[1] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[1] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b714df72
statement is: stringArray[2] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[2] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ff3693bb
statement is: stringArray[3] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[3] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2a5472a7
statement is: stringArray[4] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[4] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@84b58080
statement is: stringArray[5] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[5] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7d25d4e9
statement is: stringArray[6] = "g!V~yHe\""// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"g!V~yHe\"" Ct is: stringArray[6] = "g!V~yHe\""// Changed to a more descriptive and representative value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c487a3b9
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(190)// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(190)// Changed to a more descriptive and representative value
 target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 14
Matched Method is: visitInsn(I)V
statement is: methodWriter.visitLineNumber(1103, label)// Changed to a more descriptive and representative value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLineNumber(1103, label)// Changed to a more descriptive and representative value
 target is: methodWriter method is: visitLineNumber(int,Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 14
Matched Method is: visitLineNumber(ILorg/objectweb/asm/jip/Label;)V
statement is: classWriter.toByteArray()// Changed to a more descriptive and representative value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray()// Changed to a more descriptive and representative value }}
 target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
* this is vulnerable: String string = "g!V~yHe\""
TestCase is: String[] stringArray = new String[7];
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
int _int = 1;
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
int _int = 190;
((MethodWriter) string).visitInsn(_int);
int _int = 1103;
((MethodWriter) string).visitLineNumber(_int, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@50d50975 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fe016f65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "init>"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-823), (-827))
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1024, arg4, 713, arg4)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "init>";
        MethodWriter methodWriter = new MethodWriter(classWriter, -1146, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
        methodWriter.visitIincInsn(-823, -827);
        methodWriter.visitFrame(2, 1024, new String[]{ "init>", "org.objectweb.asm.jip.AnnotationWriter" }, 713, stringArray);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "init>", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"init>" Ct is: stringArray[0] = "init>"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ce9d2565
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1146, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(-823, -827), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(-823, -827) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: methodWriter.visitFrame(2, 1024, new String[]{ "init>", "org.objectweb.asm.jip.AnnotationWriter" }, 713, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1024, new String[]{ "init>", "org.objectweb.asm.jip.AnnotationWriter" }, 713, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
i 4 Parameters size() 4 Num of Method Parameters: 5
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: getSize()I
* this is vulnerable: String string = "init>"
TestCase is: String[] stringArray = new String[1];
String string = "init>";
String string = "org.objectweb.asm.jip.AnnotationWriter";
String string = "org.objectweb.asm.jip.AnnotationWriter";
String string = "Deprecated";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, (int) stringArray, stringArray);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.evosuite.testcase.statements.ArrayStatement@5f6c9511 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, arg5, false, false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Orange", "Banana" };
        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", ((String) (null)), stringArray, false, false);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Orange", "Banana" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Apple", "Orange", "Banana" } Elements: ["Apple", "Orange", "Banana"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 1;
String[] stringArray = "!2:W uG.AP.nP9Fsrdv";
String string = "-.TI|t";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777239)
statement is: org.evosuite.testcase.statements.ArrayStatement@6d5deb9c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dd1dbbfa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@9e70fb12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5ad55816 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2f2ebe81 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "Deprecated"
statement is: org.evosuite.testcase.statements.AssignmentStatement@cd78ac9e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "Signature"
statement is: org.evosuite.testcase.statements.AssignmentStatement@df22e64e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "Signature"
statement is: org.evosuite.testcase.statements.AssignmentStatement@178e8911 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false)
statement is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotationDefault = (AnnotationWriter)methodWriter.visitAnnotationDefault()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Deprecated";// This annotation indicates that a method or field has been deprecated, and should no longer be used.

        stringArray[1] = "Deprecated";// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.

        stringArray[2] = "Deprecated";// This annotation is used to indicate that a method or field has been deprecated, and should no longer be used.

        stringArray[3] = "Deprecated";// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.

        stringArray[4] = "Signature";// This annotation is used to provide additional information about the signature of a method.

        stringArray[5] = "Signature";// This annotation is also used to provide additional information about the signature of a method.

        stringArray[6] = "";// This annotation is used to provide additional information about the signature of a method.

        MethodWriter methodWriter = new MethodWriter(classWriter, -1, "", "Signature", "", stringArray, false, false);
        methodWriter.visitAnnotationDefault();
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Deprecated"// This annotation indicates that a method or field has been deprecated, and should no longer be used.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[0] = "Deprecated"// This annotation indicates that a method or field has been deprecated, and should no longer be used.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@df7354de
statement is: stringArray[1] = "Deprecated"// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2a779845
statement is: stringArray[2] = "Deprecated"// This annotation is used to indicate that a method or field has been deprecated, and should no longer be used.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[2] = "Deprecated"// This annotation is used to indicate that a method or field has been deprecated, and should no longer be used.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@968e0ea0
statement is: stringArray[3] = "Deprecated"// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[3] = "Deprecated"// This annotation is also used to indicate that a method or field has been deprecated, and should no longer be used.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8776503f
statement is: stringArray[4] = "Signature"// This annotation is used to provide additional information about the signature of a method.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Signature" Ct is: stringArray[4] = "Signature"// This annotation is used to provide additional information about the signature of a method.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2e7dd11
statement is: stringArray[5] = "Signature"// This annotation is also used to provide additional information about the signature of a method.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Signature" Ct is: stringArray[5] = "Signature"// This annotation is also used to provide additional information about the signature of a method.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d7c67b84
statement is: stringArray[6] = ""// This annotation is used to provide additional information about the signature of a method.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[6] = ""// This annotation is used to provide additional information about the signature of a method.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@efb510dc
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -1, "", "Signature", "", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotationDefault(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotationDefault() target is: methodWriter method is: visitAnnotationDefault()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 13
Matched Method is: visitAnnotationDefault()Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 9, type org.objectweb.asm.jip.MethodWriterindex is: 13
Matched Method is: getSize()I
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Deprecated"
* this is vulnerable: String string = "Signature"
* this is vulnerable: String string = "Signature"
* this is vulnerable: String string = ""
TestCase is: String[] stringArray = new String[7];
String string = "Deprecated";
String string = "Deprecated";
String string = "Deprecated";
String string = "Deprecated";
String string = "Signature";
String string = "Signature";
String string = "";
String string = "";
String string = "Signature";
String string = "";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@e4d387fe type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "", arg5, false, true)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = methodWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
        MethodWriter methodWriter = new MethodWriter(classWriter, -865, "", "')'o}k +1R-", "", stringArray, false, true);
        methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
        methodWriter.getSize();
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -865, "", "')'o}k +1R-", "", stringArray, false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: methodWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.getSize() target is: methodWriter method is: getSize()
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: getSize()I
TestCase is: String string = "";
String[] stringArray = "')'o}k +1R-";
String string = "";
boolean _boolean = false;
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, true);
String string = "n:EU3D<so40Q&T*";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@cad99cf5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6a730063 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1de6df4f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "g!V~yHe\""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("g!V~yHe\"", false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "My Test Class";
        stringArray[1] = "My Test Method";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "My Test Class", "My Test Method", "My Test Annotation", stringArray, false, false);
        methodWriter.visitAnnotation("My Test Annotation", false);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "My Test Class", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"My Test Class" Ct is: stringArray[0] = "My Test Class"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@90ce4f2e
statement is: stringArray[1] = "My Test Method", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"My Test Method" Ct is: stringArray[1] = "My Test Method"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@95dc45de
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "My Test Class", "My Test Method", "My Test Annotation", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAnnotation("My Test Annotation", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("My Test Annotation", false) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor;
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "My Test Class"
* this is vulnerable: String string = "My Test Method"
TestCase is: String[] stringArray = new String[2];
String string = "My Test Class";
String string = "My Test Method";
int _int = 2;
String string = "My Test Class";
String string = "My Test Method";
String string = "My Test Annotation";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "My Test Annotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@b1c2c432 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1b7bc9fa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@7805c163 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "g!V~yHe\""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false)
statement is: org.objectweb.asm.jip.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Attribute
statement code is: Attribute attribute = new Attribute("eb7#-\ficS1a")
statement is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitAttribute(arg0)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "a";// This is a primitive type, but it can be any other value that makes sense for the scenario being tested.

        stringArray[1] = "b";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
        Attribute attribute = new Attribute("eb7#-\ficS1a");
        methodWriter.visitAttribute(attribute);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "a"// This is a primitive type, but it can be any other value that makes sense for the scenario being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[0] = "a"// This is a primitive type, but it can be any other value that makes sense for the scenario being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d512d9cd
statement is: stringArray[1] = "b", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"b" Ct is: stringArray[1] = "b"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@600a236d
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("eb7#-\ficS1a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAttribute(attribute) target is: methodWriter method is: visitAttribute(Attribute)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitAttribute(Lorg/objectweb/asm/jip/Attribute;)V
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "a"
* this is vulnerable: String string = "b"
TestCase is: String[] stringArray = new String[2];
String string = "a";
String string = "b";
int _int = 2;
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
String string = "g!V~yHe\"";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
String string = "eb7#-\ficS1a";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2002)
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", ((String[]) (null)), false, false);
        // Improved test data
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        char[] characters = new char[]{ 'a', 'b', 'c' };
        classWriter.toByteArray();
    }
}
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", ((String[]) (null)), false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] characters = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: int _int = 2002;
String string = "1`wM~{wz6nHU9q/J-nj";
String string = "93T";
String string = "93T";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) _boolean, (String[]) _boolean, false, false);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777186)
statement is: org.evosuite.testcase.statements.ArrayStatement@71b26a5c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e3e2b571 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = 4096
statement is: org.evosuite.testcase.statements.AssignmentStatement@f6cf9b0f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@dda74159 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(4096)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        classWriter.version = 4096;
        stringArray[0] = "TestClass";
        stringArray[1] = "testMethod";
        MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
        ByteVector byteVector = new ByteVector(4096);
        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: classWriter.version = 4096, class spoon.support.reflect.code.CtAssignmentImpl
statement is: stringArray[0] = "TestClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TestClass" Ct is: stringArray[0] = "TestClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f1d2dc46
statement is: stringArray[1] = "testMethod", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"testMethod" Ct is: stringArray[1] = "testMethod"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2f7148b0
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(4096), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "TestClass"
* this is vulnerable: String string = "testMethod"
TestCase is: String[] stringArray = new String[2];
String string = "TestClass";
String string = "testMethod";
int _int = 16777186;
String string = "";
String string = "-&s6hYw):K";
String string = "";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777241)
statement is: org.evosuite.testcase.statements.ArrayStatement@ac06da95 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 1, "Htz", "Htz", (String) null, arg5, false, false)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "orange" };// Use a more representative array of strings to test the behavior of the method writer with a non-empty string array.

        MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", ((String) (null)), stringArray, false, false);
        ByteVector byteVector = new ByteVector(2);// Use a more representative value for the size of the byte vector to test the behavior of the method writer with a non-empty byte vector.

        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "orange" }// Use a more representative array of strings to test the behavior of the method writer with a non-empty string array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "apple", "banana", "orange" } Elements: ["apple", "banana", "orange"]
lengths: [0] []
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", ((String) (null)), stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(2)// Use a more representative value for the size of the byte vector to test the behavior of the method writer with a non-empty byte vector.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 2, type org.objectweb.asm.jip.MethodWriterindex is: 5
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
TestCase is: int _int = 1;
String[] stringArray = "Htz";
String string = "Htz";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) arg1, string, (String) _boolean, (String) _boolean, stringArray, false, false);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@1da2b564 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@17d47660 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", arg5, false, false)
statement is: visitAnnotation(Ljava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)methodWriter.visitAnnotation("Deprecated", true)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(262144)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        stringArray = new String[1];
        stringArray[0] = "Deprecated";
        methodWriter = new MethodWriter(classWriter, -1146, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
        methodWriter.visitAnnotation("Deprecated", true);
        byteVector = new ByteVector(262144);// 2^18

        methodWriter.put(byteVector);
    }
}
statement is: stringArray = new String[1], class spoon.support.reflect.code.CtAssignmentImpl
statement is: stringArray[0] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter = new MethodWriter(classWriter, -1146, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false), class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.visitAnnotation("Deprecated", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitAnnotation("Deprecated", true) target is: methodWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: byteVector = new ByteVector(262144)// 2^18
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put()
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@feac9f63 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3a5ec8ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@bf385320 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitJumpInsn(ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitJumpInsn(2, arg1)
statement is: visitLocalVariable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195)
statement is: org.objectweb.asm.jip.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitJumpInsn(2, label);
        methodWriter.visitLocalVariable("parameter1", "Ljava/lang/String;", "", label, label, 195);
        methodWriter.visitLocalVariable("parameter2", "Ljava/lang/String;", "", label, label, 195);
        ByteVector byteVector = new ByteVector();
        methodWriter.put(byteVector);
    }
}
statement is: classWriter.visitJumpInsn(2, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitJumpInsn(2, label) target is: classWriter method is: visitJumpInsn(int)
statement is: methodWriter.visitLocalVariable("parameter1", "Ljava/lang/String;", "", label, label, 195), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("parameter1", "Ljava/lang/String;", "", label, label, 195) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,int)
statement is: methodWriter.visitLocalVariable("parameter2", "Ljava/lang/String;", "", label, label, 195), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLocalVariable("parameter2", "Ljava/lang/String;", "", label, label, 195) target is: methodWriter method is: visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,int)
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
TestCase is: ByteVector byteVector = new ByteVector();

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@e0a09c85 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8f9dedbe type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "init>"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn((-823), (-827))
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(2, 1024, arg4, 713, arg4)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(262144)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[10];
        stringArray[0] = "init>";
        MethodWriter methodWriter = new MethodWriter(classWriter, -823, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
        methodWriter.visitIincInsn(-1000, -900);
        methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
        ByteVector byteVector = new ByteVector(262144);// 256 KB

        methodWriter.put(byteVector);
    }
}
statement is: String[] stringArray = new String[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[10] Elements: []
lengths: [1] [10]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "init>", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"init>" Ct is: stringArray[0] = "init>"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dfd113a1
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, -823, "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitIincInsn(-1000, -900), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(-1000, -900) target is: methodWriter method is: visitIincInsn(int,int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitIincInsn(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray) target is: methodWriter method is: visitFrame(int,int,java.lang.String[],int,java.lang.String[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V
statement is: ByteVector byteVector = new ByteVector(262144)// 256 KB
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 3, type org.objectweb.asm.jip.MethodWriterindex is: 7
Matched Method is: put(Lorg/objectweb/asm/jip/ByteVector;)V
* this is vulnerable: String string = "init>"
TestCase is: String[] stringArray = new String[1];
String string = "init>";
String string = "org.objectweb.asm.jip.AnnotationWriter";
String string = "org.objectweb.asm.jip.AnnotationWriter";
String string = "Deprecated";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 262144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@193befaf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@366aae3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "g!V~yHe\""
statement is: org.evosuite.testcase.statements.AssignmentStatement@d127d397 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "g!V~yHe\""
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false)
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: visitInsn(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitInsn(2)
statement is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "[]")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello", "World", "Hello", stringArray, false, false);
        Label label = new Label();
        methodWriter.visitInsn(2);
        methodWriter.visitTryCatchBlock(label, label, label, "[]");
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@88bf6e7a
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d0c5d5d8
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hello", "World", "Hello", stringArray, false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.visitInsn(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitInsn(2) target is: methodWriter method is: visitInsn(int)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitInsn(I)V
statement is: methodWriter.visitTryCatchBlock(label, label, label, "[]"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTryCatchBlock(label, label, label, "[]") target is: methodWriter method is: visitTryCatchBlock(Label,Label,Label,java.lang.String)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 4, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTryCatchBlock(Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Lorg/objectweb/asm/jip/Label;Ljava/lang/String;)V
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
TestCase is: String[] stringArray = new String[2];
String string = "Hello";
String string = "World";
int _int = 2;
String string = "Hello";
String string = "World";
String string = "Hello";
boolean _boolean = false;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) _int, (int) string, string, string, (String) stringArray, (String[]) _boolean, _boolean, false);
Label label = new Label();
int _int = 2;
((MethodWriter) string).visitInsn(_int);
String string = "[]";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@e8158707 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@37c58526 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8d5be9d9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-7), "L", "<init>", "<init>", arg5, false, false)
statement is: visitIincInsn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitIincInsn(1024, (-823))
statement is: visitFrame(II[Ljava/lang/Object;I[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitFrame(16777216, (-471), arg4, (-1623953025), arg4)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", arg5)
statement is: org.objectweb.asm.jip.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ByteVector
statement code is: ByteVector byteVector = new ByteVector(1)
statement is: put(Lorg/objectweb/asm/jip/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visit(-7, "<init>", "<init>", "L", "Deprecated", stringArray);
        methodWriter.visitIincInsn(1024, -823);
        methodWriter.visitFrame(16777216, 471, stringArray, -1623953025, stringArray);
        classWriter.visit(-823, 2648, "L", "L", "LineNumberTable", stringArray);
        ByteVector byteVector = new ByteVector(1);
        methodWriter.put(byteVector);
    }
}
statement is: classWriter.visit(-7, "<init>", "<init>", "L", "Deprecated", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-7, "<init>", "<init>", "L", "Deprecated", stringArray) target is: classWriter method is: visit(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
statement is: methodWriter.visitIincInsn(1024, -823), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitIincInsn(1024, -823) target is: methodWriter method is: visitIincInsn(int,int)
statement is: methodWriter.visitFrame(16777216, 471, stringArray, -1623953025, stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitFrame(16777216, 471, stringArray, -1623953025, stringArray) target is: methodWriter method is: visitFrame(int,int,int)
statement is: classWriter.visit(-823, 2648, "L", "L", "LineNumberTable", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-823, 2648, "L", "L", "LineNumberTable", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String)
statement is: ByteVector byteVector = new ByteVector(1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: methodWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.put(byteVector) target is: methodWriter method is: put(ByteVector)
TestCase is: int _int = 1;
ByteVector byteVector = new ByteVector(_int);

statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.evosuite.testcase.statements.ArrayStatement@7bc0ffc8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d99ad79 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: intArray[0] = 16777216
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 16777216;
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label label = new Label();
        int[] intArray = new int[4];
        intArray[0] = 100;// Changed to a more descriptive value

        MethodWriter.getNewOffset(intArray, intArray, label);
    }
}
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int[] intArray = new int[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[4] Elements: []
lengths: [4] [4]
Their type are: class [I int[]
statement is: intArray[0] = 100// Changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : intArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl int Assignment:100 Ct is: intArray[0] = 100// Changed to a more descriptive value

target : intArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.getNewOffset(intArray, intArray, label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, label) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
TestCase is: Label label = new Label();
int[] intArray = new int[4];
int _int = 100;
intArray[0] = _int;
MethodWriter.getNewOffset(intArray, intArray, label);

statement is: org.evosuite.testcase.statements.ArrayStatement@ecda00f6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-2354), 605)
test data is: int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[2];
        MethodWriter.getNewOffset(intArray, intArray, -10, 5);
    }
}
statement is: int[] intArray = new int[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: int[] intArray = new int[2] isAssignment: false Array: new int[2] Elements: []
lengths: [2] [2]
Their type are: class [I int[]
statement is: MethodWriter.getNewOffset(intArray, intArray, -10, 5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, -10, 5) target is: MethodWriter method is: getNewOffset(int[],int[],int,int)
Matched Method is: getNewOffset([I[III)I
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: int[] intArray = new int[2];
int _int = 5;
int _int = null;
MethodWriter.getNewOffset(intArray, intArray, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@27006b09 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[5]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 0, (-1726))
test data is: int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "mango", "pineapple", "plum", "pomegranate", "strawberry" };
        MethodWriter.getNewOffset(stringArray, stringArray, 0, -1726);
    }
}
statement is: String[] stringArray = new String[]{ "mango", "pineapple", "plum", "pomegranate", "strawberry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[5] isAssignment: false Array: new String[]{ "mango", "pineapple", "plum", "pomegranate", "strawberry" } Elements: ["mango", "pineapple", "plum", "pomegranate", "strawberry"]
lengths: [5] []
statement is: MethodWriter.getNewOffset(stringArray, stringArray, 0, -1726), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(stringArray, stringArray, 0, -1726) target is: MethodWriter method is: getNewOffset(java.lang.String[],java.lang.String[],int,int)
Matched Method is: getNewOffset([I[III)I
i 1 Parameters size() 1 Num of Method Parameters: 4
i 2 Parameters size() 1 Num of Method Parameters: 4
i 3 Parameters size() 1 Num of Method Parameters: 4
TestCase is: int _int = 0;
int[] intArray = null;
int _int = null;
int _int = null;
MethodWriter.getNewOffset((int[]) _int, intArray, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@ffd93210 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[6]
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
statement is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: MethodWriter.getNewOffset(arg1, arg1, arg2)
test data is: int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray1 = new int[6];
        int[] intArray2 = new int[6];
        Label label1 = new Label();
        Label label2 = new Label();
        MethodWriter.getNewOffset(intArray1, intArray1, label1);
        MethodWriter.getNewOffset(intArray2, intArray2, label2);
    }
}
statement is: int[] intArray1 = new int[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: int[] intArray = new int[6] isAssignment: false Array: new int[6] Elements: []
lengths: [6] [6]
Their type are: class [I int[]
statement is: int[] intArray2 = new int[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: int[] intArray = new int[6] isAssignment: false Array: new int[6] Elements: []
lengths: [6] [6]
Their type are: class [I int[]
statement is: Label label1 = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label label2 = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter.getNewOffset(intArray1, intArray1, label1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray1, intArray1, label1) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
statement is: MethodWriter.getNewOffset(intArray2, intArray2, label2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray2, intArray2, label2) target is: MethodWriter method is: getNewOffset(int[],int[],Label)
Matched Method is: getNewOffset([I[ILorg/objectweb/asm/jip/Label;)V
TestCase is: int[] intArray = new int[6];
int[] intArray = new int[6];
Label label = new Label();
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777229)
statement is: org.evosuite.testcase.statements.ArrayStatement@41c9cc65 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c1bf4f64 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "L"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d738771f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Deprecated"
statement is: org.objectweb.asm.jip.Label()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.Label
statement code is: Label label = new Label()
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "<init>", "-&s6hYw):K", "L", arg5, true, false)
statement is: org.evosuite.testcase.statements.ArrayStatement@769adbd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Label;
statement code is: Label[] labelArray = new Label[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d01cf656 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[0] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@3a87a6e2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[1] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@44217712 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[2] = label
statement is: org.evosuite.testcase.statements.AssignmentStatement@a62b9be7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.objectweb.asm.jip.Label
statement code is: labelArray[3] = label
statement is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitTableSwitchInsn(1, 46, arg2, arg3)
statement is: visitLabel(Lorg/objectweb/asm/jip/Label;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: methodWriter.visitLabel(arg0)
test data is: ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "L";
        stringArray[1] = "Deprecated";
        Label label = new Label();
        MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM9, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
        Label[] labelArray = new Label[4];
        labelArray[0] = label;
        labelArray[1] = label;
        labelArray[2] = label;
        labelArray[3] = label;
        methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
        methodWriter.visitLabel(label);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "L", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"L" Ct is: stringArray[0] = "L"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@71396409
statement is: stringArray[1] = "Deprecated", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Deprecated" Ct is: stringArray[1] = "Deprecated"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@eb8cb546
statement is: Label label = new Label(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MethodWriter methodWriter = new MethodWriter(classWriter, Opcodes.ASM9, "<init>", "-&s6hYw):K", "L", stringArray, true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Label[] labelArray = new Label[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Label[4] Elements: []
lengths: [2] [4]
Their type are: class [Ljava.lang.String; Label[]
Dimension: [4] Ct is: Label[] labelArray = new Label[4] isAssignment: false Array: new Label[4] Elements: []
lengths: [4] [4]
Their type are: class [Lorg.objectweb.asm.jip.Label; Label[]
statement is: labelArray[0] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[0] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9a2c1d81
statement is: labelArray[1] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[1] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5324e17
statement is: labelArray[2] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[2] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1e4904c
statement is: labelArray[3] = label, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:label Ct is: labelArray[3] = label
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3a03f25c
statement is: methodWriter.visitTableSwitchInsn(1, 46, label, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitTableSwitchInsn(1, 46, label, labelArray) target is: methodWriter method is: visitTableSwitchInsn(int,int,Label,Label[])
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitTableSwitchInsn(IILorg/objectweb/asm/jip/Label;[Lorg/objectweb/asm/jip/Label;)V
statement is: methodWriter.visitLabel(label), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodWriter.visitLabel(label) target is: methodWriter method is: visitLabel(Label)
source statement: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V callee: VariableReference: Statement 5, type org.objectweb.asm.jip.MethodWriterindex is: 9
Matched Method is: visitLabel(Lorg/objectweb/asm/jip/Label;)V
* this is vulnerable: String string = "L"
* this is vulnerable: String string = "Deprecated"
TestCase is: String[] stringArray = new String[2];
String string = "L";
String string = "Deprecated";
Label label = new Label();
String string = "<init>";
String string = "-&s6hYw):K";
String string = "L";
boolean _boolean = true;
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) string, (int) string, string, (String) stringArray, (String) _boolean, (String[]) _boolean, true, false);
Label[] labelArray = new Label[4];
int _int = 1;
int _int = 46;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
((MethodWriter) string).visitLabel(label);

statement is: org.evosuite.testcase.statements.ArrayStatement@7ed7a19d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: getNewOffset([I[III)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newOffset = MethodWriter.getNewOffset(arg1, arg1, 4388, 4388)
test data is: int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[2];
        MethodWriter.getNewOffset(intArray, intArray, 1000, "XYZ987");
    }
}
statement is: int[] intArray = new int[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: int[] intArray = new int[2] isAssignment: false Array: new int[2] Elements: []
lengths: [2] [2]
Their type are: class [I int[]
statement is: MethodWriter.getNewOffset(intArray, intArray, 1000, "XYZ987"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.getNewOffset(intArray, intArray, 1000, "XYZ987") target is: MethodWriter method is: getNewOffset(int[],int[],int,java.lang.String)
Matched Method is: getNewOffset([I[III)I
TestCase is: int[] intArray = new int[2];
int _int = 1000;
String string = "XYZ987";
MethodWriter.getNewOffset(intArray, intArray, _int, (int) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@ad972313 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5e0ae8a3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte) (-10)
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, 1)
test data is: byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[7];
        byteArray[1] = ((byte) (-5));
        int value = MethodWriter.readInt(byteArray, 1);
        assertEquals(-5, value);
    }
}
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (-5)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (-5)) Ct is: byteArray[1] = ((byte) (-5))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: int value = MethodWriter.readInt(byteArray, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, 1) target is: MethodWriter method is: readInt(byte[],int)
Matched Method is: readInt([BI)I
statement is: assertEquals(-5, value), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(-5, value) target is:  method is: assertEquals(int,int)
TestCase is: byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
int _int = 1;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@f5da5997 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b2dbe6f6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)56
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, (byte)0)
test data is: byte[] byteArray = new byte[5];
byteArray[0] = (byte)56;
MethodWriter.readInt(byteArray, (byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) (0x42));
        MethodWriter.readInt(byteArray, ((byte) (0)));
    }
}
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (0x42)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x42)) Ct is: byteArray[0] = ((byte) (0x42))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readInt(byteArray, ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, ((byte) (0))) target is: MethodWriter method is: readInt(byte[],byte)
Matched Method is: readInt([BI)I
TestCase is: byte[] byteArray = new byte[5];
int _int = 66;
byteArray[0] = (byte) _int;
int _int = 0;
MethodWriter.readInt(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@1d574bc4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[20]
statement is: readInt([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = MethodWriter.readInt(arg0, 16)
test data is: byte[] byteArray = new byte[20];
MethodWriter.readInt(byteArray, 16);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x7, 0x8, 0x9, 0xab };
        MethodWriter.readInt(byteArray, 8);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x7, 0x8, 0x9, 0xab }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[20] isAssignment: false Array: new byte[]{ 0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x7, 0x8, 0x9, 0xab } Elements: [0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x7, 0x8, 0x9, 0xab]
lengths: [20] []
statement is: MethodWriter.readInt(byteArray, 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readInt(byteArray, 8) target is: MethodWriter method is: readInt(byte[],int)
Matched Method is: readInt([BI)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 8;
int _int = null;
MethodWriter.readInt((byte[]) _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@e7d80bef type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c2a6273 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[2] = (byte) (-114)
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, 2)
test data is: byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[4];
        // The first two bytes are 0x00 0x68, which represents a short value of 108 (decimal) in big-endian order.
        byteArray[0] = ((byte) (0x0));
        byteArray[1] = ((byte) (0x68));
        // The third and fourth bytes are 0xFF 0x76, which represents a short value of -114 in big-endian order.
        byteArray[2] = ((byte) (0xff));
        byteArray[3] = ((byte) (0x76));
        MethodWriter.readShort(byteArray, 2);
    }
}
statement is: byte[] byteArray = new byte[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[4] Elements: []
lengths: [4] [4]
Their type are: class [B byte[]
statement is: // The first two bytes are 0x00 0x68, which represents a short value of 108 (decimal) in big-endian order.
byteArray[0] = ((byte) (0x0)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x0)) Ct is: // The first two bytes are 0x00 0x68, which represents a short value of 108 (decimal) in big-endian order.
byteArray[0] = ((byte) (0x0))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x68)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x68)) Ct is: byteArray[1] = ((byte) (0x68))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // The third and fourth bytes are 0xFF 0x76, which represents a short value of -114 in big-endian order.
byteArray[2] = ((byte) (0xff)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0xff)) Ct is: // The third and fourth bytes are 0xFF 0x76, which represents a short value of -114 in big-endian order.
byteArray[2] = ((byte) (0xff))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[3] = ((byte) (0x76)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x76)) Ct is: byteArray[3] = ((byte) (0x76))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, 2) target is: MethodWriter method is: readShort(byte[],int)
Matched Method is: readShort([BI)S
TestCase is: byte[] byteArray = new byte[4];
int _int = 0;
byteArray[2] = (byte) _int;
int _int = 104;
byteArray[2] = (byte) _int;
int _int = 255;
byteArray[2] = (byte) _int;
int _int = 118;
byteArray[2] = (byte) _int;
int _int = 2;
MethodWriter.readShort(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@1536d716 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@65fe7d7c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)68
statement is: readShort([BI)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = MethodWriter.readShort(arg0, (byte)0)
test data is: byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[9];
        byteArray[0] = ((byte) (68));
        MethodWriter.readShort(byteArray, ((byte) (0)));
        byteArray = new byte[]{ ((byte) (127)), ((byte) (-1)) };
        MethodWriter.readShort(byteArray, ((byte) (1)));
        byteArray = new byte[]{ ((byte) (-128)), ((byte) (127)) };
        MethodWriter.readShort(byteArray, ((byte) (2)));
        byteArray = new byte[]{ ((byte) (-128)), ((byte) (0)) };
        MethodWriter.readShort(byteArray, ((byte) (3)));
    }
}
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (68)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (68)) Ct is: byteArray[0] = ((byte) (68))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (0))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray = new byte[]{ ((byte) (127)), ((byte) (-1)) }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (1))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (1))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray = new byte[]{ ((byte) (-128)), ((byte) (127)) }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (2))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
statement is: byteArray = new byte[]{ ((byte) (-128)), ((byte) (0)) }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MethodWriter.readShort(byteArray, ((byte) (3))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readShort(byteArray, ((byte) (3))) target is: MethodWriter method is: readShort(byte[],byte)
Matched Method is: readShort([BI)S
TestCase is: byte[] byteArray = new byte[9];
int _int = 68;
byteArray[0] = (byte) _int;
int _int = 0;
MethodWriter.readShort(byteArray, _int);
int _int = 1;
MethodWriter.readShort(byteArray, _int);
int _int = 2;
MethodWriter.readShort(byteArray, _int);
int _int = 3;
MethodWriter.readShort(byteArray, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@ff970a98 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6893edf3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)75
statement is: readUnsignedShort([BI)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1)
test data is: byte[] byteArray = new byte[4];
byteArray[1] = (byte)75;
MethodWriter.readUnsignedShort(byteArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        byte[] byteArray = new byte[4];
        byteArray[1] = ((byte) (75));// Improve this value to a more descriptive example

        int result = MethodWriter.readUnsignedShort(byteArray, 1);
        System.out.println("Result: " + result);
    }
}
statement is: byte[] byteArray = new byte[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[4] Elements: []
lengths: [4] [4]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (75))// Improve this value to a more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (75)) Ct is: byteArray[1] = ((byte) (75))// Improve this value to a more descriptive example

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: int result = MethodWriter.readUnsignedShort(byteArray, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: MethodWriter.readUnsignedShort(byteArray, 1) target is: MethodWriter method is: readUnsignedShort(byte[],int)
Matched Method is: readUnsignedShort([BI)I
statement is: System.out.println("Result: " + result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Result: " + result) target is: System.out method is: println(java.lang.String)
TestCase is: byte[] byteArray = new byte[4];
int _int = 75;
byteArray[1] = (byte) _int;
int _int = 1;
MethodWriter.readUnsignedShort(byteArray, _int);

statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777216)
statement is: org.evosuite.testcase.statements.ArrayStatement@6579dc94 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true)
test data is: ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World" };
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Hello", "World" } Elements: ["Hello", "World"]
lengths: [0] []
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16777224)
statement is: org.evosuite.testcase.statements.ArrayStatement@c5a65524 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.objectweb.asm.jip.MethodWriter(Lorg/objectweb/asm/jip/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.MethodWriter
statement code is: MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, false, true)
statement is: visitParameterAnnotation(ILjava/lang/String;Z)Lorg/objectweb/asm/jip/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.objectweb.asm.jip.AnnotationVisitor
statement code is: AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false)
test data is: ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "This", "is", "a", "test", "of", "improved", "data" };
    }
}
statement is: String[] stringArray = new String[]{ "This", "is", "a", "test", "of", "improved", "data" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "This", "is", "a", "test", "of", "improved", "data" } Elements: ["This", "is", "a", "test", "of", "improved", "data"]
lengths: [0] []
* test suite isTestSuite: 220
Test 0: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 1: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));
Test 2: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 3: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");
Test 6: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
Test 15: 
ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
Test 16: 
ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);
Test 17: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 20: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);
Test 21: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);
Test 22: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIntInsn((-2268), 90);
Test 23: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);
Test 24: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);
Test 25: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);
Test 26: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);
Test 27: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);
Test 28: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);
Test 30: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);
Test 31: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);
Test 33: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);
Test 34: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);
Test 35: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");
Test 36: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");
Test 37: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
Test 38: 
ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
Test 39: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
Test 40: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
Test 41: 
ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 42: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
Test 43: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
Test 44: 
ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
Test 45: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);
Test 46: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);
Test 47: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);
Test 48: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);
Test 49: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);
Test 50: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 51: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 52: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");
Test 53: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 54: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(1);
Test 55: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);
Test 56: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);
Test 57: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));
Test 58: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);
Test 59: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
Test 60: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
Test 61: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
Test 62: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);
Test 63: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));
Test 64: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);
Test 65: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
Test 66: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
Test 67: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);
Test 68: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);
Test 69: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));
Test 70: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 71: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);
Test 72: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);
Test 74: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 75: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);
Test 76: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);
Test 77: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);
Test 78: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);
Test 79: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));
Test 81: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);
Test 82: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 83: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();
Test 84: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();
Test 86: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();
Test 87: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 88: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 89: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();
Test 90: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();
Test 91: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();
Test 93: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);
Test 94: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 98: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();
Test 99: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 100: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 16777216;
MethodWriter.getNewOffset(intArray, intArray, label);
Test 101: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);
Test 102: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));
Test 103: 
int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 104: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);
Test 105: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);
Test 106: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)56;
MethodWriter.readInt(byteArray, (byte)0);
Test 108: 
byte[] byteArray = new byte[20];
MethodWriter.readInt(byteArray, 16);
Test 109: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);
Test 110: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);
Test 111: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte)75;
MethodWriter.readUnsignedShort(byteArray, 1);
Test 112: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 113: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 114: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "", "getRandomNumber", "getRandomNumber", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();

Test 115: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (int) (Integer) null);

Test 116: 
String[] stringArray = new String[1];
String string = "admin";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 117: 
String[] stringArray = new String[2];
String string = "kxoM,hErWC{y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 118: 
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "Ljava/lang/Object;", "methodName", "(Ljava/lang/String;)V", (String) false, (String[]) false, false, false);

Test 119: 
String[] stringArray = new String[0];
String string = "z";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "z", "StackMapTable", "", (String) stringArray, (String[]) false, false, false);
int _int = 2002;
String string = "z";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 120: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", (String) stringArray, (String) false, (String[]) true, false, true);

Test 121: 
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 171, (int) "main", "main", "(Ljava/lang/String;)V", (String) true, (String[]) true, true, true);
int _int = 2;
int _int = 0;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 122: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 12, (int) "", "Signature", "Deprecated", (String) stringArray, (String[]) false, false, false);
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);

Test 123: 
String[] stringArray = new String[2];
String string = "Lorem ipsum dolor sit amet";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", (String) stringArray, (String[]) false, false, false);
String string = "Ut enim ad minim veniam";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 292552704;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 124: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "Hello", "World", "Java", (String) stringArray, (String[]) false, false, false);
int _int = 5;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 125: 
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) ";P3$", (int) (Integer) null, ";P3$", (String) false, (String) false, (String[]) ";P3$", false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 2;
Object[] objectArray = null;
((MethodWriter) _boolean).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 126: 
String[] stringArray = new String[2];
String string = "baz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "baz", "qux", "foobar", (String) stringArray, (String[]) false, false, false);
Object[] objectArray = new Object[4];
int _int = 2;
int _int = null;
Object[] objectArray = null;
((MethodWriter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 127: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
int _int = 16777186;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);
int _int = 267;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 128: 
String[] stringArray = new String[2];

Test 129: 
String[] stringArray = new String[2];
String string = "MyClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 3, (int) "MyClass", "myMethod", "void", (String) stringArray, (String[]) false, false, false);
int _int = 3;
int _int = 1;
int _int = 4096;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 3;
int _int = 891;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 130: 
String[] stringArray = new String[5];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 4;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 131: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "L", "L", "L", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 132: 
String[] stringArray = new String[2];
String string = "test";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "test", (int) "test", "test", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 133: 
String string = "myMethodDescription";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1000, (int) "myMethodName", "myMethodDescription", "myMethodSignature", (String) true, (String[]) true, true, true);
int _int = 255;
((MethodWriter) string).visitInsn(_int);

Test 134: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "My name is John", (int) "-&s6hYw):", "I am 30 years old", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 1;
((MethodWriter) string).visitInsn(_int);

Test 135: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 268435455, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) false, false, false);

Test 136: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 5, (int) "main", "(I)V", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 5;
int _int = 90;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 137: 
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "Htz", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 188;
int _int = 74;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 138: 
String[] stringArray = new String[0];
String string = "H";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 276, (int) "H", "Xg)AS", "Code", (String) stringArray, (String[]) true, false, false);
int _int = 1;
String string = "Xg)AS";
String string = "Htz";
String string = "y+N3b1iX";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 1;
int _int = 276;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 139: 
String[] stringArray = new String[2];
String string = ";";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) ";", "", ";", (String) stringArray, (String[]) false, false, false);
int _int = 17;
int _int = 17;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 140: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
int _int = 169;
int _int = 41;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 141: 
String[] stringArray = new String[0];
String string = "XH+l";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XH+l", "Xg)AS", "Xg)AS", (String) stringArray, (String[]) true, false, false);
int _int = 22;
int _int = 100;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 142: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')$'o}k +1R-", false, true);
int _int = 24;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 143: 
String[] stringArray = new String[9];
String string = "789)o}k +1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 33, (int) "789)o}k +1R-", "789)o}k +1R-", "\"", (String) stringArray, (String[]) true, false, false);
int _int = 55;
int _int = 33;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 144: 
String[] stringArray = new String[8];
String string = "This is the first parameter.";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 70, (int) "This is the first parameter.", "This is the second parameter.", "This is the third parameter.", (String) stringArray, (String[]) true, false, false);
int _int = 57;
int _int = 187;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 145: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "A", (int) "-&s6hYw):", "A", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 146: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 170;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 147: 
String[] stringArray = new String[0];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777224, (int) "", "This is a test method for testing the effects of using the MethodWriter class in Java.", "", (String) stringArray, (String[]) false, true, true);
int _int = 54;
int _int = 256;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 148: 
String[] stringArray = new String[0];
String string = "')'o.]}k 1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vX6B_-)w^]ZjDHjb", (int) "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 132;
int _int = 1172;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 149: 
String string = "8";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "8", (int) (Integer) null, "8", (String) false, (String) true, (String[]) "')$'o}k +1R-", false, true);
int _int = 2;
String string = "d>@v[F";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 150: 
String[] stringArray = new String[8];
String string = "TestClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 70, (int) "TestClass", "testMethod", "void", (String) stringArray, (String[]) true, false, false);
int _int = 187;
String string = "java/lang/String";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 151: 
String[] stringArray = new String[0];
String string = "TestMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 123456789, (int) "TestMethod", "This is a test method.", "RZSW\"0~(==\"aBysT", (String) stringArray, (String[]) false, true, true);
int _int = 218;
String string = "java/lang/Exception";
String string = "exceptions";
String string = "Ljava/util/List;";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 152: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 251, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);

Test 153: 
String[] stringArray = new String[2];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
int _int = 2;
String string = "java.lang.StringBuilder";
String string = "org.objectweb.asm.jip.ByteVector";
String string = "org.objectweb.asm.jip.ByteVector";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 154: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);

Test 155: 
String string = "Hm/tz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1639, (int) "Hm/tz", "Hm/tz", "Hm/tz", (String) false, (String[]) false, false, false);
int _int = 185;
String string = "Hm/tz";
String string = "Hm/tz";
String string = "Hm/tz";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 156: 
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XH+l", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 168;
String string = "A?L";
String string = "Xg)AS";
String string = "Xg)AS";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 157: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777229, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
String string = "";
int _int = null;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 158: 
String string = "F6}A}w:N~hq(g)Z";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "F6}A}w:N~hq(g)Z", "", (String) false, (String[]) false, false, false);
int _int = 186;
String string = "testMethodA";
String string = "";
String string = "short";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 159: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Hello, World!", (int) "-&s6hYw):", "Goodbye, World!", (String) stringArray, (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 178;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 160: 
Label label = new Label();
String string = "(Ljava/lang/String;)V";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "TestMethod", "(Ljava/lang/String;)V", "()V", (String) true, (String[]) true, true, true);
int _int = 167;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 161: 
Label label = new Label();
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XXH+l", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 168;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 168;
Label label = new Label();
((MethodWriter) string).visitJumpInsn(_int, label);

Test 162: 
String[] stringArray = new String[0];
String string = "')'o}k  \"+1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "')'o}k  \"+1R-", "", (String) stringArray, (String) true, (String[]) true, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 163: 
String string = "ec";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 164: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')~o}k +1Rl", false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 165: 
String[] stringArray = new String[1];
Label label = new Label();

Test 166: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Hello", (int) "-&s6hYw):", "World", (String) stringArray, (String) true, (String[]) false, true, false);
String string = "Hello";
((MethodWriter) string).visitLdcInsn(string);

Test 167: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, true, true);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

Test 168: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
String string = "L";
int _int = 16777186;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 169: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

Test 170: 
String[] stringArray = new String[2];
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "2tB)7S", (int) "-&s6hYw):K", "Deprecated", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 20202;
int _int = 1493;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 171: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 12, (int) "", "Signature", "Deprecated", (String) stringArray, (String[]) false, false, false);
int _int = 28;
int _int = 28;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 172: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "',~o}k +1Rl", "", (String) stringArray, (String) true, (String[]) true, true, true);
Label label = new Label();

Test 173: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
String string = "firstName";
String string = "Ljava/lang/String;";
int _int = 252;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 174: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Htz", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 175: 
String[] stringArray = new String[2];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter((ClassWriter) "<init>", (int) "-&s6hYw):K", "L", (String) stringArray, (String) true, (String[]) false, true, false);

Test 176: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777229, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
String string = ";P7$";
String string = "Deprecated";
String string = "L";
int _int = 16777229;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 177: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Java", (int) "-&s6hYw):", "Java", (String) stringArray, (String) true, (String[]) false, true, false);
String string = "\"";
String string = "RuntimeVisibleParameterAnnotations";
String string = ";P7$";
int _int = 1;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 178: 
String[] stringArray = new String[2];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "L", (int) "<init>", "<init>", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 22;
((MethodWriter) string).visitLineNumber(_int, label);
Label label = null;
((MethodWriter) string).visitLineNumber((int) label, label);

Test 179: 
String[] stringArray = new String[7];
String string = "Signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Signature", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
int _int = 1024;
((MethodWriter) string).visitMaxs(_int, _int);

Test 180: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 5;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 181: 
String[] stringArray = new String[0];
Label label = new Label();

Test 182: 
String string = "tc W(Aler2^x#(D";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "tc W(Aler2^x#(D", (int) (Integer) null, "tc W(Aler2^x#(D", (String) true, (String) true, (String[]) "')'k  \"+1-", true, true);
int _int = 1;
String string = "')'k  \"+1-";
String string = "tc W(Aler2^x#(D";
String string = "tc W(Aler2^x#(D";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 183: 
String string = "')'o}k +1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 188, (int) "", "')'o}k +1R-", "", (String) true, (String[]) true, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 188;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 184: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777226, (int) "", "-&s6hYw):", "", (String) stringArray, (String[]) true, false, false);
String string = "";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1000;
int _int = 1000;
((MethodWriter) string).visitMaxs(_int, _int);

Test 185: 
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777226, (int) "Hello", "greet", "Hello", (String) true, (String[]) false, true, false);
Label label = new Label();
Label label = new Label();
String string = "Hello";
((MethodWriter) _boolean).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 1;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 186: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 20, (int) "myMethod", "-&s6hYw):", "myClassName", (String) stringArray, (String[]) true, false, false);
String string = "myClassName";
int _int = 5;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).visitLabel(label);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 187: 
String string = "~o}k +1Rl";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777215, (int) "", "~o}k +1Rl", "", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
((MethodWriter) string).visitLabel(label);
int _int = 16777215;
int _int = 172;
((MethodWriter) string).visitMaxs(_int, _int);

Test 188: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
int _int = 15;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1;
int _int = 512;
((MethodWriter) string).visitMaxs(_int, _int);

Test 189: 
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
((MethodWriter) _boolean).getSize();

Test 190: 
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) "I", (int) (Integer) null, "I", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 185;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 191: 
String[] stringArray = new String[0];
String string = "')'o.]}k 1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vX6B_-)w^]ZjDHjb", (int) "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", (String) stringArray, (String) false, (String[]) true, false, true);
int _int = 252;
String string = "')'o.]}k 1R-";
String string = "vX6B_-)w^]ZjDHjb";
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
String string = "Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

Test 192: 
String[] stringArray = new String[2];
String string = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.Attribute", (int) "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", (String) stringArray, (String) false, (String[]) false, false, false);
Object[] objectArray = new Object[8];
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 193: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = 195;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
int _int = 1;
String string = "=8";
String string = "Htz";
String string = "";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
((MethodWriter) string).getSize();

Test 194: 
String[] stringArray = new String[7];
String string = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 190;
((MethodWriter) string).visitInsn(_int);
int _int = 1103;
((MethodWriter) string).visitLineNumber(_int, label);

Test 195: 
String[] stringArray = new String[1];
String string = "org.objectweb.asm.jip.AnnotationWriter";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.AnnotationWriter", (int) "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, (int) stringArray, stringArray);
((MethodWriter) string).getSize();

Test 196: 
String string = "-.TI|t";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "-.TI|t", (String) false, (String) false, (String[]) "!2:W uG.AP.nP9Fsrdv", false, false);
((MethodWriter) string).getSize();

Test 197: 
String[] stringArray = new String[7];
String string = "Signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Signature", "", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 198: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')'o}k +1R-", false, true);
String string = "n:EU3D<so40Q&T*";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 199: 
String[] stringArray = new String[2];
String string = "My Test Class";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "My Test Class", "My Test Method", "My Test Annotation", (String) stringArray, (String[]) false, false, false);
String string = "My Test Annotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);

Test 200: 
String[] stringArray = new String[2];
String string = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", (String) stringArray, (String[]) false, false, false);
String string = "eb7#-\ficS1a";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);

Test 201: 
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String) false, (String[]) false, false, false);

Test 202: 
String[] stringArray = new String[2];
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 203: 
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "Htz", (String) false, (String) false, (String[]) "Htz", false, false);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 204: 
ByteVector byteVector = new ByteVector();

Test 205: 
String[] stringArray = new String[1];
String string = "org.objectweb.asm.jip.AnnotationWriter";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.AnnotationWriter", (int) "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 262144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 206: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Hello", "World", "Hello", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 2;
((MethodWriter) string).visitInsn(_int);
String string = "[]";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

Test 207: 
ByteVector byteVector = new ByteVector(1);

Test 208: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 100;
MethodWriter.getNewOffset(intArray, intArray, label);

Test 209: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 5, (int) (Integer) null);

Test 210: 
MethodWriter.getNewOffset((int[]) 0, (int[]) null, (int) (Integer) null, (int) (Integer) null);

Test 211: 
int[] intArray = new int[6];
int[] intArray = new int[6];
Label label = new Label();
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

Test 212: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "<init>", (int) "-&s6hYw):K", "L", (String) stringArray, (String) true, (String[]) false, true, false);
Label[] labelArray = new Label[4];
int _int = 1;
int _int = 46;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
((MethodWriter) string).visitLabel(label);

Test 213: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 1000, (int) "XYZ987");

Test 214: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);

Test 215: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 66;
MethodWriter.readInt(byteArray, 0);

Test 216: 
MethodWriter.readInt((byte[]) 8, (int) (Integer) null);

Test 217: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) 0;
byteArray[2] = (byte) 104;
byteArray[2] = (byte) 255;
byteArray[2] = (byte) 118;
MethodWriter.readShort(byteArray, 2);

Test 218: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 68;
MethodWriter.readShort(byteArray, 0);
MethodWriter.readShort(byteArray, 1);
MethodWriter.readShort(byteArray, 2);
MethodWriter.readShort(byteArray, 3);

Test 219: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 75;
MethodWriter.readUnsignedShort(byteArray, 1);


* Generated after the refinement and before minimization 220 tests with total length 1408
* test suite isTestSuite: 220
Test 0: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 1: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));
Test 2: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 3: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");
Test 6: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
Test 15: 
ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
Test 16: 
ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);
Test 17: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 20: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);
Test 21: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);
Test 22: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIntInsn((-2268), 90);
Test 23: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);
Test 24: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);
Test 25: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);
Test 26: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);
Test 27: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);
Test 28: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);
Test 30: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);
Test 31: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);
Test 33: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);
Test 34: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);
Test 35: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");
Test 36: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");
Test 37: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
Test 38: 
ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
Test 39: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
Test 40: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
Test 41: 
ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 42: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
Test 43: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
Test 44: 
ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
Test 45: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);
Test 46: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);
Test 47: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);
Test 48: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);
Test 49: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);
Test 50: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 51: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 52: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");
Test 53: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 54: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(1);
Test 55: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);
Test 56: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);
Test 57: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));
Test 58: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);
Test 59: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
Test 60: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
Test 61: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
Test 62: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);
Test 63: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));
Test 64: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);
Test 65: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
Test 66: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
Test 67: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);
Test 68: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);
Test 69: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));
Test 70: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 71: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);
Test 72: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);
Test 74: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 75: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);
Test 76: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);
Test 77: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);
Test 78: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);
Test 79: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));
Test 81: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);
Test 82: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 83: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();
Test 84: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();
Test 86: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();
Test 87: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 88: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 89: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();
Test 90: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();
Test 91: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();
Test 93: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);
Test 94: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 98: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();
Test 99: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 100: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 16777216;
MethodWriter.getNewOffset(intArray, intArray, label);
Test 101: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);
Test 102: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));
Test 103: 
int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 104: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);
Test 105: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);
Test 106: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)56;
MethodWriter.readInt(byteArray, (byte)0);
Test 108: 
byte[] byteArray = new byte[20];
MethodWriter.readInt(byteArray, 16);
Test 109: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);
Test 110: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);
Test 111: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte)75;
MethodWriter.readUnsignedShort(byteArray, 1);
Test 112: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 113: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 114: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "", "getRandomNumber", "getRandomNumber", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitCode();

Test 115: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (int) (Integer) null);

Test 116: 
String[] stringArray = new String[1];
String string = "admin";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
((MethodWriter) string).put(byteVector);

Test 117: 
String[] stringArray = new String[2];
String string = "kxoM,hErWC{y";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", (String) stringArray, (String[]) false, false, false);
((MethodWriter) string).visitEnd();

Test 118: 
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "Ljava/lang/Object;", "methodName", "(Ljava/lang/String;)V", (String) false, (String[]) false, false, false);

Test 119: 
String[] stringArray = new String[0];
String string = "z";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "z", "StackMapTable", "", (String) stringArray, (String[]) false, false, false);
int _int = 2002;
String string = "z";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 120: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "<init>", "<init>", (String) stringArray, (String) false, (String[]) true, false, true);

Test 121: 
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 171, (int) "main", "main", "(Ljava/lang/String;)V", (String) true, (String[]) true, true, true);
int _int = 2;
int _int = 0;
String[] stringArray = null;
int _int = null;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 122: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 12, (int) "", "Signature", "Deprecated", (String) stringArray, (String[]) false, false, false);
String string = "Ljava/lang/Synthetic;";
boolean _boolean = false;
boolean _boolean = null;
((MethodWriter) string).visitParameterAnnotation((int) string, (String) _boolean, _boolean);

Test 123: 
String[] stringArray = new String[2];
String string = "Lorem ipsum dolor sit amet";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Lorem ipsum dolor sit amet", "consectetur adipiscing elit", "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", (String) stringArray, (String[]) false, false, false);
String string = "Ut enim ad minim veniam";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);
int _int = 292552704;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 124: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "Hello", "World", "Java", (String) stringArray, (String[]) false, false, false);
int _int = 5;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 125: 
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) ";P3$", (int) (Integer) null, ";P3$", (String) false, (String) false, (String[]) ";P3$", false, false);
Object[] objectArray = new Object[4];
int _int = 1;
int _int = 2;
Object[] objectArray = null;
((MethodWriter) _boolean).visitFrame(_int, (int) objectArray, (Object[]) _int, (int) objectArray, objectArray);

Test 126: 
String[] stringArray = new String[2];
String string = "baz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 10, (int) "baz", "qux", "foobar", (String) stringArray, (String[]) false, false, false);
Object[] objectArray = new Object[4];
int _int = 2;
int _int = null;
Object[] objectArray = null;
((MethodWriter) string).visitFrame((int) objectArray, _int, objectArray, _int, objectArray);

Test 127: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
int _int = 16777186;
int _int = 2;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);
int _int = 267;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 128: 
String[] stringArray = new String[2];

Test 129: 
String[] stringArray = new String[2];
String string = "MyClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 3, (int) "MyClass", "myMethod", "void", (String) stringArray, (String[]) false, false, false);
int _int = 3;
int _int = 1;
int _int = 4096;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 3;
int _int = 891;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 130: 
String[] stringArray = new String[5];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 4;
int _int = 1;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, (int) stringArray, (Object[]) _int, (int) stringArray, stringArray);

Test 131: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 0, (int) "L", "L", "L", (String) stringArray, (String[]) false, false, false);
int _int = 0;
int _int = 1;
int _int = 1;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 132: 
String[] stringArray = new String[2];
String string = "test";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "test", (int) "test", "test", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);

Test 133: 
String string = "myMethodDescription";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1000, (int) "myMethodName", "myMethodDescription", "myMethodSignature", (String) true, (String[]) true, true, true);
int _int = 255;
((MethodWriter) string).visitInsn(_int);

Test 134: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "My name is John", (int) "-&s6hYw):", "I am 30 years old", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 1;
((MethodWriter) string).visitInsn(_int);

Test 135: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 268435455, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) false, false, false);

Test 136: 
String[] stringArray = new String[2];
String string = "main";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 5, (int) "main", "(I)V", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 5;
int _int = 90;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 137: 
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "Htz", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 188;
int _int = 74;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 138: 
String[] stringArray = new String[0];
String string = "H";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 276, (int) "H", "Xg)AS", "Code", (String) stringArray, (String[]) true, false, false);
int _int = 1;
String string = "Xg)AS";
String string = "Htz";
String string = "y+N3b1iX";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
int _int = 1;
int _int = 276;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 139: 
String[] stringArray = new String[2];
String string = ";";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) ";", "", ";", (String) stringArray, (String[]) false, false, false);
int _int = 17;
int _int = 17;
((MethodWriter) string).visitIntInsn(_int, _int);

Test 140: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
int _int = 169;
int _int = 41;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 141: 
String[] stringArray = new String[0];
String string = "XH+l";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XH+l", "Xg)AS", "Xg)AS", (String) stringArray, (String[]) true, false, false);
int _int = 22;
int _int = 100;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 142: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')$'o}k +1R-", false, true);
int _int = 24;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 143: 
String[] stringArray = new String[9];
String string = "789)o}k +1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 33, (int) "789)o}k +1R-", "789)o}k +1R-", "\"", (String) stringArray, (String[]) true, false, false);
int _int = 55;
int _int = 33;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 144: 
String[] stringArray = new String[8];
String string = "This is the first parameter.";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 70, (int) "This is the first parameter.", "This is the second parameter.", "This is the third parameter.", (String) stringArray, (String[]) true, false, false);
int _int = 57;
int _int = 187;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 145: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "A", (int) "-&s6hYw):", "A", (String) stringArray, (String) true, (String[]) false, true, false);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 146: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 170;
int _int = 2;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 147: 
String[] stringArray = new String[0];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777224, (int) "", "This is a test method for testing the effects of using the MethodWriter class in Java.", "", (String) stringArray, (String[]) false, true, true);
int _int = 54;
int _int = 256;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 148: 
String[] stringArray = new String[0];
String string = "')'o.]}k 1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vX6B_-)w^]ZjDHjb", (int) "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", (String) stringArray, (String) false, (String[]) true, false, true);
Label label = new Label();
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 132;
int _int = 1172;
((MethodWriter) string).visitVarInsn(_int, _int);

Test 149: 
String string = "8";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "8", (int) (Integer) null, "8", (String) false, (String) true, (String[]) "')$'o}k +1R-", false, true);
int _int = 2;
String string = "d>@v[F";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 150: 
String[] stringArray = new String[8];
String string = "TestClass";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 70, (int) "TestClass", "testMethod", "void", (String) stringArray, (String[]) true, false, false);
int _int = 187;
String string = "java/lang/String";
((MethodWriter) string).visitTypeInsn(_int, string);

Test 151: 
String[] stringArray = new String[0];
String string = "TestMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 123456789, (int) "TestMethod", "This is a test method.", "RZSW\"0~(==\"aBysT", (String) stringArray, (String[]) false, true, true);
int _int = 218;
String string = "java/lang/Exception";
String string = "exceptions";
String string = "Ljava/util/List;";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 152: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 251, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);

Test 153: 
String[] stringArray = new String[2];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
int _int = 2;
String string = "java.lang.StringBuilder";
String string = "org.objectweb.asm.jip.ByteVector";
String string = "org.objectweb.asm.jip.ByteVector";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);

Test 154: 
String[] stringArray = new String[2];
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777216, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);

Test 155: 
String string = "Hm/tz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1639, (int) "Hm/tz", "Hm/tz", "Hm/tz", (String) false, (String[]) false, false, false);
int _int = 185;
String string = "Hm/tz";
String string = "Hm/tz";
String string = "Hm/tz";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 156: 
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XH+l", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 168;
String string = "A?L";
String string = "Xg)AS";
String string = "Xg)AS";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 157: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777229, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
String string = "";
int _int = null;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);

Test 158: 
String string = "F6}A}w:N~hq(g)Z";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "F6}A}w:N~hq(g)Z", "", (String) false, (String[]) false, false, false);
int _int = 186;
String string = "testMethodA";
String string = "";
String string = "short";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);

Test 159: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Hello, World!", (int) "-&s6hYw):", "Goodbye, World!", (String) stringArray, (String) true, (String[]) false, true, false);
Label label = new Label();
int _int = 178;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 160: 
Label label = new Label();
String string = "(Ljava/lang/String;)V";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "TestMethod", "(Ljava/lang/String;)V", "()V", (String) true, (String[]) true, true, true);
int _int = 167;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 161: 
Label label = new Label();
String string = "Xg)AS";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777241, (int) "XXH+l", "Xg)AS", "Xg)AS", (String) true, (String[]) false, true, false);
int _int = 168;
((MethodWriter) string).visitJumpInsn(_int, label);
int _int = 168;
Label label = new Label();
((MethodWriter) string).visitJumpInsn(_int, label);

Test 162: 
String[] stringArray = new String[0];
String string = "')'o}k  \"+1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "')'o}k  \"+1R-", "", (String) stringArray, (String) true, (String[]) true, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
((MethodWriter) string).visitJumpInsn(_int, label);

Test 163: 
String string = "ec";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", (String) false, (String[]) false, false, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);

Test 164: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')~o}k +1Rl", false, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
Label[] labelArray = new Label[0];
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, (int[]) labelArray, labelArray);
((MethodWriter) string).visitLabel(label);

Test 165: 
String[] stringArray = new String[1];
Label label = new Label();

Test 166: 
String[] stringArray = new String[2];
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Hello", (int) "-&s6hYw):", "World", (String) stringArray, (String) true, (String[]) false, true, false);
String string = "Hello";
((MethodWriter) string).visitLdcInsn(string);

Test 167: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, true, true);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

Test 168: 
String[] stringArray = new String[2];
String string = "L";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "L", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
String string = "L";
int _int = 16777186;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
int _int = null;
((MethodWriter) string).visitLdcInsn(_int);

Test 169: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "", "", "", (String) stringArray, (String[]) false, false, false);
int _int = 1;
((MethodWriter) string).visitLdcInsn(_int);

Test 170: 
String[] stringArray = new String[2];
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "2tB)7S", (int) "-&s6hYw):K", "Deprecated", (String) stringArray, (String) true, (String[]) true, true, true);
int _int = 20202;
int _int = 1493;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 171: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 12, (int) "", "Signature", "Deprecated", (String) stringArray, (String[]) false, false, false);
int _int = 28;
int _int = 28;
((MethodWriter) string).visitIincInsn(_int, _int);

Test 172: 
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "',~o}k +1Rl", "", (String) stringArray, (String) true, (String[]) true, true, true);
Label label = new Label();

Test 173: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
String string = "firstName";
String string = "Ljava/lang/String;";
int _int = 252;
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, (String) label, label, (Label) _int, _int);

Test 174: 
String[] stringArray = new String[2];
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Htz", (int) "", "", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = null;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 175: 
String[] stringArray = new String[2];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter((ClassWriter) "<init>", (int) "-&s6hYw):K", "L", (String) stringArray, (String) true, (String[]) false, true, false);

Test 176: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777229, (int) "<init>", "-&s6hYw):K", "L", (String) stringArray, (String[]) true, false, false);
String string = ";P7$";
String string = "Deprecated";
String string = "L";
int _int = 16777229;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 177: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "-&s6hYw):";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "Java", (int) "-&s6hYw):", "Java", (String) stringArray, (String) true, (String[]) false, true, false);
String string = "\"";
String string = "RuntimeVisibleParameterAnnotations";
String string = ";P7$";
int _int = 1;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);

Test 178: 
String[] stringArray = new String[2];
String string = "<init>";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "L", (int) "<init>", "<init>", (String) stringArray, (String) false, (String[]) false, false, false);
Label label = new Label();
int _int = 22;
((MethodWriter) string).visitLineNumber(_int, label);
Label label = null;
((MethodWriter) string).visitLineNumber((int) label, label);

Test 179: 
String[] stringArray = new String[7];
String string = "Signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Signature", "", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = 2;
int _int = 1024;
((MethodWriter) string).visitMaxs(_int, _int);

Test 180: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
String string = null;
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 5;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 181: 
String[] stringArray = new String[0];
Label label = new Label();

Test 182: 
String string = "tc W(Aler2^x#(D";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "tc W(Aler2^x#(D", (int) (Integer) null, "tc W(Aler2^x#(D", (String) true, (String) true, (String[]) "')'k  \"+1-", true, true);
int _int = 1;
String string = "')'k  \"+1-";
String string = "tc W(Aler2^x#(D";
String string = "tc W(Aler2^x#(D";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = null;
((MethodWriter) string).visitMaxs(_int, _int);

Test 183: 
String string = "')'o}k +1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 188, (int) "", "')'o}k +1R-", "", (String) true, (String[]) true, true, true);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 188;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 184: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777226, (int) "", "-&s6hYw):", "", (String) stringArray, (String[]) true, false, false);
String string = "";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
int _int = 1000;
int _int = 1000;
((MethodWriter) string).visitMaxs(_int, _int);

Test 185: 
boolean _boolean = false;
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777226, (int) "Hello", "greet", "Hello", (String) true, (String[]) false, true, false);
Label label = new Label();
Label label = new Label();
String string = "Hello";
((MethodWriter) _boolean).visitTryCatchBlock(label, label, label, string);
int _int = 2;
int _int = 1;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 186: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "myMethod";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 20, (int) "myMethod", "-&s6hYw):", "myClassName", (String) stringArray, (String[]) true, false, false);
String string = "myClassName";
int _int = 5;
((MethodWriter) string).visitMultiANewArrayInsn(string, _int);
((MethodWriter) string).visitLabel(label);
int _int = 1;
int _int = 1;
((MethodWriter) string).visitMaxs(_int, _int);

Test 187: 
String string = "~o}k +1Rl";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777215, (int) "", "~o}k +1Rl", "", (String) true, (String[]) false, true, false);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
((MethodWriter) string).visitLabel(label);
int _int = 16777215;
int _int = 172;
((MethodWriter) string).visitMaxs(_int, _int);

Test 188: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
int _int = 15;
int _int = null;
((MethodWriter) string).visitIntInsn(_int, _int);
Label label = new Label();
((MethodWriter) string).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) string).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 1;
int _int = 512;
((MethodWriter) string).visitMaxs(_int, _int);

Test 189: 
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
((MethodWriter) _boolean).getSize();

Test 190: 
boolean _boolean = true;
MethodWriter methodWriter = new MethodWriter((ClassWriter) "I", (int) (Integer) null, "I", (String) true, (String) true, (String[]) "')~o}k +1Rl", true, true);
Label label = new Label();
((MethodWriter) _boolean).visitLabel(label);
int[] intArray = null;
Label[] labelArray = null;
((MethodWriter) _boolean).visitLookupSwitchInsn(label, intArray, labelArray);
int _int = 0;
int _int = 2;
((MethodWriter) _boolean).visitMaxs(_int, _int);
int _int = 185;
int _int = null;
((MethodWriter) _boolean).visitMaxs(_int, _int);

Test 191: 
String[] stringArray = new String[0];
String string = "')'o.]}k 1R-";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "vX6B_-)w^]ZjDHjb", (int) "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", (String) stringArray, (String) false, (String[]) true, false, true);
int _int = 252;
String string = "')'o.]}k 1R-";
String string = "vX6B_-)w^]ZjDHjb";
String string = "vX6B_-)w^]ZjDHjb";
((MethodWriter) string).visitMethodInsn(_int, string, string, string);
Label label = new Label();
String string = "Exception";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);
((MethodWriter) string).visitLabel(label);
int _int = 2;
int _int = 2;
((MethodWriter) string).visitMaxs(_int, _int);

Test 192: 
String[] stringArray = new String[2];
String string = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.Attribute", (int) "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", (String) stringArray, (String) false, (String[]) false, false, false);
Object[] objectArray = new Object[8];
int _int = 1;
int _int = 1;
int _int = 2;
((MethodWriter) string).visitFrame(_int, _int, objectArray, _int, objectArray);

Test 193: 
String[] stringArray = new String[2];
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Htz", "", "", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
String string = "";
String string = "";
String string = "";
int _int = 195;
((MethodWriter) string).visitLocalVariable(string, string, string, label, label, _int);
int _int = 1;
String string = "=8";
String string = "Htz";
String string = "";
((MethodWriter) string).visitFieldInsn(_int, string, string, string);
((MethodWriter) string).getSize();

Test 194: 
String[] stringArray = new String[7];
String string = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 190;
((MethodWriter) string).visitInsn(_int);
int _int = 1103;
((MethodWriter) string).visitLineNumber(_int, label);

Test 195: 
String[] stringArray = new String[1];
String string = "org.objectweb.asm.jip.AnnotationWriter";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.AnnotationWriter", (int) "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
String[] stringArray = null;
((MethodWriter) string).visitFrame(_int, _int, (Object[]) _int, (int) stringArray, stringArray);
((MethodWriter) string).getSize();

Test 196: 
String string = "-.TI|t";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "-.TI|t", (String) false, (String) false, (String[]) "!2:W uG.AP.nP9Fsrdv", false, false);
((MethodWriter) string).getSize();

Test 197: 
String[] stringArray = new String[7];
String string = "Signature";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) "Signature", "", (String) stringArray, (String) false, (String[]) false, false, false);
((MethodWriter) string).visitAnnotationDefault();
((MethodWriter) string).getSize();

Test 198: 
String string = "";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "", (int) (Integer) null, "", (String) false, (String) true, (String[]) "')'o}k +1R-", false, true);
String string = "n:EU3D<so40Q&T*";
boolean _boolean = true;
((MethodWriter) string).visitAnnotation(string, _boolean);
((MethodWriter) string).getSize();

Test 199: 
String[] stringArray = new String[2];
String string = "My Test Class";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "My Test Class", "My Test Method", "My Test Annotation", (String) stringArray, (String[]) false, false, false);
String string = "My Test Annotation";
boolean _boolean = false;
((MethodWriter) string).visitAnnotation(string, _boolean);

Test 200: 
String[] stringArray = new String[2];
String string = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", (String) stringArray, (String[]) false, false, false);
String string = "eb7#-\ficS1a";
Attribute attribute = new Attribute(string);
((MethodWriter) string).visitAttribute(attribute);

Test 201: 
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2002, (int) "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String) false, (String[]) false, false, false);

Test 202: 
String[] stringArray = new String[2];
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 16777186, (int) "", "-&s6hYw):K", "", (String) stringArray, (String[]) true, false, false);
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 203: 
String string = "Htz";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 1, (int) (Integer) null, "Htz", (String) false, (String) false, (String[]) "Htz", false, false);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 204: 
ByteVector byteVector = new ByteVector();

Test 205: 
String[] stringArray = new String[1];
String string = "org.objectweb.asm.jip.AnnotationWriter";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "org.objectweb.asm.jip.AnnotationWriter", (int) "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", (String) stringArray, (String) false, (String[]) false, false, false);
int _int = null;
int _int = null;
((MethodWriter) string).visitIincInsn(_int, _int);
int _int = 2;
int _int = 1024;
int _int = 713;
((MethodWriter) string).visitFrame(_int, _int, stringArray, _int, stringArray);
int _int = 262144;
ByteVector byteVector = new ByteVector(_int);
((MethodWriter) string).put(byteVector);

Test 206: 
String[] stringArray = new String[2];
String string = "Hello";
MethodWriter methodWriter = new MethodWriter((ClassWriter) 2, (int) "Hello", "World", "Hello", (String) stringArray, (String[]) false, false, false);
Label label = new Label();
int _int = 2;
((MethodWriter) string).visitInsn(_int);
String string = "[]";
((MethodWriter) string).visitTryCatchBlock(label, label, label, string);

Test 207: 
ByteVector byteVector = new ByteVector(1);

Test 208: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 100;
MethodWriter.getNewOffset(intArray, intArray, label);

Test 209: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 5, (int) (Integer) null);

Test 210: 
MethodWriter.getNewOffset((int[]) 0, (int[]) null, (int) (Integer) null, (int) (Integer) null);

Test 211: 
int[] intArray = new int[6];
int[] intArray = new int[6];
Label label = new Label();
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);

Test 212: 
String[] stringArray = new String[2];
Label label = new Label();
String string = "-&s6hYw):K";
MethodWriter methodWriter = new MethodWriter((ClassWriter) "<init>", (int) "-&s6hYw):K", "L", (String) stringArray, (String) true, (String[]) false, true, false);
Label[] labelArray = new Label[4];
int _int = 1;
int _int = 46;
((MethodWriter) string).visitTableSwitchInsn(_int, _int, label, labelArray);
((MethodWriter) string).visitLabel(label);

Test 213: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 1000, (int) "XYZ987");

Test 214: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);

Test 215: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 66;
MethodWriter.readInt(byteArray, 0);

Test 216: 
MethodWriter.readInt((byte[]) 8, (int) (Integer) null);

Test 217: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) 0;
byteArray[2] = (byte) 104;
byteArray[2] = (byte) 255;
byteArray[2] = (byte) 118;
MethodWriter.readShort(byteArray, 2);

Test 218: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 68;
MethodWriter.readShort(byteArray, 0);
MethodWriter.readShort(byteArray, 1);
MethodWriter.readShort(byteArray, 2);
MethodWriter.readShort(byteArray, 3);

Test 219: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 75;
MethodWriter.readUnsignedShort(byteArray, 1);


* Minimizing test suite
* test suite isTestSuite: 116
Test 0: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);
Test 1: 
byte[] byteArray = new byte[4];
MethodWriter.readUnsignedShort(byteArray, 1);
Test 2: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 3: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));
Test 4: 
byte[] byteArray = new byte[4];
MethodWriter.readShort(byteArray, 2);
Test 5: 
byte[] byteArray = new byte[5];
MethodWriter.readInt(byteArray, 0);
Test 6: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 7: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();
Test 8: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);
Test 10: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 11: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 12: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();
Test 15: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
Test 16: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 18: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);
Test 20: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);
Test 21: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 22: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 23: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 24: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
Test 25: 
ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
Test 26: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
Test 27: 
ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);
Test 28: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);
Test 29: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);
Test 30: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);
Test 31: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);
Test 32: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitIntInsn(1, 276);
Test 33: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);
Test 34: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);
Test 35: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);
Test 36: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);
Test 37: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);
Test 38: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);
Test 39: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);
Test 40: 
ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);
Test 41: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);
Test 42: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);
Test 43: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");
Test 44: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");
Test 45: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");
Test 46: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
Test 47: 
ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
Test 48: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
Test 49: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
Test 50: 
ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
Test 51: 
ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 52: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
Test 53: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
Test 54: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 55: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);
Test 56: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);
Test 57: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);
Test 58: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);
Test 59: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 60: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 61: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");
Test 62: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 63: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(1);
Test 64: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);
Test 65: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);
Test 66: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));
Test 67: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);
Test 68: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 69: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);
Test 70: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
Test 71: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
Test 72: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));
Test 73: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
Test 74: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);
Test 75: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
Test 76: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));
Test 77: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);
Test 78: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
Test 79: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);
Test 80: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);
Test 82: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);
Test 83: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);
Test 84: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);
Test 85: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);
Test 86: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 87: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);
Test 88: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);
Test 89: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);
Test 90: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();
Test 91: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));
Test 92: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 93: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();
Test 94: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();
Test 95: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();
Test 96: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();
Test 97: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();
Test 98: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 99: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 100: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);
Test 101: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 102: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 103: 
ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 104: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 105: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();
Test 106: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 100;
MethodWriter.getNewOffset(intArray, intArray, label);
Test 107: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);
Test 108: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));
Test 109: 
int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 110: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);
Test 111: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);
Test 112: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 66;
MethodWriter.readInt(byteArray, 0);
Test 113: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);
Test 114: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);
Test 115: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 75;
MethodWriter.readUnsignedShort(byteArray, 1);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 824
* Number of covered goals: 525
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 1084
* Number of covered goals: 747
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 21
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 61%
* Total number of goals: 824
* Number of covered goals: 503
* Generated 116 tests with total length 737
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", arg5, true, true);
methodWriter.visitJumpInsn(167, arg1);

** It was a parseable test case! 
refined test name is: testMethodWritervisitJumpInsn
* Compiling Tests
refined test name is: testVisitJumpInstructionWithCorrectParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[4];
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
assertEquals(0, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortWithOffset1ShouldReturnZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, (-8), "", "<init>", "<init>", arg5, false, false);
methodWriter.visitCode();

** It was a parseable test case! 
refined test name is: testConstructorMethodWriter
* Compiling Tests
refined test name is: testMethodWriterConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[8];
MethodWriter.writeShort(arg0, 2, (-1803));
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-8), (byte) (-11), (byte)0, (byte)0, (byte)0, (byte)0}, arg0);


** It was a parseable test case! 
refined test name is: testWriteShort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[4];
short readShort = MethodWriter.readShort(arg0, 2);
assertEquals((short)0, readShort);


** It was a parseable test case! 
refined test name is: testReadShortWithFourElementByteArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
int readInt = MethodWriter.readInt(arg0, 0);
assertEquals(0, readInt);


** It was a parseable test case! 
refined test name is: testReadIntFromArrayWithOffsetZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "~33'$~gY+";
arg5[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", arg5, false, false);
methodWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testMethodWriterInitializationWithParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "Htz", "Xg)AS", "Xg)AS", arg5, true, false);
methodWriter.visitIntInsn(188, 74);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitIntInsnNoIllegalAccess
* Compiling Tests
refined test name is: testIntInsnVisitNoIllegalAccessWarnings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationOutOfBounds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(arg0, 1, "<init>", "<init>", (String) null, arg5, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}


** It was a parseable test case! 
refined test name is: testInvalidNameThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg5, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}


** It was a parseable test case! 
refined test name is: testMethodWriterWithValidArguments
* Compiling Tests
refined test name is: testConstructorWithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "g!V~yHe\"";
arg5[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
byte[] byteArray = arg0.toByteArray();
assertEquals(133, byteArray.length);


** It was a parseable test case! 
refined test name is: testMethodVisitor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777224);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "", arg5, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
int size = methodWriter.getSize();
assertEquals(40, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
refined test name is: testMethodWriterCreationAndAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false);
AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
assertNotNull(visitParameterAnnotation);


** It was a parseable test case! 
refined test name is: testMethodWriterVisitParameterAnnotationNotNull
* Compiling Tests
refined test name is: testVisitParameterAnnotationWithNonNullAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777224);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitParameterAnnotationInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2253));
String[] arg4 = new String[2];
arg4[0] = ";P3$";
arg4[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg4, false, false);
methodWriter.visitFrame(1, 1, arg4, 2, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterWithCorrectParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-3));
String[] arg4 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg4, true, true);
methodWriter.visitFrame(2, (-3), arg4, (-2), arg4);
assertEquals(0, arg4.length);


** It was a parseable test case! 
refined test name is: testVisitFrameWithNegativeSkipFrames
* Compiling Tests
refined test name is: testVisitFrameWithSpecificArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg4 = new String[2];
arg4[0] = ";P7$";
arg4[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg4, false, false);
methodWriter.visitFrame((-1), 1, arg4, 2, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterFrameType
* Compiling Tests
refined test name is: testCreateMethodWriterWithCorrectFrameType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2253));
String[] arg5 = new String[2];
arg5[0] = ";P3$";
arg5[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg5, false, false);
Object[] arg4 = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, arg4, 2, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithEmptyLocalsThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = ";P7$";
arg5[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg5, false, false);
Object[] arg4 = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), arg4, 2, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameWithNullPointerExceptionThrown
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg4 = new String[2];
arg4[0] = "";
arg4[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg4, true, false);
methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), arg4, 1, arg4);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameThrowsIllegalStateException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg4 = new String[2];
arg4[0] = "";
arg4[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg4, true, false);
methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), arg4, 1, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterVisitFrame
* Compiling Tests
refined test name is: testMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(4096);
String[] arg4 = new String[2];
arg4[0] = "Stac\"k;ap";
arg4[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(arg0, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", arg4, false, false);
methodWriter.visitFrame(3, 1, arg4, 4096, arg4);
methodWriter.visitFrame(3, 891, arg4, 1, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testVisitFrameMethods
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777229);
String[] arg4 = new String[2];
arg4[0] = "L";
arg4[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, 0, "L", "L", "L", arg4, false, false);
methodWriter.visitFrame(0, 1, arg4, 1, arg4);
assertEquals(2, arg4.length);


** It was a parseable test case! 
refined test name is: testMethodWriterInitializationAndVisitFrame
* Compiling Tests
refined test name is: testMethodWriterInitialization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2168));
String[] arg4 = new String[5];
arg4[0] = "";
arg4[1] = "";
arg4[2] = "";
arg4[3] = "";
arg4[4] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-2168), "", "", "", arg4, false, false);
methodWriter.visitFrame(4, (-2168), arg4, 1, arg4);
assertEquals(5, arg4.length);


** It was a parseable test case! 
refined test name is: testVisitFrameArrayLengthIsFive
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = "'P;$";
arg5[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "'P;$", "-&s6hYw):", "'P;$", arg5, true, false);
methodWriter.visitInsn(1);

** It was a parseable test case! 
refined test name is: testConstructorAndVisitInsn
* Compiling Tests
refined test name is: testVisitInsnMethodWriterConstructorAndVisitInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777229);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false);
methodWriter.visitInsn(191);

** It was a parseable test case! 
refined test name is: testMethodWriterPushesLocalVariableValueOntoStack
* Compiling Tests
refined test name is: testPushLocalVariableOntoStack
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(8);
String[] arg5 = new String[2];
arg5[0] = ";";
arg5[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(arg0, 1, ";", "", ";", arg5, false, false);
methodWriter.visitIntInsn(17, 17);

** It was a parseable test case! 
refined test name is: testMethodWriterLoadsConstantValue
* Compiling Tests
refined test name is: testMethodWithParameterTypes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 276, "H", "Xg)AS", "Code", arg5, true, false);
methodWriter.visitIntInsn(1, 276);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitIntInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 276, "H", "Xg)AS", "Code", arg5, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitFieldInsnAndVisitIntInsn
* Compiling Tests
refined test name is: testMethodWriterfieldAndIntegerInstructions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777245);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
methodWriter.visitVarInsn(170, 2);

** It was a parseable test case! 
refined test name is: testWriteMethodWithArgs
* Compiling Tests
refined test name is: testMethodNames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777224);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 16777224, "", "')'o}k +1R-", "", arg5, false, true);
methodWriter.visitVarInsn(54, 256);

** It was a parseable test case! 
refined test name is: testCreateMethodWriterObject
* Compiling Tests
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false);
methodWriter.visitVarInsn(22, 2);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
refined test name is: testVisitVarInsnMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "L";
MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitVarInsn(169, 41);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitVarInsn
* Compiling Tests
refined test name is: testMethodWithParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[8];
arg5[0] = "";
arg5[1] = "')'o.]}k +1R-";
arg5[2] = "')'o.]}k +1R-";
arg5[3] = "')'o.]}k +1R-";
arg5[4] = "')'o.]}k +1R-";
arg5[5] = "')'o.]}k +1R-";
arg5[6] = "')'o.]}k +1R-";
arg5[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false);
methodWriter.visitVarInsn(57, 187);

** It was a parseable test case! 
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-883), "", "')$'o}k +1R-", "", arg5, false, true);
methodWriter.visitVarInsn(24, 1);

** It was a parseable test case! 
refined test name is: testMethodWriterConstructor
* Compiling Tests
refined test name is: testMethodWriterCreationWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777249);
String[] arg5 = new String[9];
arg5[0] = "Htz";
arg5[1] = "AnnotationDefault";
arg5[2] = "\"";
arg5[3] = "Htz";
arg5[4] = "\"";
arg5[5] = "Htz";
arg5[6] = "')'o}k +1R-";
arg5[7] = "Htz";
arg5[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(arg0, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", arg5, true, false);
methodWriter.visitVarInsn(55, 16777249);

** It was a parseable test case! 
refined test name is: testMethodNameSuggestion
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = "W";
arg5[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false);
methodWriter.visitVarInsn(1, 1);

** It was a parseable test case! 
refined test name is: testWriteMethodWithSpecificStructure
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-779));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);

** It was a parseable test case! 
refined test name is: testMethodNameShouldWriteMethodBodyToClassWriter
* Compiling Tests
refined test name is: testWriteMethodWithTryCatchBlock
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2002);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 2002, "z", "StackMapTable", "", arg5, false, false);
methodWriter.visitTypeInsn(2002, "z");

** It was a parseable test case! 
refined test name is: testVisitTypeInsnReturnsCorrectValue
* Compiling Tests
refined test name is: testMethodWriterVisitTypeInsnReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-883), "8", "')$'o}k +1R-", "8", arg5, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");

** It was a parseable test case! 
refined test name is: testVisitTypeInsnValidInput
* Compiling Tests
refined test name is: testVisitTypeInsnwithOpcode2AndDescriptor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[8];
arg5[0] = "";
arg5[1] = "')'o.]}k +1R-";
arg5[2] = "')'o.]}k +1R-";
arg5[3] = "')'o.]}k +1R-";
arg5[4] = "')'o.]}k +1R-";
arg5[5] = "')'o.]}k +1R-";
arg5[6] = "')'o.]}k +1R-";
arg5[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");

** It was a parseable test case! 
refined test name is: testVisitTypeInsn
* Compiling Tests
refined test name is: testMethodWriterVisitTypeInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");

** It was a parseable test case! 
refined test name is: testWriteMethodNameAndExceptionTypes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(251);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "L";
MethodWriter methodWriter = new MethodWriter(arg0, 251, "L", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");

** It was a parseable test case! 
refined test name is: testClassWriterVisitFieldInsnMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");

** It was a parseable test case! 
refined test name is: testMethodWriterConstructorWithDeprecatedField
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "L";
MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");

** It was a parseable test case! 
refined test name is: testVisitFieldInsncreatesFieldInstruction
* Compiling Tests
refined test name is: testCreateFieldInstructionWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777212);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "F6}A}w:N~hq(g)Z", "", arg5, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");

** It was a parseable test case! 
refined test name is: testInsertsShortValue
* Compiling Tests
refined test name is: testInsertShortValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(553);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1639, "Hm/tz", "Hm/tz", "Hm/tz", arg5, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}


** It was a parseable test case! 
refined test name is: testMethodWriterVisitMethodInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");

** It was a parseable test case! 
refined test name is: testMethodWriterInvokeMethodWithParameters
* Compiling Tests
refined test name is: testMethodWriterInvocation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777229);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");

** It was a parseable test case! 
refined test name is: testCreateMethodWriterWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XXH+l", "Xg)AS", "Xg)AS", arg5, true, false);
methodWriter.visitJumpInsn(168, arg1);
methodWriter.visitJumpInsn(168, arg1);

** It was a parseable test case! 
refined test name is: testJumpInstructionWithLabelReference
* Compiling Tests
refined test name is: testMethodWithJumpInstruction
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = ";CP;$";
arg5[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false);
Label arg1 = new Label();
methodWriter.visitJumpInsn(178, arg1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitJumpInsnWithLabel
* Compiling Tests
refined test name is: testMethodWriterVisitJumpInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777224);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, true, true);
Label arg1 = new Label();
methodWriter.visitLabel(arg1);
methodWriter.visitJumpInsn(2, arg1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = ";CP;$";
arg5[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false);
methodWriter.visitLdcInsn(";CP;$");

** It was a parseable test case! 
refined test name is: testMethodWriterVisitLdcInsnWithSemicolonString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, true);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitLdcInsn
* Compiling Tests
refined test name is: testMethodWriterWithIntegerParameterAndResult
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "L";
MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitMultiANewArrayInsn
* Compiling Tests
refined test name is: testMethodWriterVisitMultiANewArrayInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Deprecated";
arg0.index = 647;
MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false);
methodWriter.visitLdcInsn(1);

** It was a parseable test case! 
refined test name is: testMethodWriterWithCorrectArguments
* Compiling Tests
refined test name is: testMethodWriterConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false);
methodWriter.visitIincInsn(28, 28);

** It was a parseable test case! 
refined test name is: testIncrementLocalVariableByAmount
* Compiling Tests
refined test name is: testMethodWriterIncrementLocalVariableBy28
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = ";P;$";
arg5[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P;$", "-&s6hYw):", ";P;$", arg5, true, false);
methodWriter.visitIincInsn((-5549), (-1652));

** It was a parseable test case! 
refined test name is: testIincInsn
* Compiling Tests
refined test name is: testVisitIincInsnAddsTwoToTheStack
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777186);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", arg5, true, true);
methodWriter.visitIincInsn(202, 1493);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitIincInsn
* Compiling Tests
refined test name is: testMethodWriterVisitIincInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2002);
String[] arg5 = new String[5];
arg5[0] = "StackMap";
arg5[1] = "Code";
arg5[2] = "!2:W uG.AP.nP9Fsrdv";
arg5[3] = "StackMap";
arg5[4] = "Code";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "Code", "Code", "StackMap", arg5, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);

** It was a parseable test case! 
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777241);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", arg5, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);

** It was a parseable test case! 
refined test name is: testVisitMultiANewArrayInsn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777223);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
methodWriter.visitMaxs(5, (-2505));

** It was a parseable test case! 
refined test name is: testVisitTryCatchBlock
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777223);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "");
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "')~o}k +1Rl");

** It was a parseable test case! 
refined test name is: testVisitTryCatchBlock
* Compiling Tests
refined test name is: testTryCatchBlockIsSetUpCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, arg4, arg4, 252);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitLocalVariable
* Compiling Tests
refined test name is: testCreateMethodWriterAndDefineLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = "W";
arg5[1] = ";P7$";
Label arg4 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", arg4, arg4, 1);

** It was a parseable test case! 
refined test name is: testMethodWriterVisitLocalVariable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", arg4, arg4, (-1899));

** It was a parseable test case! 
refined test name is: testMethodWriter
* Compiling Tests
refined test name is: testWriteMethodWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "Deprecated";
Label arg4 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", arg4, arg4, 28);

** It was a parseable test case! 
refined test name is: testCreateLabelWithNameAndDescriptor
* Compiling Tests
refined test name is: testCreateLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777229);
String[] arg5 = new String[2];
arg5[0] = "L";
arg5[1] = "Deprecated";
Label arg4 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "<init>", "-&s6hYw):K", "L", arg5, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", arg4, arg4, 16777229);

** It was a parseable test case! 
refined test name is: testvisitLocalVariable
* Compiling Tests
refined test name is: testMethodWriterCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "Deprecated";
arg5[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(arg0, (-7), "L", "<init>", "<init>", arg5, false, false);
Label arg1 = new Label();
methodWriter.visitLineNumber(22, arg1);
methodWriter.visitLineNumber((-654), arg1);

** It was a parseable test case! 
refined test name is: testVisitingLineNumbers
* Compiling Tests
refined test name is: testMethodWriterVisitLineNumbers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777223);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
Label arg1 = new Label();
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitMaxsThrowsNullPointerException
* Compiling Tests
refined test name is: testVisitMaxsthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-779));
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);

** It was a parseable test case! 
refined test name is: testVisitVarInsn
* Compiling Tests
refined test name is: testMethodWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777239);
String[] arg5 = new String[7];
arg5[0] = "Deprecated";
arg5[1] = "Deprecated";
arg5[2] = "Deprecated";
arg5[3] = "Deprecated";
arg5[4] = "Signature";
arg5[5] = "Signature";
arg5[6] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false);
methodWriter.visitMaxs(2, 1024);

** It was a parseable test case! 
refined test name is: testMethodSignatureArrayshouldHaveCorrectValues
* Compiling Tests
refined test name is: testMethodWriterVisitMaxs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777226);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
Label arg2 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "", "-&s6hYw):", "", arg5, true, false);
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "");
methodWriter.visitMaxs(16777226, 16777226);

** It was a parseable test case! 
refined test name is: testMethodWriterAddTryCatchBlockAndSetMaxSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777226);
String[] arg5 = new String[2];
arg5[0] = "r";
arg5[1] = "r";
Label arg1 = new Label();
MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "r", "-&s6hYw):", "r", arg5, true, false);
Label arg2 = new Label();
methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitMaxsThrowsExceptionWithInvalidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-2268));
String[] arg5 = new String[2];
arg5[0] = "org.objectweb.asm.jip.Attribute";
arg5[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", arg5, false, false);
Object[] arg4 = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, arg4, 2, arg4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


** It was a parseable test case! 
refined test name is: testVisitFrameNpe
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(arg0, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
byte[] byteArray = arg0.toByteArray();
assertEquals(80, byteArray.length);


** It was a parseable test case! 
refined test name is: testMethodWriterLengthWithParameters
* Compiling Tests
refined test name is: testMethodWriterWithParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777245);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
methodWriter.classReaderOffset = 11;
int size = methodWriter.getSize();
assertEquals(6, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
refined test name is: testMethodWriterConstructorAndGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "";
arg5[1] = "";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
Label arg4 = new Label();
methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
int size = methodWriter.getSize();
assertEquals(85, size);


** It was a parseable test case! 
refined test name is: testCreateMethodWithLocalVariable
* Compiling Tests
refined test name is: testMethodWriterWithLocalVariableAndField
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[7];
arg5[0] = "g!V~yHe\"";
arg5[1] = "g!V~yHe\"";
arg5[2] = "g!V~yHe\"";
arg5[3] = "g!V~yHe\"";
arg5[4] = "g!V~yHe\"";
arg5[5] = "g!V~yHe\"";
arg5[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(arg0, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
Label arg1 = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, arg1);
byte[] byteArray = arg0.toByteArray();
assertEquals(157, byteArray.length);


** It was a parseable test case! 
refined test name is: testMethodWriterStackSizeAndLineNumber
* Compiling Tests
refined test name is: testMethodWriterWithLineNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg4 = new String[1];
arg4[0] = "init>";
MethodWriter methodWriter = new MethodWriter(arg0, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", arg4, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, arg4, 713, arg4);
int size = methodWriter.getSize();
assertEquals(73, size);


** It was a parseable test case! 
refined test name is: testVisitIincInsnAndGetSize
* Compiling Tests
refined test name is: testVisitIincInsnAndVisitFrame
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2002);
String[] arg5 = new String[0];
MethodWriter methodWriter = new MethodWriter(arg0, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, arg5, false, false);
int size = methodWriter.getSize();
assertEquals(8, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
refined test name is: testMethodWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777239);
String[] arg5 = new String[7];
arg5[0] = "Deprecated";
arg5[1] = "Deprecated";
arg5[2] = "Deprecated";
arg5[3] = "Deprecated";
arg5[4] = "Signature";
arg5[5] = "Signature";
arg5[6] = "";
MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false);
methodWriter.visitAnnotationDefault();
int size = methodWriter.getSize();
assertEquals(56, size);


** It was a parseable test case! 
refined test name is: testMethodWriterSize
* Compiling Tests
refined test name is: testMethodWriterCreationAndSizeChecking
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(16777216);
String[] arg5 = new String[2];
arg5[0] = "g!V~yHe\"";
arg5[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
Label arg2 = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "[]");
byte[] byteArray = arg0.toByteArray();
assertEquals(133, byteArray.length);


** It was a parseable test case! 
refined test name is: testWriteStringToFileshouldReturn133Bytes
* Compiling Tests
refined test name is: testMethodWriterWithTryCatchAndLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Label arg2 = new Label();
int[] arg1 = new int[4];
arg1[0] = 100;
MethodWriter.getNewOffset(arg1, arg1, arg2);
assertArrayEquals(new int[] {100, 0, 0, 0}, arg1);


** It was a parseable test case! 
refined test name is: testGetNewOffset
* Compiling Tests
refined test name is: testGetNewOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[2];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-2354), 605);
assertEquals(2959, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[5];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 0, (-1726));
assertEquals((-1726), newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetvalidInputreturnsExpectedOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[6];
Label arg2 = new Label();
MethodWriter.getNewOffset(arg1, arg1, arg2);
MethodWriter.getNewOffset(arg1, arg1, arg2);
assertEquals(6, arg1.length);


** It was a parseable test case! 
refined test name is: testGetNewOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[2];
int newOffset = MethodWriter.getNewOffset(arg1, arg1, 4388, 4388);
assertEquals(0, newOffset);


** It was a parseable test case! 
refined test name is: testGetNewOffsetWithEmptyArrays
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[7];
arg0[1] = (byte) (-10);
int readInt = MethodWriter.readInt(arg0, 1);
assertEquals((-167772160), readInt);


** It was a parseable test case! 
refined test name is: testReadIntWithNegativeByteValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[5];
arg0[0] = (byte) 66;
int readInt = MethodWriter.readInt(arg0, 0);
assertEquals(1107296256, readInt);


** It was a parseable test case! 
refined test name is: testReadIntFromByteArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[4];
arg0[2] = (byte) (-114);
short readShort = MethodWriter.readShort(arg0, 2);
assertEquals((short) (-29184), readShort);


** It was a parseable test case! 
refined test name is: testReadShortSignedShortValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[9];
arg0[0] = (byte)68;
short readShort = MethodWriter.readShort(arg0, (byte)0);
assertEquals((short)17408, readShort);


** It was a parseable test case! 
refined test name is: testReadShortWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[4];
arg0[1] = (byte) 75;
int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
assertEquals(19200, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortBigEndianRepresentation
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:11.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.397 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:11.398 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
[MASTER] 12:58:11.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.456 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
[MASTER] 12:58:11.510 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.511 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.555 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.556 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.604 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.660 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.660 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:11.704 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.748 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
[MASTER] 12:58:11.790 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.791 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:11.832 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.833 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
[MASTER] 12:58:11.873 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:11.916 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:11.964 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:11.965 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.204 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.252 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.253 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.304 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.305 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.376 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.377 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.494 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.496 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.532 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.597 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.598 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.634 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.635 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.670 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.701 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.764 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.764 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:12.795 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.834 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.864 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.895 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:12.967 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:12.968 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.002 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.003 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.043 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.111 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.112 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.173 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.174 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.210 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.211 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.251 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.341 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.342 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.383 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.443 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.445 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.488 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.489 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.531 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.585 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.586 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.643 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.644 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.698 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.699 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.735 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:13.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:58:13.850 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
* Compiling Tests
[MASTER] 12:58:13.892 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.892 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:13.950 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:13.950 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.014 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.015 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.056 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.057 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.106 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.107 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.153 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.154 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.200 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.247 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.249 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.300 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.301 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:14.354 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.355 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:14.411 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.465 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.526 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:14.574 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.636 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.637 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.681 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.682 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.735 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.791 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.792 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.852 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.853 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.911 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.912 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:14.962 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:14.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.010 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.070 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.071 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.127 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.172 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.228 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.229 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.294 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.295 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.338 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.339 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.410 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.476 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.533 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.579 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:58:15.627 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.674 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.720 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.769 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.818 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.819 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.867 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.914 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.915 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:15.959 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:15.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:16.010 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:16.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:58:16.059 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:16.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 7 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
** Write a test suite: 12 called: 4 to improve: false
** Write a test suite: 13 called: 5 to improve: false
** Write a test suite: 16 called: 6 to improve: false
** Write a test suite: 17 called: 7 to improve: false
** Write a test suite: 21 called: 8 to improve: false
** Write a test suite: 23 called: 9 to improve: false
** Write a test suite: 25 called: 10 to improve: false
** Write a test suite: 26 called: 11 to improve: false
** Write a test suite: 27 called: 12 to improve: false
** Write a test suite: 29 called: 13 to improve: false
** Write a test suite: 30 called: 14 to improve: false
** Write a test suite: 31 called: 15 to improve: false
** Write a test suite: 32 called: 16 to improve: false
** Write a test suite: 33 called: 17 to improve: false
** Write a test suite: 35 called: 18 to improve: false
** Write a test suite: 38 called: 19 to improve: false
** Write a test suite: 39 called: 20 to improve: false
** Write a test suite: 40 called: 21 to improve: false
** Write a test suite: 41 called: 22 to improve: false
** Write a test suite: 45 called: 23 to improve: false
** Write a test suite: 46 called: 24 to improve: false
** Write a test suite: 48 called: 25 to improve: false
** Write a test suite: 50 called: 26 to improve: false
** Write a test suite: 51 called: 27 to improve: false
** Write a test suite: 54 called: 28 to improve: false
** Write a test suite: 55 called: 29 to improve: false
** Write a test suite: 56 called: 30 to improve: false
** Write a test suite: 57 called: 31 to improve: false
** Write a test suite: 58 called: 32 to improve: false
** Write a test suite: 59 called: 33 to improve: false
** Write a test suite: 60 called: 34 to improve: false
** Write a test suite: 63 called: 35 to improve: false
** Write a test suite: 64 called: 36 to improve: false
** Write a test suite: 66 called: 37 to improve: false
** Write a test suite: 67 called: 38 to improve: false
** Write a test suite: 68 called: 39 to improve: false
** Write a test suite: 69 called: 40 to improve: false
** Write a test suite: 70 called: 41 to improve: false
** Write a test suite: 71 called: 42 to improve: false
** Write a test suite: 72 called: 43 to improve: false
** Write a test suite: 76 called: 44 to improve: false
** Write a test suite: 77 called: 45 to improve: false
** Write a test suite: 78 called: 46 to improve: false
** Write a test suite: 79 called: 47 to improve: false
** Write a test suite: 80 called: 48 to improve: false
** Write a test suite: 81 called: 49 to improve: false
** Write a test suite: 82 called: 50 to improve: false
** Write a test suite: 83 called: 51 to improve: false
** Write a test suite: 84 called: 52 to improve: false
[MASTER] 12:58:18.603 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:18.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 9 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 15 called: 6 to improve: false
** Write a test suite: 16 called: 7 to improve: false
** Write a test suite: 17 called: 8 to improve: false
** Write a test suite: 21 called: 9 to improve: false
** Write a test suite: 22 called: 10 to improve: false
** Write a test suite: 23 called: 11 to improve: false
** Write a test suite: 24 called: 12 to improve: false
** Write a test suite: 25 called: 13 to improve: false
** Write a test suite: 26 called: 14 to improve: false
** Write a test suite: 27 called: 15 to improve: false
** Write a test suite: 29 called: 16 to improve: false
** Write a test suite: 30 called: 17 to improve: false
** Write a test suite: 33 called: 18 to improve: false
** Write a test suite: 34 called: 19 to improve: false
** Write a test suite: 35 called: 20 to improve: false
** Write a test suite: 36 called: 21 to improve: false
** Write a test suite: 37 called: 22 to improve: false
** Write a test suite: 38 called: 23 to improve: false
** Write a test suite: 39 called: 24 to improve: false
** Write a test suite: 42 called: 25 to improve: false
** Write a test suite: 43 called: 26 to improve: false
** Write a test suite: 45 called: 27 to improve: false
** Write a test suite: 47 called: 28 to improve: false
** Write a test suite: 48 called: 29 to improve: false
** Write a test suite: 52 called: 30 to improve: false
** Write a test suite: 53 called: 31 to improve: false
** Write a test suite: 54 called: 32 to improve: false
** Write a test suite: 55 called: 33 to improve: false
** Write a test suite: 58 called: 34 to improve: false
** Write a test suite: 60 called: 35 to improve: false
** Write a test suite: 61 called: 36 to improve: false
** Write a test suite: 62 called: 37 to improve: false
** Write a test suite: 63 called: 38 to improve: false
** Write a test suite: 64 called: 39 to improve: false
** Write a test suite: 66 called: 40 to improve: false
** Write a test suite: 67 called: 41 to improve: false
** Write a test suite: 68 called: 42 to improve: false
** Write a test suite: 70 called: 43 to improve: false
** Write a test suite: 72 called: 44 to improve: false
** Write a test suite: 76 called: 45 to improve: false
** Write a test suite: 77 called: 46 to improve: false
** Write a test suite: 80 called: 47 to improve: false
** Write a test suite: 81 called: 48 to improve: false
** Write a test suite: 83 called: 49 to improve: false
** Write a test suite: 86 called: 50 to improve: false
** Write a test suite: 91 called: 51 to improve: false
** Write a test suite: 93 called: 52 to improve: false
[MASTER] 12:58:20.342 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:58:20.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
[MASTER] 12:58:21.783 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 114
Test 0: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 1: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));
Test 2: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 3: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();
Test 4: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");
Test 6: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
Test 9: 
ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 10: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);
Test 11: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 12: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 14: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
Test 15: 
ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
Test 16: 
ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);
Test 17: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
Test 18: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 20: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);
Test 21: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);
Test 22: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIntInsn((-2268), 90);
Test 23: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);
Test 24: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);
Test 25: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);
Test 26: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);
Test 27: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);
Test 28: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);
Test 29: 
ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);
Test 30: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);
Test 31: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);
Test 33: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);
Test 34: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);
Test 35: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");
Test 36: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");
Test 37: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
Test 38: 
ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
Test 39: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
Test 40: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
Test 41: 
ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 42: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
Test 43: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
Test 44: 
ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
Test 45: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);
Test 46: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);
Test 47: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);
Test 48: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);
Test 49: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);
Test 50: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 51: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 52: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");
Test 53: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 54: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(classWriter.COMPUTE_FRAMES);
Test 55: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);
Test 56: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);
Test 57: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));
Test 58: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);
Test 59: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
Test 60: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
Test 61: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
Test 62: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);
Test 63: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));
Test 64: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);
Test 65: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
Test 66: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
Test 67: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);
Test 68: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);
Test 69: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));
Test 70: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 71: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);
Test 72: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);
Test 73: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);
Test 74: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 75: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);
Test 76: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);
Test 77: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);
Test 78: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);
Test 79: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();
Test 80: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));
Test 81: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);
Test 82: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 83: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();
Test 84: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();
Test 85: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();
Test 86: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();
Test 87: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 88: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 89: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();
Test 90: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();
Test 91: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 92: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();
Test 93: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);
Test 94: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 95: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 96: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 97: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 98: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();
Test 99: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 100: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 16777216;
MethodWriter.getNewOffset(intArray, intArray, label);
Test 101: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);
Test 102: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));
Test 103: 
int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 104: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);
Test 105: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);
Test 106: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);
Test 107: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)56;
MethodWriter.readInt(byteArray, (byte)0);
Test 108: 
byte[] byteArray = new byte[20];
MethodWriter.readInt(byteArray, 16);
Test 109: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);
Test 110: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);
Test 111: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte)75;
MethodWriter.readUnsignedShort(byteArray, 1);
Test 112: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 113: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}


* Minimizing test suite
[MASTER] 12:58:43.568 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 116
Test 0: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", stringArray, true, true);
methodWriter.visitJumpInsn(167, label);
Test 1: 
byte[] byteArray = new byte[4];
MethodWriter.readUnsignedShort(byteArray, 1);
Test 2: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-8), "", "<init>", "<init>", stringArray, false, false);
methodWriter.visitCode();
Test 3: 
byte[] byteArray = new byte[8];
MethodWriter.writeShort(byteArray, 2, (-1803));
Test 4: 
byte[] byteArray = new byte[4];
MethodWriter.readShort(byteArray, 2);
Test 5: 
byte[] byteArray = new byte[20];
MethodWriter.readInt(byteArray, 16);
Test 6: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
methodWriter.visitAnnotationDefault();
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 7: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "~33'$~gY+";
stringArray[1] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", stringArray, false, false);
methodWriter.visitEnd();
Test 8: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 16777216, (String) null, "Signature", "1`wM~{wz6nHU9q/J-nj", (String[]) null, true, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "Htz", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitIntInsn(188, 74);
Test 10: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 16777216
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 11: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = null;
try {
  methodWriter = new MethodWriter(classWriter, 1, "<init>", "<init>", (String) null, stringArray, false, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 12: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
// Undeclared exception!
try { 
  methodWriter.visitInsn((-3));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Frame", e);
}

Test 13: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
methodWriter.visitAnnotation("g!V~yHe\"", false);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
methodWriter.getSize();
Test 15: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
Test 16: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, false, true);
// Undeclared exception!
try { 
  methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 17: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Attribute attribute = new Attribute("eb7#-\ficS1a");
methodWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 18: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
methodWriter.visitFrame(1, 1, stringArray, 2, stringArray);
Test 19: 
ClassWriter classWriter = new ClassWriter((-3));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", stringArray, true, true);
methodWriter.visitFrame(2, (-3), stringArray, (-2), stringArray);
Test 20: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
methodWriter.visitFrame((-1), 1, stringArray, 2, stringArray);
Test 21: 
ClassWriter classWriter = new ClassWriter((-2253));
String[] stringArray = new String[2];
stringArray[0] = ";P3$";
stringArray[1] = ";P3$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2253), ";P3$", ";P3$", ";P3$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 22: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P7$";
stringArray[1] = ";P7$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P7$", ";P7$", ";P7$", stringArray, false, false);
Object[] objectArray = new Object[4];
// Undeclared exception!
try { 
  methodWriter.visitFrame((-1), (-1), objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 23: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
// Undeclared exception!
try { 
  methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 24: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitFrame(16777186, (-1105), stringArray, 2, stringArray);
methodWriter.visitTypeInsn(76, "");
methodWriter.visitFrame(267, (-1105), stringArray, 1, stringArray);
Test 25: 
ClassWriter classWriter = new ClassWriter(4096);
String[] stringArray = new String[2];
stringArray[0] = "Stac\"k;ap";
stringArray[1] = "Stac\"k;ap";
MethodWriter methodWriter = new MethodWriter(classWriter, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", stringArray, false, false);
methodWriter.visitFrame(3, 1, stringArray, 4096, stringArray);
methodWriter.visitFrame(3, 891, stringArray, 1, stringArray);
Test 26: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 0, "L", "L", "L", stringArray, false, false);
methodWriter.visitFrame(0, 1, stringArray, 1, stringArray);
Test 27: 
ClassWriter classWriter = new ClassWriter((-2168));
String[] stringArray = new String[5];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2168), "", "", "", stringArray, false, false);
methodWriter.visitFrame(4, (-2168), stringArray, 1, stringArray);
Test 28: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "'P;$";
stringArray[1] = "'P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "'P;$", "-&s6hYw):", "'P;$", stringArray, true, false);
methodWriter.visitInsn(1);
Test 29: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitInsn(191);
Test 30: 
ClassWriter classWriter = new ClassWriter(8);
String[] stringArray = new String[2];
stringArray[0] = ";";
stringArray[1] = "boolean";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, ";", "", ";", stringArray, false, false);
methodWriter.visitIntInsn(17, 17);
Test 31: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
methodWriter.visitIntInsn(15, (-898));
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(1, 512);
Test 32: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitIntInsn(1, 276);
Test 33: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 276, "H", "Xg)AS", "Code", stringArray, true, false);
methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
methodWriter.visitIntInsn(1, 276);
Test 34: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.visitVarInsn(170, 2);
Test 35: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777224, "", "')'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(54, 256);
Test 36: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitVarInsn(22, 2);
Test 37: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitVarInsn(169, 41);
Test 38: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitVarInsn(57, 187);
Test 39: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "", "')$'o}k +1R-", "", stringArray, false, true);
methodWriter.visitVarInsn(24, 1);
Test 40: 
ClassWriter classWriter = new ClassWriter(16777249);
String[] stringArray = new String[9];
stringArray[0] = "Htz";
stringArray[1] = "AnnotationDefault";
stringArray[2] = "\"";
stringArray[3] = "Htz";
stringArray[4] = "\"";
stringArray[5] = "Htz";
stringArray[6] = "')'o}k +1R-";
stringArray[7] = "Htz";
stringArray[8] = "Htz";
MethodWriter methodWriter = new MethodWriter(classWriter, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", stringArray, true, false);
methodWriter.visitVarInsn(55, 16777249);
Test 41: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitVarInsn(1, 1);
Test 42: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitVarInsn(132, 1172);
Test 43: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "z", "StackMapTable", "", stringArray, false, false);
methodWriter.visitTypeInsn(2002, "z");
Test 44: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-883), "8", "')$'o}k +1R-", "8", stringArray, false, true);
methodWriter.visitTypeInsn(2, "d>@v[F");
Test 45: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "')'o.]}k +1R-";
stringArray[2] = "')'o.]}k +1R-";
stringArray[3] = "')'o.]}k +1R-";
stringArray[4] = "')'o.]}k +1R-";
stringArray[5] = "')'o.]}k +1R-";
stringArray[6] = "')'o.]}k +1R-";
stringArray[7] = "')'o.]}k +1R-";
MethodWriter methodWriter = new MethodWriter(classWriter, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", stringArray, true, false);
methodWriter.visitTypeInsn(187, "Signam3re");
Test 46: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", stringArray, false, true);
methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
Test 47: 
ClassWriter classWriter = new ClassWriter(251);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 251, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
Test 48: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
Test 49: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
Test 50: 
ClassWriter classWriter = new ClassWriter(16777212);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "F6}A}w:N~hq(g)Z", "", stringArray, false, false);
methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
Test 51: 
ClassWriter classWriter = new ClassWriter(553);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1639, "Hm/tz", "Hm/tz", "Hm/tz", stringArray, false, false);
// Undeclared exception!
try { 
  methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 52: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
Test 53: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "", "-&s6hYw):K", "", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("", (-501));
methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
Test 54: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitJumpInsn(2, label);
methodWriter.visitLocalVariable("", "", "", label, label, 195);
ByteVector byteVector = new ByteVector();
methodWriter.put(byteVector);
Test 55: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777241, "XXH+l", "Xg)AS", "Xg)AS", stringArray, true, false);
methodWriter.visitJumpInsn(168, label);
methodWriter.visitJumpInsn(168, label);
Test 56: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
Label label = new Label();
methodWriter.visitJumpInsn(178, label);
Test 57: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "", "')'o}k  \"+1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitJumpInsn(2, label);
Test 58: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "-.TI|t", "ec", "!2:W uG.AP.nP9Fsrdv", stringArray, false, false);
Label label = new Label();
label.status = (-1181);
methodWriter.visitLabel(label);
Test 59: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, false, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLabel(label);
Test 60: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "r4Tgh!0hQt!;@\"onI";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "G.tPVT_", "r4Tgh!0hQt!;@\"onI", "hzgl", stringArray, false, false);
Label label = new Label();
methodWriter.visitLabel(label);
Test 61: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";CP;$";
stringArray[1] = ";CP;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", stringArray, true, false);
methodWriter.visitLdcInsn(";CP;$");
Test 62: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, true);
methodWriter.visitLdcInsn(1);
Test 63: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "L";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "L", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn("L", 16777186);
methodWriter.visitLdcInsn(classWriter.COMPUTE_FRAMES);
Test 64: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
classWriter.index = 647;
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "", "", "", stringArray, false, false);
methodWriter.visitLdcInsn(1);
Test 65: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, 12, "", "Signature", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn(28, 28);
Test 66: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitIincInsn((-5549), (-1652));
Test 67: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", stringArray, true, true);
methodWriter.visitIincInsn(202, 1493);
Test 68: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
methodWriter.visitIincInsn(1024, (-823));
methodWriter.visitFrame(16777216, (-471), stringArray, (-1623953025), stringArray);
classWriter.visit((-823), (-2648), "L", "L", "LineNumberTable", stringArray);
ByteVector byteVector = new ByteVector(1);
methodWriter.put(byteVector);
Test 69: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
Label[] labelArray = new Label[4];
labelArray[0] = label;
labelArray[1] = label;
labelArray[2] = label;
labelArray[3] = label;
methodWriter.visitTableSwitchInsn(1, 46, label, labelArray);
methodWriter.visitLabel(label);
Test 70: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[5];
stringArray[0] = "StackMap";
stringArray[1] = "Code";
stringArray[2] = "!2:W uG.AP.nP9Fsrdv";
stringArray[3] = "StackMap";
stringArray[4] = "Code";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Code", "Code", "StackMap", stringArray, false, false);
methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
Test 71: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", stringArray, true, true);
methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
Test 72: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, (String) null);
methodWriter.visitMaxs(5, (-2505));
Test 73: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
Test 74: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "Signature", (String) null, label, label, 252);
Test 75: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "W";
stringArray[1] = ";P7$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "W", "-&s6hYw):", "W", stringArray, true, false);
methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", label, label, 1);
Test 76: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", label, label, (-1899));
Test 77: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777216, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", label, label, 28);
Test 78: 
ClassWriter classWriter = new ClassWriter(16777229);
String[] stringArray = new String[2];
stringArray[0] = "L";
stringArray[1] = "Deprecated";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777229, "<init>", "-&s6hYw):K", "L", stringArray, true, false);
methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", label, label, 16777229);
Test 79: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-7), "L", "<init>", "<init>", stringArray, false, false);
Label label = new Label();
methodWriter.visitLineNumber(22, label);
methodWriter.visitLineNumber((-654), label);
Test 80: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-856), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "')~o}k +1Rl");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(16777223, 16777223);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitVarInsn(1, 2);
methodWriter.visitMaxs(252, 50);
Test 82: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-853), "tc W(Aler2^x#(D", "')'k  \"+1-", "tc W(Aler2^x#(D", stringArray, true, true);
methodWriter.visitMethodInsn(1, "')'k  \"+1-", "tc W(Aler2^x#(D", "tc W(Aler2^x#(D");
Label label = new Label();
label.next = label;
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-853), 2);
Test 83: 
ClassWriter classWriter = new ClassWriter(16777224);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 188, "", "')'o}k +1R-", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[1];
labelArray[0] = label;
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(188, 1);
Test 84: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitMaxs(2, 1024);
Test 85: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "", "-&s6hYw):", "", stringArray, true, false);
methodWriter.visitTryCatchBlock(label, label, label, "");
methodWriter.visitMaxs(16777226, 16777226);
Test 86: 
ClassWriter classWriter = new ClassWriter(16777226);
String[] stringArray = new String[2];
stringArray[0] = "r";
stringArray[1] = "r";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, 16777226, "r", "-&s6hYw):", "r", stringArray, true, false);
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "r");
// Undeclared exception!
try { 
  methodWriter.visitMaxs(2, 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 87: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = ";P;$";
stringArray[1] = ";P;$";
Label label = new Label();
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), ";P;$", "-&s6hYw):", ";P;$", stringArray, true, false);
methodWriter.visitMultiANewArrayInsn(";P;$", (-2514));
methodWriter.visitLabel(label);
methodWriter.visitMaxs(1, 1);
Test 88: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, false);
Label label = new Label();
methodWriter.visitLabel(label);
methodWriter.visitLabel(label);
methodWriter.visitMaxs((-384), 172);
Test 89: 
ClassWriter classWriter = new ClassWriter((-779));
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", stringArray, false, true);
methodWriter.visitMethodInsn(252, "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb");
Label label = new Label();
methodWriter.visitTryCatchBlock(label, label, label, "vX6B_-)w^]ZjDHjb");
methodWriter.visitLabel(label);
methodWriter.visitMaxs(2, 2);
Test 90: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "", "')~o}k +1Rl", "", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.getSize();
Test 91: 
ClassWriter classWriter = new ClassWriter(16777223);
String[] stringArray = new String[0];
classWriter.version = (-384);
MethodWriter methodWriter = new MethodWriter(classWriter, (-857), "I", "')~o}k +1Rl", "I", stringArray, true, true);
Label label = new Label();
methodWriter.visitLabel(label);
int[] intArray = new int[8];
Label[] labelArray = new Label[0];
methodWriter.visitLookupSwitchInsn(label, intArray, labelArray);
methodWriter.visitMaxs(0, 2);
methodWriter.visitMaxs(185, (-2386));
Test 92: 
ClassWriter classWriter = new ClassWriter((-2268));
String[] stringArray = new String[2];
stringArray[0] = "org.objectweb.asm.jip.Attribute";
stringArray[1] = "org.objectweb.asm.jip.Attribute";
MethodWriter methodWriter = new MethodWriter(classWriter, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", stringArray, false, false);
Object[] objectArray = new Object[8];
// Undeclared exception!
try { 
  methodWriter.visitFrame(1, 1, objectArray, 2, objectArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.MethodWriter", e);
}

Test 93: 
ClassWriter classWriter = new ClassWriter(2002);
MethodWriter methodWriter = new MethodWriter(classWriter, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
classWriter.toByteArray();
Test 94: 
ClassWriter classWriter = new ClassWriter(16777245);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
methodWriter.classReaderOffset = 11;
methodWriter.getSize();
Test 95: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Htz", "", "", stringArray, false, false);
Label label = new Label();
methodWriter.visitLocalVariable("", "", "", label, label, 195);
methodWriter.visitFieldInsn(1, "=8", "Htz", "");
methodWriter.getSize();
Test 96: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[7];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
stringArray[2] = "g!V~yHe\"";
stringArray[3] = "g!V~yHe\"";
stringArray[4] = "g!V~yHe\"";
stringArray[5] = "g!V~yHe\"";
stringArray[6] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(190);
methodWriter.visitLineNumber(1103, label);
classWriter.toByteArray();
Test 97: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
methodWriter.getSize();
Test 98: 
ClassWriter classWriter = new ClassWriter(2002);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, stringArray, false, false);
methodWriter.getSize();
Test 99: 
ClassWriter classWriter = new ClassWriter(16777239);
String[] stringArray = new String[7];
stringArray[0] = "Deprecated";
stringArray[1] = "Deprecated";
stringArray[2] = "Deprecated";
stringArray[3] = "Deprecated";
stringArray[4] = "Signature";
stringArray[5] = "Signature";
stringArray[6] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1), "", "Signature", "", stringArray, false, false);
methodWriter.visitAnnotationDefault();
methodWriter.getSize();
Test 100: 
ClassWriter classWriter = new ClassWriter(16777186);
String[] stringArray = new String[2];
classWriter.version = 4096;
stringArray[0] = "";
stringArray[1] = "";
MethodWriter methodWriter = new MethodWriter(classWriter, 16777186, "", "-&s6hYw):K", "", stringArray, true, false);
ByteVector byteVector = new ByteVector(4096);
methodWriter.put(byteVector);
Test 101: 
ClassWriter classWriter = new ClassWriter(16777241);
String[] stringArray = new String[0];
MethodWriter methodWriter = new MethodWriter(classWriter, 1, "Htz", "Htz", (String) null, stringArray, false, false);
ByteVector byteVector = new ByteVector(2);
methodWriter.put(byteVector);
Test 102: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "Deprecated";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitAnnotation("Deprecated", true);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 103: 
ClassWriter classWriter = new ClassWriter(16777252);
String[] stringArray = new String[2];
stringArray[0] = "&v.Mc#>FR";
stringArray[1] = "&v.Mc#>FR";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "&v.Mc#>FR", "&v.Mc#>FR", "&v.Mc#>FR", stringArray, false, false);
Attribute attribute = new Attribute("&v.Mc#>FR");
methodWriter.visitAttribute(attribute);
ByteVector byteVector = new ByteVector(292552704);
// Undeclared exception!
try { 
  methodWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.objectweb.asm.jip.Attribute", e);
}

Test 104: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[1];
stringArray[0] = "init>";
MethodWriter methodWriter = new MethodWriter(classWriter, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", stringArray, false, false);
methodWriter.visitIincInsn((-823), (-827));
methodWriter.visitFrame(2, 1024, stringArray, 713, stringArray);
ByteVector byteVector = new ByteVector(262144);
methodWriter.put(byteVector);
Test 105: 
ClassWriter classWriter = new ClassWriter(16777216);
String[] stringArray = new String[2];
stringArray[0] = "g!V~yHe\"";
stringArray[1] = "g!V~yHe\"";
MethodWriter methodWriter = new MethodWriter(classWriter, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", stringArray, false, false);
Label label = new Label();
methodWriter.visitInsn(2);
methodWriter.visitTryCatchBlock(label, label, label, "[]");
classWriter.toByteArray();
Test 106: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, (-2354), 605);
Test 107: 
int[] intArray = new int[2];
MethodWriter.getNewOffset(intArray, intArray, 4388, 4388);
Test 108: 
Label label = new Label();
int[] intArray = new int[4];
intArray[0] = 16777216;
MethodWriter.getNewOffset(intArray, intArray, label);
Test 109: 
int[] intArray = new int[5];
MethodWriter.getNewOffset(intArray, intArray, 0, (-1726));
Test 110: 
int[] intArray = new int[6];
Label label = new Label();
MethodWriter.getNewOffset(intArray, intArray, label);
MethodWriter.getNewOffset(intArray, intArray, label);
Test 111: 
byte[] byteArray = new byte[7];
byteArray[1] = (byte) (-10);
MethodWriter.readInt(byteArray, 1);
Test 112: 
byte[] byteArray = new byte[5];
byteArray[0] = (byte)56;
MethodWriter.readInt(byteArray, (byte)0);
Test 113: 
byte[] byteArray = new byte[4];
byteArray[2] = (byte) (-114);
MethodWriter.readShort(byteArray, 2);
Test 114: 
byte[] byteArray = new byte[9];
byteArray[0] = (byte)68;
MethodWriter.readShort(byteArray, (byte)0);
Test 115: 
byte[] byteArray = new byte[4];
byteArray[1] = (byte)75;
MethodWriter.readUnsignedShort(byteArray, 1);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 824
* Number of covered goals: 525
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 1084
* Number of covered goals: 747
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 21
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 61%
* Total number of goals: 824
* Number of covered goals: 503
[MASTER] 12:58:44.793 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Generated 116 tests with total length 737
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
[MASTER] 12:59:16.738 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:21.945 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:21.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:21.997 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:21.998 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.054 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.055 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.102 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.145 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.184 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.185 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.232 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.233 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.286 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.287 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.332 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.377 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.451 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.524 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.526 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.606 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.674 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.797 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:59:22.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.889 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.923 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:22.986 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:22.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.040 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.082 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.083 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.123 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.125 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.180 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.222 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.267 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.268 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.304 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.305 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.347 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.348 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.385 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.386 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.429 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.429 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.469 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.498 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.525 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.526 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.607 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.608 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.663 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.665 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.704 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.758 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.841 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.842 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.892 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.893 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.928 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:23.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:23.999 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.038 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.040 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.085 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.086 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.124 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.125 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.157 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.224 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.253 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.253 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.288 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.415 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.486 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.487 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.600 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.714 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.834 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:24.951 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:24.953 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.100 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.101 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.192 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.256 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.299 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.466 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.467 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.529 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.530 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.635 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.708 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.761 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.762 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.809 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.853 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.893 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.931 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.932 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:25.970 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:25.971 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.011 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.063 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.065 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.127 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.205 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.276 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.277 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.343 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.398 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.399 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.451 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.548 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.549 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.668 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.737 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.738 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.808 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.886 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:26.951 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:26.953 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.009 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.010 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.058 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.059 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.110 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.111 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.152 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.153 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.194 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.252 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.312 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.313 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.381 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.467 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.540 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.541 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:59:27.632 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:27.633 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
** Write a test suite: 86 called: 86 to improve: false
** Write a test suite: 87 called: 87 to improve: false
** Write a test suite: 88 called: 88 to improve: false
** Write a test suite: 89 called: 89 to improve: false
** Write a test suite: 90 called: 90 to improve: false
** Write a test suite: 91 called: 91 to improve: false
** Write a test suite: 92 called: 92 to improve: false
** Write a test suite: 93 called: 93 to improve: false
[MASTER] 12:59:31.008 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:31.009 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
** Write a test suite: 86 called: 86 to improve: false
** Write a test suite: 87 called: 87 to improve: false
** Write a test suite: 88 called: 88 to improve: false
** Write a test suite: 89 called: 89 to improve: false
** Write a test suite: 90 called: 90 to improve: false
** Write a test suite: 91 called: 91 to improve: false
** Write a test suite: 92 called: 92 to improve: false
** Write a test suite: 93 called: 93 to improve: false
[MASTER] 12:59:34.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar6534955534339724288.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:59:34.172 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6534955534339724288.jar
* Writing tests to file
[MASTER] 12:59:34.175 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'MethodWriter_ESTest' to evosuite-tests
** Write a test suite: 9 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 15 called: 6 to improve: false
** Write a test suite: 16 called: 7 to improve: false
** Write a test suite: 17 called: 8 to improve: false
** Write a test suite: 21 called: 9 to improve: false
** Write a test suite: 22 called: 10 to improve: false
** Write a test suite: 23 called: 11 to improve: false
** Write a test suite: 24 called: 12 to improve: false
** Write a test suite: 25 called: 13 to improve: false
** Write a test suite: 26 called: 14 to improve: false
** Write a test suite: 27 called: 15 to improve: false
** Write a test suite: 29 called: 16 to improve: false
** Write a test suite: 30 called: 17 to improve: false
** Write a test suite: 33 called: 18 to improve: false
** Write a test suite: 34 called: 19 to improve: false
** Write a test suite: 35 called: 20 to improve: false
** Write a test suite: 36 called: 21 to improve: false
** Write a test suite: 37 called: 22 to improve: false
** Write a test suite: 38 called: 23 to improve: false
** Write a test suite: 39 called: 24 to improve: false
** Write a test suite: 42 called: 25 to improve: false
** Write a test suite: 43 called: 26 to improve: false
** Write a test suite: 45 called: 27 to improve: false
** Write a test suite: 47 called: 28 to improve: false
** Write a test suite: 48 called: 29 to improve: false
** Write a test suite: 52 called: 30 to improve: false
** Write a test suite: 53 called: 31 to improve: false
** Write a test suite: 54 called: 32 to improve: false
** Write a test suite: 55 called: 33 to improve: false
** Write a test suite: 58 called: 34 to improve: false
** Write a test suite: 60 called: 35 to improve: false
** Write a test suite: 61 called: 36 to improve: false
** Write a test suite: 62 called: 37 to improve: false
** Write a test suite: 63 called: 38 to improve: false
** Write a test suite: 64 called: 39 to improve: false
** Write a test suite: 66 called: 40 to improve: false
** Write a test suite: 67 called: 41 to improve: false
** Write a test suite: 68 called: 42 to improve: false
** Write a test suite: 70 called: 43 to improve: false
** Write a test suite: 72 called: 44 to improve: false
** Write a test suite: 76 called: 45 to improve: false
** Write a test suite: 77 called: 46 to improve: false
** Write a test suite: 80 called: 47 to improve: false
** Write a test suite: 81 called: 48 to improve: false
** Write a test suite: 83 called: 49 to improve: false
** Write a test suite: 86 called: 50 to improve: false
** Write a test suite: 91 called: 51 to improve: false
** Write a test suite: 93 called: 52 to improve: false
* Writing JUnit test case 'MethodWriter_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
** Write a test suite: 72 called: 72 to improve: false
** Write a test suite: 73 called: 73 to improve: false
** Write a test suite: 74 called: 74 to improve: false
** Write a test suite: 75 called: 75 to improve: false
** Write a test suite: 76 called: 76 to improve: false
** Write a test suite: 77 called: 77 to improve: false
** Write a test suite: 78 called: 78 to improve: false
** Write a test suite: 79 called: 79 to improve: false
** Write a test suite: 80 called: 80 to improve: false
** Write a test suite: 81 called: 81 to improve: false
** Write a test suite: 82 called: 82 to improve: false
** Write a test suite: 83 called: 83 to improve: false
** Write a test suite: 84 called: 84 to improve: false
** Write a test suite: 85 called: 85 to improve: false
** Write a test suite: 86 called: 86 to improve: false
** Write a test suite: 87 called: 87 to improve: false
** Write a test suite: 88 called: 88 to improve: false
** Write a test suite: 89 called: 89 to improve: false
** Write a test suite: 90 called: 90 to improve: false
** Write a test suite: 91 called: 91 to improve: false
** Write a test suite: 92 called: 92 to improve: false
** Write a test suite: 93 called: 93 to improve: false
* Done!

* Computation finished
