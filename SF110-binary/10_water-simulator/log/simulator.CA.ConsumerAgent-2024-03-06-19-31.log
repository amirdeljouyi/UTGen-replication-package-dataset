* EvoSuite 1.2.0
* WARNING - Generating JUnit 5 tests with the option to use a separate classloader will result in not runnable tests. Set either -Dtest_format=JUNIT4 or -Duse_separate_classloader=false
* Going to generate test cases for class: simulator.CA.ConsumerAgent
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-ES-res/10_water-simulator/evosuite-files/evosuite.properties
* Connecting to master process on port 14602
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:31:58.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:31:58.938 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:31:58.940 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:31:59.094 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 19:31:59.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 19:31:59.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 19:31:59.159 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 19:31:59.159 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 19:31:59.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 19:31:59.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 19:31:59.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 19:31:59.161 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 19:31:59.162 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 19:31:59.178 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 19:31:59.178 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class simulator.CA.ConsumerAgent
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 593
* Using seed 1709753517255
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 192 / 593
[Progress:>                             0%] [Cov:====>                              13%][Progress:>                             1%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:=====>                             15%][Progress:===>                          11%] [Cov:=====>                             15%][Progress:===>                          11%] [Cov:=====>                             15%][Progress:===>                          11%] [Cov:=====>                             15%][Progress:===>                          12%] [Cov:=====>                             15%][Progress:===>                          12%] [Cov:=====>                             15%][Progress:===>                          12%] [Cov:=====>                             15%][Progress:===>                          12%] [Cov:=====>                             15%][Progress:=====>                        17%] [Cov:=====>                             15%][Progress:=====>                        17%] [Cov:=====>                             15%][Progress:======>                       22%] [Cov:=====>                             15%][Progress:======>                       23%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:========>                     29%] [Cov:=====>                             15%][Progress:========>                     29%] [Cov:=====>                             15%][Progress:==========>                   34%] [Cov:=====>                             15%][Progress:===========>                  39%] [Cov:=====>                             15%][Progress:===========>                  39%] [Cov:=====>                             15%][Progress:=============>                44%] [Cov:=====>                             15%][Progress:=============>                44%] [Cov:=====>                             15%][Progress:=============>                45%] [Cov:=====>                             15%][Progress:=============>                45%] [Cov:=====>                             15%][Progress:===============>              50%] [Cov:=====>                             15%][Progress:===============>              50%] [Cov:=====>                             15%][Progress:===============>              50%] [Cov:=====>                             15%][Progress:================>             55%] [Cov:=====>                             15%][Progress:===================>          65%] [Cov:=====>                             15%][Progress:===================>          65%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        71%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=====================>        72%] [Cov:=====>                             15%][Progress:=======================>      77%] [Cov:=====>                             15%][Progress:========================>     82%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:========================>     83%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             15%][Progress:=========================>    84%] [Cov:=====>                             16%][Progress:===========================>  90%] [Cov:=====>                             16%][Progress:===========================>  90%] [Cov:=====>                             16%][Progress:============================> 95%] [Cov:=====>                             16%][Progress:==============================100%] [Cov:=====>                             16%][Progress:==============================100%] [Cov:=====>                             16%][Progress:==============================100%] [Cov:=====>                             16%]
* Search finished after 106s and 79 generations, 26671 statements, best individual has fitness: 507.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 12%
* Total number of goals: 137
* Number of covered goals: 17
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 17%
* Total number of goals: 301
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 0%
* Total number of goals: 8
* Number of covered goals: 0
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 12%
* Total number of goals: 137
* Number of covered goals: 17
* Generated 10 tests with total length 34
* Resulting test suite's coverage: 16% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'ConsumerAgent_ESTest' to evosuite-tests
* Done!

* Computation finished
