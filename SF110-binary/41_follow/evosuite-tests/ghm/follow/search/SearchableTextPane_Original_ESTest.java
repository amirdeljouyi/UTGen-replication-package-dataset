/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 07:59:07 GMT 2024
 */

package ghm.follow.search;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import ghm.follow.search.LineResult;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SearchableTextPane_Original_ESTest extends SearchableTextPane_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningZero() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      int search = searchableTextPane.search("", 1962);
      assertEquals(0, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningPositive() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      searchableTextPane.append("Line ");
      int search = searchableTextPane.search("", 1962);
      assertEquals(5, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTakingStringReturningPositive() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      searchableTextPane.append("Line ");
      searchableTextPane.append("9M;%lB+[b_;jG{*C");
      int search = searchableTextPane.search("9M;%lB+[b_;jG{*C");
      assertEquals(5, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveHighlights() throws Throwable  {
      Font arg0 = new Font("Mu`xXu|Z3X~y", (-868), 0);
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-1));
      searchableTextPane.removeHighlights();
      assertFalse(searchableTextPane.isFocusTraversalPolicyProvider());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightReturningListWhereIsEmptyIsTrue() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      List<LineResult> highlight = searchableTextPane.highlight("~!8:.Tx k", (-1));
      assertEquals(0, highlight.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightReturningListWhereIsEmptyIsFalse() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      searchableTextPane.append("Line ");
      List<LineResult> highlight = searchableTextPane.highlight("|", 510);
      assertEquals(1, highlight.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTakingStringWithEmptyString() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 1355);
      int search = searchableTextPane.search("");
      assertEquals((-1), search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightWithEmptyString() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      List<LineResult> highlight = searchableTextPane.highlight("", (-1));
      assertEquals(0, highlight.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightWithNull() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 1355);
      List<LineResult> highlight = searchableTextPane.highlight((String) null, 1355);
      assertEquals(0, highlight.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScrollableTracksViewportWidth() throws Throwable  {
      Font arg0 = Font.decode("Line ");
      SearchableTextPane searchableTextPane = new SearchableTextPane(arg0, (-2756));
      boolean scrollableTracksViewportWidth = searchableTextPane.getScrollableTracksViewportWidth();
      assertTrue(scrollableTracksViewportWidth);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningNegative() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 1355);
      int search = searchableTextPane.search(" ", (-1));
      assertEquals((-1), search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTakingStringWithNull() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-4554));
      int search = searchableTextPane.search((String) null);
      assertEquals((-1), search);
  }
}
