/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 07:42:50 GMT 2024
 */

package ghm.follow.gui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import ghm.follow.config.FollowAppAttributes;
import ghm.follow.gui.FileFollowingPane;
import ghm.follow.gui.TabbedPane;
import java.awt.Component;
import java.io.File;
import javax.swing.Icon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TabbedPane_ESTest extends TabbedPane_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectedIndexThrowsIndexOutOfBoundsException() throws Throwable  {
      FollowAppAttributes args = new FollowAppAttributes((File) null);
      TabbedPane tabbedPane = new TabbedPane(args);
      
      // Given: The tabbed pane is empty
      assertEquals(0, tabbedPane.getTabCount());
      
      try {
      // When: We set the selected index to 0
      tabbedPane.setSelectedIndex(0);
      
      // Then: An IndexOutOfBoundsException should be thrown
      fail("Expecting exception: IndexOutOfBoundsException");
      } catch (IndexOutOfBoundsException e) {
      // Verify that the correct exception is thrown
      verifyException("javax.swing.JTabbedPane", e);
      
      // Verify that the selected index is still 0, as no tab was added
      assertEquals(0, tabbedPane.getSelectedIndex());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectedComponent() throws Throwable  {
      // Given a TabbedPane instance with the "ghm.follow.gui.TabbedPane" name and no icon or component
      TabbedPane tabbedPane = new TabbedPane(new FollowAppAttributes());
      
      // When the "addTab" method is called to add a new tab with the same name as the TabbedPane instance
      tabbedPane.addTab("ghm.follow.gui.TabbedPane", (Icon) null, (Component) null);
      
      // Then the TabbedPane instance should not be a focus cycle root
      assertFalse(tabbedPane.isFocusCycleRoot());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveTabAt() throws Throwable  {
      // Given a TabbedPane with some tabs
      FollowAppAttributes args = new FollowAppAttributes();
      TabbedPane tabbedPane = new TabbedPane(args);
      tabbedPane.addTab("tab1", null);
      tabbedPane.addTab("tab2", null);
      
      // When a tab is removed from the pane
      tabbedPane.removeTabAt(0);
      
      // Then the pane's focus traversal policy should be set to false
      assertFalse(tabbedPane.isFocusTraversalPolicySet());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindComponentAtReturningComponentWhereGetIgnoreRepaintIsTrue() throws Throwable  {
      // Given a TabbedPane instance with some bounds and focus traversal keys enabled
      FollowAppAttributes arg0 = new FollowAppAttributes();
      TabbedPane tabbedPane = new TabbedPane(arg0);
      tabbedPane.setBounds(2, 7, 4, 7);
      tabbedPane.setIgnoreRepaint(true);
      
      // When the findComponentAt method is called with some coordinates
      Component findComponentAt = tabbedPane.findComponentAt(1, 6);
      
      // Then the focus traversal keys are enabled for the returned component
      assertTrue(findComponentAt.getFocusTraversalKeysEnabled());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindComponentAtThrowsIndexOutOfBoundsException() throws Throwable  {
      FollowAppAttributes arg0 = new FollowAppAttributes();
      TabbedPane tabbedPane = new TabbedPane(arg0);
      
      // Set the bounds of the tabbed pane
      tabbedPane.setBounds(2, 7, 4, 7);
      
      // Add a component to the tabbed pane
      tabbedPane.add("bufferSize", (Component) null);
      
      // Set the tab layout policy of the tabbed pane
      tabbedPane.setTabLayoutPolicy(1);
      
      try {
      tabbedPane.findComponentAt(0, 0);
      fail("Expecting exception: IndexOutOfBoundsException");
      } catch (IndexOutOfBoundsException e) {
      // Verify that the exception is an instance of IndexOutOfBoundsException
      verifyException("java.util.ArrayList", e);
      
      // Check the size and index of the component
      assertEquals(1, tabbedPane.getComponentCount());
      assertEquals(0, tabbedPane.getSelectedIndex());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindComponentAtReturningNull() throws Throwable  {
      // Given
      FollowAppAttributes followAppAttributes = new FollowAppAttributes();
      TabbedPane tabbedPane = new TabbedPane(followAppAttributes);
      
      // When
      Component findComponentAt = tabbedPane.findComponentAt(3, 5);
      
      // Then
      assertNull(findComponentAt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindComponentAtReturningComponentWhereGetIgnoreRepaintIsFalse() throws Throwable  {
      // Given: A TabbedPane instance with a set of tabs
      FollowAppAttributes arg0 = new FollowAppAttributes();
      TabbedPane tabbedPane = new TabbedPane(arg0);
      
      // When: We search for a component at the specified position
      Component findComponentAt = tabbedPane.findComponentAt(1, 6);
      
      // Then: The component found should be the same as the TabbedPane instance
      assertSame(findComponentAt, tabbedPane);
  }
}
