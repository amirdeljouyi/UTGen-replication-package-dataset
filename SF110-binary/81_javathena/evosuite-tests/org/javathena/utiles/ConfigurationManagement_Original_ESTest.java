/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 18:44:17 GMT 2024
 */

package org.javathena.utiles;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.javathena.conf.LoginAthena;
import org.javathena.core.utiles.ACO;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigurationManagement_Original_ESTest extends ConfigurationManagement_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readXML() throws Throwable  {
      int login_config_readXML = ConfigurationManagement.login_config_readXML("big-int");
      assertEquals(0, login_config_readXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readXMLWithEmptyString() throws Throwable  {
      int login_config_readXML = ConfigurationManagement.login_config_readXML("");
      assertEquals(0, login_config_readXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartLimitedTime() throws Throwable  {
      ConfigurationManagement.display_conf_warnings();
      ConfigurationManagement.setAccess_allownum((-15));
      ConfigurationManagement.setAuth_before_save_file(30);
      LoginAthena loginAthenaConf = ConfigurationManagement.getLoginAthenaConf();
      assertEquals(0, loginAthenaConf.getMin_level_to_connect());
      assertEquals(0, loginAthenaConf.getStart_limited_time());
      
      int[] arg0 = new int[7];
      ConfigurationManagement.setSubneti(arg0);
      long startLimitedTime = ConfigurationManagement.getStartLimitedTime();
      assertEquals((-1L), startLimitedTime);
      
      int access_allownum = ConfigurationManagement.getAccess_allownum();
      assertEquals((-15), access_allownum);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.yesNoOnOffToBoolean("com.thoughtworks.xstream.converters.extended.StackTraceElementConverter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanReturningFalse0() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("OFF");
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanReturningTrue0() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("ON");
      assertTrue(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanReturningFalse1() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("NO");
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanReturningTrue1() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("YES");
      assertTrue(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readTXTThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_config_readTXT("NO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_lan_config_readThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("big-int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_lan_config_readWithEmptyString() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMMaxTakingInt() throws Throwable  {
      ConfigurationManagement.addGMMax(954);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLogin_ip_str() throws Throwable  {
      String login_ip_str = ConfigurationManagement.getLogin_ip_str();
      assertEquals("127.0.0.1", login_ip_str);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNum_regs() throws Throwable  {
      ConfigurationManagement.setNum_regs((-3505));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddChar_id_countTakingInt() throws Throwable  {
      ConfigurationManagement.addChar_id_count(0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBackup_txt_flag() throws Throwable  {
      String backup_txt_flag = ConfigurationManagement.getBackup_txt_flag();
      assertNull(backup_txt_flag);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddChar_id_countTakingNoArguments() throws Throwable  {
      ConfigurationManagement.addChar_id_count();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetChar_id_count() throws Throwable  {
      ConfigurationManagement.setChar_id_count(0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_denynum() throws Throwable  {
      ConfigurationManagement.setAccess_denynum(4766);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail_creation() throws Throwable  {
      int email_creation = ConfigurationManagement.getEmail_creation();
      assertEquals(0, email_creation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGm_allow_level() throws Throwable  {
      int gm_allow_level = ConfigurationManagement.getGm_allow_level();
      assertEquals(0, gm_allow_level);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScdata_txt() throws Throwable  {
      String scdata_txt = ConfigurationManagement.getScdata_txt();
      assertNull(scdata_txt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_deny() throws Throwable  {
      String access_deny = ConfigurationManagement.getAccess_deny();
      assertNull(access_deny);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetServer_num() throws Throwable  {
      ConfigurationManagement.setServer_num((-3505));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_deny() throws Throwable  {
      ConfigurationManagement.setAccess_deny("W%\"N}RMDKR:~XZW");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_num() throws Throwable  {
      int server_num = ConfigurationManagement.getServer_num();
      assertEquals(0, server_num);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNum_regs() throws Throwable  {
      long num_regs = ConfigurationManagement.getNum_regs();
      assertEquals(0L, num_regs);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLan_char_ip() throws Throwable  {
      ConfigurationManagement.setLan_char_ip("Q7(Y*!*lRpN{l6rw0y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBackup_txt() throws Throwable  {
      String backup_txt = ConfigurationManagement.getBackup_txt();
      assertNull(backup_txt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsConsole_silent() throws Throwable  {
      boolean console_silent = ConfigurationManagement.isConsole_silent();
      assertFalse(console_silent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWisp_server_name() throws Throwable  {
      String wisp_server_name = ConfigurationManagement.getWisp_server_name();
      assertNull(wisp_server_name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetGMMax() throws Throwable  {
      ConfigurationManagement.setGMMax((-1997));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLan_char_ip() throws Throwable  {
      String lan_char_ip = ConfigurationManagement.getLan_char_ip();
      assertNull(lan_char_ip);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLogin_ip_str() throws Throwable  {
      ConfigurationManagement.setLogin_ip_str((String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_denynum() throws Throwable  {
      int access_denynum = ConfigurationManagement.getAccess_denynum();
      assertEquals(0, access_denynum);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetStartLimitedTime() throws Throwable  {
      ConfigurationManagement.setStartLimitedTime(0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMMaxTakingNoArguments() throws Throwable  {
      ConfigurationManagement.addGMMax();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAutosave_interval() throws Throwable  {
      int autosave_interval = ConfigurationManagement.getAutosave_interval();
      assertEquals(0, autosave_interval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNew_reg_tick() throws Throwable  {
      ConfigurationManagement.setNew_reg_tick(1626L);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimestamp_format() throws Throwable  {
      String timestamp_format = ConfigurationManagement.getTimestamp_format();
      assertNull(timestamp_format);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSubnetmaskiAndSetSubnetmaski() throws Throwable  {
      int[] arg0 = ConfigurationManagement.getSubnetmaski();
      ConfigurationManagement.setSubnetmaski(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLesslessAuth_before_save_file() throws Throwable  {
      int lesslessAuth_before_save_file = ConfigurationManagement.lesslessAuth_before_save_file();
      assertEquals((-1), lesslessAuth_before_save_file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_order() throws Throwable  {
      ConfigurationManagement.getAccess_order();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddNum_regsTakingLong() throws Throwable  {
      ConfigurationManagement.addNum_regs(0L);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNew_reg_tick() throws Throwable  {
      long new_reg_tick = ConfigurationManagement.getNew_reg_tick();
      assertEquals(0L, new_reg_tick);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTimestamp_formatWithEmptyString() throws Throwable  {
      ConfigurationManagement.setTimestamp_format("");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_allow() throws Throwable  {
      String access_allow = ConfigurationManagement.getAccess_allow();
      assertNull(access_allow);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAutosave_time() throws Throwable  {
      int autosave_time = ConfigurationManagement.getAutosave_time();
      assertEquals(0, autosave_time);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_allow() throws Throwable  {
      ConfigurationManagement.setAccess_allow("com.thoughtworks.xstream.XStreamException");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetConsole_silent() throws Throwable  {
      ConfigurationManagement.setConsole_silent(false);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsLogin_ip_set_() throws Throwable  {
      boolean login_ip_set_ = ConfigurationManagement.isLogin_ip_set_();
      assertFalse(login_ip_set_);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_before_save_file() throws Throwable  {
      int auth_before_save_file = ConfigurationManagement.getAuth_before_save_file();
      assertEquals(0, auth_before_save_file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGMMax() throws Throwable  {
      int gMMax = ConfigurationManagement.getGMMax();
      assertEquals(30, gMMax);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddNum_regsTakingNoArgumentsAndGetMax_connect_user() throws Throwable  {
      ConfigurationManagement.getAccess_allownum();
      ConfigurationManagement.isConsole_silent();
      ConfigurationManagement.addChar_id_count();
      ConfigurationManagement.getNum_regs();
      ConfigurationManagement.lesslessAuth_before_save_file();
      ConfigurationManagement.getNew_reg_tick();
      ConfigurationManagement.getGMMax();
      ConfigurationManagement.getAccess_deny();
      ConfigurationManagement.getEmail_creation();
      ConfigurationManagement.setLogin_ip_str((String) null);
      ConfigurationManagement.getGMMax();
      ConfigurationManagement.getScdata_txt();
      ConfigurationManagement.addGMMax(2615);
      ConfigurationManagement.isLogin_ip_set_();
      ConfigurationManagement.getLoginAthenaConf();
      ACO arg0 = ACO.DENY_ALLOW;
      ConfigurationManagement.setAccess_order(arg0);
      ConfigurationManagement.addNum_regs();
      ConfigurationManagement.setTimestamp_format("u-UoJFsPiKl(.eVmo");
      ConfigurationManagement.setStart_limited_time(2615);
      ConfigurationManagement.addNum_regs();
      ConfigurationManagement.getMax_connect_user();
      ConfigurationManagement.getGm_allow_level();
      ConfigurationManagement.getAccess_order();
      ConfigurationManagement.display_conf_warnings();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetChar_id_count() throws Throwable  {
      int char_id_count = ConfigurationManagement.getChar_id_count();
      assertEquals(0, char_id_count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFriends_txt() throws Throwable  {
      String friends_txt = ConfigurationManagement.getFriends_txt();
      assertNull(friends_txt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_denyReturningNullAndGetTimestamp_formatReturningNull() throws Throwable  {
      ACO arg0 = ACO.DENY_ALLOW;
      ConfigurationManagement.setAccess_order(arg0);
      ConfigurationManagement.setNew_reg_tick(372L);
      ConfigurationManagement.login_config_readXML("big-int");
      ConfigurationManagement.setStart_limited_time(0);
      ConfigurationManagement.isConsole_silent();
      ConfigurationManagement.getAccess_deny();
      ConfigurationManagement.setTimestamp_format((String) null);
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("big-int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSubneti() throws Throwable  {
      int[] subneti = ConfigurationManagement.getSubneti();
      assertNull(subneti);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetChar_txt() throws Throwable  {
      String char_txt = ConfigurationManagement.getChar_txt();
      assertNull(char_txt);
  }
}
