/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 12:30:37 GMT 2024
 */

package org.javathena.login;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Login_Original_ESTest extends Login_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_syncXML() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_syncTXTThrowsNullPointerException() throws Throwable  {
      UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'R');
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initThrowsSystemExitException() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_fdReturningNull() throws Throwable  {
      Login login = new Login();
      login.server_fd = null;
      login.getServer_fd();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_maxReturningPositive() throws Throwable  {
      Login login = new Login();
      login.auth_max = 2375;
      int auth_max = login.getAuth_max();
      assertEquals(2375, auth_max);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log0() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(15);
      ACO arg0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log1() throws Throwable  {
      Login login = new Login();
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_final() throws Throwable  {
      Login login = new Login();
      login.do_final();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initXML0() throws Throwable  {
      int mmo_auth_initXML = Login.mmo_auth_initXML();
      assertEquals(0, mmo_auth_initXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_log() throws Throwable  {
      Login.login_log("");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMd5DataWithSocket_dataWhereGetEofIsPositive() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      arg0.setMd5key("=ZxCIjws7FwW");
      Login.getMd5Data(arg0);
      assertEquals("2345678910111213", arg0.getMd5key());
      assertEquals(1, arg0.getEof());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetServer_fd() throws Throwable  {
      Login login = new Login();
      int[] arg0 = new int[0];
      login.setServer_fd(arg0);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEndTakingLoginAndCallsRun() throws Throwable  {
      Login arg0 = new Login();
      Login.End login_End = arg0.new End();
      login_End.run();
      assertEquals(0, arg0.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningFalse0() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("OFF");
      assertEquals(0, login.getAuth_max());
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanThrowsIllegalArgumentException() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningTrue0() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("ON");
      assertTrue(yesNoOnOffToBoolean);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningFalse1() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("NO");
      assertEquals(0, login.getAuth_max());
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningTrue1() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("YES");
      assertEquals(0, login.getAuth_max());
      assertTrue(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsDo_initTXT0() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(10);
      ACO arg0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(arg0);
      login.do_initTXT();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsDo_initTXT1() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(9985);
      ConfigurationManagement.setAccess_denynum(10);
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.do_initTXT();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log2() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(10);
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log3() throws Throwable  {
      Login login = new Login();
      ACO arg0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log4() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_denynum(2);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log5() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_denynum(1);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log6() throws Throwable  {
      Login login = new Login();
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleReturningZero() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("help");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException0() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("status");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException1() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException2() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("end");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException3() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("quit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException4() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("exit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsNullPointerException5() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.parse_console("alive");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_adminThrowsNullPointerException() throws Throwable  {
      Login arg2 = new Login();
      MockSocket arg0 = new MockSocket();
      Socket_data arg1 = new Socket_data(arg0);
      // Undeclared exception!
      try { 
        arg2.parse_admin(50, arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesConnectionListenerTakingLoginAndCallsRun() throws Throwable  {
      Login arg0 = new Login();
      Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener();
      login_ConnectionListener.run();
      assertEquals(0, arg0.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initSQLThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_auth_syncThrowsNullPointerException() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShowTab() throws Throwable  {
      byte[] arg0 = new byte[2];
      Login.showTab(arg0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXTThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXT() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initXML1() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("save/account.xml");
      FileSystemHandling.createFolder(arg0);
      int mmo_auth_initXML = Login.mmo_auth_initXML();
      assertEquals(0, mmo_auth_initXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCodingKeyAdministrationThrowsNullPointerException() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      Login.getMd5Data(arg0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimer_interval_check_auth_syncTakingLoginAndCallsRun() throws Throwable  {
      Login arg0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = arg0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_maxReturningZero() throws Throwable  {
      Login login = new Login();
      int auth_max = login.getAuth_max();
      assertEquals(0, auth_max);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initXML() throws Throwable  {
      Login login = new Login();
      login.do_initXML();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDbManagemtType() throws Throwable  {
      IDBManagementLogin dbManagemtType = Login.getDbManagemtType();
      assertNull(dbManagemtType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDisplay_title() throws Throwable  {
      Login.display_title();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVersionThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPASSWORDENC() throws Throwable  {
      int pASSWORDENC = Login.getPASSWORDENC();
      assertEquals(2, pASSWORDENC);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOut() throws Throwable  {
      Login login = new Login();
      login.getOut();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAuth_max() throws Throwable  {
      Login login = new Login();
      login.setAuth_max(7);
      assertEquals(7, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogUnknownPackets() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      Login.logUnknownPackets(arg0);
      assertEquals(0, arg0.getUsers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_ipmask() throws Throwable  {
      Login login = new Login();
      int check_ipmask = login.check_ipmask(2000000, "conf/subnet_athena.conf");
      assertEquals(0, check_ipmask);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_ip() throws Throwable  {
      Login login = new Login();
      InetAddress arg0 = MockInetAddress.anyLocalAddress();
      login.check_ip(arg0);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_fdReturningNonEmptyArray() throws Throwable  {
      Login login = new Login();
      int[] server_fd = login.getServer_fd();
      assertEquals(30, server_fd.length);
      assertEquals(0, login.getAuth_max());
      assertNotNull(server_fd);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_num() throws Throwable  {
      Login login = new Login();
      int auth_num = login.getAuth_num();
      assertEquals(0, auth_num);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCodingKeyThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOut() throws Throwable  {
      Login login = new Login();
      MockPrintWriter arg0 = (MockPrintWriter)Login.loginLogOut;
      login.setOut(arg0);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLog_fp() throws Throwable  {
      Login login = new Login();
      login.getLog_fp();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClose() throws Throwable  {
      Login arg0 = new Login();
      Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener();
      login_ConnectionListener.close();
      login_ConnectionListener.run();
      assertEquals(0, arg0.getAuth_max());
  }
}
