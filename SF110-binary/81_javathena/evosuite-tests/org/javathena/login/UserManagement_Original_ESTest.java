/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 06:49:06 GMT 2024
 */

package org.javathena.login;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.sql.ResultSet;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromChar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserManagement_Original_ESTest extends UserManagement_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSendUserListThrowsIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.sendUserList((Socket_data) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountReg2ThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[12];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountDataThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[7];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountData((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAccountReg2ThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.receiveAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingResultSetThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckMySQLThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.dynamicFailBanCheckMySQL(",P2{~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientEncryptedThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.connectionOfClientEncrypted((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharServerToAuthentifyThrowsNullPointerException() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.charServerToAuthentify(arg0, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdministationLoginThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.administationLogin((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.addGM(10000, 10000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOfflineThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[6];
      // Undeclared exception!
      try { 
        UserManagement.account_idToOffline((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[3] = (byte)90;
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals(1509949440, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[6] = (byte) (-76);
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals((-180), tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingIntegerReturningAuth_dataWhereIsResetLogincounIsFalse() throws Throwable  {
      Auth_data auth_data = new Auth_data();
      Integer arg0 = auth_data.getAccount_id();
      Auth_data userTxt = UserManagement.getUserTxt(arg0);
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingIntegerThrowsNullPointerException() throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 30000);
      UserManagement.addUserTXT("", " Kg)@%.*H", "(K&qaU6", '\"');
      Integer arg0 = UserManagement.getAccountID("");
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereIsResetLogincounIsTrue() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("&^%5jDf", "&^%5jDf", " )uHN,C0", 'l');
      arg0.setResetLogincoun(true);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
      assertEquals("&^%5jDf", addUser.getPass());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('l', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getState());
      assertEquals("&^%5jDf", addUser.getUserid());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetVersionIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setVersion(54);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getLast_ip());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetStateIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("", " )uHN,C0", "", 'l');
      assertEquals(0, arg0.getState());
      
      arg0.setState(2);
      UserManagement.addUser(arg0);
      assertEquals(0, (int)arg0.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLastlogin();
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogin_id1());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogincount((-1));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0L, addUser.getConnect_until_time());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT(" )uHN,C0", " )uHN,C0", " )uHN,C0", 'l');
      arg0.setLogin_id2(37);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals('l', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, (int)addUser.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id2((-671));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getDelflag());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id1(123);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0L, addUser.getConnect_until_time());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id1((-1541));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getLast_ip());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLevelIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLevel(3);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setDelflag(1109);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogin_id2());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setDelflag((-4936));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals((-4936), addUser.getDelflag());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time(219L);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogin_id2());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time((-17L));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals((-1), addUser.getCharserver());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetClientTypeIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setClientType(9);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetCharserverIsZero() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("", " )uHN,C0", "", 'l');
      arg0.setCharserver(0);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals("", addUser.getUserid());
      assertEquals(" )uHN,C0", addUser.getPass());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('l', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getState());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetCharserverIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("%~[=d`GICQ)", "", "pA`m|", 'o');
      arg0.setCharserver(1242);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals("%~[=d`GICQ)", addUser.getUserid());
      assertEquals("", addUser.getPass());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('o', addUser.getSex());
      assertEquals("-", addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("%~[=d`GICQ)", "", "pA`m|", 'o');
      arg0.setBan_until_time(3750L);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals("", addUser.getPass());
      assertEquals('o', addUser.getSex());
      assertEquals("%~[=d`GICQ)", addUser.getUserid());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("-", addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setBan_until_time((-966L));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetAccount_reg2_numIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("S0022", "S0022", "com.mysql.jdbc.BestResponseTimeBalanceStrategy", ']');
      FastMap<String, String> account_reg2 = arg0.getAccount_reg2();
      account_reg2.put(":", "_");
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals("-", addUser.getEmail());
      assertEquals("S0022", addUser.getUserid());
      assertEquals(0, addUser.getState());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals(']', addUser.getSex());
      assertEquals(0, addUser.getLogincount());
      assertEquals("S0022", addUser.getPass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_dats() throws Throwable  {
      FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
      assertTrue(auth_dats.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAllOnlinAccounts() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      byte[] arg1 = new byte[9];
      UserManagement.receiveAllOnlinAccounts(arg0, arg1);
      assertEquals(0, arg0.getUsers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAuth_dats() throws Throwable  {
      FastMap<Integer, Auth_data> arg0 = new FastMap<Integer, Auth_data>(0);
      Auth_data arg1 = new Auth_data();
      arg0.put((Integer) null, arg1);
      UserManagement.setAuth_dats(arg0);
      assertFalse(arg0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckTXT() throws Throwable  {
      UserManagement.dynamicFailBanCheckTXT("set users %s : %d\n");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIds() throws Throwable  {
      FastTable<Integer> accountIds = UserManagement.getAccountIds();
      assertEquals(0, accountIds.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingStringWithNull() throws Throwable  {
      Auth_data userTxt = UserManagement.getUserTxt((String) null);
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingStringWithNonEmptyString() throws Throwable  {
      Auth_data userTxt = UserManagement.getUserTxt("}eBIW'j-E");
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsGM() throws Throwable  {
      int gM = UserManagement.isGM(3431L);
      assertEquals((-1), gM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero0() throws Throwable  {
      byte[] arg1 = new byte[0];
      int charif_sendallwos = UserManagement.charif_sendallwos(2, arg1);
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero1() throws Throwable  {
      int charif_sendallwos = UserManagement.charif_sendallwos(54, (int[]) null);
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_userWithPositive() throws Throwable  {
      Integer arg0 = new Integer(99);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_user() throws Throwable  {
      Integer arg0 = new Integer(2);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValidWithEmptyString() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid(3, "", 3, 5);
      assertEquals(3, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValidReturningNegative() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid((-257), "8\"AWsEQ", (-257), (-257));
      assertEquals((-1), levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValid() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid(129, "set users %s : %d\n", 129, 129);
      assertEquals(99, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg1 = new byte[7];
      // Undeclared exception!
      try { 
        UserManagement.connectionOfClient((Socket_data) null, arg1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdd_online_user() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      int add_online_user = UserManagement.add_online_user(arg0);
      assertEquals(0, add_online_user);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningZero() throws Throwable  {
      byte[] arg0 = new byte[2];
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals(0, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveUser() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("9w*", "9w*", "a@a.com", 't');
      assertNotNull(arg0);
      
      Auth_data removeUser = UserManagement.removeUser(arg0);
      assertEquals(0, (int)arg0.getAccount_id());
      assertEquals('t', arg0.getSex());
      assertNull(removeUser);
      assertEquals(0, arg0.getState());
      assertEquals(0, arg0.getLogincount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddIpToBanListMySQLThrowsNumberFormatException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.addIpToBanListMySQL("3+nU+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOnlineThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.account_idToOnline((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBUser() throws Throwable  {
      int nBUser = UserManagement.getNBUser();
      assertEquals(0, nBUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOnline_db_final() throws Throwable  {
      int online_db_final = UserManagement.online_db_final();
      assertEquals(0, online_db_final);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBSession() throws Throwable  {
      int nBSession = UserManagement.getNBSession();
      assertEquals(0, nBSession);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIs_user_online() throws Throwable  {
      boolean is_user_online = UserManagement.is_user_online((Integer) null);
      assertFalse(is_user_online);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingNoArguments() throws Throwable  {
      UserManagement.addAccountIdCount();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSessionAtThrowsIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getSessionAt(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingIntegerReturningNull() throws Throwable  {
      Auth_data userTxt = UserManagement.getUserTxt((Integer) 31002);
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfUserThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingStringThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL("n#fAnZ|dlXXGu$O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIdCount() throws Throwable  {
      int accountIdCount = UserManagement.getAccountIdCount();
      assertEquals(0, accountIdCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserSQL() throws Throwable  {
      Auth_data addUserSQL = UserManagement.addUserSQL(":nh~:U[l'(3i", ":nh~:U[l'(3i", ":nh~:U[l'(3i", (-144));
      assertNull(addUserSQL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBecomeGM() throws Throwable  {
      UserManagement.toBecomeGM((Socket_data) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnLogServer() throws Throwable  {
      FromChar arg1 = new FromChar();
      Socket_data arg0 = new Socket_data((Socket) null, arg1);
      UserManagement.unLogServer(arg0);
      assertNull(arg0.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDebugXML() throws Throwable  {
      UserManagement.debugXML();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccountIdCount() throws Throwable  {
      UserManagement.setAccountIdCount((-1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBGM() throws Throwable  {
      int nBGM = UserManagement.getNBGM();
      assertEquals(0, nBGM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingInt() throws Throwable  {
      UserManagement.addAccountIdCount((-591));
  }
}
