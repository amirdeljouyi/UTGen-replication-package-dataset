* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.UserManagement
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 3171
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 21:37:23.464 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 21:37:23.468 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 21:37:23.469 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 21:37:23.759 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 21:37:23.825 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 21:37:23.826 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 21:37:23.828 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 21:37:24.407 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 21:37:24.412 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 21:37:24.412 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 21:37:24.553 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 21:37:24.554 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 21:37:24.555 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 21:37:24.555 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 21:37:24.557 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 21:37:24.558 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 21:37:24.581 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 21:37:24.637 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.UserManagement
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1851
* Using seed 1710279440243
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 845 / 1851
[MASTER] 21:37:25.866 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:>                             1%] [Cov:=====>                             17%][MASTER] 21:37:27.038 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             3%] [Cov:======>                            18%][MASTER] 21:37:28.604 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=>                            4%] [Cov:======>                            18%][Progress:=>                            4%] [Cov:======>                            19%][Progress:=>                            5%] [Cov:=======>                           21%][Progress:=>                            6%] [Cov:=======>                           21%][Progress:=>                            6%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          24%][Progress:==>                           8%] [Cov:========>                          25%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     27%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     29%] [Cov:==========>                        30%][Progress:========>                     29%] [Cov:==========>                        30%][Progress:========>                     29%] [Cov:==========>                        30%][Progress:========>                     29%] [Cov:==========>                        30%][Progress:========>                     29%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    30%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        30%][MASTER] 21:37:56.798 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Class<T> : Type points to itself
[Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   34%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  37%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:===========>                  39%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 42%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                45%] [Cov:==========>                        30%][Progress:=============>                45%] [Cov:==========>                        30%][Progress:=============>                45%] [Cov:==========>                        30%][Progress:=============>                45%] [Cov:==========>                        30%][Progress:==============>               48%] [Cov:==========>                        30%][Progress:==============>               48%] [Cov:==========>                        30%][Progress:==============>               48%] [Cov:==========>                        30%][Progress:==============>               48%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:==================>           63%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:======================>       75%] [Cov:==========>                        30%][Progress:======================>       75%] [Cov:==========>                        30%][Progress:======================>       75%] [Cov:==========>                        30%][Progress:======================>       75%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:=======================>      77%] [Cov:==========>                        30%][Progress:=======================>      77%] [Cov:==========>                        30%][Progress:=======================>      77%] [Cov:==========>                        30%][Progress:=======================>      77%] [Cov:==========>                        30%][Progress:=======================>      77%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    85%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:=========================>    86%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   87%] [Cov:==========>                        30%][Progress:==========================>   88%] [Cov:==========>                        30%][Progress:==========================>   88%] [Cov:==========>                        30%][Progress:==========================>   88%] [Cov:==========>                        30%][Progress:============================> 94%] [Cov:==========>                        30%][Progress:============================> 94%] [Cov:==========>                        30%][Progress:============================> 94%] [Cov:==========>                        30%][Progress:============================> 94%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 95%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:============================> 96%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>97%] [Cov:==========>                        30%][Progress:=============================>98%] [Cov:==========>                        30%][Progress:=============================>98%] [Cov:==========>                        30%][Progress:==============================100%] [Cov:==========>                        30%]
* Search finished after 102s and 434 generations, 104287 statements, best individual has fitness: 1397.0
* Generated before the refinement 79 tests with total length 201
statement is: addAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount((int) (byte)92)
test data is: UserManagement.addAccountIdCount((int) (byte)92);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addAccountIdCount(((int) ((byte) (100))));
    }
}
statement is: UserManagement.addAccountIdCount(((int) ((byte) (100)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(((int) ((byte) (100)))) target is: UserManagement method is: addAccountIdCount(int)
Matched Method is: addAccountIdCount(I)V
TestCase is: int _int = 100;
UserManagement.addAccountIdCount(_int);

statement is: getNBGM()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBGM = UserManagement.getNBGM()
test data is: UserManagement.getNBGM();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getNBGM(new User("John Doe", 30, "johndoe@gmail.com"));
        UserManagement.getNBGM(new User("Jane Smith", 25, "janesmith@yahoo.com"));
        UserManagement.getNBGM(new User("Bob Johnson", 45, "bobjohnson@hotmail.com"));
    }
}
statement is: UserManagement.getNBGM(new User("John Doe", 30, "johndoe@gmail.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM(new User("John Doe", 30, "johndoe@gmail.com")) target is: UserManagement method is: getNBGM(User)
statement is: UserManagement.getNBGM(new User("Jane Smith", 25, "janesmith@yahoo.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM(new User("Jane Smith", 25, "janesmith@yahoo.com")) target is: UserManagement method is: getNBGM(User)
statement is: UserManagement.getNBGM(new User("Bob Johnson", 45, "bobjohnson@hotmail.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM(new User("Bob Johnson", 45, "bobjohnson@hotmail.com")) target is: UserManagement method is: getNBGM(User)
statement is: setAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAccountIdCount(56)
test data is: UserManagement.setAccountIdCount(56);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.setAccountIdCount(1024);
    }
}
statement is: UserManagement.setAccountIdCount(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAccountIdCount(1024) target is: UserManagement method is: setAccountIdCount(int)
Matched Method is: setAccountIdCount(I)V
TestCase is: int _int = 1024;
UserManagement.setAccountIdCount(_int);

statement is: debugXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.debugXML()
test data is: UserManagement.debugXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Print out the XML representation of the user object
        System.out.println(user.toXml());
    }
}
statement is: // Print out the XML representation of the user object
System.out.println(user.toXml()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Print out the XML representation of the user object
System.out.println(user.toXml()) target is: System.out method is: println(char[])
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: unLogServer(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unLogServer(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);
        Socket_data socket_data = new Socket_data(mockSocket, "username", "password");
        UserManagement.unLogServer(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, "username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.unLogServer(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unLogServer(socket_data) target is: UserManagement method is: unLogServer(Socket_data)
Matched Method is: unLogServer(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.unLogServer(socket_data);

statement is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toBecomeGM((Socket_data) null)
test data is: UserManagement.toBecomeGM((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.toBecomeGM(new Socket_data("John Doe", 35, "johndoe@example.com", "1234567890"));
    }
}
statement is: UserManagement.toBecomeGM(new Socket_data("John Doe", 35, "johndoe@example.com", "1234567890")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toBecomeGM(new Socket_data("John Doe", 35, "johndoe@example.com", "1234567890")) target is: UserManagement method is: toBecomeGM(Socket_data)
Matched Method is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toBecomeGM(socket_data);

statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("", "", "", 17)
test data is: UserManagement.addUserSQL("", "", "", 17);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30);
    }
}
statement is: UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30) target is: UserManagement method is: addUserSQL(java.lang.String,java.lang.String,java.lang.String,int)
Matched Method is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Smith";
String string = "johnsmith@email.com";
String string = "password456";
int _int = 30;
UserManagement.addUserSQL(string, string, string, _int);

statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] accountIds = new int[]{ 10001, 20002, 30003, 40004, 50005 };
        String[] accountNames = new String[]{ "John Doe", "Jane Doe", "Bob Smith", "Alice Johnson", "David Kim" };
        int[] balances = new int[]{ 1000, 2000, 3000, 4000, 5000 };
    }
}
statement is: // Improved test data
int[] accountIds = new int[]{ 10001, 20002, 30003, 40004, 50005 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] accountNames = new String[]{ "John Doe", "Jane Doe", "Bob Smith", "Alice Johnson", "David Kim" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] balances = new int[]{ 1000, 2000, 3000, 4000, 5000 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL("")
test data is: UserManagement.getUserSQL("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'");
    }
}
statement is: UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'") target is: UserManagement method is: getUserSQL(java.lang.String)
Matched Method is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'";
UserManagement.getUserSQL(string);

statement is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.numberOfUser((Socket_data) null, (byte[]) null)
test data is: UserManagement.numberOfUser((Socket_data) null, (byte[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.numberOfUsers(((Socket_data) (new Socket_data("localhost", 8080))), ((byte[]) ("{\"user\": \"John\", \"age\": 25}".getBytes())));
    }
}
statement is: UserManagement.numberOfUsers(((Socket_data) (new Socket_data("localhost", 8080))), ((byte[]) ("{\"user\": \"John\", \"age\": 25}".getBytes()))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.numberOfUsers(((Socket_data) (new Socket_data("localhost", 8080))), ((byte[]) ("{\"user\": \"John\", \"age\": 25}".getBytes()))) target is: UserManagement method is: numberOfUsers(Socket_data,byte[])
statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer((byte) (-43))
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: Integer integer = new Integer((byte) (-43));
UserManagement.getUserTxt(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Integer integer = new Integer(((byte) (0xa5)));// A more descriptive and representative value for the byte -43

        UserManagement.getUserTxt(integer);
    }
}
statement is: // Improved test data
Integer integer = new Integer(((byte) (0xa5)))// A more descriptive and representative value for the byte -43
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.getUserTxt(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(integer) target is: UserManagement method is: getUserTxt(java.lang.Integer)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 165;
Integer integer = new Integer(_int);
UserManagement.getUserTxt(integer);

statement is: addSession(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addSession((Socket_data) null)
test data is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addSession(new Socket_data("John Doe", 32, "johndoe@example.com"));
        UserManagement.addSession(new Socket_data("Jane Smith", 25, "janesmith@example.com"));
        UserManagement.addSession(new Socket_data("Bob Johnson", 42, "bobjohnson@example.com"));
    }
}
statement is: UserManagement.addSession(new Socket_data("John Doe", 32, "johndoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(new Socket_data("John Doe", 32, "johndoe@example.com")) target is: UserManagement method is: addSession(Socket_data)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addSession(new Socket_data("Jane Smith", 25, "janesmith@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(new Socket_data("Jane Smith", 25, "janesmith@example.com")) target is: UserManagement method is: addSession(Socket_data)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addSession(new Socket_data("Bob Johnson", 42, "bobjohnson@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(new Socket_data("Bob Johnson", 42, "bobjohnson@example.com")) target is: UserManagement method is: addSession(Socket_data)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.addSession(socket_data);
Socket_data socket_data = null;
UserManagement.addSession(socket_data);
Socket_data socket_data = null;
UserManagement.addSession(socket_data);

statement is: addAccountIdCount()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount()
test data is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before
        int accountId = 1;
        double balance = 1000.0;
        String name = "John Doe";
        // After
        int accountId = 56789;
        double balance = 2000.0;
        String name = "Jane Smith";
    }
}
statement is: // Before
int accountId = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double balance = 1000.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After
int accountId = 56789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double balance = 2000.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1
* this is vulnerable: double _double = 1000.0
* this is vulnerable: String string = "John Doe"
* this is vulnerable: int _int = 56789
* this is vulnerable: double _double = 2000.0
* this is vulnerable: String string = "Jane Smith"
TestCase is: int _int = 1;
double _double = 1000.0;
String string = "John Doe";
int _int = 56789;
double _double = 2000.0;
String string = "Jane Smith";

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: add_online_user(Lorg/javathena/core/data/Auth_data;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int add_online_user = UserManagement.add_online_user(arg0)
statement is: Socket_data socket_data = null type is: class org.evosuite.testcase.statements.NullStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = null
statement is: changeSex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSex((Socket_data) null)
statement is: long _long = 1L type is: class org.evosuite.testcase.statements.numeric.LongPrimitiveStatement return type long
statement code is: long _long = 1L
statement is: isGM(J)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gM = UserManagement.isGM(arg0)
statement is: String string = "" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ""
statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT(arg0)
statement is: emailCreation(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailCreation(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
UserManagement.changeSex((Socket_data) null);
long _long = 1L;
UserManagement.isGM(_long);
String string = "";
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.emailCreation(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setUsername("testuser");
        auth_data.setPassword("password123");
        UserManagement.add_online_user(auth_data);
        Socket_data socket_data = new Socket_data();
        socket_data.setSex(MALE);
        UserManagement.changeSex(socket_data);
        long _long = 1L;
        UserManagement.isGM(_long);
        String string = "test@example.com";
        UserManagement.dynamicFailBanCheckTXT(string);
        UserManagement.emailCreation(socket_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setUsername("testuser"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("testuser") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.add_online_user(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
statement is: Socket_data socket_data = new Socket_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: socket_data.setSex(MALE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: socket_data.setSex(MALE) target is: socket_data method is: setSex()
statement is: UserManagement.changeSex(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSex(socket_data) target is: UserManagement method is: changeSex(Socket_data)
Matched Method is: changeSex(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: long _long = 1L, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.isGM(_long), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM(_long) target is: UserManagement method is: isGM(long)
Matched Method is: isGM(J)I
statement is: String string = "test@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.dynamicFailBanCheckTXT(string), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckTXT(string) target is: UserManagement method is: dynamicFailBanCheckTXT(java.lang.String)
Matched Method is: dynamicFailBanCheckTXT(Ljava/lang/String;)V
statement is: UserManagement.emailCreation(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data) target is: UserManagement method is: emailCreation(Socket_data)
Matched Method is: emailCreation(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
UserManagement.changeSex(socket_data);
long _long = 1L;
UserManagement.isGM(_long);
String string = "test@example.com";
UserManagement.dynamicFailBanCheckTXT(string);
Socket_data socket_data = null;
UserManagement.emailCreation(socket_data);

statement is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((Integer) null)
test data is: UserManagement.getUserSQL((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL(1);
    }
}
statement is: UserManagement.getUserSQL(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL(1) target is: UserManagement method is: getUserSQL(int)
Matched Method is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 1;
UserManagement.getUserSQL((Integer) _int);

statement is: getNBSession()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBSession = UserManagement.getNBSession()
test data is: UserManagement.getNBSession();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int nbSessions = 5;
        String userId = "johndoe";
        String sessionId = "abcdefghijklmnopqrstuvwxyz1234567890";
    }
}
statement is: // Improved test data
int nbSessions = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userId = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String sessionId = "abcdefghijklmnopqrstuvwxyz1234567890", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "abcdefghijklmnopqrstuvwxyz1234567890"
TestCase is: int _int = 5;
String string = "johndoe";
String string = "abcdefghijklmnopqrstuvwxyz1234567890";

statement is: online_db_final()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int online_db_final = UserManagement.online_db_final()
test data is: UserManagement.online_db_final();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.online_db_final();
        // The following code will check if the user is online or not
        int status = UserManagement.isOnline();// returns a string value such as "online" or "connected"

        // The following code will check if the user is authorized to perform a specific action
        boolean authorize = UserManagement.authorizeAction(action);// returns a string value such as "authorized" or "permitted" }}

    }
}
statement is: UserManagement.online_db_final(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.online_db_final() target is: UserManagement method is: online_db_final()
Matched Method is: online_db_final()I
statement is: // The following code will check if the user is online or not
int status = UserManagement.isOnline()// returns a string value such as "online" or "connected"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isOnline() target is: UserManagement method is: isOnline()
statement is: // The following code will check if the user is authorized to perform a specific action
boolean authorize = UserManagement.authorizeAction(action)// returns a string value such as "authorized" or "permitted" }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.authorizeAction(action) target is: UserManagement method is: authorizeAction()
TestCase is: UserManagement.online_db_final();

statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
statement is: getSessionAt(I)Lorg/javathena/core/data/Socket_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data sessionAt = UserManagement.getSessionAt(0)
statement is: sendMessageOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "")
statement is: getIpTab()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] ipTab = socket_data.getIpTab()
statement is: cancel()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean cancel = socket_data.cancel()
statement is: changeSex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSex(arg0)
statement is: String string = "Account limit from company" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = "Account limit from company"
statement is: getIpStr()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String ipStr = socket_data.getIpStr()
statement is: decode(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer decode = Integer.decode(arg0)
statement is: is_user_online(Ljava/lang/Integer;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean is_user_online = UserManagement.is_user_online(arg0)
statement is: String string = "" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ""
statement is: String string = "V:1&y1" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = "V:1&y1"
statement is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 12) type is: class org.evosuite.testcase.statements.environment.RemoteAddressPrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteRemoteAddress
statement code is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 12)
statement is: openRemoteTcpServer(Lorg/evosuite/runtime/testdata/EvoSuiteRemoteAddress;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean openRemoteTcpServer = NetworkHandling.openRemoteTcpServer(arg0)
statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL(arg0, arg1, arg2, arg3)
statement is: getNBGM()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBGM = UserManagement.getNBGM()
statement is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfCharServer(arg0, arg1)
statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT(arg0)
statement is: sendUserList(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.sendUserList(arg0)
statement is: String string = "" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ""
statement is: String string = "Y0f" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = "Y0f"
statement is: char _char = 'v' type is: class org.evosuite.testcase.statements.numeric.CharPrimitiveStatement return type char
statement code is: char _char = 'v'
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT(arg0, arg1, arg2, arg3)
test data is: int nBUser = UserManagement.getNBUser();
UserManagement.getAccountIds();
Socket_data sessionAt = UserManagement.getSessionAt(0);
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
byte[] ipTab = sessionAt.getIpTab();
sessionAt.cancel();
UserManagement.changeSex(sessionAt);
String string = "Account limit from company";
sessionAt.getIpStr();
Integer decode = Integer.decode(string);
UserManagement.is_user_online(decode);
String string = "";
String string = "V:1&y1";
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 12);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.addUserSQL(string, string, string, nBUser);
UserManagement.getNBGM();
UserManagement.connectionOfCharServer(sessionAt, ipTab);
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.sendUserList(sessionAt);
String string = "";
String string = "Y0f";
char _char = 'v';
UserManagement.addUserTXT(string, string, string, _char);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        int nBUser = 10;// Larger value to test with a larger number of users

        String[] accountIds = new String[]{ "user1", "user2", "user3" };// Array of user IDs

        Socket_data sessionAt = new Socket_data("192.168.1.1", 1234);// Sample socket data

        byte[] ipTab = new byte[]{ 1, 2, 3, 4 };// IP address as a byte array

        String string = "Account limit from company";// A sample string to test the decode method

        Integer decode = Integer.decode(string);// Converted value of the sample string

        boolean isUserOnline = true;// Sample boolean value for testing the is_user_online() method

        char _char = 'A';// Sample character for testing the addUserTXT() method }}

    }
}
statement is: // Improved test data for the given code snippet
int nBUser = 10// Larger value to test with a larger number of users
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] accountIds = new String[]{ "user1", "user2", "user3" }// Array of user IDs
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: Socket_data sessionAt = new Socket_data("192.168.1.1", 1234)// Sample socket data
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] ipTab = new byte[]{ 1, 2, 3, 4 }// IP address as a byte array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String string = "Account limit from company"// A sample string to test the decode method
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Integer decode = Integer.decode(string)// Converted value of the sample string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Integer.decode(string) target is: Integer method is: decode(java.lang.String)
Matched Method is: decode(Ljava/lang/String;)Ljava/lang/Integer;
statement is: boolean isUserOnline = true// Sample boolean value for testing the is_user_online() method
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char _char = 'A'// Sample character for testing the addUserTXT() method }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: boolean _boolean = true
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 10;
String string = "Account limit from company";
Integer.decode(string);
boolean _boolean = true;
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@17cf3b3d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[21]
statement is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOnline((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[21];
UserManagement.account_idToOnline((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Testing account_idToOnline method with a null socket_data parameter
        byte[] byteArray = new byte[21];
        UserManagement.account_idToOnline(null, byteArray);
        // Testing account_idToOnline method with a non-null socket_data parameter and a valid user ID
        Socket_data data = new Socket_data();
        data.setUserID("user123");
        byte[] byteArray = new byte[21];
        UserManagement.account_idToOnline(data, byteArray);
    }
}
statement is: // Testing account_idToOnline method with a null socket_data parameter
byte[] byteArray = new byte[21], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [21] Ct is: byte[] byteArray = new byte[21] isAssignment: false Array: new byte[21] Elements: []
lengths: [21] [21]
Their type are: class [B byte[]
statement is: UserManagement.account_idToOnline(null, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOnline(null, byteArray) target is: UserManagement method is: account_idToOnline(<unknown>,byte[])
Matched Method is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: // Testing account_idToOnline method with a non-null socket_data parameter and a valid user ID
Socket_data data = new Socket_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: data.setUserID("user123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: data.setUserID("user123") target is: data method is: setUserID(java.lang.String)
statement is: byte[] byteArray = new byte[21], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [21] Ct is: byte[] byteArray = new byte[21] isAssignment: false Array: new byte[21] Elements: []
lengths: [21] [21]
Their type are: class [B byte[]
statement is: UserManagement.account_idToOnline(data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOnline(data, byteArray) target is: UserManagement method is: account_idToOnline(Socket_data,byte[])
Matched Method is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[21];
byte[] byteArray = null;
UserManagement.account_idToOnline((Socket_data) byteArray, byteArray);
byte[] byteArray = new byte[21];
byte[] byteArray = null;
UserManagement.account_idToOnline((Socket_data) byteArray, byteArray);

statement is: addIpToBanListMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addIpToBanListMySQL("-kUv5")
test data is: UserManagement.addIpToBanListMySQL("-kUv5");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addIpToBanListMySQL("192.168.0.1");
    }
}
statement is: UserManagement.addIpToBanListMySQL("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("192.168.0.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
TestCase is: String string = "192.168.0.1";
UserManagement.addIpToBanListMySQL(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')')
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType(88)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "192.168.0.1", "MySQLAdmin", ')');
        addUserTXT.setClientType(88);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "192.168.0.1", "MySQLAdmin", ')'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("MysqlIO.SlowQuery", "192.168.0.1", "MySQLAdmin", ')') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setClientType(88), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setClientType(88) target is: addUserTXT method is: setClientType(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "MysqlIO.SlowQuery";
String string = "192.168.0.1";
String string = "MySQLAdmin";
char _char = ')';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 88;
((Auth_data) string).setClientType(_int);
UserManagement.addUser(addUserTXT);

statement is: org.evosuite.testcase.statements.ArrayStatement@44ae0b46 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static int tabHexToInt(byte[] bytes) {
        return 0;
    }
}
statement is: return 0, class spoon.support.reflect.code.CtReturnImpl
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data removeUser = UserManagement.removeUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.removeUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "fullname123", '9');
        UserManagement.removeUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "fullname123", '9'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("username123", "password123", "fullname123", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.removeUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.removeUser(addUserTXT) target is: UserManagement method is: removeUser(Auth_data)
Matched Method is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "username123";
String string = "password123";
String string = "fullname123";
char _char = '9';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
UserManagement.removeUser(addUserTXT);

statement is: org.evosuite.testcase.statements.ArrayStatement@512424ac type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[38]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient((Socket_data) null, arg1, false)
test data is: byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) null, byteArray, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[38];
        // Improved test data: Using more descriptive values
        String clientIPAddress = "192.168.0.1";
        int clientPortNumber = 8080;
        boolean isClientSocketSecure = false;
        UserManagement.connectionOfClient(clientIPAddress, byteArray, isClientSocketSecure);
    }
}
statement is: byte[] byteArray = new byte[38], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [38] Ct is: byte[] byteArray = new byte[38] isAssignment: false Array: new byte[38] Elements: []
lengths: [38] [38]
Their type are: class [B byte[]
statement is: // Improved test data: Using more descriptive values
String clientIPAddress = "192.168.0.1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int clientPortNumber = 8080, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isClientSocketSecure = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.connectionOfClient(clientIPAddress, byteArray, isClientSocketSecure), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(clientIPAddress, byteArray, isClientSocketSecure) target is: UserManagement method is: connectionOfClient(java.lang.String,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
* this is vulnerable: int _int = 8080
TestCase is: byte[] byteArray = new byte[38];
String string = "192.168.0.1";
int _int = 8080;
boolean _boolean = false;
UserManagement.connectionOfClient((Socket_data) string, byteArray, _boolean);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@ef9b511 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[14]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient(arg0, arg1, true)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
UserManagement.connectionOfClient(socket_data, byteArray, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[14];
        UserManagement.connectionOfClient(socket_data, byteArray, true);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[14], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [14] Ct is: byte[] byteArray = new byte[14] isAssignment: false Array: new byte[14] Elements: []
lengths: [14] [14]
Their type are: class [B byte[]
statement is: UserManagement.connectionOfClient(socket_data, byteArray, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(socket_data, byteArray, true) target is: UserManagement method is: connectionOfClient(Socket_data,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
boolean _boolean = true;
UserManagement.connectionOfClient(socket_data, byteArray, _boolean);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181)
test data is: UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212);
        UserManagement.levelIsValid(100, "MasterChef9000", 1337, 1337);
    }
}
statement is: UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
statement is: UserManagement.levelIsValid(100, "MasterChef9000", 1337, 1337), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(100, "MasterChef9000", 1337, 1337) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 90;
String string = "AwesomeGamer777";
int _int = 4212;
int _int = 4212;
UserManagement.levelIsValid(_int, string, _int, _int);
int _int = 100;
String string = "MasterChef9000";
int _int = 1337;
int _int = 1337;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536))
test data is: UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(99, "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, -99);
    }
}
statement is: UserManagement.levelIsValid(99, "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, -99), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(99, "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, -99) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: int _int = 99;
String string = "ConnectionProperties.useSSPSCompatibleTimezoneShift";
int _int = 31042;
int _int = null;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256)
test data is: UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256);
    }
}
statement is: UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 100;
String string = "~e7F]<=FkZ";
int _int = 100;
int _int = 256;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer((-787))
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer((-787));
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Integer integer = new Integer(123456789);
        UserManagement.remove_online_user(integer);
    }
}
statement is: // Improved test data
Integer integer = new Integer(123456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 123456789;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(99)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(1234567890);
        UserManagement.remove_online_user(integer);
    }
}
statement is: Integer integer = new Integer(1234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 1234567890;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: org.evosuite.testcase.statements.ArrayStatement@b39343ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[2]
statement is: charif_sendallwos(I[I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(0, arg1)
test data is: int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        userId = 0;
        wosIds[0] = 5;
        wosIds[1] = 8;
        UserManagement.charif_sendallwos(userId, wosIds);
    }
}
statement is: userId = 0, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wosIds[0] = 5, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wosIds[1] = 8, class spoon.support.reflect.code.CtAssignmentImpl
statement is: UserManagement.charif_sendallwos(userId, wosIds), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(userId, wosIds) target is: UserManagement method is: charif_sendallwos()
Matched Method is: charif_sendallwos(I[I)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = null;
int[] intArray = null;
UserManagement.charif_sendallwos(_int, intArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@b45092bb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: charif_sendallwos(I[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(7, arg1)
test data is: byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        // set the first element of the byte array to 0x01
        byteArray[0] = ((byte) (0x1));
        // set the second element of the byte array to 0x02
        byteArray[1] = ((byte) (0x2));
        // set the third element of the byte array to 0x03
        byteArray[2] = ((byte) (0x3));
        // set the fourth element of the byte array to 0x04
        byteArray[3] = ((byte) (0x4));
        // set the fifth element of the byte array to 0x05
        byteArray[4] = ((byte) (0x5));
        // set the sixth and last element of the byte array to 0x06
        byteArray[5] = ((byte) (0x6));
        UserManagement.charif_sendallwos(7, byteArray);
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: // set the first element of the byte array to 0x01
byteArray[0] = ((byte) (0x1)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x1)) Ct is: // set the first element of the byte array to 0x01
byteArray[0] = ((byte) (0x1))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // set the second element of the byte array to 0x02
byteArray[1] = ((byte) (0x2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x2)) Ct is: // set the second element of the byte array to 0x02
byteArray[1] = ((byte) (0x2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // set the third element of the byte array to 0x03
byteArray[2] = ((byte) (0x3)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x3)) Ct is: // set the third element of the byte array to 0x03
byteArray[2] = ((byte) (0x3))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // set the fourth element of the byte array to 0x04
byteArray[3] = ((byte) (0x4)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x4)) Ct is: // set the fourth element of the byte array to 0x04
byteArray[3] = ((byte) (0x4))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // set the fifth element of the byte array to 0x05
byteArray[4] = ((byte) (0x5)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x5)) Ct is: // set the fifth element of the byte array to 0x05
byteArray[4] = ((byte) (0x5))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // set the sixth and last element of the byte array to 0x06
byteArray[5] = ((byte) (0x6)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x6)) Ct is: // set the sixth and last element of the byte array to 0x06
byteArray[5] = ((byte) (0x6))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.charif_sendallwos(7, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(7, byteArray) target is: UserManagement method is: charif_sendallwos(int,byte[])
Matched Method is: charif_sendallwos(I[B)I
TestCase is: byte[] byteArray = new byte[6];
int _int = 7;
UserManagement.charif_sendallwos(_int, byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z')
test data is: UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
    }
}
statement is: UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Bc";
String string = "a@a.com";
String string = "a@a.com";
char _char = 'Z';
UserManagement.addUserTXT(string, string, string, _char);

statement is: isGM(J)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gM = UserManagement.isGM((-2793L))
test data is: UserManagement.isGM((-2793L));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.isGM("johndoe@example.com");
    }
}
statement is: UserManagement.isGM("johndoe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM("johndoe@example.com") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
TestCase is: String string = "johndoe@example.com";
UserManagement.isGM((long) string);

statement is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((String) null)
test data is: UserManagement.getUserTxt((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserTxt("John Doe");
    }
}
statement is: UserManagement.getUserTxt("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt("John Doe") target is: UserManagement method is: getUserTxt(java.lang.String)
Matched Method is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
UserManagement.getUserTxt(string);

statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
test data is: UserManagement.getAccountIds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return Arrays.asList(1, 2, 3);
    }
}
statement is: return Arrays.asList(1, 2, 3), class spoon.support.reflect.code.CtReturnImpl
statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("m .A")
test data is: UserManagement.dynamicFailBanCheckTXT("m .A");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.dynamicFailBanCheckTXT("johndoe");
    }
}
statement is: UserManagement.dynamicFailBanCheckTXT("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckTXT("johndoe") target is: UserManagement method is: dynamicFailBanCheckTXT(java.lang.String)
Matched Method is: dynamicFailBanCheckTXT(Ljava/lang/String;)V
TestCase is: String string = "johndoe";
UserManagement.dynamicFailBanCheckTXT(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer accountID = UserManagement.getAccountID("/$t,JBgS6M<;")
statement is: newInstance()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> newInstance = FastMap.newInstance()
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data put = fastMap.put(arg0, arg1)
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer accountID = UserManagement.getAccountID("/$t,JBgS6M<;");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
newInstance.put(accountID, addUserTXT);
UserManagement.setAuth_dats(newInstance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("user123", "password123", "firstname lastname", '9');
        Integer accountID = UserManagement.getAccountID("user123");
        FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
        newInstance.put(accountID, addUserTXT);
        UserManagement.setAuth_dats(newInstance);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("user123", "password123", "firstname lastname", '9'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("user123", "password123", "firstname lastname", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Integer accountID = UserManagement.getAccountID("user123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountID("user123") target is: UserManagement method is: getAccountID(java.lang.String)
Matched Method is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer;
statement is: FastMap<Integer, Auth_data> newInstance = FastMap.newInstance(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: FastMap.newInstance() target is: FastMap method is: newInstance()
Matched Method is: newInstance()Ljavolution/util/FastMap;
statement is: newInstance.put(accountID, addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: newInstance.put(accountID, addUserTXT) target is: newInstance method is: put(java.lang.Integer,Auth_data)
source statement: newInstance()Ljavolution/util/FastMap; callee: VariableReference: Statement 2, type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>index is: 7
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: UserManagement.setAuth_dats(newInstance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(newInstance) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
TestCase is: String string = "user123";
String string = "password123";
String string = "firstname lastname";
char _char = '9';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
String string = "user123";
Integer accountID = UserManagement.getAccountID(string);
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
((FastMap) string).put(accountID, addUserTXT);
UserManagement.setAuth_dats(newInstance);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@19118b44 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAllOnlinAccounts(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[3];
        UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
        // Improved test data
        mockSocket = new MockSocket("192.168.0.1", 12345);
        socket_data = new Socket_data(mockSocket);
        byteArray = new byte[]{ 0x1, 0x2, 0x3 };
        UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray) target is: UserManagement method is: receiveAllOnlinAccounts(Socket_data,byte[])
Matched Method is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V
statement is: // Improved test data
mockSocket = new MockSocket("192.168.0.1", 12345), class spoon.support.reflect.code.CtAssignmentImpl
statement is: socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtAssignmentImpl
statement is: byteArray = new byte[]{ 0x1, 0x2, 0x3 }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray) target is: UserManagement method is: receiveAllOnlinAccounts(Socket_data,byte[])
Matched Method is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
test data is: UserManagement.getAuth_dats();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before
        int age = 25;
        String name = "John Doe";
        // After
        int age = 35;
        String name = "Jane Smith";
    }
}
statement is: // Before
int age = 25, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After
int age = 35, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "John Doe"
* this is vulnerable: int _int = 35
* this is vulnerable: String string = "Jane Smith"
TestCase is: int _int = 25;
String string = "John Doe";
int _int = 35;
String string = "Jane Smith";

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(48)
statement is: is_user_online(Ljava/lang/Integer;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean is_user_online = UserManagement.is_user_online(arg0)
test data is: Integer integer = new Integer(48);
UserManagement.is_user_online(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(100);
        UserManagement.is_user_online(integer);
    }
}
statement is: Integer integer = new Integer(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.is_user_online(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.is_user_online(integer) target is: UserManagement method is: is_user_online(java.lang.Integer)
Matched Method is: is_user_online(Ljava/lang/Integer;)Z
TestCase is: int _int = 100;
Integer integer = new Integer(_int);
UserManagement.is_user_online(integer);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time((-213))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("username", "password", "firstName", '9');
        addUserTXT.setBan_until_time(-213);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("username", "password", "firstName", '9'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("username", "password", "firstName", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setBan_until_time(-213), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setBan_until_time(-213) target is: addUserTXT method is: setBan_until_time(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setBan_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "username";
String string = "password";
String string = "firstName";
char _char = '9';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setBan_until_time(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time(465L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "email@example.com", '9');
        addUserTXT.setBan_until_time(465L);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "email@example.com", '9'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("username123", "password123", "email@example.com", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setBan_until_time(465L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setBan_until_time(465L) target is: addUserTXT method is: setBan_until_time(long)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setBan_until_time(J)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "username123";
String string = "password123";
String string = "email@example.com";
char _char = '9';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
long _long = 465L;
((Auth_data) string).setBan_until_time(_long);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setCharserver(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setCharserver((byte)125)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setCharserver((byte)125);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setCharserver('X');
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setCharserver('X'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setCharserver('X') target is: auth_data method is: setCharserver(char)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setCharserver(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
char _char = 'X';
auth_data.setCharserver(_char);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType((byte) (-65))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Auth_data auth_data = new Auth_data();
        auth_data.setClientType(((byte) (1)));// set to a valid value (1 for mobile app)

        auth_data.setUsername("John");// set a username that is not already in use

        auth_data.setPassword("password123");// set a password that is not already in use

        UserManagement.addUser(auth_data);
    }
}
statement is: // Improved test data
Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setClientType(((byte) (1)))// set to a valid value (1 for mobile app)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setClientType(((byte) (1)))// set to a valid value (1 for mobile app)
 target is: auth_data method is: setClientType(byte)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setClientType(I)V
statement is: auth_data.setUsername("John")// set a username that is not already in use
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("John")// set a username that is not already in use
 target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123")// set a password that is not already in use
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123")// set a password that is not already in use
 target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 1;
auth_data.setClientType(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setConnect_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setConnect_until_time(294L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(294L);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setConnect_until_time(1604719582L);// 13 Nov 2020, 12:34 PM

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setConnect_until_time(1604719582L)// 13 Nov 2020, 12:34 PM
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setConnect_until_time(1604719582L)// 13 Nov 2020, 12:34 PM
 target is: auth_data method is: setConnect_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setConnect_until_time(J)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
long _long = 1604719582L;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag((-213))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "Password123!", "johndoe@example.com", '9');
        addUserTXT.setDelflag(0);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "Password123!", "johndoe@example.com", '9'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("johndoe", "Password123!", "johndoe@example.com", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setDelflag(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setDelflag(0) target is: addUserTXT method is: setDelflag(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setDelflag(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "johndoe";
String string = "Password123!";
String string = "johndoe@example.com";
char _char = '9';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 0;
((Auth_data) string).setDelflag(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag(59)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setDelflag("user_deleted");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setDelflag("user_deleted"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setDelflag("user_deleted") target is: auth_data method is: setDelflag(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setDelflag(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "user_deleted";
auth_data.setDelflag((int) string);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5')
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel((-336))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("john.doe@example.com", "password123", "John Doe", '5');
        addUserTXT.setLevel(-336);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("john.doe@example.com", "password123", "John Doe", '5'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("john.doe@example.com", "password123", "John Doe", '5') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLevel(-336), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLevel(-336) target is: addUserTXT method is: setLevel(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLevel(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john.doe@example.com";
String string = "password123";
String string = "John Doe";
char _char = '5';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setLevel(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel(1416)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLevel(90210);// A more descriptive and representative value for level

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLevel(90210)// A more descriptive and representative value for level
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(90210)// A more descriptive and representative value for level
 target is: auth_data method is: setLevel(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLevel(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 90210;
auth_data.setLevel(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1(3866)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id("alice@example.com");
        auth_data.setPassword("$2a$10$RtgZxoQNK6/n8lYDz3pHdOjhGZVUyW0B4iJ7CqE7F9kTs0f.L8bWO");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id("alice@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id("alice@example.com") target is: auth_data method is: setLogin_id(java.lang.String)
statement is: auth_data.setPassword("$2a$10$RtgZxoQNK6/n8lYDz3pHdOjhGZVUyW0B4iJ7CqE7F9kTs0f.L8bWO"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("$2a$10$RtgZxoQNK6/n8lYDz3pHdOjhGZVUyW0B4iJ7CqE7F9kTs0f.L8bWO") target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id2(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id2((byte)54)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id2(((byte) (0xff)));// using a byte value of 255 to represent the maximum possible login ID

        UserManagement.addUser(auth_data);
        // Improved test data:
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id2(((byte) (100)));// using a larger byte value to represent a more descriptive and representative login ID

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id2(((byte) (0xff)))// using a byte value of 255 to represent the maximum possible login ID
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id2(((byte) (0xff)))// using a byte value of 255 to represent the maximum possible login ID
 target is: auth_data method is: setLogin_id2(byte)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: // Improved test data:
Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id2(((byte) (100)))// using a larger byte value to represent a more descriptive and representative login ID
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id2(((byte) (100)))// using a larger byte value to represent a more descriptive and representative login ID
 target is: auth_data method is: setLogin_id2(byte)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 255;
auth_data.setLogin_id2(_int);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
int _int = 100;
auth_data.setLogin_id2(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLastlogin()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLastlogin()
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLastlogin("2023-03-15T13:45:30");
        UserManagement.addUser(auth_data);// Testing the addition of a new user with last login date set to March 15, 2023 at 1:45 PM }}

    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLastlogin("2023-03-15T13:45:30"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLastlogin("2023-03-15T13:45:30") target is: auth_data method is: setLastlogin(java.lang.String)
statement is: UserManagement.addUser(auth_data)// Testing the addition of a new user with last login date set to March 15, 2023 at 1:45 PM }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data)// Testing the addition of a new user with last login date set to March 15, 2023 at 1:45 PM }}
 target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setState(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setState(222)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setState("California");// change to a more descriptive state name

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setState("California")// change to a more descriptive state name
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setState("California")// change to a more descriptive state name
 target is: auth_data method is: setState(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setState(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "California";
auth_data.setState((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setVersion(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setVersion(237)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setVersion("1.2.3");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setVersion("1.2.3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setVersion("1.2.3") target is: auth_data method is: setVersion(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setVersion(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "1.2.3";
auth_data.setVersion((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setResetLogincoun(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setResetLogincoun(true)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setResetLogincoun(true);
        auth_data.setUsername("johndoe");
        auth_data.setPassword("password123");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setResetLogincoun(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setResetLogincoun(true) target is: auth_data method is: setResetLogincoun(boolean)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setResetLogincoun(Z)V
statement is: auth_data.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("johndoe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
boolean _boolean = true;
auth_data.setResetLogincoun(_boolean);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
        UserManagement.getAccountIdCount();
    }
}
statement is: UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAccountIdCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount() target is: UserManagement method is: getAccountIdCount()
Matched Method is: getAccountIdCount()I
TestCase is: String string = "/$t,JBgS6M<;";
String string = "/$t,JBgS6M<;";
String string = "/$t,JBgS6M<;";
char _char = '9';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getAccountIdCount();

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9')
statement is: getAccount_id()Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer account_id = auth_data.getAccount_id()
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'M');
        Integer account_id = addUserTXT.getAccount_id();
        UserManagement.getUserTxt(account_id);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'M'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Integer account_id = addUserTXT.getAccount_id(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.getAccount_id() target is: addUserTXT method is: getAccount_id()
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: getAccount_id()Ljava/lang/Integer;
statement is: UserManagement.getUserTxt(account_id), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(account_id) target is: UserManagement method is: getUserTxt(java.lang.Integer)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "1234567890";
char _char = 'M';
UserManagement.addUserTXT(string, string, string, _char);
Integer account_id = ((Auth_data) string).getAccount_id();
UserManagement.getUserTxt(account_id);

statement is: org.evosuite.testcase.statements.ArrayStatement@b5da6408 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d6c308fb type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[6] = (byte)22
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[7];
        byteArray[0] = ((byte) (0x1a));
        byteArray[1] = ((byte) (0x2b));
        byteArray[2] = ((byte) (0x3c));
        byteArray[3] = ((byte) (0x4d));
        byteArray[4] = ((byte) (0x5e));
        byteArray[5] = ((byte) (0x6f));
        byteArray[6] = ((byte) (0x22));
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (0x1a)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x1a)) Ct is: byteArray[0] = ((byte) (0x1a))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x2b)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x2b)) Ct is: byteArray[1] = ((byte) (0x2b))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = ((byte) (0x3c)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x3c)) Ct is: byteArray[2] = ((byte) (0x3c))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[3] = ((byte) (0x4d)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x4d)) Ct is: byteArray[3] = ((byte) (0x4d))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[4] = ((byte) (0x5e)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x5e)) Ct is: byteArray[4] = ((byte) (0x5e))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[5] = ((byte) (0x6f)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x6f)) Ct is: byteArray[5] = ((byte) (0x6f))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[6] = ((byte) (0x22)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x22)) Ct is: byteArray[6] = ((byte) (0x22))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[7];
int _int = 26;
byteArray[6] = (byte) _int;
int _int = 43;
byteArray[6] = (byte) _int;
int _int = 60;
byteArray[6] = (byte) _int;
int _int = 77;
byteArray[6] = (byte) _int;
int _int = 94;
byteArray[6] = (byte) _int;
int _int = 111;
byteArray[6] = (byte) _int;
int _int = 34;
byteArray[6] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@574bef55 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1af19ceb type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)104
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
byteArray[1] = (byte)104;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        byteArray[1] = ((byte) (0x68));
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (0x68)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x68)) Ct is: byteArray[1] = ((byte) (0x68))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[2];
int _int = 104;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@72cdc6fb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOffline((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[5];
UserManagement.account_idToOffline((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[5];
        UserManagement.account_idToOffline("user123", byteArray);
    }
}
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: UserManagement.account_idToOffline("user123", byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOffline("user123", byteArray) target is: UserManagement method is: account_idToOffline(java.lang.String,byte[])
Matched Method is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: byte[] byteArray = new byte[5];
String string = "user123";
UserManagement.account_idToOffline((Socket_data) string, byteArray);

statement is: addGM(II)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addGM = UserManagement.addGM((-2271), 0)
test data is: UserManagement.addGM((-2271), 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: administationLogin(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.administationLogin(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.administationLogin(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy("https", "proxy.example.com", 443);
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.administationLogin(socket_data);
    }
}
statement is: Proxy proxy = new Proxy("https", "proxy.example.com", 443), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.administationLogin(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.administationLogin(socket_data) target is: UserManagement method is: administationLogin(Socket_data)
Matched Method is: administationLogin(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.administationLogin(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: banResquest(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.banResquest(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.banResquest(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket bannedUserSocket = new MockSocket("192.168.0.1", 8080);
        Socket_data banRequestData = new Socket_data(bannedUserSocket);
        UserManagement.banResquest(banRequestData);
    }
}
statement is: MockSocket bannedUserSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data banRequestData = new Socket_data(bannedUserSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.banResquest(banRequestData), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.banResquest(banRequestData) target is: UserManagement method is: banResquest(Socket_data)
Matched Method is: banResquest(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.banResquest(socket_data);

statement is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSexChrif_changesex((Socket_data) null)
test data is: UserManagement.changeSexChrif_changesex((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.changeSexChrif_changesex(((Socket_data) ("Male")));
    }
}
statement is: UserManagement.changeSexChrif_changesex(((Socket_data) ("Male"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSexChrif_changesex(((Socket_data) ("Male"))) target is: UserManagement method is: changeSexChrif_changesex(Socket_data)
Matched Method is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V
TestCase is: String string = "Male";
UserManagement.changeSexChrif_changesex((Socket_data) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@859e69af type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.charServerToAuthentify((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[7];
UserManagement.charServerToAuthentify((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 };
        UserManagement.charServerToAuthentify(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7]
lengths: [7] []
statement is: UserManagement.charServerToAuthentify(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charServerToAuthentify(((Socket_data) (null)), byteArray) target is: UserManagement method is: charServerToAuthentify(Socket_data,byte[])
Matched Method is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.charServerToAuthentify(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@3c49ae19 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[21]
statement is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfCharServer((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[21];
UserManagement.connectionOfCharServer((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int byteArrayLength = 21;
        String charServerAddress = "localhost";
        int charServerPort = 5555;
        UserManagement.connectionOfCharServer(charServerAddress, charServerPort, new byte[byteArrayLength]);
    }
}
statement is: int byteArrayLength = 21, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String charServerAddress = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int charServerPort = 5555, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.connectionOfCharServer(charServerAddress, charServerPort, new byte[byteArrayLength]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfCharServer(charServerAddress, charServerPort, new byte[byteArrayLength]) target is: UserManagement method is: connectionOfCharServer(java.lang.String,int,byte[])
* this is vulnerable: int _int = 21
* this is vulnerable: String string = "localhost"
* this is vulnerable: int _int = 5555
TestCase is: int _int = 21;
String string = "localhost";
int _int = 5555;

statement is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClientEncrypted((Socket_data) null)
test data is: UserManagement.connectionOfClientEncrypted((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.connectionOfClientEncrypted(new Socket_data("google.com", 80, "user123"));
    }
}
statement is: UserManagement.connectionOfClientEncrypted(new Socket_data("google.com", 80, "user123")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(new Socket_data("google.com", 80, "user123")) target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.connectionOfClientEncrypted(socket_data);

statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL((String) null)
test data is: UserManagement.dynamicFailBanCheckMySQL((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return;
    }

    String query = "SELECT * FROM users WHERE id = ?";

    PreparedStatement statement = connection.prepareStatement(query);

    ResultSet result = statement.executeQuery();

    {
        int failCount = result.getInt("fail_count");
        long lastFailedLoginTime = result.getLong("last_failed_login");
        long lockoutTime = System.currentTimeMillis() - FAIL_COUNT_THRESHOLD;
        if ((failCount >= MAX_FAIL_COUNT) || (lastFailedLoginTime >= lockoutTime)) {
            // Lock out the user account for a certain amount of time
            statement.setInt(1, failCount + 1);
            statement.setLong(2, System.currentTimeMillis());
            statement.executeUpdate();
        } else {
            // Reset the fail count and lockout time
            statement.setInt(1, 0);
            statement.setLong(2, 0L);
            statement.executeUpdate();
        }
    }
}
statement is: return, class spoon.support.reflect.code.CtReturnImpl
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, (IParse) null)
statement is: emailCreation(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailCreation(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.emailCreation(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy("proxy.example.com", 8080);
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null)));
        UserManagement.emailCreation(socket_data);
    }
}
statement is: Proxy proxy = new Proxy("proxy.example.com", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V
statement is: Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.emailCreation(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data) target is: UserManagement method is: emailCreation(Socket_data)
Matched Method is: emailCreation(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.emailCreation(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailLimitedTime(arg0)
test data is: MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
UserManagement.emailLimitedTime(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("connected.com", 80, "127.0.0.1", 8080);
        FromClient fromClient = new FromClient("example@email.com");
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        UserManagement.emailLimitedTime(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("connected.com", 80, "127.0.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient("example@email.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.emailLimitedTime(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailLimitedTime(socket_data) target is: UserManagement method is: emailLimitedTime(Socket_data)
Matched Method is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.emailLimitedTime(socket_data);

statement is: getUserSQL(Ljava/sql/ResultSet;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((ResultSet) null)
test data is: UserManagement.getUserSQL((ResultSet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int userId = 123;
        String username = "johndoe";
        String password = "password123";
        // Original test data
        int userId = 456;
        String username = "janedoe";
        String password = "password789";
    }
}
statement is: // Improved test data
int userId = 123, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
int userId = 456, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "janedoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password789", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: int _int = 456
* this is vulnerable: String string = "janedoe"
* this is vulnerable: String string = "password789"
TestCase is: int _int = 123;
String string = "johndoe";
String string = "password123";
int _int = 456;
String string = "janedoe";
String string = "password789";

statement is: org.evosuite.testcase.statements.ArrayStatement@f904dbe2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAccountReg2((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[8];
UserManagement.receiveAccountReg2((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)), 0xab, 0xcd, 0xef };
        UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)), 0xab, 0xcd, 0xef }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)), 0xab, 0xcd, 0xef } Elements: [0x1, 0x2, 0x3, 0x4, ((byte) (0xff)), 0xab, 0xcd, 0xef]
lengths: [8] []
statement is: UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray) target is: UserManagement method is: receiveAccountReg2(Socket_data,byte[])
Matched Method is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.receiveAccountReg2(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@36ebe97d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountData(arg0, arg1)
test data is: byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.requestAccountData(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 127, 0, 0, 1 };
        MockSocket mockSocket = new MockSocket("192.168.1.1", 80);
        FromAdmin fromAdmin = new FromAdmin(new User("johndoe", "password"));
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        UserManagement.requestAccountData(socket_data, byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 127, 0, 0, 1 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ 127, 0, 0, 1 } Elements: [127, 0, 0, 1]
lengths: [6] []
statement is: MockSocket mockSocket = new MockSocket("192.168.1.1", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromAdmin fromAdmin = new FromAdmin(new User("johndoe", "password")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.requestAccountData(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountData(socket_data, byteArray) target is: UserManagement method is: requestAccountData(Socket_data,byte[])
Matched Method is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.requestAccountData(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@9833d423 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[22]
statement is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountReg2((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[22];
UserManagement.requestAccountReg2((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[22];// replace with a more representative array of bytes

        UserManagement.requestAccountReg2(new Socket_data("John Doe", "johndoe@example.com", 1234567890), byteArray);
    }
}
statement is: byte[] byteArray = new byte[22]// replace with a more representative array of bytes
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [22] Ct is: byte[] byteArray = new byte[22] isAssignment: false Array: new byte[22] Elements: []
lengths: [22] [22]
Their type are: class [B byte[]
statement is: UserManagement.requestAccountReg2(new Socket_data("John Doe", "johndoe@example.com", 1234567890), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountReg2(new Socket_data("John Doe", "johndoe@example.com", 1234567890), byteArray) target is: UserManagement method is: requestAccountReg2(Socket_data,byte[])
Matched Method is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[22];
byte[] byteArray = null;
UserManagement.requestAccountReg2((Socket_data) byteArray, byteArray);

statement is: sendUserList(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.sendUserList((Socket_data) null)
test data is: UserManagement.sendUserList((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.sendUserList(new Socket_Data("127.0.0.1", 8080));
    }
}
statement is: UserManagement.sendUserList(new Socket_Data("127.0.0.1", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.sendUserList(new Socket_Data("127.0.0.1", 8080)) target is: UserManagement method is: sendUserList(Socket_Data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@fb0297f9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.statusChange(arg0, arg1)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[3];
        UserManagement.statusChange(socket_data, byteArray);
        // Improved test data
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[3];
        // Add a realistic value to the array
        byteArray[0] = 1;
        byteArray[1] = 2;
        byteArray[2] = 3;
        UserManagement.statusChange(socket_data, byteArray);
    }
}
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: UserManagement.statusChange(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.statusChange(socket_data, byteArray) target is: UserManagement method is: statusChange(Socket_data,byte[])
Matched Method is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V
statement is: // Improved test data
Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: // Add a realistic value to the array
byteArray[0] = 1, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:1 Ct is: // Add a realistic value to the array
byteArray[0] = 1
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = 2, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:2 Ct is: byteArray[1] = 2
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = 3, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:3 Ct is: byteArray[2] = 3
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.statusChange(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.statusChange(socket_data, byteArray) target is: UserManagement method is: statusChange(Socket_data,byte[])
Matched Method is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toChangeAnEmail(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.toChangeAnEmail(socket_data);
        // Improved test data
        int userId = 1;// Replace with a valid user ID

        String email = "new@example.com";// Replace with a valid email address

        // Set up the mock socket to expect the appropriate method calls
        when(mockSocket.getInputStream()).thenReturn(inputStream);
        when(mockSocket.getOutputStream()).thenReturn(outputStream);
        // Call the method under test
        UserManagement.toChangeAnEmail(userId, email);
        // Verify that the method called the appropriate methods on the mock socket
        verify(mockSocket).getInputStream();
        verify(mockSocket).getOutputStream();
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.toChangeAnEmail(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toChangeAnEmail(socket_data) target is: UserManagement method is: toChangeAnEmail(Socket_data)
Matched Method is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V
statement is: // Improved test data
int userId = 1// Replace with a valid user ID
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email = "new@example.com"// Replace with a valid email address
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Set up the mock socket to expect the appropriate method calls
when(mockSocket.getInputStream()).thenReturn(inputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set up the mock socket to expect the appropriate method calls
when(mockSocket.getInputStream()).thenReturn(inputStream) target is: when(mockSocket.getInputStream()) method is: thenReturn()
statement is: when(mockSocket.getOutputStream()).thenReturn(outputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: when(mockSocket.getOutputStream()).thenReturn(outputStream) target is: when(mockSocket.getOutputStream()) method is: thenReturn()
statement is: // Call the method under test
UserManagement.toChangeAnEmail(userId, email), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the method under test
UserManagement.toChangeAnEmail(userId, email) target is: UserManagement method is: toChangeAnEmail(int,java.lang.String)
statement is: // Verify that the method called the appropriate methods on the mock socket
verify(mockSocket).getInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Verify that the method called the appropriate methods on the mock socket
verify(mockSocket).getInputStream() target is: verify(mockSocket) method is: getInputStream()
statement is: verify(mockSocket).getOutputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verify(mockSocket).getOutputStream() target is: verify(mockSocket) method is: getOutputStream()
* this is vulnerable: int _int = 1
* this is vulnerable: String string = "new@example.com"
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);
int _int = 1;
String string = "new@example.com";

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: unban(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unban(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unban(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket("127.0.0.1", 80, proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.unban(socket_data);
    }
}
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket("127.0.0.1", 80, proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.unban(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unban(socket_data) target is: UserManagement method is: unban(Socket_data)
Matched Method is: unban(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Proxy proxy = Proxy.NO_PROXY;
Socket_data socket_data = null;
UserManagement.unban(socket_data);

* test suite isTestSuite: 150
Test 0: 
UserManagement.addAccountIdCount((int) (byte)92);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(56);
Test 3: 
UserManagement.debugXML();
Test 4: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);
Test 5: 
UserManagement.toBecomeGM((Socket_data) null);
Test 6: 
UserManagement.addUserSQL("", "", "", 17);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Integer integer = new Integer((byte) (-43));
UserManagement.getUserTxt(integer);
Test 11: 
UserManagement.addSession((Socket_data) null);
Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

long _long = 1L;
UserManagement.isGM(_long);
String string = "";
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.emailCreation(socket_data);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
int nBUser = UserManagement.getNBUser();
UserManagement.getAccountIds();
// Undeclared exception!
Socket_data sessionAt = null;
try { 
  sessionAt = UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
byte[] ipTab = sessionAt.getIpTab();
sessionAt.cancel();
UserManagement.changeSex(sessionAt);
String string = "Account limit from company";
sessionAt.getIpStr();
Integer decode = Integer.decode(string);
UserManagement.is_user_online(decode);
String string = "";
String string = "V:1&y1";
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 12);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.addUserSQL(string, string, string, nBUser);
UserManagement.getNBGM();
UserManagement.connectionOfCharServer(sessionAt, ipTab);
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.sendUserList(sessionAt);
String string = "";
String string = "Y0f";
char _char = 'v';
UserManagement.addUserTXT(string, string, string, _char);
Test 18: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 19: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("-kUv5");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 20: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);
Test 21: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 22: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.removeUser(addUserTXT);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181);
Test 26: 
UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
Test 27: 
UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256);
Test 28: 
Integer integer = new Integer((-787));
UserManagement.remove_online_user(integer);
Test 29: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 30: 
int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);
Test 31: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);
Test 32: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
Test 33: 
UserManagement.isGM((-2793L));
Test 34: 
UserManagement.getUserTxt((String) null);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
UserManagement.dynamicFailBanCheckTXT("m .A");
Test 37: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountID("/$t,JBgS6M<;");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
newInstance.put((Integer) null, addUserTXT);
UserManagement.setAuth_dats(newInstance);
Test 38: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 39: 
UserManagement.getAuth_dats();
Test 40: 
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver((byte)125);
UserManagement.addUser(auth_data);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(294L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 56: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 58: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);
Test 59: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)104;
UserManagement.tabHexToInt(byteArray);
Test 60: 
byte[] byteArray = new byte[5];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 61: 
// Undeclared exception!
try { 
  UserManagement.addGM((-2271), 0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 62: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 64: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 65: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 69: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[22];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 77: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
UserManagement.addAccountIdCount(100);

Test 80: 
UserManagement.setAccountIdCount(1024);

Test 81: 
UserManagement.unLogServer((Socket_data) null);

Test 82: 
UserManagement.toBecomeGM((Socket_data) null);

Test 83: 
UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30);

Test 84: 
UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'");

Test 85: 
Integer integer = new Integer(165);
UserManagement.getUserTxt(integer);

Test 86: 
UserManagement.addSession((Socket_data) null);
UserManagement.addSession((Socket_data) null);
UserManagement.addSession((Socket_data) null);

Test 87: 

Test 88: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
UserManagement.changeSex((Socket_data) null);
long _long = 1L;
UserManagement.isGM(_long);
String string = "test@example.com";
UserManagement.dynamicFailBanCheckTXT(string);
Socket_data socket_data = null;
UserManagement.emailCreation(socket_data);

Test 89: 
UserManagement.getUserSQL((Integer) 1);

Test 90: 

Test 91: 
UserManagement.online_db_final();

Test 92: 
Integer.decode("Account limit from company");

Test 93: 
byte[] byteArray = new byte[21];
UserManagement.account_idToOnline((Socket_data) byteArray, (byte[]) null);
byte[] byteArray = new byte[21];
byte[] byteArray = null;
UserManagement.account_idToOnline((Socket_data) byteArray, byteArray);

Test 94: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 95: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "192.168.0.1", "MySQLAdmin", ')');
((Auth_data)"MysqlIO.SlowQuery").setClientType(88);
UserManagement.addUser(addUserTXT);

Test 96: 
Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "fullname123", '9');
UserManagement.removeUser(addUserTXT);

Test 97: 
byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) "192.168.0.1", byteArray, false);

Test 98: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
UserManagement.connectionOfClient(socket_data, byteArray, true);

Test 99: 
UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212);
UserManagement.levelIsValid(100, "MasterChef9000", 1337, 1337);

Test 100: 
UserManagement.levelIsValid(99, "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (int) (Integer) null);

Test 101: 
UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256);

Test 102: 
Integer integer = new Integer(123456789);
UserManagement.remove_online_user(integer);

Test 103: 
Integer integer = new Integer(1234567890);
UserManagement.remove_online_user(integer);

Test 104: 
UserManagement.charif_sendallwos((int) (Integer) null, (int[]) null);

Test 105: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);

Test 106: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');

Test 107: 
UserManagement.isGM((long) "johndoe@example.com");

Test 108: 
UserManagement.getUserTxt("John Doe");

Test 109: 
UserManagement.dynamicFailBanCheckTXT("johndoe");

Test 110: 
Auth_data addUserTXT = UserManagement.addUserTXT("user123", "password123", "firstname lastname", '9');
Integer accountID = UserManagement.getAccountID("user123");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
((FastMap)"firstname lastname").put(accountID, addUserTXT);
UserManagement.setAuth_dats(newInstance);

Test 111: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

Test 112: 

Test 113: 
Integer integer = new Integer(100);
UserManagement.is_user_online(integer);

Test 114: 
Auth_data addUserTXT = UserManagement.addUserTXT("username", "password", "firstName", '9');
((Auth_data)"username").setBan_until_time((long) (Long) null);
UserManagement.addUser(addUserTXT);

Test 115: 
Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "email@example.com", '9');
((Auth_data)"username123").setBan_until_time(465L);
UserManagement.addUser(addUserTXT);

Test 116: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('X');
UserManagement.addUser(auth_data);

Test 117: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType(1);
UserManagement.addUser(auth_data);

Test 118: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1604719582L);
UserManagement.addUser(auth_data);

Test 119: 
Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "Password123!", "johndoe@example.com", '9');
((Auth_data)"johndoe").setDelflag(0);
UserManagement.addUser(addUserTXT);

Test 120: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) "user_deleted");
UserManagement.addUser(auth_data);

Test 121: 
Auth_data addUserTXT = UserManagement.addUserTXT("john.doe@example.com", "password123", "John Doe", '5');
((Auth_data)"john.doe@example.com").setLevel((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 122: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(90210);
UserManagement.addUser(auth_data);

Test 123: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 124: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(255);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(100);
UserManagement.addUser(auth_data);

Test 125: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 126: 
Auth_data auth_data = new Auth_data();
auth_data.setState((int) "California");
UserManagement.addUser(auth_data);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion((int) "1.2.3");
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 129: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();

Test 130: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'M');
Integer account_id = ((Auth_data)"John Doe").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 131: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte) 26;
byteArray[6] = (byte) 43;
byteArray[6] = (byte) 60;
byteArray[6] = (byte) 77;
byteArray[6] = (byte) 94;
byteArray[6] = (byte) 111;
byteArray[6] = (byte) 34;
UserManagement.tabHexToInt(byteArray);

Test 132: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 104;
UserManagement.tabHexToInt(byteArray);

Test 133: 
byte[] byteArray = new byte[5];
UserManagement.account_idToOffline((Socket_data) "user123", byteArray);

Test 134: 
UserManagement.administationLogin((Socket_data) null);

Test 135: 
UserManagement.banResquest((Socket_data) null);

Test 136: 
UserManagement.changeSexChrif_changesex((Socket_data) "Male");

Test 137: 
UserManagement.charServerToAuthentify((Socket_data) null, (byte[]) null);

Test 138: 

Test 139: 
UserManagement.connectionOfClientEncrypted((Socket_data) null);

Test 140: 
UserManagement.emailCreation((Socket_data) null);

Test 141: 
UserManagement.emailLimitedTime((Socket_data) null);

Test 142: 

Test 143: 
UserManagement.receiveAccountReg2((Socket_data) null, (byte[]) null);

Test 144: 
UserManagement.requestAccountData((Socket_data) null, (byte[]) null);

Test 145: 
byte[] byteArray = new byte[22];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 146: 
UserManagement.sendUserList((Socket_data) null);

Test 147: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);

Test 148: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);

Test 149: 
Proxy proxy = Proxy.NO_PROXY;
UserManagement.unban((Socket_data) null);


* Generated after the refinement and before minimization 150 tests with total length 362
* test suite isTestSuite: 150
Test 0: 
UserManagement.addAccountIdCount((int) (byte)92);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(56);
Test 3: 
UserManagement.debugXML();
Test 4: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);
Test 5: 
UserManagement.toBecomeGM((Socket_data) null);
Test 6: 
UserManagement.addUserSQL("", "", "", 17);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Integer integer = new Integer((byte) (-43));
UserManagement.getUserTxt(integer);
Test 11: 
UserManagement.addSession((Socket_data) null);
Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

long _long = 1L;
UserManagement.isGM(_long);
String string = "";
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.emailCreation(socket_data);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
int nBUser = UserManagement.getNBUser();
UserManagement.getAccountIds();
// Undeclared exception!
Socket_data sessionAt = null;
try { 
  sessionAt = UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
byte[] ipTab = sessionAt.getIpTab();
sessionAt.cancel();
UserManagement.changeSex(sessionAt);
String string = "Account limit from company";
sessionAt.getIpStr();
Integer decode = Integer.decode(string);
UserManagement.is_user_online(decode);
String string = "";
String string = "V:1&y1";
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 12);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.addUserSQL(string, string, string, nBUser);
UserManagement.getNBGM();
UserManagement.connectionOfCharServer(sessionAt, ipTab);
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.sendUserList(sessionAt);
String string = "";
String string = "Y0f";
char _char = 'v';
UserManagement.addUserTXT(string, string, string, _char);
Test 18: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 19: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("-kUv5");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 20: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);
Test 21: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 22: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.removeUser(addUserTXT);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181);
Test 26: 
UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
Test 27: 
UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256);
Test 28: 
Integer integer = new Integer((-787));
UserManagement.remove_online_user(integer);
Test 29: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 30: 
int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);
Test 31: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);
Test 32: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
Test 33: 
UserManagement.isGM((-2793L));
Test 34: 
UserManagement.getUserTxt((String) null);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
UserManagement.dynamicFailBanCheckTXT("m .A");
Test 37: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountID("/$t,JBgS6M<;");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
newInstance.put((Integer) null, addUserTXT);
UserManagement.setAuth_dats(newInstance);
Test 38: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 39: 
UserManagement.getAuth_dats();
Test 40: 
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver((byte)125);
UserManagement.addUser(auth_data);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(294L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 56: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 58: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);
Test 59: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)104;
UserManagement.tabHexToInt(byteArray);
Test 60: 
byte[] byteArray = new byte[5];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 61: 
// Undeclared exception!
try { 
  UserManagement.addGM((-2271), 0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 62: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 64: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 65: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 69: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[22];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 77: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
UserManagement.addAccountIdCount(100);

Test 80: 
UserManagement.setAccountIdCount(1024);

Test 81: 
UserManagement.unLogServer((Socket_data) null);

Test 82: 
UserManagement.toBecomeGM((Socket_data) null);

Test 83: 
UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30);

Test 84: 
UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'");

Test 85: 
Integer integer = new Integer(165);
UserManagement.getUserTxt(integer);

Test 86: 
UserManagement.addSession((Socket_data) null);
UserManagement.addSession((Socket_data) null);
UserManagement.addSession((Socket_data) null);

Test 87: 

Test 88: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
UserManagement.changeSex((Socket_data) null);
long _long = 1L;
UserManagement.isGM(_long);
String string = "test@example.com";
UserManagement.dynamicFailBanCheckTXT(string);
Socket_data socket_data = null;
UserManagement.emailCreation(socket_data);

Test 89: 
UserManagement.getUserSQL((Integer) 1);

Test 90: 

Test 91: 
UserManagement.online_db_final();

Test 92: 
Integer.decode("Account limit from company");

Test 93: 
byte[] byteArray = new byte[21];
UserManagement.account_idToOnline((Socket_data) byteArray, (byte[]) null);
byte[] byteArray = new byte[21];
byte[] byteArray = null;
UserManagement.account_idToOnline((Socket_data) byteArray, byteArray);

Test 94: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 95: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "192.168.0.1", "MySQLAdmin", ')');
((Auth_data)"MysqlIO.SlowQuery").setClientType(88);
UserManagement.addUser(addUserTXT);

Test 96: 
Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "fullname123", '9');
UserManagement.removeUser(addUserTXT);

Test 97: 
byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) "192.168.0.1", byteArray, false);

Test 98: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
UserManagement.connectionOfClient(socket_data, byteArray, true);

Test 99: 
UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212);
UserManagement.levelIsValid(100, "MasterChef9000", 1337, 1337);

Test 100: 
UserManagement.levelIsValid(99, "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (int) (Integer) null);

Test 101: 
UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256);

Test 102: 
Integer integer = new Integer(123456789);
UserManagement.remove_online_user(integer);

Test 103: 
Integer integer = new Integer(1234567890);
UserManagement.remove_online_user(integer);

Test 104: 
UserManagement.charif_sendallwos((int) (Integer) null, (int[]) null);

Test 105: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);

Test 106: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');

Test 107: 
UserManagement.isGM((long) "johndoe@example.com");

Test 108: 
UserManagement.getUserTxt("John Doe");

Test 109: 
UserManagement.dynamicFailBanCheckTXT("johndoe");

Test 110: 
Auth_data addUserTXT = UserManagement.addUserTXT("user123", "password123", "firstname lastname", '9');
Integer accountID = UserManagement.getAccountID("user123");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
((FastMap)"firstname lastname").put(accountID, addUserTXT);
UserManagement.setAuth_dats(newInstance);

Test 111: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

Test 112: 

Test 113: 
Integer integer = new Integer(100);
UserManagement.is_user_online(integer);

Test 114: 
Auth_data addUserTXT = UserManagement.addUserTXT("username", "password", "firstName", '9');
((Auth_data)"username").setBan_until_time((long) (Long) null);
UserManagement.addUser(addUserTXT);

Test 115: 
Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "email@example.com", '9');
((Auth_data)"username123").setBan_until_time(465L);
UserManagement.addUser(addUserTXT);

Test 116: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('X');
UserManagement.addUser(auth_data);

Test 117: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType(1);
UserManagement.addUser(auth_data);

Test 118: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1604719582L);
UserManagement.addUser(auth_data);

Test 119: 
Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "Password123!", "johndoe@example.com", '9');
((Auth_data)"johndoe").setDelflag(0);
UserManagement.addUser(addUserTXT);

Test 120: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) "user_deleted");
UserManagement.addUser(auth_data);

Test 121: 
Auth_data addUserTXT = UserManagement.addUserTXT("john.doe@example.com", "password123", "John Doe", '5');
((Auth_data)"john.doe@example.com").setLevel((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 122: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(90210);
UserManagement.addUser(auth_data);

Test 123: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 124: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(255);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(100);
UserManagement.addUser(auth_data);

Test 125: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 126: 
Auth_data auth_data = new Auth_data();
auth_data.setState((int) "California");
UserManagement.addUser(auth_data);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion((int) "1.2.3");
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 129: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();

Test 130: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'M');
Integer account_id = ((Auth_data)"John Doe").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 131: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte) 26;
byteArray[6] = (byte) 43;
byteArray[6] = (byte) 60;
byteArray[6] = (byte) 77;
byteArray[6] = (byte) 94;
byteArray[6] = (byte) 111;
byteArray[6] = (byte) 34;
UserManagement.tabHexToInt(byteArray);

Test 132: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 104;
UserManagement.tabHexToInt(byteArray);

Test 133: 
byte[] byteArray = new byte[5];
UserManagement.account_idToOffline((Socket_data) "user123", byteArray);

Test 134: 
UserManagement.administationLogin((Socket_data) null);

Test 135: 
UserManagement.banResquest((Socket_data) null);

Test 136: 
UserManagement.changeSexChrif_changesex((Socket_data) "Male");

Test 137: 
UserManagement.charServerToAuthentify((Socket_data) null, (byte[]) null);

Test 138: 

Test 139: 
UserManagement.connectionOfClientEncrypted((Socket_data) null);

Test 140: 
UserManagement.emailCreation((Socket_data) null);

Test 141: 
UserManagement.emailLimitedTime((Socket_data) null);

Test 142: 

Test 143: 
UserManagement.receiveAccountReg2((Socket_data) null, (byte[]) null);

Test 144: 
UserManagement.requestAccountData((Socket_data) null, (byte[]) null);

Test 145: 
byte[] byteArray = new byte[22];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 146: 
UserManagement.sendUserList((Socket_data) null);

Test 147: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
UserManagement.statusChange(socket_data, byteArray);

Test 148: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);

Test 149: 
Proxy proxy = Proxy.NO_PROXY;
UserManagement.unban((Socket_data) null);


* Minimizing test suite
* test suite isTestSuite: 81
Test 0: 
UserManagement.addAccountIdCount(100);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(1024);
Test 3: 
UserManagement.debugXML();
Test 4: 
UserManagement.toBecomeGM((Socket_data) null);
Test 5: 
UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30);
Test 6: 
UserManagement.getAccountIdCount();
Test 7: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 8: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 9: 
Integer integer = new Integer(165);
UserManagement.getUserTxt(integer);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
Integer integer = new Integer(100);
UserManagement.is_user_online(integer);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getAccountID("user123");
Test 16: 
UserManagement.getNBSession();
Test 17: 
UserManagement.online_db_final();
Test 18: 
UserManagement.getNBUser();
Test 19: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 20: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 21: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
newInstance.put((Integer) null, addUserTXT);
UserManagement.setAuth_dats(newInstance);
Test 22: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data addUserTXT = UserManagement.addUserTXT("username123", "password123", "fullname123", '9');
UserManagement.removeUser(addUserTXT);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

long _long = 1L;
UserManagement.isGM(_long);
String string = "test@example.com";
UserManagement.dynamicFailBanCheckTXT(string);
Socket_data socket_data = null;
Test 25: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 27: 
UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256);
Test 28: 
UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
Test 29: 
UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212);
Test 30: 
Integer integer = new Integer(123456789);
UserManagement.remove_online_user(integer);
Test 31: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 32: 
int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);
Test 33: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);
Test 34: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
Test 35: 
UserManagement.isGM((-2793L));
Test 36: 
UserManagement.getUserTxt("John Doe");
Test 37: 
UserManagement.getAccountIds();
Test 38: 
UserManagement.dynamicFailBanCheckTXT("johndoe");
Test 39: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 40: 
UserManagement.getAuth_dats();
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('X');
UserManagement.addUser(auth_data);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);
Test 45: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1604719582L);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 57: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountIdCount();
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 59: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);
Test 60: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 104;
UserManagement.tabHexToInt(byteArray);
Test 61: 
byte[] byteArray = new byte[5];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 62: 
// Undeclared exception!
try { 
  UserManagement.addGM((-2271), 0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 63: 
// Undeclared exception!
try { 
  UserManagement.administationLogin((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 64: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 65: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 70: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
byte[] byteArray = new byte[22];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 78: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);
Test 80: 
// Undeclared exception!
try { 
  UserManagement.unban((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 52
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 27%
* Total number of goals: 711
* Number of covered goals: 192
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 423
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 52
* Generated 81 tests with total length 172
* Resulting test suite's coverage: 31% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount(100);

** It was a parseable test case! 
refined test name is: testThrowsExceptionWhenAddingDuplicateAccountId
* Compiling Tests
refined test name is: testAddAccountThrowsExceptionIfIdAlreadyExists
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBGM = UserManagement.getNBGM();
assertEquals(0, nBGM);


** It was a parseable test case! 
refined test name is: testGetNBGMNoUsersInitializedZeroMessagesExpected
* Compiling Tests
refined test name is: testInitAndGetNBGM
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.setAccountIdCount(1024);

** It was a parseable test case! 
refined test name is: testIncrementAccountIdCount
* Compiling Tests
refined test name is: testIncrementAccountIdCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.debugXML();

** It was a parseable test case! 
refined test name is: testGetDebugXMLreturnsUserDataInXMLFormat
* Compiling Tests
refined test name is: testDebugModeReturnsUserDataInXMLFormat
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.toBecomeGM((Socket_data) null);

** It was a parseable test case! 
refined test name is: testThrowsExceptionWhenUserDataIsNull
* Compiling Tests
refined test name is: testToBecomeGMAssertThrowsOnNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserSQL = UserManagement.addUserSQL("John Smith", "johnsmith@email.com", "password456", 30);
assertNull(addUserSQL);


** It was a parseable test case! 
refined test name is: testAddNewUserValidData
* Compiling Tests
refined test name is: testAddUserWithValidData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int accountIdCount = UserManagement.getAccountIdCount();
assertEquals(0, accountIdCount);


** It was a parseable test case! 
refined test name is: testInitialStateHasNoAccounts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL("SELECT * FROM users WHERE username = 'john.doe' AND password = '123456'");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testInvalidQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testThrowNullPointerExceptionWhenSocketDataIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(165);
Auth_data userTxt = UserManagement.getUserTxt(arg0);
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtReturnsNullWhenNoMatchingUserId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
refined test name is: testAddSession
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data sessionAt = UserManagement.getSessionAt(0);
assertNull(sessionAt);


** It was a parseable test case! 
refined test name is: testGetSessionAtReturnsNullWhenIndexOutOfBounds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
refined test name is: testAddAccountIncrementsAccountIdCountByOne
* Compiling Tests
refined test name is: testAddAccountNewAccountIsAddedToUserManager
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(100);
boolean is_user_online = UserManagement.is_user_online(arg0);
assertFalse(is_user_online);


** It was a parseable test case! 
refined test name is: testIsUserOnlineWhenUserDoesNotExist
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLWithNullParamThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer accountID = UserManagement.getAccountID("user123");
assertNull(accountID);


** It was a parseable test case! 
refined test name is: testGetNonExistentUser
* Compiling Tests
refined test name is: testGetAccountIDForNonExistentUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBSession = UserManagement.getNBSession();
assertEquals(0, nBSession);


** It was a parseable test case! 
refined test name is: testGetNBSessionNoActiveSessions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int online_db_final = UserManagement.online_db_final();
assertEquals(0, online_db_final);


** It was a parseable test case! 
refined test name is: testOnlineDBFinalMethodReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBUser = UserManagement.getNBUser();
assertEquals(0, nBUser);


** It was a parseable test case! 
refined test name is: testGetNBUserWithNoUsers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testNullSocketDataThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}


** It was a parseable test case! 
refined test name is: testInvalidIPAddressThrowsNumberFormatException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg1 = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
FastMap<Integer, Auth_data> arg0 = FastMap.newInstance();
arg0.put((Integer) null, arg1);
UserManagement.setAuth_dats(arg0);
assertFalse(arg0.isEmpty());


** It was a parseable test case! 
refined test name is: testAddUserAuthDataNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[2];
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals(0, tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntreturnsZeroForTwoBytesOfZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("username123", "password123", "fullname123", '9');
Auth_data removeUser = UserManagement.removeUser(arg0);
assertEquals("-", arg0.getEmail());
assertEquals(0, arg0.getLogincount());
assertEquals(0, (int)arg0.getAccount_id());
assertEquals("password123", arg0.getPass());
assertNull(removeUser);
assertEquals('9', arg0.getSex());
assertEquals(0, arg0.getState());
assertEquals("username123", arg0.getUserid());


** It was a parseable test case! 
refined test name is: testRemoveUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
UserManagement.add_online_user(arg0);
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testChangeSexThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, arg1, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfClientWithInvalidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(100, "~e7F]<=FkZ", 100, 256);
assertEquals(99, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidWithValidLevel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
assertEquals((-1), levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidWhenUserHasNegativeTimezoneOffset
* Compiling Tests
refined test name is: testLevelIsValidWithNegativeTimezoneOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(90, "AwesomeGamer777", 4212, 4212);
assertEquals(90, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValid
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(123456789);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOfflineUser
* Compiling Tests
refined test name is: testRemoveOnlineUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(99);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUserShouldRemoveUserFromList
* Compiling Tests
refined test name is: testRemoveOnlineUserShouldRemoveUserFromList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] arg1 = new int[2];
int charif_sendallwos = UserManagement.charif_sendallwos(0, arg1);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testSendAllWosNoErrors
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[6];
int charif_sendallwos = UserManagement.charif_sendallwos(7, arg1);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testCharifSendallwosWithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserTXT = UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
assertEquals('Z', addUserTXT.getSex());
assertEquals(0, addUserTXT.getState());
assertEquals(0, addUserTXT.getLogincount());
assertEquals(0, (int)addUserTXT.getAccount_id());


** It was a parseable test case! 
refined test name is: testAddAndRetrieveUserWithCorrectData
* Compiling Tests
refined test name is: testAddUserTXTAndGetUserTXT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int gM = UserManagement.isGM((-2793L));
assertEquals((-1), gM);


** It was a parseable test case! 
refined test name is: testIsGmNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt("John Doe");
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtReturnsNullWhenUserNotFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastTable<Integer> accountIds = UserManagement.getAccountIds();
assertEquals(0, accountIds.size());


** It was a parseable test case! 
refined test name is: testGetAccountIdsReturnsEmptyListWhenNoAccounts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.dynamicFailBanCheckTXT("johndoe");

** It was a parseable test case! 
refined test name is: testDynamicFailBanCheckTXT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
assertEquals(0, auth_dats.size());


** It was a parseable test case! 
refined test name is: testGetAuthDatsEmptyMap
* Compiling Tests
refined test name is: testLoginAndRetrieveAuthDats
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
arg0.setBan_until_time((-213));
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals('9', addUser.getSex());
assertEquals(0, addUser.getState());
assertEquals("-", addUser.getEmail());
assertEquals(0, (int)addUser.getAccount_id());
assertEquals(0, addUser.getLogincount());


** It was a parseable test case! 
refined test name is: testAddUserWithInvalidData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
arg0.setBan_until_time(465L);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getLogincount());
assertEquals(0, (int)addUser.getAccount_id());
assertEquals("-", addUser.getEmail());
assertEquals('9', addUser.getSex());
assertEquals(0, addUser.getState());


** It was a parseable test case! 
refined test name is: testAddUserWithSpecifiedParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setCharserver('X');
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(88, addUser.getCharserver());


** It was a parseable test case! 
refined test name is: testAddUserWithValidAuthData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setClientType((byte) (-65));
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0L, addUser.getConnect_until_time());


** It was a parseable test case! 
refined test name is: testAddUserWithInvalidClientType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
arg0.setClientType(88);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getLogincount());
assertEquals("MysqlIO.SlowQuery", addUser.getUserid());
assertEquals(0, (int)addUser.getAccount_id());
assertEquals("", addUser.getPass());
assertEquals("-", addUser.getEmail());
assertEquals(')', addUser.getSex());
assertEquals(0, addUser.getState());


** It was a parseable test case! 
refined test name is: testAddUserWithValidInput
[MASTER] 01:04:25.044 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
[MASTER] 01:04:25.757 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 78
Test 0: 
UserManagement.addAccountIdCount((int) (byte)92);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(56);
Test 3: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);
Test 4: 
UserManagement.toBecomeGM((Socket_data) null);
Test 5: 
UserManagement.addUserSQL("", "", "", 17);
Test 6: 
UserManagement.getAccountIdCount();
Test 7: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 8: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 9: 
Integer integer = new Integer((byte) (-43));
UserManagement.getUserTxt(integer);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
UserManagement.getSessionAt(6);
Test 12: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

long _long = 1L;
UserManagement.isGM(_long);
String string = "";
UserManagement.dynamicFailBanCheckTXT(string);
UserManagement.emailCreation(socket_data);
Test 13: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 14: 
UserManagement.getAccountID("ps>g,{]9]<DvoFHv2$");
Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
UserManagement.getNBUser();
Test 18: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 19: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("-kUv5");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 20: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);
Test 21: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 22: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.removeUser(addUserTXT);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181);
Test 26: 
UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
Test 27: 
UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256);
Test 28: 
Integer integer = new Integer((-787));
UserManagement.remove_online_user(integer);
Test 29: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 30: 
int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);
Test 31: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);
Test 32: 
// Undeclared exception!
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
Test 33: 
UserManagement.isGM((-2793L));
Test 34: 
UserManagement.getUserTxt("5B1U&rwr%s");
Test 35: 
UserManagement.getAccountIds();
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
// Undeclared exception!
try { 
  UserManagement.debugXML();
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Could not call javolution.util.FastMap.writeObject() : Loop has been executed more times than the allowed 10000
   // ---- Debugging information ----
   // message             : Could not call javolution.util.FastMap.writeObject()
   // cause-exception     : org.evosuite.runtime.TooManyResourcesException
   // cause-message       : Loop has been executed more times than the allowed 10000
   // -------------------------------
   //
   verifyException("com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker", e);
}

UserManagement.getAccountIds();
UserManagement.addAccountIdCount();
UserManagement.addUserTXT("[`-", "[`-", "", '#');
byte[] byteArray = new byte[5];
byteArray[0] = (byte) (-91);
byteArray[1] = (byte) (-106);
byteArray[2] = (byte)0;
byteArray[3] = (byte)0;
byteArray[4] = (byte)73;
UserManagement.account_idToOffline((Socket_data) null, byteArray);
Test 36: 
UserManagement.dynamicFailBanCheckTXT("m .A");
Test 37: 
UserManagement.dynamicFailBanCheckTXT("1Ei8uk(0*p3 ");
Test 38: 
Socket_data socket_data = null;
// Undeclared exception!
UserManagement.sendUserList((Socket_data) null);
UserManagement.toChangeAnEmail((Socket_data) null);
byte[] byteArray = new byte[0];
UserManagement.account_idToOffline(socket_data, byteArray);
Test 39: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
Integer accountID = UserManagement.getAccountID("/$t,JBgS6M<;");
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
newInstance.put(accountID, addUserTXT);
UserManagement.setAuth_dats(newInstance);
Test 40: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 41: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
auth_dats.setValueComparator(fastComparator);
UserManagement.setAuth_dats(auth_dats);
Test 42: 
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
Test 43: 
UserManagement.getUserTxt("Deleting spouse char.");
Test 44: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);
Test 45: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver((byte)125);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(294L);
UserManagement.addUser(auth_data);
Test 49: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);
Test 51: 
// Undeclared exception!
Auth_data addUserTXT = null;
addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);
Test 58: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 59: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);
Test 60: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)104;
UserManagement.tabHexToInt(byteArray);
Test 61: 
// Undeclared exception!
try { 
  UserManagement.addGM((-2271), 0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 62: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 64: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 65: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 69: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[22];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 76: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}


* Minimizing test suite
[MASTER] 01:04:40.231 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 78
Test 0: 
UserManagement.addAccountIdCount((int) (byte)92);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(56);
Test 3: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unLogServer(socket_data);
Test 4: 
UserManagement.toBecomeGM((Socket_data) null);
Test 5: 
UserManagement.addUserSQL("", "", "", 17);
Test 6: 
UserManagement.getAccountIdCount();
Test 7: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 8: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 9: 
Integer integer = new Integer((byte) (-43));
UserManagement.getUserTxt(integer);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
UserManagement.getSessionAt(6);
Test 12: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 13: 
UserManagement.getAccountID("ps>g,{]9]<DvoFHv2$");
Test 14: 
UserManagement.getNBSession();
Test 15: 
UserManagement.online_db_final();
Test 16: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 17: 
UserManagement.getNBUser();
Test 18: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 19: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("-kUv5");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 20: 
UserManagement.addUserTXT("Bc", "a@a.com", "a@a.com", 'Z');
Test 21: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 22: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.removeUser(addUserTXT);
Test 23: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Socket_data socket_data = null;
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

long _long = 1L;
UserManagement.isGM(_long);
String string = "";
UserManagement.dynamicFailBanCheckTXT(string);
Test 24: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 25: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 26: 
UserManagement.levelIsValid(15, " T.Px|V!T{+@25+R", 3181, 3181);
Test 27: 
UserManagement.levelIsValid((-1536), "ConnectionProperties.useSSPSCompatibleTimezoneShift", 31042, (-1536));
Test 28: 
UserManagement.levelIsValid(256, "~e7F]<=FkZ", 256, 256);
Test 29: 
Integer integer = new Integer((-787));
UserManagement.remove_online_user(integer);
Test 30: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 31: 
int[] intArray = new int[2];
UserManagement.charif_sendallwos(0, intArray);
Test 32: 
byte[] byteArray = new byte[6];
UserManagement.charif_sendallwos(7, byteArray);
Test 33: 
UserManagement.isGM((-2793L));
Test 34: 
UserManagement.getUserTxt("Deleting spouse char.");
Test 35: 
UserManagement.getUserTxt("5B1U&rwr%s");
Test 36: 
UserManagement.getAccountIds();
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
Integer integer = new Integer(48);
UserManagement.is_user_online(integer);
// Undeclared exception!
try { 
  UserManagement.debugXML();
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Could not call javolution.util.FastMap.writeObject() : Could not call javolution.util.FastMap.writeObject() : Loop has been executed more times than the allowed 10000
   // ---- Debugging information ----
   // message             : Could not call javolution.util.FastMap.writeObject()
   // cause-exception     : org.evosuite.runtime.TooManyResourcesException
   // cause-message       : Loop has been executed more times than the allowed 10000
   // -------------------------------
   // message             : Could not call javolution.util.FastMap.writeObject()
   // cause-exception     : com.thoughtworks.xstream.converters.ConversionException
   // cause-message       : Could not call javolution.util.FastMap.writeObject() : Loop has been executed more times than the allowed 10000
   // -------------------------------
   //
   verifyException("com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker", e);
}

UserManagement.getAccountIds();
UserManagement.addAccountIdCount();
UserManagement.addUserTXT("[`-", "[`-", "", '#');
byte[] byteArray = new byte[5];
byteArray[0] = (byte) (-91);
byteArray[1] = (byte) (-106);
byteArray[2] = (byte)0;
byteArray[3] = (byte)0;
byteArray[4] = (byte)73;
UserManagement.account_idToOffline((Socket_data) null, byteArray);
Test 37: 
UserManagement.dynamicFailBanCheckTXT("1Ei8uk(0*p3 ");
Test 38: 
UserManagement.dynamicFailBanCheckTXT("m .A");
Test 39: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[14];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 40: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time((-213));
UserManagement.addUser(addUserTXT);
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setBan_until_time(465L);
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver((byte)125);
UserManagement.addUser(auth_data);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((byte) (-65));
UserManagement.addUser(auth_data);
Test 44: 
Auth_data addUserTXT = UserManagement.addUserTXT("MysqlIO.SlowQuery", "", "", ')');
addUserTXT.setClientType(88);
UserManagement.addUser(addUserTXT);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(294L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
addUserTXT.setDelflag((-213));
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(59);
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("h?d|:SJ Z*'ll5q", "rQkJ", "] hLh<jW-{qS", '5');
addUserTXT.setLevel((-336));
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(1416);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(3866);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((byte)54);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setState(222);
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(237);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 56: 
UserManagement.addUserTXT("/$t,JBgS6M<;", "/$t,JBgS6M<;", "/$t,JBgS6M<;", '9');
UserManagement.getAccountID("/$t,JBgS6M<;");
Test 57: 
byte[] byteArray = new byte[7];
byteArray[6] = (byte)22;
UserManagement.tabHexToInt(byteArray);
Test 58: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)104;
UserManagement.tabHexToInt(byteArray);
Test 59: 
byte[] byteArray = new byte[5];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 60: 
// Undeclared exception!
try { 
  UserManagement.addGM((-2271), 0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 61: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 62: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 64: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 65: 
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 66: 
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 68: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 69: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 71: 
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
byte[] byteArray = new byte[6];
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
byte[] byteArray = new byte[22];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
// Undeclared exception!
UserManagement.sendUserList((Socket_data) null);
Test 75: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 76: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 54
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 27%
* Total number of goals: 711
* Number of covered goals: 191
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 16%
* Total number of goals: 423
* Number of covered goals: 69
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 54
* Generated 78 tests with total length 185
* Resulting test suite's coverage: 31% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 01:04:41.102 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 01:04:45.312 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.337 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.411 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.455 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.505 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.562 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.564 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.618 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.619 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.666 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.668 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.718 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.720 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.770 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.771 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.816 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.817 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.869 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.920 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:49.973 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:49.974 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.026 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.074 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.075 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.125 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.172 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.278 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.279 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.335 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.339 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.388 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.390 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.504 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
[MASTER] 01:04:50.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.627 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.681 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.683 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.783 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.784 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.835 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.898 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.899 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:50.953 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:50.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.040 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.041 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.101 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.102 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.155 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.207 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.263 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.323 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.399 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.462 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.463 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.525 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.581 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.582 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.640 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.755 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.816 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.873 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.933 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:51.992 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:51.993 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.048 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.049 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.106 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.106 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.163 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.220 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.221 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.278 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.279 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.375 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.376 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.442 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.498 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.498 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.614 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.614 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
[MASTER] 01:04:52.667 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.737 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.737 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.805 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.807 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:04:52.879 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.879 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:52.954 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:52.955 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:53.029 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:53.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:53.098 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:53.099 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:04:53.162 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:53.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
[MASTER] 01:04:55.115 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:55.116 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
[MASTER] 01:04:55.459 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar837763735732768383.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:04:55.460 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar837763735732768383.jar
* Writing tests to file
[MASTER] 01:04:55.463 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'UserManagement_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 40 called: 35 to improve: false
** Write a test suite: 45 called: 36 to improve: false
** Write a test suite: 48 called: 37 to improve: false
** Write a test suite: 49 called: 38 to improve: false
** Write a test suite: 51 called: 39 to improve: false
** Write a test suite: 63 called: 40 to improve: false
** Write a test suite: 66 called: 41 to improve: false
** Write a test suite: 73 called: 42 to improve: false
** Write a test suite: 74 called: 43 to improve: false
** Write a test suite: 75 called: 44 to improve: false
** Write a test suite: 76 called: 45 to improve: false
** Write a test suite: 77 called: 46 to improve: false
** Write a test suite: 78 called: 47 to improve: false
* Writing JUnit test case 'UserManagement_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
* Done!

* Computation finished
