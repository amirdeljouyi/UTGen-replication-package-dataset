* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.parse.FromClient
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 6179
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:35:51.310 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 13:35:51.343 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 13:35:51.345 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 13:35:51.404 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:35:51.410 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:35:51.412 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:35:51.449 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 13:35:51.451 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 13:35:51.460 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 13:35:51.463 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 13:35:51.466 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 13:35:51.473 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 13:35:51.521 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 13:35:51.579 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:35:51.587 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:35:51.591 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 13:35:51.632 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.parse.FromClient
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 163
* Using seed 1710336945954
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 13 / 163
[Progress:>                             0%] [Cov:========>                          24%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:=====>                        17%] [Cov:===============>                   45%][Progress:=====>                        17%] [Cov:===============>                   45%][Progress:=====>                        17%] [Cov:===============>                   45%][Progress:=====>                        17%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        18%] [Cov:===============>                   45%][Progress:=====>                        19%] [Cov:===============>                   45%][Progress:=====>                        19%] [Cov:===============>                   45%][Progress:=====>                        19%] [Cov:===============>                   45%][Progress:=====>                        19%] [Cov:===============>                   45%][Progress:=====>                        19%] [Cov:===============>                   45%][Progress:======>                       20%] [Cov:===============>                   45%][Progress:======>                       20%] [Cov:===============>                   45%][Progress:======>                       20%] [Cov:===============>                   45%][Progress:======>                       20%] [Cov:===============>                   45%][Progress:======>                       20%] [Cov:===============>                   45%][Progress:======>                       21%] [Cov:===============>                   45%][Progress:======>                       21%] [Cov:===============>                   45%][Progress:======>                       21%] [Cov:===============>                   45%][Progress:======>                       21%] [Cov:===============>                   45%][Progress:======>                       21%] [Cov:===============>                   45%][Progress:======>                       22%] [Cov:===============>                   45%][Progress:======>                       22%] [Cov:===============>                   45%][Progress:======>                       22%] [Cov:===============>                   45%][Progress:======>                       22%] [Cov:===============>                   45%][Progress:======>                       23%] [Cov:===============>                   45%][Progress:======>                       23%] [Cov:===============>                   45%][Progress:======>                       23%] [Cov:===============>                   45%][Progress:======>                       23%] [Cov:===============>                   45%][Progress:=======>                      24%] [Cov:===============>                   45%][Progress:=======>                      24%] [Cov:===============>                   45%][Progress:=======>                      24%] [Cov:===============>                   45%][Progress:=======>                      25%] [Cov:===============>                   45%][Progress:=======>                      25%] [Cov:===============>                   45%][Progress:=======>                      25%] [Cov:===============>                   45%][Progress:=======>                      26%] [Cov:===============>                   45%][Progress:=======>                      26%] [Cov:===============>                   45%][Progress:=======>                      26%] [Cov:===============>                   45%][Progress:========>                     27%] [Cov:===============>                   45%][Progress:========>                     27%] [Cov:===============>                   45%][Progress:========>                     27%] [Cov:===============>                   45%][Progress:========>                     27%] [Cov:===============>                   45%][Progress:========>                     28%] [Cov:===============>                   45%][Progress:========>                     28%] [Cov:===============>                   45%][Progress:========>                     28%] [Cov:===============>                   45%][Progress:========>                     28%] [Cov:===============>                   45%][Progress:========>                     29%] [Cov:===============>                   45%][Progress:========>                     29%] [Cov:===============>                   45%][Progress:========>                     29%] [Cov:===============>                   45%][Progress:=========>                    30%] [Cov:===============>                   45%][Progress:=========>                    30%] [Cov:===============>                   45%][Progress:=========>                    30%] [Cov:===============>                   45%][Progress:=========>                    30%] [Cov:===============>                   45%][Progress:=========>                    31%] [Cov:===============>                   45%][Progress:=========>                    31%] [Cov:===============>                   45%][Progress:=========>                    32%] [Cov:===============>                   45%][Progress:=========>                    32%] [Cov:===============>                   45%][Progress:=========>                    32%] [Cov:===============>                   45%][Progress:=========>                    33%] [Cov:===============>                   45%][Progress:=========>                    33%] [Cov:===============>                   45%][Progress:==========>                   34%] [Cov:===============>                   45%][Progress:==========>                   34%] [Cov:===============>                   45%][Progress:==========>                   34%] [Cov:===============>                   45%][Progress:==========>                   35%] [Cov:===============>                   45%][Progress:==========>                   35%] [Cov:===============>                   45%][Progress:==========>                   35%] [Cov:===============>                   45%][Progress:==========>                   36%] [Cov:===============>                   45%][Progress:==========>                   36%] [Cov:===============>                   45%][Progress:==========>                   36%] [Cov:===============>                   45%][Progress:==========>                   36%] [Cov:===============>                   45%][Progress:===========>                  37%] [Cov:===============>                   45%][Progress:===========>                  37%] [Cov:===============>                   45%][Progress:===========>                  37%] [Cov:===============>                   45%][Progress:===========>                  37%] [Cov:===============>                   45%][Progress:===========>                  38%] [Cov:===============>                   45%][Progress:===========>                  38%] [Cov:===============>                   45%][Progress:===========>                  38%] [Cov:===============>                   45%][Progress:===========>                  39%] [Cov:===============>                   45%][Progress:===========>                  39%] [Cov:===============>                   45%][Progress:===========>                  39%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 40%] [Cov:===============>                   45%][Progress:============>                 41%] [Cov:================>                  48%][Progress:============>                 41%] [Cov:================>                  48%][Progress:============>                 41%] [Cov:================>                  48%][Progress:============>                 41%] [Cov:================>                  48%][Progress:============>                 42%] [Cov:================>                  48%][Progress:============>                 42%] [Cov:================>                  48%][Progress:============>                 42%] [Cov:================>                  48%][Progress:============>                 42%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:=============>                44%] [Cov:================>                  48%][Progress:=============>                44%] [Cov:================>                  48%][Progress:=============>                44%] [Cov:================>                  48%][Progress:=============>                44%] [Cov:================>                  48%][Progress:=============>                45%] [Cov:================>                  48%][Progress:=============>                45%] [Cov:================>                  48%][Progress:=============>                45%] [Cov:================>                  48%][Progress:=============>                46%] [Cov:================>                  48%][Progress:=============>                46%] [Cov:================>                  48%][Progress:=============>                46%] [Cov:================>                  48%][Progress:==============>               47%] [Cov:================>                  48%][Progress:==============>               47%] [Cov:================>                  48%][Progress:==============>               47%] [Cov:================>                  48%][Progress:==============>               48%] [Cov:================>                  48%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         68%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:====================>         69%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        70%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        72%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       74%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      77%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:=======================>      79%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     80%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     82%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    84%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    86%] [Cov:=================>                 51%][Progress:=========================>    86%] [Cov:=================>                 51%][Progress:=========================>    86%] [Cov:=================>                 51%][Progress:=========================>    86%] [Cov:=================>                 51%][Progress:=========================>    86%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   87%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   88%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:==========================>   89%] [Cov:=================>                 51%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 94%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 95%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:============================> 96%] [Cov:==================>                54%][Progress:=============================>97%] [Cov:==================>                54%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%]
* Search finished after 202s and 562 generations, 351538 statements, best individual has fitness: 81.0
* Generated before the refinement 7 tests with total length 60
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@5cd6a7f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@10f19a4b type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (1));// Changed from 100 to 1

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 4, type org.javathena.login.Loginindex is: 4
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (1))// Changed from 100 to 1
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[0] = ((byte) (1))// Changed from 100 to 1

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
int _int = 1;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@4dfbb04e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[5];
        fromClient.parse(socket_data, byteArray);
        // Change the primitive values and Strings to more illustrative examples
        int userId = 1234;
        String password = "password";
        String ipAddress = "192.168.0.1";
        mockSocket.setIpAddress(ipAddress);
        mockSocket.setUserId(userId);
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
statement is: // Change the primitive values and Strings to more illustrative examples
int userId = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String ipAddress = "192.168.0.1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: mockSocket.setIpAddress(ipAddress), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.setIpAddress(ipAddress) target is: mockSocket method is: setIpAddress(java.lang.String)
statement is: mockSocket.setUserId(userId), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.setUserId(userId) target is: mockSocket method is: setUserId(int)
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "password"
* this is vulnerable: String string = "192.168.0.1"
TestCase is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
int _int = 1234;
String string = "password";
String string = "192.168.0.1";
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@4e89e0aa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[63]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e228a90e type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte)2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[63];
        byteArray[1] = ((byte) (2));
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[63], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [63] Ct is: byte[] byteArray = new byte[63] isAssignment: false Array: new byte[63] Elements: []
lengths: [63] [63]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
int _int = 2;
byteArray[1] = (byte) _int;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@d6ea365e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@987063e1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)124
statement is: org.evosuite.testcase.statements.AssignmentStatement@f0811ac1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) (124));// represents a login request with username "user" and password "password".

        byteArray[1] = ((byte) (2));// represents the first command in the login sequence.

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (124))// represents a login request with username "user" and password "password".
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (124)) Ct is: byteArray[0] = ((byte) (124))// represents a login request with username "user" and password "password".

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// represents the first command in the login sequence.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// represents the first command in the login sequence.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
int _int = 124;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@8485a0b2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@48f047e8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)48
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4587f5b type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)117
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) ('0'));
        byteArray[1] = ((byte) ('x'));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) ('0')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('0')) Ct is: byteArray[0] = ((byte) ('0'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) ('x')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('x')) Ct is: byteArray[1] = ((byte) ('x'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
char _char = '0';
byteArray[0] = (byte) _char;
char _char = 'x';
byteArray[1] = (byte) _char;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@614106c4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[60]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c86c248c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[60];
        // Changed the value of byteArray[0] to 255 (0xFF) to illustrate a non-zero value
        byteArray[0] = ((byte) (255));
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[60], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [60] Ct is: byte[] byteArray = new byte[60] isAssignment: false Array: new byte[60] Elements: []
lengths: [60] [60]
Their type are: class [B byte[]
statement is: // Changed the value of byteArray[0] to 255 (0xFF) to illustrate a non-zero value
byteArray[0] = ((byte) (255)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (255)) Ct is: // Changed the value of byteArray[0] to 255 (0xFF) to illustrate a non-zero value
byteArray[0] = ((byte) (255))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
int _int = 255;
byteArray[0] = (byte) _int;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@b50b2436 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9bb89c57 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)24
statement is: org.evosuite.testcase.statements.AssignmentStatement@b14ac88b type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        mockSocket.close();
        login.do_initTXT();
        byte[] byteArray = new byte[]{ 24, 121 };// Changed primitive values to more illustrative examples.

        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 1, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 1
Matched Method is: close()V
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[]{ 24, 121 }// Changed primitive values to more illustrative examples.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ 24, 121 } Elements: [24, 121]
lengths: [5] []
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = null;
fromClient.parse(socket_data, byteArray);

* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte)2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);
Test 7: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 1;
fromClient.parse(socket_data, byteArray);

Test 8: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
fromClient.parse(socket_data, byteArray);

Test 9: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte) 2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);

Test 10: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 11: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte) '0';
byteArray[1] = (byte) 'x';
fromClient.parse(socket_data, byteArray);

Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte) 255;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, (byte[]) null);


* Generated after the refinement and before minimization 14 tests with total length 118
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte)2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);
Test 7: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 1;
fromClient.parse(socket_data, byteArray);

Test 8: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
fromClient.parse(socket_data, byteArray);

Test 9: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte) 2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);

Test 10: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 11: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte) '0';
byteArray[1] = (byte) 'x';
fromClient.parse(socket_data, byteArray);

Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte) 255;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, (byte[]) null);


* Minimizing test suite
* test suite isTestSuite: 7
Test 0: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[63];
byteArray[1] = (byte) 2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 5: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
mockSocket.close();
login.do_initTXT();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 57%
* Total number of goals: 49
* Number of covered goals: 28
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 38%
* Total number of goals: 60
* Number of covered goals: 23
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 57%
* Total number of goals: 49
* Number of covered goals: 28
* Generated 7 tests with total length 60
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 13:42:07.408 [logback-2] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 7
Test 0: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[63];
byteArray[1] = (byte)2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
mockSocket.close();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

* Minimizing test suite
[MASTER] 13:42:08.848 [logback-2] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 7
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[60];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 1: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[63];
byteArray[1] = (byte)2;
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[5];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 5: 
FromClient fromClient = new FromClient();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
mockSocket.close();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 57%
* Total number of goals: 49
* Number of covered goals: 28
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 38%
* Total number of goals: 60
* Number of covered goals: 23
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 57%
* Total number of goals: 49
* Number of covered goals: 28
* Generated 7 tests with total length 46
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:42:08.871 [logback-2] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 13:42:10.405 [logback-2] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Writing tests to file
[MASTER] 13:42:11.164 [logback-2] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'FromClient_ESTest' to evosuite-tests
* Writing JUnit test case 'FromClient_Original_ESTest' to evosuite-tests
* Done!

* Computation finished
