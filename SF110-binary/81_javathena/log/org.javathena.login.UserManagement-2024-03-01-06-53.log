* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.UserManagement
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 20879
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:54:02.862 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:54:02.865 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:54:02.865 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:54:03.087 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 06:54:03.129 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:54:03.129 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:54:03.130 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 06:54:03.414 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:54:03.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:54:03.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:54:03.525 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:54:03.525 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:54:03.526 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:54:03.526 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:54:03.527 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:54:03.527 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:54:03.540 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 06:54:03.578 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.UserManagement
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1851
* Using seed 1709276040262
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 845 / 1851
[Progress:>                             1%] [Cov:===>                               11%][MASTER] 06:54:05.116 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:>                             1%] [Cov:=====>                             15%][Progress:>                             2%] [Cov:=====>                             17%][Progress:>                             2%] [Cov:======>                            18%][Progress:>                             3%] [Cov:======>                            19%][Progress:>                             3%] [Cov:=======>                           20%][Progress:=>                            4%] [Cov:=======>                           21%][Progress:=>                            4%] [Cov:=======>                           22%][Progress:=>                            4%] [Cov:========>                          23%][Progress:=>                            5%] [Cov:========>                          23%][Progress:=>                            5%] [Cov:========>                          24%][Progress:=>                            5%] [Cov:========>                          25%][MASTER] 06:54:09.763 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:=>                            6%] [Cov:========>                          25%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:===>                          12%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][MASTER] 06:54:23.373 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Class<T> : Type points to itself
[Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     28%] [Cov:==========>                        29%][Progress:========>                     28%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:==========>                   34%] [Cov:==========>                        31%][Progress:==========>                   34%] [Cov:==========>                        31%][Progress:==========>                   34%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              52%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:==================>           60%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][MASTER] 06:55:12.694 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        71%] [Cov:===========>                       32%][Progress:=====================>        71%] [Cov:===========>                       32%][Progress:=====================>        71%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        72%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:======================>       76%] [Cov:===========>                       32%][Progress:======================>       76%] [Cov:===========>                       32%][Progress:======================>       76%] [Cov:===========>                       32%][Progress:======================>       76%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      77%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      79%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     81%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     82%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    84%] [Cov:===========>                       33%][Progress:=========================>    85%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:==========================>   89%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:===========================>  93%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 94%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 95%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:============================> 96%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%]
* Search finished after 102s and 453 generations, 122700 statements, best individual has fitness: 1356.0
* Generated before the refinement 83 tests with total length 195
statement is: addAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount((int) (byte) (-51))
test data is: UserManagement.addAccountIdCount((int) (byte) (-51));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addAccountIdCount(999);
    }
}
statement is: UserManagement.addAccountIdCount(999), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(999) target is: UserManagement method is: addAccountIdCount(int)
Matched Method is: addAccountIdCount(I)V
TestCase is: int _int = 999;
UserManagement.addAccountIdCount(_int);

statement is: getNBGM()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBGM = UserManagement.getNBGM()
test data is: UserManagement.getNBGM();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the method UserManagement.getNBGM()
        int[] nbgm = new int[]{ ((int) (Math.round(Library.getBooks().size() / Library.getUsers().size()))) };
        String[] names = new String[]{ "John Doe", "Jane Doe", "Bob Smith" };
        double[] ratings = new double[]{ 4.5, 3.8, 4.2 };
        char[] genres = new char[]{ 'D', 'A', 'C' };
    }
}
statement is: // Improved test data for the method UserManagement.getNBGM()
int[] nbgm = new int[]{ ((int) (Math.round(Library.getBooks().size() / Library.getUsers().size()))) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] names = new String[]{ "John Doe", "Jane Doe", "Bob Smith" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] ratings = new double[]{ 4.5, 3.8, 4.2 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] genres = new char[]{ 'D', 'A', 'C' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: setAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAccountIdCount((-1))
test data is: UserManagement.setAccountIdCount((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.setAccountIdCount(5);
    }
}
statement is: UserManagement.setAccountIdCount(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAccountIdCount(5) target is: UserManagement method is: setAccountIdCount(int)
Matched Method is: setAccountIdCount(I)V
TestCase is: int _int = 5;
UserManagement.setAccountIdCount(_int);

statement is: debugXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.debugXML()
test data is: UserManagement.debugXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        UserManagement.debugXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + ((((((((("<users>" + "<user id=\"1\">") + "<name>John Doe</name>") + "<age>30</age>") + "</user>") + "<user id=\"2\">") + "<name>Jane Doe</name>") + "<age>25</age>") + "</user>") + "</users>"));
    }
}
statement is: // Improved test data
UserManagement.debugXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + ((((((((("<users>" + "<user id=\"1\">") + "<name>John Doe</name>") + "<age>30</age>") + "</user>") + "<user id=\"2\">") + "<name>Jane Doe</name>") + "<age>25</age>") + "</user>") + "</users>")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
UserManagement.debugXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + ((((((((("<users>" + "<user id=\"1\">") + "<name>John Doe</name>") + "<age>30</age>") + "</user>") + "<user id=\"2\">") + "<name>Jane Doe</name>") + "<age>25</age>") + "</user>") + "</users>")) target is: UserManagement method is: debugXML(java.lang.String)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: unLogServer(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unLogServer(arg0)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket socket = new Socket("localhost", 8080);
        Socket_data socket_data = new Socket_data(socket);
        UserManagement.unLogServer(socket_data);
    }
}
statement is: Socket socket = new Socket("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(socket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.unLogServer(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unLogServer(socket_data) target is: UserManagement method is: unLogServer(Socket_data)
Matched Method is: unLogServer(Lorg/javathena/core/data/Socket_data;)V
TestCase is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toBecomeGM(arg0)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.toBecomeGM(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data("localhost", 8080, "admin", "password");
        UserManagement.toBecomeGM(socket_data);
    }
}
statement is: Socket_data socket_data = new Socket_data("localhost", 8080, "admin", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.toBecomeGM(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toBecomeGM(socket_data) target is: UserManagement method is: toBecomeGM(Socket_data)
Matched Method is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toBecomeGM(socket_data);

statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("<T DLRm\"I", "<T DLRm\"I", "<T DLRm\"I", 3435)
test data is: UserManagement.addUserSQL("<T DLRm\"I", "<T DLRm\"I", "<T DLRm\"I", 3435);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435);
    }
}
statement is: UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435) target is: UserManagement method is: addUserSQL(java.lang.String,java.lang.String,java.lang.String,int)
Matched Method is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "john.doe@email.com";
String string = "1234567890";
int _int = 3435;
UserManagement.addUserSQL(string, string, string, _int);

statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getAccountIdCount(1000, "platinum", 5000);
    }
}
statement is: UserManagement.getAccountIdCount(1000, "platinum", 5000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount(1000, "platinum", 5000) target is: UserManagement method is: getAccountIdCount(int,java.lang.String,int)
statement is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL("k-,-Al3`.$!pMm")
test data is: UserManagement.getUserSQL("k-,-Al3`.$!pMm");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL("john.doe@email.com");
    }
}
statement is: UserManagement.getUserSQL("john.doe@email.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL("john.doe@email.com") target is: UserManagement method is: getUserSQL(java.lang.String)
Matched Method is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john.doe@email.com";
UserManagement.getUserSQL(string);

statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) null)
test data is: UserManagement.getUserTxt((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserTxt("John Doe");// Improved test data: Replace the null value with a more descriptive and representative String value, such as "John Doe". }}

    }
}
statement is: UserManagement.getUserTxt("John Doe")// Improved test data: Replace the null value with a more descriptive and representative String value, such as "John Doe". }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt("John Doe")// Improved test data: Replace the null value with a more descriptive and representative String value, such as "John Doe". }}
 target is: UserManagement method is: getUserTxt(java.lang.String)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
UserManagement.getUserTxt((Integer) string);

statement is: addSession(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addSession((Socket_data) null)
test data is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addSession(new SocketData("johndoe", "password123"));
    }
}
statement is: UserManagement.addSession(new SocketData("johndoe", "password123")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(new SocketData("johndoe", "password123")) target is: UserManagement method is: addSession(SocketData)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.addSession(socket_data);

statement is: getSessionAt(I)Lorg/javathena/core/data/Socket_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data sessionAt = UserManagement.getSessionAt(423)
test data is: UserManagement.getSessionAt(423);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int userId = 123;// Replace with a more descriptive value, such as "admin" or "johndoe"

        String sessionId = "session-123";// Replace with a more descriptive value, such as "session-abc" or "session-xyz"

        UserManagement.getSessionAt(userId);
    }
}
statement is: int userId = 123// Replace with a more descriptive value, such as "admin" or "johndoe"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String sessionId = "session-123"// Replace with a more descriptive value, such as "session-abc" or "session-xyz"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.getSessionAt(userId), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getSessionAt(userId) target is: UserManagement method is: getSessionAt(int)
Matched Method is: getSessionAt(I)Lorg/javathena/core/data/Socket_data;
* this is vulnerable: String string = "session-123"
TestCase is: int _int = 123;
String string = "session-123";
UserManagement.getSessionAt(_int);

statement is: addAccountIdCount()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount()
test data is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int accountId1 = 123456;
        String email1 = "johndoe@example.com";
        int accountId2 = 789012;
        String email2 = "janedoe@example.com";
    }
}
statement is: // Improved test data
int accountId1 = 123456, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email1 = "johndoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accountId2 = 789012, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email2 = "janedoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123456
* this is vulnerable: String string = "johndoe@example.com"
* this is vulnerable: int _int = 789012
* this is vulnerable: String string = "janedoe@example.com"
TestCase is: int _int = 123456;
String string = "johndoe@example.com";
int _int = 789012;
String string = "janedoe@example.com";

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: add_online_user(Lorg/javathena/core/data/Auth_data;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int add_online_user = UserManagement.add_online_user(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setUsername("johndoe");
        auth_data.setPassword("password123");
        UserManagement.add_online_user(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("johndoe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.add_online_user(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

statement is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((Integer) null)
test data is: UserManagement.getUserSQL((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL(123456789);
    }
}
statement is: UserManagement.getUserSQL(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL(123456789) target is: UserManagement method is: getUserSQL(int)
Matched Method is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 123456789;
UserManagement.getUserSQL((Integer) _int);

statement is: getNBSession()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBSession = UserManagement.getNBSession()
test data is: UserManagement.getNBSession();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Replace
        the primitive;
        with more;
        examples : UserManagement.getNBSession("John Doe", "john.doe@email.com");
        @Place
        your improved;
    }
}
statement is: @Replace
the primitive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: with more, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: examples : UserManagement.getNBSession("John Doe", "john.doe@email.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: examples : UserManagement.getNBSession("John Doe", "john.doe@email.com") target is: UserManagement method is: getNBSession(java.lang.String,java.lang.String)
statement is: @Place
your improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: online_db_final()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int online_db_final = UserManagement.online_db_final()
test data is: UserManagement.online_db_final();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.online_db_final();
        // Improved test data
        user1 = new User("John", "Doe", "john.doe@example.com");
        user2 = new User("Jane", "Smith", "jane.smith@example.com");
        user3 = new User("Bob", "Johnson", "bob.johnson@example.com");
    }
}
statement is: UserManagement.online_db_final(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.online_db_final() target is: UserManagement method is: online_db_final()
Matched Method is: online_db_final()I
statement is: // Improved test data
user1 = new User("John", "Doe", "john.doe@example.com"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: user2 = new User("Jane", "Smith", "jane.smith@example.com"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: user3 = new User("Bob", "Johnson", "bob.johnson@example.com"), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: UserManagement.online_db_final();

statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
test data is: UserManagement.getNBUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getNBUser("John Smith", "johnsmith@example.com", 25);
    }
}
statement is: UserManagement.getNBUser("John Smith", "johnsmith@example.com", 25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBUser("John Smith", "johnsmith@example.com", 25) target is: UserManagement method is: getNBUser(java.lang.String,java.lang.String,int)
statement is: addIpToBanListMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addIpToBanListMySQL(";4QIRQ\"Z1+(")
test data is: UserManagement.addIpToBanListMySQL(";4QIRQ\"Z1+(");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addIpToBanListMySQL("192.168.0.1");
    }
}
statement is: UserManagement.addIpToBanListMySQL("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("192.168.0.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
TestCase is: String string = "192.168.0.1";
UserManagement.addIpToBanListMySQL(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ')')
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType(3193)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ')');
addUserTXT.setClientType(3193);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "jane.smith@example.com", "+1234567890", 'F');
        addUserTXT.setClientType(3193);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "jane.smith@example.com", "+1234567890", 'F'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Jane Smith", "jane.smith@example.com", "+1234567890", 'F') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setClientType(3193), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setClientType(3193) target is: addUserTXT method is: setClientType(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Jane Smith";
String string = "jane.smith@example.com";
String string = "+1234567890";
char _char = 'F';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 3193;
((Auth_data) string).setClientType(_int);
UserManagement.addUser(addUserTXT);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: emailCreation(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailCreation(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailCreation(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.emailCreation(socket_data, "john.doe@example.com");
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.emailCreation(socket_data, "john.doe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data, "john.doe@example.com") target is: UserManagement method is: emailCreation(Socket_data,java.lang.String)
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toChangeAnEmail(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        MockSocket mockSocket = new MockSocket("localhost", 80);
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket, "johndoe@example.com");
        UserManagement.toChangeAnEmail(socket_data);
    }
}
statement is: // Improved test data
MockSocket mockSocket = new MockSocket("localhost", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: Socket_data socket_data = new Socket_data(mockSocket, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.toChangeAnEmail(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toChangeAnEmail(socket_data) target is: UserManagement method is: toChangeAnEmail(Socket_data)
Matched Method is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toChangeAnEmail(socket_data);

statement is: org.evosuite.testcase.statements.ArrayStatement@d9f8728c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x61, 0x62, 0x63, ((byte) (0x89)), ((byte) (0xa0)), ((byte) (0xb1)), ((byte) (0xc2)) };
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x61, 0x62, 0x63, ((byte) (0x89)), ((byte) (0xa0)), ((byte) (0xb1)), ((byte) (0xc2)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 0x61, 0x62, 0x63, ((byte) (0x89)), ((byte) (0xa0)), ((byte) (0xb1)), ((byte) (0xc2)) } Elements: [0x61, 0x62, 0x63, ((byte) (0x89)), ((byte) (0xa0)), ((byte) (0xb1)), ((byte) (0xc2))]
lengths: [7] []
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: byte[] byteArray = null;
UserManagement.tabHexToInt(byteArray);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data removeUser = UserManagement.removeUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data("jane@example.com", "password123");
        UserManagement.removeUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data("jane@example.com", "password123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.removeUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.removeUser(auth_data) target is: UserManagement method is: removeUser(Auth_data)
Matched Method is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Auth_data auth_data = null;
UserManagement.removeUser(auth_data);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@490bc839 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[39]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient(arg0, arg1, false)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[39];
UserManagement.connectionOfClient(socket_data, byteArray, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Socket_data socket_data = new Socket_data("localhost");
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 };
        UserManagement.connectionOfClient(socket_data, byteArray, false);
    }
}
statement is: // Improved test data
Socket_data socket_data = new Socket_data("localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[39] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [39] []
statement is: UserManagement.connectionOfClient(socket_data, byteArray, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(socket_data, byteArray, false) target is: UserManagement method is: connectionOfClient(Socket_data,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "localhost";
Socket_data socket_data = new Socket_data((Socket) string);
boolean _boolean = false;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@b7064eb6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[35]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient(arg0, arg1, true)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[35];
UserManagement.connectionOfClient(socket_data, byteArray, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Socket_data socket_data = new Socket_data("localhost");
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 };
        UserManagement.connectionOfClient(socket_data, byteArray, true);
    }
}
statement is: // Improved test data
Socket_data socket_data = new Socket_data("localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[35] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5]
lengths: [35] []
statement is: UserManagement.connectionOfClient(socket_data, byteArray, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(socket_data, byteArray, true) target is: UserManagement method is: connectionOfClient(Socket_data,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "localhost";
Socket_data socket_data = new Socket_data((Socket) string);
boolean _boolean = true;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(84, "", 84, 84)
test data is: UserManagement.levelIsValid(84, "", 84, 84);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(90, "Supervisor", 120, 150);
    }
}
statement is: UserManagement.levelIsValid(90, "Supervisor", 120, 150), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(90, "Supervisor", 120, 150) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 90;
String string = "Supervisor";
int _int = 120;
int _int = 150;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769))
test data is: UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(1769, "Rejected from server.", 1769, 1769);
    }
}
statement is: UserManagement.levelIsValid(1769, "Rejected from server.", 1769, 1769), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(1769, "Rejected from server.", 1769, 1769) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 1769;
String string = "Rejected from server.";
int _int = 1769;
int _int = 1769;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(2308, ">#O", 2308, 2308)
test data is: UserManagement.levelIsValid(2308, ">#O", 2308, 2308);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(1000, "<", 500, 2000);
    }
}
statement is: UserManagement.levelIsValid(1000, "<", 500, 2000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(1000, "<", 500, 2000) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 1000;
String string = "<";
int _int = 500;
int _int = 2000;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(2186)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(2186);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(90210);
        UserManagement.remove_online_user(integer);
    }
}
statement is: Integer integer = new Integer(90210), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 90210;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(99)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer userId = new Integer(0);
        UserManagement.remove_online_user(userId);
        // Test case 1: Remove online user with ID 9876543210
        Integer userToRemove = new Integer(-0);
        UserManagement.remove_online_user(userToRemove);
        // Test case 2: Remove online user with negative ID -9876543210
        Integer zero = new Integer(0);
        UserManagement.remove_online_user(zero);
        // Test case 3: Remove online user with ID 0 }}
    }
}
statement is: Integer userId = new Integer(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(userId), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(userId) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
statement is: // Test case 1: Remove online user with ID 9876543210
Integer userToRemove = new Integer(-0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(userToRemove), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(userToRemove) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
statement is: // Test case 2: Remove online user with negative ID -9876543210
Integer zero = new Integer(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(zero), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(zero) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
statement is: // Test case 3: Remove online user with ID 0 }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 0;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);
int _int = 0;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: org.evosuite.testcase.statements.ArrayStatement@fcf8b035 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[7]
statement is: charif_sendallwos(I[I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(105, arg1)
test data is: int[] intArray = new int[7];
UserManagement.charif_sendallwos(105, intArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 0, 1, 2, 3, 4, 5, 6 };
        UserManagement.charif_sendallwos(105, intArray);
    }
}
statement is: int[] intArray = new int[]{ 0, 1, 2, 3, 4, 5, 6 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[7] isAssignment: false Array: new int[]{ 0, 1, 2, 3, 4, 5, 6 } Elements: [0, 1, 2, 3, 4, 5, 6]
lengths: [7] []
statement is: UserManagement.charif_sendallwos(105, intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(105, intArray) target is: UserManagement method is: charif_sendallwos(int,int[])
Matched Method is: charif_sendallwos(I[I)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 105;
int[] intArray = null;
UserManagement.charif_sendallwos(_int, intArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@d5b59c4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: charif_sendallwos(I[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(100, arg1)
test data is: byte[] byteArray = new byte[0];
UserManagement.charif_sendallwos(100, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xab)) };
        UserManagement.charif_sendallwos(100, byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xab)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ ((byte) (0xab)) } Elements: [((byte) (0xab))]
lengths: [0] []
statement is: UserManagement.charif_sendallwos(100, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(100, byteArray) target is: UserManagement method is: charif_sendallwos(int,byte[])
Matched Method is: charif_sendallwos(I[B)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 100;
byte[] byteArray = null;
UserManagement.charif_sendallwos(_int, byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '>')
test data is: UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '>');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M');
    }
}
statement is: UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john.doe@example.com";
String string = "John Smith";
String string = "johndoe@example.com";
char _char = 'M';
UserManagement.addUserTXT(string, string, string, _char);

statement is: isGM(J)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gM = UserManagement.isGM(1000)
test data is: UserManagement.isGM(1000);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        UserManagement.isGM("gold member");
    }
}
statement is: // Improved test data
UserManagement.isGM("gold member"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
UserManagement.isGM("gold member") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
TestCase is: String string = "gold member";
UserManagement.isGM((long) string);

statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
test data is: UserManagement.getAccountIds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int userId = 123456789;
        String username = "johndoe";
        String password = "password123";
        String email = "john.doe@example.com";
    }
}
statement is: // Improved test data
int userId = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email = "john.doe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123456789
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: String string = "john.doe@example.com"
TestCase is: int _int = 123456789;
String string = "johndoe";
String string = "password123";
String string = "john.doe@example.com";

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, (IParse) null)
statement is: administationLogin(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.administationLogin(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        // Replace the primitive values and Strings with more descriptive examples to make the test data more representative of the situation being tested
        int userID = 1234;
        String password = "password";
        IParse parse = new IParse() {
            @Override
            public void parse(JSONObject response) {
                // Parse logic goes here
            }
        };
        Socket_data socket_data = new Socket_data(mockSocket, parse);
        UserManagement.administationLogin(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: // Replace the primitive values and Strings with more descriptive examples to make the test data more representative of the situation being tested
int userID = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: IParse parse = new IParse() {
    @Override
    public void parse(JSONObject response) {
        // Parse logic goes here
    }
}, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewClassImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, parse), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.administationLogin(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.administationLogin(socket_data) target is: UserManagement method is: administationLogin(Socket_data)
Matched Method is: administationLogin(Lorg/javathena/core/data/Socket_data;)V
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "password"
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
int _int = 1234;
String string = "password";
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);

statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z")
test data is: UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.dynamicFailBanCheckTXT("a1b2c3d4e5f6g7h8i9j0kA");
    }
}
statement is: UserManagement.dynamicFailBanCheckTXT("a1b2c3d4e5f6g7h8i9j0kA"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckTXT("a1b2c3d4e5f6g7h8i9j0kA") target is: UserManagement method is: dynamicFailBanCheckTXT(java.lang.String)
Matched Method is: dynamicFailBanCheckTXT(Ljava/lang/String;)V
TestCase is: String string = "a1b2c3d4e5f6g7h8i9j0kA";
UserManagement.dynamicFailBanCheckTXT(string);

statement is: sendMessageOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".TF\"xS4!SB7I@v")
statement is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043) type is: class org.evosuite.testcase.statements.environment.RemoteAddressPrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteRemoteAddress
statement code is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043)
statement is: openRemoteTcpServer(Lorg/evosuite/runtime/testdata/EvoSuiteRemoteAddress;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean openRemoteTcpServer = NetworkHandling.openRemoteTcpServer(arg0)
statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z")
test data is: NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".TF\"xS4!SB7I@v");
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NetworkHandling.sendMessageOnTcp(new EvoSuiteLocalAddress("192.168.0.1", 4321), "Hello, World!");
        EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043);
        NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
        UserManagement.dynamicFailBanCheckTXT("This is a test message.");
    }
}
statement is: NetworkHandling.sendMessageOnTcp(new EvoSuiteLocalAddress("192.168.0.1", 4321), "Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendMessageOnTcp(new EvoSuiteLocalAddress("192.168.0.1", 4321), "Hello, World!") target is: NetworkHandling method is: sendMessageOnTcp(EvoSuiteLocalAddress,java.lang.String)
Matched Method is: sendMessageOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress) target is: NetworkHandling method is: openRemoteTcpServer(EvoSuiteRemoteAddress)
Matched Method is: openRemoteTcpServer(Lorg/evosuite/runtime/testdata/EvoSuiteRemoteAddress;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.dynamicFailBanCheckTXT("This is a test message."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckTXT("This is a test message.") target is: UserManagement method is: dynamicFailBanCheckTXT(java.lang.String)
Matched Method is: dynamicFailBanCheckTXT(Ljava/lang/String;)V
TestCase is: String string = "Hello, World!";
String string = null;
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) string, string);
EvoSuiteRemoteAddress evoSuiteRemoteAddress = null;
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
String string = "This is a test message.";
UserManagement.dynamicFailBanCheckTXT(string);

statement is: sendUserList(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.sendUserList((Socket_data) null)
test data is: UserManagement.sendUserList((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.sendUserList(new Socket_data("John Doe", 30, "Male"));
        UserManagement.sendUserList(new Socket_data("Jane Smith", 25, "Female"));
        UserManagement.sendUserList(new Socket_data("Bob Johnson", 40, "Male"));
    }
}
statement is: UserManagement.sendUserList(new Socket_data("John Doe", 30, "Male")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.sendUserList(new Socket_data("John Doe", 30, "Male")) target is: UserManagement method is: sendUserList(Socket_data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.sendUserList(new Socket_data("Jane Smith", 25, "Female")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.sendUserList(new Socket_data("Jane Smith", 25, "Female")) target is: UserManagement method is: sendUserList(Socket_data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.sendUserList(new Socket_data("Bob Johnson", 40, "Male")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.sendUserList(new Socket_data("Bob Johnson", 40, "Male")) target is: UserManagement method is: sendUserList(Socket_data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: javolution.util.FastMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>()
statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(10007)
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data put = fastMap.put(arg0, arg1)
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
Integer integer = new Integer(10007);
fastMap.put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer userId = new Integer(10007);
        Auth_data authData = new Auth_data();
        authData.setName("John Doe");
        authData.setAge(30);
        authData.setGender("Male");
        FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
        fastMap.put(userId, authData);
        UserManagement.setAuth_dats(fastMap);
        String userText = UserManagement.getUserTxt(userId);
    }
}
statement is: Integer userId = new Integer(10007), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Auth_data authData = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: authData.setName("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: authData.setName("John Doe") target is: authData method is: setName(java.lang.String)
statement is: authData.setAge(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: authData.setAge(30) target is: authData method is: setAge(int)
statement is: authData.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: authData.setGender("Male") target is: authData method is: setGender(java.lang.String)
statement is: FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fastMap.put(userId, authData), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fastMap.put(userId, authData) target is: fastMap method is: put(java.lang.Integer,Auth_data)
source statement: javolution.util.FastMap()V callee: VariableReference: Statement 1, type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>index is: 3
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: UserManagement.setAuth_dats(fastMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(fastMap) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
statement is: String userText = UserManagement.getUserTxt(userId), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(userId) target is: UserManagement method is: getUserTxt(java.lang.Integer)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 10007;
Integer integer = new Integer(_int);
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
((FastMap) integer).put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@6cfac214 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[16]
statement is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAllOnlinAccounts(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data(new MockSocket());
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 };
        UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
    }
}
statement is: Socket_data socket_data = new Socket_data(new MockSocket()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[16] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [16] []
statement is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray) target is: UserManagement method is: receiveAllOnlinAccounts(Socket_data,byte[])
Matched Method is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = null;
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
test data is: UserManagement.getAuth_dats();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getAuth_dats();
        // Improved test data
        int userId = "johndoe";
        String username = "johndoe";
        String password = "Password123!";
        boolean isAdmin = false;
        // End of improved test data }}
    }
}
statement is: UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: // Improved test data
int userId = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "Password123!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isAdmin = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // End of improved test data }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "Password123!"
* this is vulnerable: boolean _boolean = false
TestCase is: UserManagement.getAuth_dats();
String string = "johndoe";
String string = "johndoe";
String string = "Password123!";
boolean _boolean = false;

statement is: is_user_online(Ljava/lang/Integer;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean is_user_online = UserManagement.is_user_online((Integer) null)
test data is: UserManagement.is_user_online((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.is_user_online(1234567890);
    }
}
statement is: UserManagement.is_user_online(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.is_user_online(1234567890) target is: UserManagement method is: is_user_online(int)
Matched Method is: is_user_online(Ljava/lang/Integer;)Z
TestCase is: int _int = 1234567890;
UserManagement.is_user_online((Integer) _int);

statement is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt("Blob.2")
test data is: UserManagement.getUserTxt("Blob.2");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        UserManagement.getUserTxt("John Doe");
    }
}
statement is: // Improved test data
UserManagement.getUserTxt("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
UserManagement.getUserTxt("John Doe") target is: UserManagement method is: getUserTxt(java.lang.String)
Matched Method is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
UserManagement.getUserTxt(string);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time(1150L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(1150L);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setBan_until_time(System.currentTimeMillis() + (((1000L * 60) * 60) * 24));// Set ban until one day from now

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setBan_until_time(System.currentTimeMillis() + (((1000L * 60) * 60) * 24))// Set ban until one day from now
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setBan_until_time(System.currentTimeMillis() + (((1000L * 60) * 60) * 24))// Set ban until one day from now
 target is: auth_data method is: setBan_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setBan_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
long _long = null;
auth_data.setBan_until_time(_long);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setCharserver(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setCharserver(3033)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setCharserver(3033);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setCharserver(12345);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setCharserver(12345), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setCharserver(12345) target is: auth_data method is: setCharserver(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setCharserver(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 12345;
auth_data.setCharserver(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType((-3562))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setClientType((-3562));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setClientType("web");// changed from (-3562) to "web" to make the data more descriptive and representative of the situation being tested.

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setClientType("web")// changed from (-3562) to "web" to make the data more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setClientType("web")// changed from (-3562) to "web" to make the data more descriptive and representative of the situation being tested.
 target is: auth_data method is: setClientType(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "web";
auth_data.setClientType((int) string);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D')
statement is: setConnect_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setConnect_until_time(16384L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'D');
        addUserTXT.setConnect_until_time(16384L);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'D'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'D') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setConnect_until_time(16384L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setConnect_until_time(16384L) target is: addUserTXT method is: setConnect_until_time(long)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setConnect_until_time(J)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "password123";
char _char = 'D';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
long _long = 16384L;
((Auth_data) string).setConnect_until_time(_long);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag(3838)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setDelflag(3838);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        // Changed the delflag value to a more descriptive and representative number, such as 1234, which is the actual value used in the application.
        auth_data.setDelflag(1234);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Changed the delflag value to a more descriptive and representative number, such as 1234, which is the actual value used in the application.
auth_data.setDelflag(1234), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the delflag value to a more descriptive and representative number, such as 1234, which is the actual value used in the application.
auth_data.setDelflag(1234) target is: auth_data method is: setDelflag(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setDelflag(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 1234;
auth_data.setDelflag(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel((-2261))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLevel((-2261));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLevel(Integer.MIN_VALUE);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLevel(Integer.MIN_VALUE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(Integer.MIN_VALUE) target is: auth_data method is: setLevel(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLevel(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = null;
auth_data.setLevel(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel(15)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLevel(15);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLevel(3);// Changed to a more descriptive level for testing purposes

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLevel(3)// Changed to a more descriptive level for testing purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(3)// Changed to a more descriptive level for testing purposes
 target is: auth_data method is: setLevel(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLevel(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 3;
auth_data.setLevel(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q')
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1(100)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q');
addUserTXT.setLogin_id1(100);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "password123", 'a');
        addUserTXT.setLogin_id1(100);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "password123", 'a'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("john", "doe", "password123", 'a') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogin_id1(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogin_id1(100) target is: addUserTXT method is: setLogin_id1(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogin_id1(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john";
String string = "doe";
String string = "password123";
char _char = 'a';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 100;
((Auth_data) string).setLogin_id1(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id2(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id2((-3577))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((-3577));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id2(123456789);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id2(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id2(123456789) target is: auth_data method is: setLogin_id2(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 123456789;
auth_data.setLogin_id2(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D')
statement is: setLogin_id2(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id2(31028)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setLogin_id2(31028);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe123", "doe123", 'D');
        addUserTXT.setLogin_id2(56789);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe123", "doe123", 'D'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("john", "doe123", "doe123", 'D') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogin_id2(56789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogin_id2(56789) target is: addUserTXT method is: setLogin_id2(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john";
String string = "doe123";
String string = "doe123";
char _char = 'D';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 56789;
((Auth_data) string).setLogin_id2(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%')
statement is: setLogincount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogincount((-414))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%');
addUserTXT.setLogincount((-414));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "password123!", "johndoe@gmail.com", 'a');
        addUserTXT.setLogincount(4);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "password123!", "johndoe@gmail.com", 'a'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "password123!", "johndoe@gmail.com", 'a') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogincount(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogincount(4) target is: addUserTXT method is: setLogincount(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogincount(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "password123!";
String string = "johndoe@gmail.com";
char _char = 'a';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 4;
((Auth_data) string).setLogincount(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M')
statement is: setLogincount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogincount(932)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M');
addUserTXT.setLogincount(932);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("username", "password123", "user@example.com", 'M');
        addUserTXT.setLogincount(932);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("username", "password123", "user@example.com", 'M'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("username", "password123", "user@example.com", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogincount(932), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogincount(932) target is: addUserTXT method is: setLogincount(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogincount(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "username";
String string = "password123";
String string = "user@example.com";
char _char = 'M';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 932;
((Auth_data) string).setLogincount(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setState(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setState(40)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setState(40);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setState("active");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setState("active"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setState("active") target is: auth_data method is: setState(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setState(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "active";
auth_data.setState((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setResetLogincoun(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setResetLogincoun(true)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setResetLogincoun(true);
        UserManagement.addUser(auth_data);
        // Replace the hardcoded values with more descriptive examples
        auth_data.setUsername("john.doe");
        auth_data.setPassword("password123");
        auth_data.setEmail("john.doe@example.com");
        auth_data.setRole("USER");
        // Add a new user with more descriptive data
        Auth_data auth_data2 = new Auth_data();
        auth_data2.setUsername("jane.smith");
        auth_data2.setPassword("password456");
        auth_data2.setEmail("jane.smith@example.com");
        auth_data2.setRole("ADMIN");
        UserManagement.addUser(auth_data2);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setResetLogincoun(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setResetLogincoun(true) target is: auth_data method is: setResetLogincoun(boolean)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setResetLogincoun(Z)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: // Replace the hardcoded values with more descriptive examples
auth_data.setUsername("john.doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace the hardcoded values with more descriptive examples
auth_data.setUsername("john.doe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: auth_data.setEmail("john.doe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setEmail("john.doe@example.com") target is: auth_data method is: setEmail(java.lang.String)
statement is: auth_data.setRole("USER"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setRole("USER") target is: auth_data method is: setRole(java.lang.String)
statement is: // Add a new user with more descriptive data
Auth_data auth_data2 = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data2.setUsername("jane.smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data2.setUsername("jane.smith") target is: auth_data2 method is: setUsername(java.lang.String)
statement is: auth_data2.setPassword("password456"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data2.setPassword("password456") target is: auth_data2 method is: setPassword(java.lang.String)
statement is: auth_data2.setEmail("jane.smith@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data2.setEmail("jane.smith@example.com") target is: auth_data2 method is: setEmail(java.lang.String)
statement is: auth_data2.setRole("ADMIN"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data2.setRole("ADMIN") target is: auth_data2 method is: setRole(java.lang.String)
statement is: UserManagement.addUser(auth_data2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data2) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
boolean _boolean = true;
auth_data.setResetLogincoun(_boolean);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

statement is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer accountID = UserManagement.getAccountID((String) null)
test data is: UserManagement.getAccountID((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getAccountID("John Doe");
    }
}
statement is: UserManagement.getAccountID("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountID("John Doe") target is: UserManagement method is: getAccountID(java.lang.String)
Matched Method is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer;
TestCase is: String string = "John Doe";
UserManagement.getAccountID(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`')
statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`');
UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("John Doe", "johndoe@email.com", "+1234567890", 'A');
        UserManagement.getAccountIdCount();
    }
}
statement is: UserManagement.addUserTXT("John Doe", "johndoe@email.com", "+1234567890", 'A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@email.com", "+1234567890", 'A') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAccountIdCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount() target is: UserManagement method is: getAccountIdCount()
Matched Method is: getAccountIdCount()I
TestCase is: String string = "John Doe";
String string = "johndoe@email.com";
String string = "+1234567890";
char _char = 'A';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getAccountIdCount();

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`')
statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
test data is: UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`');
UserManagement.getAuth_dats();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("Jane Doe", "jdoe@example.com", "1234567890", 'A');
        UserManagement.getAuth_dats();
    }
}
statement is: UserManagement.addUserTXT("Jane Doe", "jdoe@example.com", "1234567890", 'A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Jane Doe", "jdoe@example.com", "1234567890", 'A') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
TestCase is: String string = "Jane Doe";
String string = "jdoe@example.com";
String string = "1234567890";
char _char = 'A';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getAuth_dats();

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("Blob.2", "Blob.2", "Blob.2", '`')
statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
test data is: UserManagement.addUserTXT("Blob.2", "Blob.2", "Blob.2", '`');
UserManagement.getNBUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F');
        UserManagement.getNBUser();
    }
}
statement is: UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getNBUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBUser() target is: UserManagement method is: getNBUser()
Matched Method is: getNBUser()I
TestCase is: String string = "Alice Brown";
String string = "abrown@example.com";
String string = "345 Maple St.";
char _char = 'F';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getNBUser();

statement is: org.evosuite.testcase.statements.ArrayStatement@5b21a23b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6980856c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[5] = (byte)58
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[6];
byteArray[5] = (byte)58;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        for (int i = 0; i < 6; i++) {
            byteArray[i] = ((byte) (58));
        }
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: for (int i = 0; i < 6; i++) {
    byteArray[i] = ((byte) (58));
}, class spoon.support.reflect.code.CtForImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[6];
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@581456da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@de7eee62 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)13
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
byteArray[1] = (byte)13;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        byteArray[0] = 0xab;// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.

        byteArray[1] = 0xcd;// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.

        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = 0xab// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:0xab Ct is: byteArray[0] = 0xab// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = 0xcd// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:0xcd Ct is: byteArray[1] = 0xcd// Replace 13 with a more descriptive value such as hexadecimal representation of an ASCII character.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[2];
int _int = 171;
byteArray[1] = (byte) _int;
int _int = 205;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@94fcb31 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOffline(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
UserManagement.account_idToOffline(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("localhost", 8080);
        Socket_data socket_data = new Socket_data(mockSocket, "username123", "password456");
        byte[] byteArray = new byte[7];
        UserManagement.account_idToOffline(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, "username123", "password456"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: UserManagement.account_idToOffline(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOffline(socket_data, byteArray) target is: UserManagement method is: account_idToOffline(Socket_data,byte[])
Matched Method is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[7];
byte[] byteArray = null;
UserManagement.account_idToOffline((Socket_data) byteArray, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@3757ed6a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOnline((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[7];
UserManagement.account_idToOnline((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 };
        String username = "johndoe@example.com";
        int accountId = 123456789;
        UserManagement.account_idToOnline(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7]
lengths: [7] []
statement is: String username = "johndoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accountId = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.account_idToOnline(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOnline(((Socket_data) (null)), byteArray) target is: UserManagement method is: account_idToOnline(Socket_data,byte[])
Matched Method is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
* this is vulnerable: String string = "johndoe@example.com"
* this is vulnerable: int _int = 123456789
TestCase is: String string = "johndoe@example.com";
int _int = 123456789;
Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.account_idToOnline(socket_data, byteArray);

statement is: addGM(II)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addGM = UserManagement.addGM(5, (-614))
test data is: UserManagement.addGM(5, (-614));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addGM(5, 2);
    }
}
statement is: UserManagement.addGM(5, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addGM(5, 2) target is: UserManagement method is: addGM(int,int)
Matched Method is: addGM(II)Z
TestCase is: int _int = 5;
int _int = 2;
UserManagement.addGM(_int, _int);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: banResquest(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.banResquest(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.banResquest(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket, "user1234", "password1234");
        UserManagement.banRequest(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: Socket_data socket_data = new Socket_data(mockSocket, "user1234", "password1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.banRequest(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.banRequest(socket_data) target is: UserManagement method is: banRequest(Socket_data)
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: changeSex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSex(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.5", 8080);
        mockSocket.close();
        LoginData loginData = new LoginData(mockSocket, "johnDoe", "myPassword");
        UserManagement.changeSex(loginData);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.5", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: LoginData loginData = new LoginData(mockSocket, "johnDoe", "myPassword"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.changeSex(loginData), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSex(loginData) target is: UserManagement method is: changeSex(LoginData)
Matched Method is: changeSex(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.changeSex(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, (IParse) null)
statement is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSexChrif_changesex(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.changeSexChrif_changesex(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        // Changing the primitive values and Strings to more illustrative examples
        Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null)));
        UserManagement.changeSexChrif_changesex(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: // Changing the primitive values and Strings to more illustrative examples
Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.changeSexChrif_changesex(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSexChrif_changesex(socket_data) target is: UserManagement method is: changeSexChrif_changesex(Socket_data)
Matched Method is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.changeSexChrif_changesex(socket_data);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@49d80853 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.charServerToAuthentify(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data(new Socket("www.example.com", 80));
        byte[] byteArray = new byte[8];
        UserManagement.charServerToAuthentify(socket_data, byteArray);
    }
}
statement is: Socket_data socket_data = new Socket_data(new Socket("www.example.com", 80)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: UserManagement.charServerToAuthentify(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charServerToAuthentify(socket_data, byteArray) target is: UserManagement method is: charServerToAuthentify(Socket_data,byte[])
Matched Method is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@574de49b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfCharServer(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.connectionOfCharServer(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        Socket_data socket_data = new Socket_data("192.168.0.1", 54321);
        byte[] byteArray = new byte[]{ ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)), ((byte) (0x4)) };
        UserManagement.connectionOfCharServer(socket_data, byteArray);
    }
}
statement is: // Improved test data for the code snippet
Socket_data socket_data = new Socket_data("192.168.0.1", 54321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)), ((byte) (0x4)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ ((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)), ((byte) (0x4)) } Elements: [((byte) (0x1)), ((byte) (0x2)), ((byte) (0x3)), ((byte) (0x4))]
lengths: [8] []
statement is: UserManagement.connectionOfCharServer(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfCharServer(socket_data, byteArray) target is: UserManagement method is: connectionOfCharServer(Socket_data,byte[])
Matched Method is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.connectionOfCharServer(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClientEncrypted(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
UserManagement.connectionOfClientEncrypted(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        FromClient fromClient = new FromClient("12345", "John Doe", 20, "johndoe@email.com");
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        UserManagement.connectionOfClientEncrypted(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: FromClient fromClient = new FromClient("12345", "John Doe", 20, "johndoe@email.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.connectionOfClientEncrypted(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(socket_data) target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = null;
UserManagement.connectionOfClientEncrypted(socket_data);

statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE")
test data is: UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
        // Improved test data:
        UserManagement.dynamicFailBanCheckMySQL("1234567890");
    }
}
statement is: UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE") target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
statement is: // Improved test data:
UserManagement.dynamicFailBanCheckMySQL("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
UserManagement.dynamicFailBanCheckMySQL("1234567890") target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
TestCase is: String string = "f,k`Bq8*V`GLE";
UserManagement.dynamicFailBanCheckMySQL(string);
String string = "1234567890";
UserManagement.dynamicFailBanCheckMySQL(string);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailLimitedTime(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
UserManagement.emailLimitedTime(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket(1024);// Use a specific value for the buffer size

        mockSocket.close();
        FromClient fromClient = new FromClient("johndoe@example.com");
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        UserManagement.emailLimitedTime(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(1024)// Use a specific value for the buffer size
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: FromClient fromClient = new FromClient("johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.emailLimitedTime(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailLimitedTime(socket_data) target is: UserManagement method is: emailLimitedTime(Socket_data)
Matched Method is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.emailLimitedTime(socket_data);

statement is: getUserSQL(Ljava/sql/ResultSet;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((ResultSet) null)
test data is: UserManagement.getUserSQL((ResultSet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    @Override
    public String getString(String columnLabel) throws SQLException {
        return "John Doe";
    }

    @Override
    public int getInt(int columnIndex) throws SQLException {
        return 101;
    }
}
statement is: return 101, class spoon.support.reflect.code.CtReturnImpl
statement is: return "John Doe", class spoon.support.reflect.code.CtReturnImpl
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@2b20a29b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.numberOfUser(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[6];
UserManagement.numberOfUser(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        FromClient clientRequest = new FromClient();
        byte[] byteArray = new byte[6];
        UserManagement userManagement = new UserManagement(mockSocket);
        int numberOfUsers = userManagement.numberOfUser(clientRequest, byteArray);
        // Test cases
        assertEquals(0, numberOfUsers);// No users in the system

        assertEquals(2, numberOfUsers);// 2 users in the system

        assertEquals(-1, numberOfUsers);// Invalid request }}

    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient clientRequest = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: UserManagement userManagement = new UserManagement(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int numberOfUsers = userManagement.numberOfUser(clientRequest, byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: userManagement.numberOfUser(clientRequest, byteArray) target is: userManagement method is: numberOfUser(FromClient,byte[])
Matched Method is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V
statement is: // Test cases
assertEquals(0, numberOfUsers)// No users in the system
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test cases
assertEquals(0, numberOfUsers)// No users in the system
 target is:  method is: assertEquals(int,int)
statement is: assertEquals(2, numberOfUsers)// 2 users in the system
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(2, numberOfUsers)// 2 users in the system
 target is:  method is: assertEquals(int,int)
statement is: assertEquals(-1, numberOfUsers)// Invalid request }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(-1, numberOfUsers)// Invalid request }}
 target is:  method is: assertEquals(int,int)
TestCase is: MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
UserManagement.numberOfUser((Socket_data) fromClient, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@105f0d3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAccountReg2(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.receiveAccountReg2(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.setInputStream("ThisIsAValidAccountName".getBytes());
        mockSocket.setOutputStream("ThisIsAPassword".getBytes());
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[8];
        UserManagement.receiveAccountReg2(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.setInputStream("ThisIsAValidAccountName".getBytes()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.setInputStream("ThisIsAValidAccountName".getBytes()) target is: mockSocket method is: setInputStream(byte[])
statement is: mockSocket.setOutputStream("ThisIsAPassword".getBytes()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.setOutputStream("ThisIsAPassword".getBytes()) target is: mockSocket method is: setOutputStream(byte[])
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: UserManagement.receiveAccountReg2(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAccountReg2(socket_data, byteArray) target is: UserManagement method is: receiveAccountReg2(Socket_data,byte[])
Matched Method is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.receiveAccountReg2(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@7fcfb186 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountData((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[9];
UserManagement.requestAccountData((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 };
        UserManagement.requestAccountData(new Socket_data("127.0.0.1", 12345), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9]
lengths: [9] []
statement is: UserManagement.requestAccountData(new Socket_data("127.0.0.1", 12345), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountData(new Socket_data("127.0.0.1", 12345), byteArray) target is: UserManagement method is: requestAccountData(Socket_data,byte[])
Matched Method is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.requestAccountData(socket_data, byteArray);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@10912796 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[16]
statement is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountReg2(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data("www.example.com");
        byte[] byteArray = new byte[16];
        UserManagement.requestAccountReg2(socket_data, byteArray);
    }
}
statement is: Socket_data socket_data = new Socket_data("www.example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[16], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [16] Ct is: byte[] byteArray = new byte[16] isAssignment: false Array: new byte[16] Elements: []
lengths: [16] [16]
Their type are: class [B byte[]
statement is: UserManagement.requestAccountReg2(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountReg2(socket_data, byteArray) target is: UserManagement method is: requestAccountReg2(Socket_data,byte[])
Matched Method is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: String string = "www.example.com";
Socket_data socket_data = new Socket_data((Socket) string);
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@4201c125 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.statusChange(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.statusChange(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[]{ 0x12, 0x34, ((byte) (0xab)), ((byte) (0xcd)) };
        UserManagement.statusChange(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, ((byte) (0xab)), ((byte) (0xcd)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 0x12, 0x34, ((byte) (0xab)), ((byte) (0xcd)) } Elements: [0x12, 0x34, ((byte) (0xab)), ((byte) (0xcd))]
lengths: [8] []
statement is: UserManagement.statusChange(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.statusChange(socket_data, byteArray) target is: UserManagement method is: statusChange(Socket_data,byte[])
Matched Method is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = null;
UserManagement.statusChange(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: unban(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unban(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.unban(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);
        mockSocket.close();
        FromAdmin fromAdmin = new FromAdmin(true, "username", "password");
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        UserManagement.unban(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: FromAdmin fromAdmin = new FromAdmin(true, "username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.unban(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unban(socket_data) target is: UserManagement method is: unban(Socket_data)
Matched Method is: unban(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.unban(socket_data);

* test suite isTestSuite: 159
Test 0: 
UserManagement.addAccountIdCount((int) (byte) (-51));
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount((-1));
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("<T DLRm\"I", "<T DLRm\"I", "<T DLRm\"I", 3435);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("k-,-Al3`.$!pMm");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
UserManagement.getUserTxt((Integer) null);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(423);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
UserManagement.getNBUser();
Test 18: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL(";4QIRQ\"Z1+(");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 19: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ')');
addUserTXT.setClientType(3193);
UserManagement.addUser(addUserTXT);
Test 20: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 22: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 24: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[39];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 25: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[35];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
UserManagement.levelIsValid(84, "", 84, 84);
Test 27: 
UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769));
Test 28: 
UserManagement.levelIsValid(2308, ">#O", 2308, 2308);
Test 29: 
Integer integer = new Integer(2186);
UserManagement.remove_online_user(integer);
Test 30: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 31: 
int[] intArray = new int[7];
UserManagement.charif_sendallwos(105, intArray);
Test 32: 
byte[] byteArray = new byte[0];
UserManagement.charif_sendallwos(100, byteArray);
Test 33: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '>');
Test 34: 
UserManagement.isGM(1000);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);
Test 37: 
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");
Test 38: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".TF\"xS4!SB7I@v");
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");
Test 39: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 40: 
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
Integer integer = new Integer(10007);
fastMap.put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);
Test 41: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 42: 
UserManagement.getAuth_dats();
Test 43: 
UserManagement.is_user_online((Integer) null);
Test 44: 
UserManagement.getUserTxt("Blob.2");
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(1150L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(3033);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-3562));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(3838);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-2261));
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(15);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data addUserTXT = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q');
addUserTXT.setLogin_id1(100);
UserManagement.addUser(addUserTXT);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((-3577));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setLogin_id2(31028);
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%');
addUserTXT.setLogincount((-414));
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M');
addUserTXT.setLogincount(932);
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setState(40);
UserManagement.addUser(auth_data);
Test 58: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 59: 
UserManagement.getAccountID((String) null);
Test 60: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`');
UserManagement.getAccountIdCount();
Test 61: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`');
UserManagement.getAuth_dats();
Test 62: 
UserManagement.addUserTXT("Blob.2", "Blob.2", "Blob.2", '`');
UserManagement.getNBUser();
Test 63: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)58;
UserManagement.tabHexToInt(byteArray);
Test 64: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)13;
UserManagement.tabHexToInt(byteArray);
Test 65: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.addGM(5, (-614));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 71: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 77: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[6];
UserManagement.numberOfUser(socket_data, byteArray);
Test 78: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.requestAccountData((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 83: 
UserManagement.addAccountIdCount(999);

Test 84: 
UserManagement.setAccountIdCount(5);

Test 85: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

Test 86: 
UserManagement.toBecomeGM((Socket_data) null);

Test 87: 
UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435);

Test 88: 
UserManagement.getUserSQL("john.doe@email.com");

Test 89: 
UserManagement.getUserTxt((Integer) "John Doe");

Test 90: 
UserManagement.addSession((Socket_data) null);

Test 91: 
UserManagement.getSessionAt(123);

Test 92: 

Test 93: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

Test 94: 
UserManagement.getUserSQL((Integer) 123456789);

Test 95: 
UserManagement.online_db_final();

Test 96: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 97: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "jane.smith@example.com", "+1234567890", 'F');
((Auth_data)"Jane Smith").setClientType(3193);
UserManagement.addUser(addUserTXT);

Test 98: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

Test 99: 
UserManagement.toChangeAnEmail((Socket_data) null);

Test 100: 
UserManagement.tabHexToInt((byte[]) null);

Test 101: 
UserManagement.removeUser((Auth_data) null);

Test 102: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
boolean _boolean = false;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

Test 103: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
boolean _boolean = true;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

Test 104: 
UserManagement.levelIsValid(90, "Supervisor", 120, 150);

Test 105: 
UserManagement.levelIsValid(1769, "Rejected from server.", 1769, 1769);

Test 106: 
UserManagement.levelIsValid(1000, "<", 500, 2000);

Test 107: 
Integer integer = new Integer(90210);
UserManagement.remove_online_user(integer);

Test 108: 
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);

Test 109: 
UserManagement.charif_sendallwos(105, (int[]) null);

Test 110: 
UserManagement.charif_sendallwos(100, (byte[]) null);

Test 111: 
UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M');

Test 112: 
UserManagement.isGM((long) "gold member");

Test 113: 

Test 114: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);

Test 115: 
UserManagement.dynamicFailBanCheckTXT("a1b2c3d4e5f6g7h8i9j0kA");

Test 116: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) "Hello, World!", (String) null);
EvoSuiteRemoteAddress evoSuiteRemoteAddress = null;
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
String string = "This is a test message.";
UserManagement.dynamicFailBanCheckTXT(string);

Test 117: 
UserManagement.sendUserList((Socket_data) null);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);

Test 118: 
Integer integer = new Integer(10007);
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
((FastMap) integer).put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);

Test 119: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.receiveAllOnlinAccounts(socket_data, (byte[]) null);

Test 120: 
UserManagement.getAuth_dats();

Test 121: 
UserManagement.is_user_online((Integer) 1234567890);

Test 122: 
UserManagement.getUserTxt("John Doe");

Test 123: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 124: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(12345);
UserManagement.addUser(auth_data);

Test 125: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "web");
UserManagement.addUser(auth_data);

Test 126: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'D');
((Auth_data)"John Doe").setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1234);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(3);
UserManagement.addUser(auth_data);

Test 130: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "password123", 'a');
((Auth_data)"john").setLogin_id1(100);
UserManagement.addUser(addUserTXT);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(123456789);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe123", "doe123", 'D');
((Auth_data)"john").setLogin_id2(56789);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "password123!", "johndoe@gmail.com", 'a');
((Auth_data)"John Doe").setLogincount(4);
UserManagement.addUser(addUserTXT);

Test 134: 
Auth_data addUserTXT = UserManagement.addUserTXT("username", "password123", "user@example.com", 'M');
((Auth_data)"username").setLogincount(932);
UserManagement.addUser(addUserTXT);

Test 135: 
Auth_data auth_data = new Auth_data();
auth_data.setState((int) "active");
UserManagement.addUser(auth_data);

Test 136: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 137: 
UserManagement.getAccountID("John Doe");

Test 138: 
UserManagement.addUserTXT("John Doe", "johndoe@email.com", "+1234567890", 'A');
UserManagement.getAccountIdCount();

Test 139: 
UserManagement.addUserTXT("Jane Doe", "jdoe@example.com", "1234567890", 'A');
UserManagement.getAuth_dats();

Test 140: 
UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F');
UserManagement.getNBUser();

Test 141: 
byte[] byteArray = new byte[6];
UserManagement.tabHexToInt(byteArray);

Test 142: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 171;
byteArray[1] = (byte) 205;
UserManagement.tabHexToInt(byteArray);

Test 143: 
byte[] byteArray = new byte[7];
UserManagement.account_idToOffline((Socket_data) byteArray, (byte[]) null);

Test 144: 
UserManagement.account_idToOnline((Socket_data) null, (byte[]) null);

Test 145: 
UserManagement.addGM(5, 2);

Test 146: 
UserManagement.changeSex((Socket_data) null);

Test 147: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.changeSexChrif_changesex(socket_data);

Test 148: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

Test 149: 
UserManagement.connectionOfCharServer((Socket_data) null, (byte[]) null);

Test 150: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
UserManagement.connectionOfClientEncrypted((Socket_data) null);

Test 151: 
UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
String string = "1234567890";
UserManagement.dynamicFailBanCheckMySQL(string);

Test 152: 
UserManagement.emailLimitedTime((Socket_data) null);

Test 153: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
UserManagement.numberOfUser((Socket_data) fromClient, byteArray);

Test 154: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.receiveAccountReg2(socket_data, byteArray);

Test 155: 
UserManagement.requestAccountData((Socket_data) null, (byte[]) null);

Test 156: 
Socket_data socket_data = new Socket_data((Socket) "www.example.com");
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2(socket_data, byteArray);

Test 157: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.statusChange(socket_data, (byte[]) null);

Test 158: 
UserManagement.unban((Socket_data) null);


* Generated after the refinement and before minimization 159 tests with total length 361
* test suite isTestSuite: 159
Test 0: 
UserManagement.addAccountIdCount((int) (byte) (-51));
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount((-1));
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("<T DLRm\"I", "<T DLRm\"I", "<T DLRm\"I", 3435);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("k-,-Al3`.$!pMm");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
UserManagement.getUserTxt((Integer) null);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(423);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
UserManagement.getNBUser();
Test 18: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL(";4QIRQ\"Z1+(");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 19: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ')');
addUserTXT.setClientType(3193);
UserManagement.addUser(addUserTXT);
Test 20: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 22: 
byte[] byteArray = new byte[7];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 24: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[39];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 25: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[35];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
UserManagement.levelIsValid(84, "", 84, 84);
Test 27: 
UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769));
Test 28: 
UserManagement.levelIsValid(2308, ">#O", 2308, 2308);
Test 29: 
Integer integer = new Integer(2186);
UserManagement.remove_online_user(integer);
Test 30: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 31: 
int[] intArray = new int[7];
UserManagement.charif_sendallwos(105, intArray);
Test 32: 
byte[] byteArray = new byte[0];
UserManagement.charif_sendallwos(100, byteArray);
Test 33: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '>');
Test 34: 
UserManagement.isGM(1000);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);
Test 37: 
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");
Test 38: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".TF\"xS4!SB7I@v");
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("com.mysql.jdbc.exceptions.MySQLTransientConnectionException", 1043);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");
Test 39: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 40: 
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
Integer integer = new Integer(10007);
fastMap.put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);
Test 41: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 42: 
UserManagement.getAuth_dats();
Test 43: 
UserManagement.is_user_online((Integer) null);
Test 44: 
UserManagement.getUserTxt("Blob.2");
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(1150L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(3033);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-3562));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(3838);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-2261));
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(15);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data addUserTXT = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q');
addUserTXT.setLogin_id1(100);
UserManagement.addUser(addUserTXT);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((-3577));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setLogin_id2(31028);
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%');
addUserTXT.setLogincount((-414));
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M');
addUserTXT.setLogincount(932);
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setState(40);
UserManagement.addUser(auth_data);
Test 58: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 59: 
UserManagement.getAccountID((String) null);
Test 60: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`');
UserManagement.getAccountIdCount();
Test 61: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`');
UserManagement.getAuth_dats();
Test 62: 
UserManagement.addUserTXT("Blob.2", "Blob.2", "Blob.2", '`');
UserManagement.getNBUser();
Test 63: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)58;
UserManagement.tabHexToInt(byteArray);
Test 64: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)13;
UserManagement.tabHexToInt(byteArray);
Test 65: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
// Undeclared exception!
try { 
  UserManagement.addGM(5, (-614));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 71: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 77: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[6];
UserManagement.numberOfUser(socket_data, byteArray);
Test 78: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.requestAccountData((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 83: 
UserManagement.addAccountIdCount(999);

Test 84: 
UserManagement.setAccountIdCount(5);

Test 85: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

Test 86: 
UserManagement.toBecomeGM((Socket_data) null);

Test 87: 
UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435);

Test 88: 
UserManagement.getUserSQL("john.doe@email.com");

Test 89: 
UserManagement.getUserTxt((Integer) "John Doe");

Test 90: 
UserManagement.addSession((Socket_data) null);

Test 91: 
UserManagement.getSessionAt(123);

Test 92: 

Test 93: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

Test 94: 
UserManagement.getUserSQL((Integer) 123456789);

Test 95: 
UserManagement.online_db_final();

Test 96: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 97: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "jane.smith@example.com", "+1234567890", 'F');
((Auth_data)"Jane Smith").setClientType(3193);
UserManagement.addUser(addUserTXT);

Test 98: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

Test 99: 
UserManagement.toChangeAnEmail((Socket_data) null);

Test 100: 
UserManagement.tabHexToInt((byte[]) null);

Test 101: 
UserManagement.removeUser((Auth_data) null);

Test 102: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
boolean _boolean = false;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

Test 103: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
boolean _boolean = true;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

Test 104: 
UserManagement.levelIsValid(90, "Supervisor", 120, 150);

Test 105: 
UserManagement.levelIsValid(1769, "Rejected from server.", 1769, 1769);

Test 106: 
UserManagement.levelIsValid(1000, "<", 500, 2000);

Test 107: 
Integer integer = new Integer(90210);
UserManagement.remove_online_user(integer);

Test 108: 
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);
Integer integer = new Integer(0);
UserManagement.remove_online_user(integer);

Test 109: 
UserManagement.charif_sendallwos(105, (int[]) null);

Test 110: 
UserManagement.charif_sendallwos(100, (byte[]) null);

Test 111: 
UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M');

Test 112: 
UserManagement.isGM((long) "gold member");

Test 113: 

Test 114: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);

Test 115: 
UserManagement.dynamicFailBanCheckTXT("a1b2c3d4e5f6g7h8i9j0kA");

Test 116: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) "Hello, World!", (String) null);
EvoSuiteRemoteAddress evoSuiteRemoteAddress = null;
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
String string = "This is a test message.";
UserManagement.dynamicFailBanCheckTXT(string);

Test 117: 
UserManagement.sendUserList((Socket_data) null);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);
Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);

Test 118: 
Integer integer = new Integer(10007);
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
((FastMap) integer).put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);

Test 119: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.receiveAllOnlinAccounts(socket_data, (byte[]) null);

Test 120: 
UserManagement.getAuth_dats();

Test 121: 
UserManagement.is_user_online((Integer) 1234567890);

Test 122: 
UserManagement.getUserTxt("John Doe");

Test 123: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 124: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(12345);
UserManagement.addUser(auth_data);

Test 125: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "web");
UserManagement.addUser(auth_data);

Test 126: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'D');
((Auth_data)"John Doe").setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1234);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(3);
UserManagement.addUser(auth_data);

Test 130: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "password123", 'a');
((Auth_data)"john").setLogin_id1(100);
UserManagement.addUser(addUserTXT);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2(123456789);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe123", "doe123", 'D');
((Auth_data)"john").setLogin_id2(56789);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "password123!", "johndoe@gmail.com", 'a');
((Auth_data)"John Doe").setLogincount(4);
UserManagement.addUser(addUserTXT);

Test 134: 
Auth_data addUserTXT = UserManagement.addUserTXT("username", "password123", "user@example.com", 'M');
((Auth_data)"username").setLogincount(932);
UserManagement.addUser(addUserTXT);

Test 135: 
Auth_data auth_data = new Auth_data();
auth_data.setState((int) "active");
UserManagement.addUser(auth_data);

Test 136: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 137: 
UserManagement.getAccountID("John Doe");

Test 138: 
UserManagement.addUserTXT("John Doe", "johndoe@email.com", "+1234567890", 'A');
UserManagement.getAccountIdCount();

Test 139: 
UserManagement.addUserTXT("Jane Doe", "jdoe@example.com", "1234567890", 'A');
UserManagement.getAuth_dats();

Test 140: 
UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F');
UserManagement.getNBUser();

Test 141: 
byte[] byteArray = new byte[6];
UserManagement.tabHexToInt(byteArray);

Test 142: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 171;
byteArray[1] = (byte) 205;
UserManagement.tabHexToInt(byteArray);

Test 143: 
byte[] byteArray = new byte[7];
UserManagement.account_idToOffline((Socket_data) byteArray, (byte[]) null);

Test 144: 
UserManagement.account_idToOnline((Socket_data) null, (byte[]) null);

Test 145: 
UserManagement.addGM(5, 2);

Test 146: 
UserManagement.changeSex((Socket_data) null);

Test 147: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.changeSexChrif_changesex(socket_data);

Test 148: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

Test 149: 
UserManagement.connectionOfCharServer((Socket_data) null, (byte[]) null);

Test 150: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
UserManagement.connectionOfClientEncrypted((Socket_data) null);

Test 151: 
UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
String string = "1234567890";
UserManagement.dynamicFailBanCheckMySQL(string);

Test 152: 
UserManagement.emailLimitedTime((Socket_data) null);

Test 153: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
UserManagement.numberOfUser((Socket_data) fromClient, byteArray);

Test 154: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.receiveAccountReg2(socket_data, byteArray);

Test 155: 
UserManagement.requestAccountData((Socket_data) null, (byte[]) null);

Test 156: 
Socket_data socket_data = new Socket_data((Socket) "www.example.com");
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2(socket_data, byteArray);

Test 157: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.statusChange(socket_data, (byte[]) null);

Test 158: 
UserManagement.unban((Socket_data) null);


* Minimizing test suite
* test suite isTestSuite: 82
Test 0: 
UserManagement.addAccountIdCount(999);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(5);
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
UserManagement.toBecomeGM((Socket_data) null);
Test 6: 
UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("john.doe@email.com");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
UserManagement.getUserTxt((Integer) null);
Test 10: 
UserManagement.addSession((Socket_data) null);
Test 11: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(123);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
UserManagement.is_user_online((Integer) 1234567890);
Test 14: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 123456789);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
UserManagement.getNBSession();
Test 16: 
UserManagement.online_db_final();
Test 17: 
UserManagement.getNBUser();
Test 18: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 19: 
UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F');
UserManagement.getNBUser();
Test 20: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 22: 
byte[] byteArray = new byte[6];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 25: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[39];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[35];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 27: 
UserManagement.levelIsValid(1000, "<", 500, 2000);
Test 28: 
UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769));
Test 29: 
UserManagement.levelIsValid(90, "Supervisor", 120, 150);
Test 30: 
Integer integer = new Integer(90210);
UserManagement.remove_online_user(integer);
Test 31: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 32: 
UserManagement.charif_sendallwos(105, (int[]) null);
Test 33: 
UserManagement.charif_sendallwos(100, (byte[]) null);
Test 34: 
UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M');
Test 35: 
UserManagement.isGM(1000);
Test 36: 
UserManagement.getUserTxt("John Doe");
Test 37: 
UserManagement.getAccountIds();
Test 38: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.administationLogin(socket_data);
Test 39: 
UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");
Test 40: 
Auth_data auth_data = new Auth_data();
FastMap<Integer, Auth_data> fastMap = new FastMap<Integer, Auth_data>();
Integer integer = new Integer(10007);
fastMap.put(integer, auth_data);
UserManagement.setAuth_dats(fastMap);
UserManagement.getUserTxt(integer);
Test 41: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.receiveAllOnlinAccounts(socket_data, (byte[]) null);
Test 42: 
UserManagement.getAuth_dats();
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(1150L);
UserManagement.addUser(auth_data);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(12345);
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-3562));
UserManagement.addUser(auth_data);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ')');
addUserTXT.setClientType(3193);
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setConnect_until_time(16384L);
UserManagement.addUser(addUserTXT);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1234);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-2261));
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(15);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data addUserTXT = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q');
addUserTXT.setLogin_id1(100);
UserManagement.addUser(addUserTXT);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id2((-3577));
UserManagement.addUser(auth_data);
Test 53: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
addUserTXT.setLogin_id2(31028);
UserManagement.addUser(addUserTXT);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%');
addUserTXT.setLogincount((-414));
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M');
addUserTXT.setLogincount(932);
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setState(40);
UserManagement.addUser(auth_data);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 58: 
UserManagement.getAccountID((String) null);
Test 59: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`');
UserManagement.getAccountIdCount();
Test 60: 
UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`');
UserManagement.getAuth_dats();
Test 61: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)58;
UserManagement.tabHexToInt(byteArray);
Test 62: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)13;
UserManagement.tabHexToInt(byteArray);
Test 63: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 64: 
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 65: 
// Undeclared exception!
try { 
  UserManagement.addGM(5, (-614));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 66: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[6];
UserManagement.numberOfUser(socket_data, byteArray);
Test 76: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 77: 
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.requestAccountData((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 78: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 80: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, (byte[]) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 17%
* Total number of goals: 329
* Number of covered goals: 55
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 32%
* Total number of goals: 711
* Number of covered goals: 225
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 423
* Number of covered goals: 83
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 17%
* Total number of goals: 329
* Number of covered goals: 55
* Generated 82 tests with total length 186
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount(999);

** It was a parseable test case! 
refined test name is: testAddAccountIdCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBGM = UserManagement.getNBGM();
assertEquals(0, nBGM);


** It was a parseable test case! 
refined test name is: testGetNBGMMaximumValueReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.setAccountIdCount(5);

** It was a parseable test case! 
refined test name is: testSetAccountIdCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.debugXML();

** It was a parseable test case! 
refined test name is: testDebugXML
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
UserManagement.unLogServer(arg0);
assertNull(arg0.getType());


** It was a parseable test case! 
refined test name is: testUnLogServerSetsSocketDataTypeToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.toBecomeGM((Socket_data) null);

** It was a parseable test case! 
refined test name is: testToBecomeGMWithNullData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserSQL = UserManagement.addUserSQL("John Doe", "john.doe@email.com", "1234567890", 3435);
assertNull(addUserSQL);


** It was a parseable test case! 
refined test name is: testAddUserSQLValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int accountIdCount = UserManagement.getAccountIdCount();
assertEquals(0, accountIdCount);


** It was a parseable test case! 
refined test name is: testGetAccountIdCountForNonExistentUser
* Compiling Tests
refined test name is: testGetAccountIdCountForNonExistentUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL("john.doe@email.com");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testExceptionThrownWhenPassingNullValueAsParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) null);
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtWithNullIdReturnsNullAuthData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
refined test name is: testAddSessionNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getSessionAt(123);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}


** It was a parseable test case! 
refined test name is: testGetSessionAtInvalidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
refined test name is: testAddAccountIdCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean is_user_online = UserManagement.is_user_online((Integer) 1234567890);
assertFalse(is_user_online);


** It was a parseable test case! 
refined test name is: testIsUserOffline
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 123456789);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBSession = UserManagement.getNBSession();
assertEquals(0, nBSession);


** It was a parseable test case! 
refined test name is: testNumberOfSessionsInitiallyZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int online_db_final = UserManagement.online_db_final();
assertEquals(0, online_db_final);


** It was a parseable test case! 
refined test name is: testOnlineDbFinalInitializedCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBUser = UserManagement.getNBUser();
assertEquals(0, nBUser);


** It was a parseable test case! 
refined test name is: testGetNBUserWhenNoUsersExist
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}


** It was a parseable test case! 
refined test name is: testAddIpToBanListMySQLThrowsNumberFormatException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserTXT = UserManagement.addUserTXT("Alice Brown", "abrown@example.com", "345 Maple St.", 'F');
assertEquals(0, (int)addUserTXT.getAccount_id());
assertEquals("-", addUserTXT.getEmail());
assertEquals("Alice Brown", addUserTXT.getUserid());
assertEquals(0, addUserTXT.getLogincount());
assertEquals('F', addUserTXT.getSex());
assertEquals(0, addUserTXT.getState());

int nBUser = UserManagement.getNBUser();
assertEquals(1, nBUser);


** It was a parseable test case! 
refined test name is: testAddUserTXT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[6];
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals(0, tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntWithEmptyInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
Auth_data removeUser = UserManagement.removeUser(arg0);
assertNull(removeUser);


** It was a parseable test case! 
refined test name is: testRemoveUserWhenValidArgumentsReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
int add_online_user = UserManagement.add_online_user(arg0);
assertEquals(0, add_online_user);


** It was a parseable test case! 
refined test name is: testAddOnlineUsersuccess
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
byte[] arg1 = new byte[39];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(arg0, arg1, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfClientWithEmptySocketData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
byte[] arg1 = new byte[35];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(arg0, arg1, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfClientnullSocketbyteArrayLength35
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(1000, "<", 500, 2000);
assertEquals(99, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidGivenValuesLessThan500Returns99
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid((-1769), "Rejected from server.", (-1769), (-1769));
assertEquals((-1), levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidNegativeNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(90, "Supervisor", 120, 150);
assertEquals(90, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidreturnsCorrectLevelForValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(90210);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUserGivenValidArgumentReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(99);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUserByIntegerArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int charif_sendallwos = UserManagement.charif_sendallwos(105, (int[]) null);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testCharifSendallwosWithNullSecondArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int charif_sendallwos = UserManagement.charif_sendallwos(100, (byte[]) null);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testCharifSendallwosZeroBytesSent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserTXT = UserManagement.addUserTXT("john.doe@example.com", "John Smith", "johndoe@example.com", 'M');
assertEquals(0, (int)addUserTXT.getAccount_id());
assertEquals(0, addUserTXT.getState());
assertEquals(0, addUserTXT.getLogincount());
assertNotNull(addUserTXT);
assertEquals('M', addUserTXT.getSex());


** It was a parseable test case! 
refined test name is: testAddUserTXT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int gM = UserManagement.isGM(1000);
assertEquals((-1), gM);


** It was a parseable test case! 
refined test name is: testIsGMReturnsNegativeOneForInvalidUserType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt("John Doe");
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtReturnsNullForInvalidUsername
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastTable<Integer> accountIds = UserManagement.getAccountIds();
assertEquals(0, accountIds.size());


** It was a parseable test case! 
refined test name is: testGetEmptyListOfAccountIdsWhenNoUsersArePresent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.dynamicFailBanCheckTXT("]Ds-]SfPE(Gs)z");

** It was a parseable test case! 
refined test name is: testDynamicFailBanCheck
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
UserManagement.receiveAllOnlinAccounts(arg0, (byte[]) null);
assertEquals(0L, arg0.scheduledExecutionTime());


** It was a parseable test case! 
refined test name is: testReceiveAllOnlinAccountsNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
assertTrue(auth_dats.isEmpty());


** It was a parseable test case! 
refined test name is: testFastMapCreationAndInitializationWithNoElements
* Compiling Tests
refined test name is: testFastMapCreationAndInitializationWithNoElements
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setBan_until_time(1150L);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals((-1), addUser.getCharserver());


** It was a parseable test case! 
refined test name is: testAddUserWithBanUntilTimeShouldSetCorrectValues
* Compiling Tests
refined test name is: testAddUserWithBanUntilTimeShouldSetCorrectValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setCharserver(12345);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getClientType());


** It was a parseable test case! 
refined test name is: testAddUserValidCharserver
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setClientType((-3562));
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getVersion());


** It was a parseable test case! 
refined test name is: testAddUserWithValidArgs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("", "", "", ')');
assertNotNull(arg0);

arg0.setClientType(3193);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(')', addUser.getSex());
assertEquals(0, addUser.getState());
assertEquals(0, addUser.getLogincount());
assertEquals("-", addUser.getEmail());
assertEquals(0, (int)addUser.getAccount_id());


** It was a parseable test case! 
refined test name is: testAddUserWithValidParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
arg0.setConnect_until_time(16384L);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, (int)addUser.getAccount_id());
assertEquals("-", addUser.getEmail());
assertEquals(0, addUser.getLogincount());
assertEquals(0, addUser.getState());
assertEquals('D', addUser.getSex());


** It was a parseable test case! 
refined test name is: testAddUserValidInputReturnsCorrectValues
* Compiling Tests
refined test name is: testAddUservalidInputsuccess
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setDelflag(1234);
Auth_data addUser = UserManagement.addUser(arg0);
assertNull(addUser.getLast_ip());


** It was a parseable test case! 
refined test name is: testAddUserWithDelflagSetsLastIpToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setLevel((-2261));
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getLogin_id2());


** It was a parseable test case! 
refined test name is: testAddUserWithNegativeLevel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setLevel(15);
Auth_data addUser = UserManagement.addUser(arg0);
assertFalse(addUser.isResetLogincoun());


** It was a parseable test case! 
refined test name is: testAddUserWithLevel15
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("k{", "k{", "cCMdSk%p<#d", 'q');
arg0.setLogin_id1(100);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals("k{", addUser.getUserid());
assertEquals(0, addUser.getLogincount());
assertEquals('q', addUser.getSex());
assertEquals(0, (int)addUser.getAccount_id());
assertEquals("-", addUser.getEmail());
assertEquals("k{", addUser.getPass());
assertEquals(0, addUser.getState());


** It was a parseable test case! 
refined test name is: testGetUserByIDAndEmailValidInput
* Compiling Tests
refined test name is: testGetUserByIDAndEmail
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setLogin_id2((-3577));
Auth_data addUser = UserManagement.addUser(arg0);
assertSame(arg0, addUser);


** It was a parseable test case! 
refined test name is: testAddUserWithNegativeLoginId2
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'D');
arg0.setLogin_id2(31028);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getLogincount());
assertEquals('D', addUser.getSex());
assertEquals(0, (int)addUser.getAccount_id());
assertEquals("-", addUser.getEmail());
assertEquals(0, addUser.getState());


** It was a parseable test case! 
refined test name is: testAddValidUserWithDefaultValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("", "%!!Og%-@<*HT?k", "9'gH);G", '%');
assertEquals(0, arg0.getLogincount());

arg0.setLogincount((-414));
UserManagement.addUser(arg0);
assertEquals(0, (int)arg0.getAccount_id());


** It was a parseable test case! 
refined test name is: testSetLoginCountNegativeValueSetsToZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("y5W}':-(zOzq", "y5W}':-(zOzq", "y5W}':-(zOzq", 'M');
assertEquals(0, arg0.getLogincount());

arg0.setLogincount(932);
UserManagement.addUser(arg0);
assertEquals("-", arg0.getEmail());


** It was a parseable test case! 
refined test name is: testAddUserTXT
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setState(40);
Auth_data addUser = UserManagement.addUser(arg0);
assertEquals(0, addUser.getVersion());


** It was a parseable test case! 
refined test name is: testAddNewUserWithState40
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
arg0.setResetLogincoun(true);
Auth_data addUser = UserManagement.addUser(arg0);
assertNull(addUser.getPass());


** It was a parseable test case! 
refined test name is: testAddUserWithResetLoginCountTruepasswordIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer accountID = UserManagement.getAccountID((String) null);
assertEquals(0, (int)accountID);


** It was a parseable test case! 
refined test name is: testGetAccountIDWithNullInputParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserTXT = UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", "'~2Yr=1T\"BZRF.ec", '`');
assertEquals('`', addUserTXT.getSex());
assertEquals(0, addUserTXT.getState());
assertEquals(0, addUserTXT.getLogincount());
assertEquals(0, (int)addUserTXT.getAccount_id());
assertEquals("-", addUserTXT.getEmail());

int accountIdCount = UserManagement.getAccountIdCount();
assertEquals(1, accountIdCount);


** It was a parseable test case! 
refined test name is: testAddUserWithValidInputSuccessful
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addUserTXT("'~2Yr=1T\"BZRF.ec", ">w8r(+-)N'?c <", ">w8r(+-)N'?c <", '`');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
assertFalse(auth_dats.isShared());


** It was a parseable test case! 
refined test name is: testAddUserTXTWithValidInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[6];
arg0[5] = (byte)58;
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals((-58), tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[2];
arg0[1] = (byte)13;
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals(3328, tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntValidInputExpectedOutput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[7];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testAccountIdToOnlineNullSocketData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.addGM(5, (-614));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testAddNewGMWithInvalidUsernameThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
byte[] arg1 = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(arg0, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testCharServerToAuthentifyWithNullSocketDataObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
byte[] arg1 = new byte[8];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer(arg0, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfCharServerWithInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("f,k`Bq8*V`GLE");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testDynamicFailBanCheckMalformedInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[9];
// Undeclared exception!
try { 
  UserManagement.requestAccountData((Socket_data) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testRequestAccountDataWithNullSocketData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
byte[] arg1 = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2(arg0, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testRequestAccountReg2withNullSocket
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}


** It was a parseable test case! 
refined test name is: testSendUserListthrowsExceptionForNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:28.659 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:28.719 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:28.922 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:28.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:29.182 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:29.185 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:29.427 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:29.434 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:29.678 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:29.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:29.933 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:29.935 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:30.193 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:30.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:10:30.426 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:30.431 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:30.702 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:30.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:30.906 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:30.908 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:31.092 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:31.098 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
[MASTER] 07:10:31.379 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:31.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:31.559 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:31.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:31.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:31.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:32.008 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:32.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:32.296 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:32.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:32.486 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:32.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:32.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:32.738 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:32.954 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:32.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:33.127 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:33.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:33.351 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:33.356 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:33.488 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:33.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:33.728 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:33.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:33.878 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:33.882 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:34.112 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:34.116 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:34.369 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:34.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:34.586 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:34.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:34.851 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:34.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:35.079 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:35.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:35.354 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:35.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:35.553 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:35.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:35.840 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:35.847 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:36.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:36.189 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:36.416 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:36.422 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:36.726 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:36.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:36.979 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:36.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:37.314 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:37.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:37.593 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:37.599 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:10:37.912 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:37.919 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:10:38.173 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:38.191 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:38.493 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:38.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:38.748 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:38.754 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:39.061 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:39.069 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:10:39.693 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:39.696 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:39.878 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:39.881 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:40.141 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:40.147 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:40.324 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:40.331 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:10:40.600 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:40.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:40.742 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:40.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:40.850 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:40.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
[MASTER] 07:10:41.113 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:41.120 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:41.351 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:41.354 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:41.620 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:41.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:41.839 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:41.845 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:42.091 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:42.097 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:42.267 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:42.270 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:42.476 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:42.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:42.726 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:42.742 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:42.958 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:42.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:43.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:43.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:43.395 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:43.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:43.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:43.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:43.801 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:43.807 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:44.008 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:44.013 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:44.144 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:44.150 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
[MASTER] 07:10:44.345 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:44.351 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
[MASTER] 07:10:44.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:44.649 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:10:44.854 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:44.861 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 38 called: 1 to improve: false
** Write a test suite: 39 called: 2 to improve: false
** Write a test suite: 43 called: 3 to improve: false
** Write a test suite: 47 called: 4 to improve: false
[MASTER] 07:10:46.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:46.245 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 20 called: 0 to improve: false
** Write a test suite: 24 called: 1 to improve: false
** Write a test suite: 28 called: 2 to improve: false
** Write a test suite: 29 called: 3 to improve: false
** Write a test suite: 60 called: 4 to improve: false
[MASTER] 07:10:47.445 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar7648658219451738919.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:10:47.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7648658219451738919.jar
* Writing tests to file
* Writing JUnit test case 'UserManagement_ESTest' to evosuite-tests
** Write a test suite: 20 called: 0 to improve: false
** Write a test suite: 24 called: 1 to improve: false
** Write a test suite: 28 called: 2 to improve: false
** Write a test suite: 29 called: 3 to improve: false
** Write a test suite: 60 called: 4 to improve: false
* Done!

* Computation finished
