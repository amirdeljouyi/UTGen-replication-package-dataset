* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.utiles.ConfigurationManagement
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 7378
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:12:01.093 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:12:01.103 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:12:01.107 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:12:01.228 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.javathena.utiles.ConfigurationManagement
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 838
* Using seed 1710400310451
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 354 / 838
[Progress:>                             0%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                54%][Progress:=>                            4%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:=====>                        19%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:===================>               56%][Progress:======>                       21%] [Cov:===================>               56%][Progress:======>                       22%] [Cov:===================>               56%][Progress:======>                       22%] [Cov:===================>               57%][Progress:======>                       22%] [Cov:===================>               57%][Progress:======>                       22%] [Cov:===================>               57%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       22%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      24%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   35%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  37%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:==============>               49%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              50%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              52%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:===============>              53%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             54%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:================>             56%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            57%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            58%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:=================>            59%] [Cov:====================>              58%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          64%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          65%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:===================>          66%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         67%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:====================>         69%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        72%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       74%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      77%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      78%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:=======================>      79%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     80%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     81%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     82%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:========================>     83%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    84%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    85%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:=========================>    86%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   87%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   88%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:==========================>   89%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  90%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  91%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  92%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:===========================>  93%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 94%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 95%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:============================> 96%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>97%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>98%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:=============================>99%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%]
* Search finished after 202s and 1403 generations, 283863 statements, best individual has fitness: 394.0
* Generated before the refinement 79 tests with total length 122
statement is: getChar_txt()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String char_txt = ConfigurationManagement.getChar_txt()
test data is: ConfigurationManagement.getChar_txt();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before
        int age = 25;
        String name = "John";
        // After
        int age = 35;
        String name = "Jane";
    }
}
statement is: // Before
int age = 25, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After
int age = 35, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "Jane", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "John"
* this is vulnerable: int _int = 35
* this is vulnerable: String string = "Jane"
TestCase is: int _int = 25;
String string = "John";
int _int = 35;
String string = "Jane";

statement is: getMax_connect_user()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String max_connect_user = ConfigurationManagement.getMax_connect_user()
test data is: ConfigurationManagement.getMax_connect_user();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int maxConnectUser = 50;
        String userName = "Jane Smith";
        char gender = 'F';
        double height = 168.2;
        boolean isAdmin = false;
    }
}
statement is: int maxConnectUser = 50, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userName = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'F', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 168.2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isAdmin = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 50
* this is vulnerable: String string = "Jane Smith"
* this is vulnerable: char _char = 'F'
* this is vulnerable: double _double = 168.2
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 50;
String string = "Jane Smith";
char _char = 'F';
double _double = 168.2;
boolean _boolean = false;

statement is: addNum_regs()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addNum_regs()
test data is: ConfigurationManagement.addNum_regs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.addNum_regs(5);
    }
}
statement is: ConfigurationManagement.addNum_regs(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.addNum_regs(5) target is: ConfigurationManagement method is: addNum_regs(int)
statement is: getSubneti()[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] subneti = ConfigurationManagement.getSubneti()
test data is: ConfigurationManagement.getSubneti();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        subnet1 = "192.168.0.0/24";
        subnet2 = "192.168.1.0/24";
        subnet3 = "192.168.2.0/24";
        subnet4 = "192.168.3.0/24";
    }
}
statement is: subnet1 = "192.168.0.0/24", class spoon.support.reflect.code.CtAssignmentImpl
statement is: subnet2 = "192.168.1.0/24", class spoon.support.reflect.code.CtAssignmentImpl
statement is: subnet3 = "192.168.2.0/24", class spoon.support.reflect.code.CtAssignmentImpl
statement is: subnet4 = "192.168.3.0/24", class spoon.support.reflect.code.CtAssignmentImpl
statement is: ACO aCO = ACO.DENY_ALLOW type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.DENY_ALLOW
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: display_conf_warnings()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.display_conf_warnings()
test data is: ACO aCO = ACO.DENY_ALLOW;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ACO aCO = ACO.DENY_ALLOW;
        ConfigurationManagement.setAccess_order(aCO);
        ConfigurationManagement.display_conf_warnings();
        // Replace the primitive values and strings with more descriptive examples
        int userId = 123456789;
        String userName = "John Doe";
        ACO accessOrder = ACO.DENY_ALLOW;
        ConfigurationManagement.setAccess_order(accessOrder);
        ConfigurationManagement.display_conf_warnings();
        // Additional test data
        List<String> ipAddresses = Arrays.asList("192.168.1.1", "10.0.0.1");
        for (String ipAddress : ipAddresses) {
            ConfigurationManagement.addIp_address(ipAddress);
        }
    }
}
statement is: ACO aCO = ACO.DENY_ALLOW, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.DENY_ALLOW is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.display_conf_warnings(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.display_conf_warnings() target is: ConfigurationManagement method is: display_conf_warnings()
Matched Method is: display_conf_warnings()V
statement is: // Replace the primitive values and strings with more descriptive examples
int userId = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userName = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ACO accessOrder = ACO.DENY_ALLOW, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.DENY_ALLOW is ACO
statement is: ConfigurationManagement.setAccess_order(accessOrder), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(accessOrder) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.display_conf_warnings(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.display_conf_warnings() target is: ConfigurationManagement method is: display_conf_warnings()
Matched Method is: display_conf_warnings()V
statement is: // Additional test data
List<String> ipAddresses = Arrays.asList("192.168.1.1", "10.0.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList("192.168.1.1", "10.0.0.1") target is: Arrays method is: asList(java.lang.String,java.lang.String)
statement is: for (String ipAddress : ipAddresses) {
    ConfigurationManagement.addIp_address(ipAddress);
}, class spoon.support.reflect.code.CtForEachImpl
* this is vulnerable: int _int = 123456789
* this is vulnerable: String string = "John Doe"
TestCase is: ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
int _int = 123456789;
String string = "John Doe";
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

statement is: getFriends_txt()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String friends_txt = ConfigurationManagement.getFriends_txt()
test data is: ConfigurationManagement.getFriends_txt();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for testing the ConfigurationManagement.getFriends_txt() method
        String[] expectedFriendList = new String[]{ "John", "Jane", "Bob", "Alice" };
        int[] expectedFollowerCount = new int[]{ 20, 15, 30, 25 };
    }
}
statement is: // Test data for testing the ConfigurationManagement.getFriends_txt() method
String[] expectedFriendList = new String[]{ "John", "Jane", "Bob", "Alice" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] expectedFollowerCount = new int[]{ 20, 15, 30, 25 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: getChar_id_count()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int char_id_count = ConfigurationManagement.getChar_id_count()
test data is: ConfigurationManagement.getChar_id_count();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int expectedResult = 50;
        String userName = "Jane Smith";
    }
}
statement is: int expectedResult = 50, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userName = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 50
* this is vulnerable: String string = "Jane Smith"
TestCase is: int _int = 50;
String string = "Jane Smith";

statement is: getAccess_allownum()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access_allownum = ConfigurationManagement.getAccess_allownum()
test data is: ConfigurationManagement.getAccess_allownum();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed the value of 'access_allownum' to a more descriptive value
        int accessAllowNum = 10;
        // Changed the value of 'strAccessType' to a more descriptive value
        String strAccessType = "ADMIN";
        // Changed the value of 'isAccessAllowed' to a more descriptive value
        boolean isAccessAllowed = true;
    }
}
statement is: // Changed the value of 'access_allownum' to a more descriptive value
int accessAllowNum = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Changed the value of 'strAccessType' to a more descriptive value
String strAccessType = "ADMIN", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Changed the value of 'isAccessAllowed' to a more descriptive value
boolean isAccessAllowed = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "ADMIN"
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 10;
String string = "ADMIN";
boolean _boolean = true;

statement is: getGMMax()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gMMax = ConfigurationManagement.getGMMax()
test data is: ConfigurationManagement.getGMMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int maximumGamesPerMonth = 10;
        String playerName = "Jane Smith";
        List<Player> players = new ArrayList<>();
        players.add(new Player("John Doe", 8));
        players.add(new Player("Jane Doe", 4));
    }
}
statement is: int maximumGamesPerMonth = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String playerName = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: List<Player> players = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: players.add(new Player("John Doe", 8)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: players.add(new Player("John Doe", 8)) target is: players method is: add(Player)
statement is: players.add(new Player("Jane Doe", 4)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: players.add(new Player("Jane Doe", 4)) target is: players method is: add(Player)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Jane Smith"
TestCase is: int _int = 10;
String string = "Jane Smith";

statement is: getAuth_before_save_file()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_before_save_file = ConfigurationManagement.getAuth_before_save_file()
test data is: ConfigurationManagement.getAuth_before_save_file();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getAuthBeforeSaveFile();
    }
}
statement is: ConfigurationManagement.getAuthBeforeSaveFile(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAuthBeforeSaveFile() target is: ConfigurationManagement method is: getAuthBeforeSaveFile()
statement is: isLogin_ip_set_()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean login_ip_set_ = ConfigurationManagement.isLogin_ip_set_()
test data is: ConfigurationManagement.isLogin_ip_set_();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.isLogin_ip_set_(true);// true indicates that the login IP address is set }}

    }
}
statement is: ConfigurationManagement.isLogin_ip_set_(true)// true indicates that the login IP address is set }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.isLogin_ip_set_(true)// true indicates that the login IP address is set }}
 target is: ConfigurationManagement method is: isLogin_ip_set_(boolean)
statement is: setConsole_silent(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setConsole_silent(true)
statement is: isConsole_silent()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean console_silent = ConfigurationManagement.isConsole_silent()
test data is: ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Improved code;
        ConfigurationManagement.setConsole_silent(true);// Set console silent to true

        ConfigurationManagement.isConsole_silent();// Check if console is silent

        2.0 = $missing$;
        Description : The = $missing$;
        test data;
        been improved;
        changing the;
        values and;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        The code;
        has been;
        to reflect;
        more descriptive;
        representative situation;
        tested = $missing$;
    }
}
statement is: Improved code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: ConfigurationManagement.setConsole_silent(true)// Set console silent to true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setConsole_silent(true)// Set console silent to true
 target is: ConfigurationManagement method is: setConsole_silent(boolean)
Matched Method is: setConsole_silent(Z)V
statement is: ConfigurationManagement.isConsole_silent()// Check if console is silent
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.isConsole_silent()// Check if console is silent
 target is: ConfigurationManagement method is: isConsole_silent()
Matched Method is: isConsole_silent()Z
statement is: 2.0 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Description : The = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: test data, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: been improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: changing the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: values and, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: The code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: has been, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to reflect, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: more descriptive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: representative situation, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: tested = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: boolean _boolean = true;
ConfigurationManagement.setConsole_silent(_boolean);
ConfigurationManagement.isConsole_silent();

statement is: getStartLimitedTime()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long startLimitedTime = ConfigurationManagement.getStartLimitedTime()
test data is: ConfigurationManagement.getStartLimitedTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String startTime = "8:30 AM";
        String endTime = "5 PM";
        String dayOfWeek = "monday";
        String duration = "30 minutes";
        ConfigurationManagement.getStartLimitedTime();
    }
}
statement is: String startTime = "8:30 AM", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String endTime = "5 PM", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String dayOfWeek = "monday", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String duration = "30 minutes", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ConfigurationManagement.getStartLimitedTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getStartLimitedTime() target is: ConfigurationManagement method is: getStartLimitedTime()
Matched Method is: getStartLimitedTime()J
* this is vulnerable: String string = "8:30 AM"
* this is vulnerable: String string = "5 PM"
* this is vulnerable: String string = "monday"
* this is vulnerable: String string = "30 minutes"
TestCase is: String string = "8:30 AM";
String string = "5 PM";
String string = "monday";
String string = "30 minutes";
ConfigurationManagement.getStartLimitedTime();

statement is: getAutosave_time()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int autosave_time = ConfigurationManagement.getAutosave_time()
test data is: ConfigurationManagement.getAutosave_time();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return 15;// minutes }}

    }
}
statement is: return 15// minutes }}
, class spoon.support.reflect.code.CtReturnImpl
statement is: getAccess_allow()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String access_allow = ConfigurationManagement.getAccess_allow()
test data is: ConfigurationManagement.getAccess_allow();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getAccess_allow();
        // Improved test data
        int[] allowedIPs = new int[]{ 192, 168, 0, 1 };
        String[] allowedProtocols = new String[]{ "TCP", "UDP", "ICMP" };
        boolean allowAllProtocols = true;
    }
}
statement is: ConfigurationManagement.getAccess_allow(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allow() target is: ConfigurationManagement method is: getAccess_allow()
Matched Method is: getAccess_allow()Ljava/lang/String;
statement is: // Improved test data
int[] allowedIPs = new int[]{ 192, 168, 0, 1 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] allowedProtocols = new String[]{ "TCP", "UDP", "ICMP" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean allowAllProtocols = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: boolean _boolean = true
TestCase is: ConfigurationManagement.getAccess_allow();
boolean _boolean = true;

statement is: setTimestamp_format(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setTimestamp_format("EARTH")
test data is: ConfigurationManagement.setTimestamp_format("EARTH");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setTimestamp_format("Eastern Standard Time");
    }
}
statement is: ConfigurationManagement.setTimestamp_format("Eastern Standard Time"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setTimestamp_format("Eastern Standard Time") target is: ConfigurationManagement method is: setTimestamp_format(java.lang.String)
Matched Method is: setTimestamp_format(Ljava/lang/String;)V
TestCase is: String string = "Eastern Standard Time";
ConfigurationManagement.setTimestamp_format(string);

statement is: getNew_reg_tick()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long new_reg_tick = ConfigurationManagement.getNew_reg_tick()
test data is: ConfigurationManagement.getNew_reg_tick();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before:
        int tick = ConfigurationManagement.getNew_reg_tick();
        // After:
        int tick = 1234567890;// A random but valid tick value }}

    }
}
statement is: // Before:
int tick = ConfigurationManagement.getNew_reg_tick(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNew_reg_tick() target is: ConfigurationManagement method is: getNew_reg_tick()
Matched Method is: getNew_reg_tick()J
statement is: // After:
int tick = 1234567890// A random but valid tick value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1234567890
TestCase is: ConfigurationManagement.getNew_reg_tick();
int _int = 1234567890;

statement is: getAccess_order()Lorg/javathena/core/utiles/ACO; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO access_order = ConfigurationManagement.getAccess_order()
test data is: ConfigurationManagement.getAccess_order();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getAccess_order("High");
    }
}
statement is: ConfigurationManagement.getAccess_order("High"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_order("High") target is: ConfigurationManagement method is: getAccess_order(java.lang.String)
statement is: lesslessAuth_before_save_file()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int lesslessAuth_before_save_file = ConfigurationManagement.lesslessAuth_before_save_file()
statement is: getAuth_before_save_file()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_before_save_file = ConfigurationManagement.getAuth_before_save_file()
test data is: ConfigurationManagement.lesslessAuth_before_save_file();
ConfigurationManagement.getAuth_before_save_file();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This test data is not descriptive and representative of the situation being tested.
        String fileName = "test.txt";
        int fileSize = 1024;
        // Improved test data
        String fileName = "largeFile.dat";
        int fileSize = (10 * 1024) * 1024;// 10 MB }}

    }
}
statement is: // This test data is not descriptive and representative of the situation being tested.
String fileName = "test.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int fileSize = 1024, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Improved test data
String fileName = "largeFile.dat", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int fileSize = (10 * 1024) * 1024// 10 MB }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: (10 * 1024) * 1024
* this is vulnerable: String string = "test.txt"
* this is vulnerable: int _int = 1024
* this is vulnerable: String string = "largeFile.dat"
TestCase is: String string = "test.txt";
int _int = 1024;
String string = "largeFile.dat";

statement is: getSubnetmaski()[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] subnetmaski = ConfigurationManagement.getSubnetmaski()
test data is: ConfigurationManagement.getSubnetmaski();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getSubnetmask();
    }
}
statement is: ConfigurationManagement.getSubnetmask(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubnetmask() target is: ConfigurationManagement method is: getSubnetmask()
statement is: getTimestamp_format()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String timestamp_format = ConfigurationManagement.getTimestamp_format()
test data is: ConfigurationManagement.getTimestamp_format();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getTimestamp_format();
        // Improved test data
        String timestampFormat = "yyyy-MM-dd HH:mm:ss";
        assertEquals(timestampFormat, ConfigurationManagement.getTimestamp_format());
    }
}
statement is: ConfigurationManagement.getTimestamp_format(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getTimestamp_format() target is: ConfigurationManagement method is: getTimestamp_format()
Matched Method is: getTimestamp_format()Ljava/lang/String;
statement is: // Improved test data
String timestampFormat = "yyyy-MM-dd HH:mm:ss", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(timestampFormat, ConfigurationManagement.getTimestamp_format()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(timestampFormat, ConfigurationManagement.getTimestamp_format()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "yyyy-MM-dd HH:mm:ss"
TestCase is: ConfigurationManagement.getTimestamp_format();
String string = "yyyy-MM-dd HH:mm:ss";

statement is: setNew_reg_tick(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setNew_reg_tick((-56L))
statement is: getNew_reg_tick()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long new_reg_tick = ConfigurationManagement.getNew_reg_tick()
test data is: ConfigurationManagement.setNew_reg_tick((-56L));
ConfigurationManagement.getNew_reg_tick();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setNew_reg_tick(-21L);
        ConfigurationManagement.getNew_reg_tick();
    }
}
statement is: ConfigurationManagement.setNew_reg_tick(-21L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNew_reg_tick(-21L) target is: ConfigurationManagement method is: setNew_reg_tick(long)
Matched Method is: setNew_reg_tick(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getNew_reg_tick(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNew_reg_tick() target is: ConfigurationManagement method is: getNew_reg_tick()
Matched Method is: getNew_reg_tick()J
TestCase is: long _long = null;
ConfigurationManagement.setNew_reg_tick(_long);
ConfigurationManagement.getNew_reg_tick();

statement is: getAutosave_interval()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int autosave_interval = ConfigurationManagement.getAutosave_interval()
test data is: ConfigurationManagement.getAutosave_interval();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: addGMMax()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addGMMax()
test data is: ConfigurationManagement.addGMMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Example test data for a method that adds a maximum value to the GM configuration
        int maxValue = 10;
        String configName = "GM_MAX";
        boolean expectedResult = true;
    }
}
statement is: // Example test data for a method that adds a maximum value to the GM configuration
int maxValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String configName = "GM_MAX", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedResult = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "GM_MAX"
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 10;
String string = "GM_MAX";
boolean _boolean = true;

statement is: setStartLimitedTime(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setStartLimitedTime(718L)
test data is: ConfigurationManagement.setStartLimitedTime(718L);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setStartLimitedTime(2019L);
    }
}
statement is: ConfigurationManagement.setStartLimitedTime(2019L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setStartLimitedTime(2019L) target is: ConfigurationManagement method is: setStartLimitedTime(long)
Matched Method is: setStartLimitedTime(J)V
TestCase is: long _long = 2019L;
ConfigurationManagement.setStartLimitedTime(_long);

statement is: getAccess_denynum()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access_denynum = ConfigurationManagement.getAccess_denynum()
test data is: ConfigurationManagement.getAccess_denynum();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getAccess_denynum("admin");
    }
}
statement is: ConfigurationManagement.getAccess_denynum("admin"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_denynum("admin") target is: ConfigurationManagement method is: getAccess_denynum(java.lang.String)
statement is: setLogin_ip_str(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setLogin_ip_str("use_MD5_passwords")
test data is: ConfigurationManagement.setLogin_ip_str("use_MD5_passwords");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setLogin_ip_str("192.168.0.1");
    }
}
statement is: ConfigurationManagement.setLogin_ip_str("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setLogin_ip_str("192.168.0.1") target is: ConfigurationManagement method is: setLogin_ip_str(java.lang.String)
Matched Method is: setLogin_ip_str(Ljava/lang/String;)V
TestCase is: String string = "192.168.0.1";
ConfigurationManagement.setLogin_ip_str(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@bac92949 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[9]
statement is: setSubneti([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setSubneti(arg0)
statement is: login_config_readTXT(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int login_config_readTXT = ConfigurationManagement.login_config_readTXT("F")
test data is: int[] intArray = new int[9];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.login_config_readTXT("F");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        ConfigurationManagement.setSubneti(intArray);
        ConfigurationManagement.login_config_readTXT("F");
    }
}
statement is: int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[9] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [9] []
statement is: ConfigurationManagement.setSubneti(intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.login_config_readTXT("F"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.login_config_readTXT("F") target is: ConfigurationManagement method is: login_config_readTXT(java.lang.String)
Matched Method is: login_config_readTXT(Ljava/lang/String;)I
TestCase is: int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
String string = "F";
ConfigurationManagement.login_config_readTXT(string);

statement is: getLan_char_ip()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String lan_char_ip = ConfigurationManagement.getLan_char_ip()
test data is: ConfigurationManagement.getLan_char_ip();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.getLan_char_ip() = "192.168.0.1";
    }
}
statement is: ConfigurationManagement.getLan_char_ip() = "192.168.0.1", class spoon.support.reflect.code.CtAssignmentImpl
statement is: getWisp_server_name()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String wisp_server_name = ConfigurationManagement.getWisp_server_name()
test data is: ConfigurationManagement.getWisp_server_name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return "wisp-dev-123456789";
    }
}
statement is: return "wisp-dev-123456789", class spoon.support.reflect.code.CtReturnImpl
statement is: isConsole_silent()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean console_silent = ConfigurationManagement.isConsole_silent()
test data is: ConfigurationManagement.isConsole_silent();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.isConsole_silent();
        // Improved test data
        int silentValue = 1;
        boolean expectedResult = true;
        // Original test data
        int silentValue = 0;
        boolean expectedResult = false;
    }
}
statement is: ConfigurationManagement.isConsole_silent(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.isConsole_silent() target is: ConfigurationManagement method is: isConsole_silent()
Matched Method is: isConsole_silent()Z
statement is: // Improved test data
int silentValue = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedResult = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
int silentValue = 0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedResult = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1
* this is vulnerable: boolean _boolean = true
* this is vulnerable: int _int = 0
* this is vulnerable: boolean _boolean = false
TestCase is: ConfigurationManagement.isConsole_silent();
int _int = 1;
boolean _boolean = true;
int _int = 0;
boolean _boolean = false;

statement is: getBackup_txt()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String backup_txt = ConfigurationManagement.getBackup_txt()
test data is: ConfigurationManagement.getBackup_txt();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // method implementation }}
    }
}
statement is: // method implementation }}, class spoon.support.reflect.code.CtCommentImpl
statement is: getNum_regs()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long num_regs = ConfigurationManagement.getNum_regs()
test data is: ConfigurationManagement.getNum_regs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int numRegions = ConfigurationManagement.getNum_regs();
        String[] regionNames = ConfigurationManagement.getRegion_names();
        ConfigurationManagement.setNum_regs(numRegions);
        ConfigurationManagement.setRegion_names(regionNames);
    }
}
statement is: int numRegions = ConfigurationManagement.getNum_regs(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNum_regs() target is: ConfigurationManagement method is: getNum_regs()
Matched Method is: getNum_regs()J
statement is: String[] regionNames = ConfigurationManagement.getRegion_names(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getRegion_names() target is: ConfigurationManagement method is: getRegion_names()
statement is: ConfigurationManagement.setNum_regs(numRegions), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNum_regs(numRegions) target is: ConfigurationManagement method is: setNum_regs(int)
statement is: ConfigurationManagement.setRegion_names(regionNames), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setRegion_names(regionNames) target is: ConfigurationManagement method is: setRegion_names(java.lang.String[])
TestCase is: ConfigurationManagement.getNum_regs();

statement is: getServer_num()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int server_num = ConfigurationManagement.getServer_num()
test data is: ConfigurationManagement.getServer_num();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @The
        @getServer_num
        returns the;
        of servers;
        in the;
        in which;
        an integer;
        @To
        improve the;
        test data;
        test we;
        replace the;
        integer value;
        a more;
        such as;
        // returns the number of servers available in the system (e.g., 50) }}
    }
}
statement is: @The
@getServer_num
returns the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of servers, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: in the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: in which, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: an integer, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @To
improve the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: test data, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: test we, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: replace the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: integer value, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: a more, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: such as, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: // returns the number of servers available in the system (e.g., 50) }}, class spoon.support.reflect.code.CtCommentImpl
statement is: setAccess_deny(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_deny("EARTH")
statement is: getAccess_deny()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String access_deny = ConfigurationManagement.getAccess_deny()
test data is: ConfigurationManagement.setAccess_deny("EARTH");
ConfigurationManagement.getAccess_deny();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAccess_deny("MOON");
        ConfigurationManagement.getAccess_deny();
    }
}
statement is: ConfigurationManagement.setAccess_deny("MOON"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_deny("MOON") target is: ConfigurationManagement method is: setAccess_deny(java.lang.String)
Matched Method is: setAccess_deny(Ljava/lang/String;)V
statement is: ConfigurationManagement.getAccess_deny(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_deny() target is: ConfigurationManagement method is: getAccess_deny()
Matched Method is: getAccess_deny()Ljava/lang/String;
TestCase is: String string = "MOON";
ConfigurationManagement.setAccess_deny(string);
ConfigurationManagement.getAccess_deny();

statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1802)
statement is: display_conf_warnings()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.display_conf_warnings()
test data is: ConfigurationManagement.setAccess_allownum(1802);
ConfigurationManagement.display_conf_warnings();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        configMgmt.setAccess_allownum(1000);
        configMgmt.display_conf_warnings();
    }
}
statement is: configMgmt.setAccess_allownum(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: configMgmt.setAccess_allownum(1000) target is: configMgmt method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: configMgmt.display_conf_warnings(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: configMgmt.display_conf_warnings() target is: configMgmt method is: display_conf_warnings()
Matched Method is: display_conf_warnings()V
TestCase is: int _int = 1000;
ConfigurationManagement.setAccess_allownum(_int);
ConfigurationManagement.display_conf_warnings();

statement is: getAccess_deny()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String access_deny = ConfigurationManagement.getAccess_deny()
test data is: ConfigurationManagement.getAccess_deny();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Review
        the provided;
        snippet : ConfigurationManagement.getAccess_deny(new Integer(1));// instead of using 0, use a non-zero value for testing purposes

        ConfigurationManagement.getAccess_deny(new Double(2.5));// instead of using 0.0, use a non-zero value for testing purposes

        ConfigurationManagement.getAccess_deny("test");// instead of using an empty string, use a meaningful String for testing purposes

    }
}
statement is: @Review
the provided, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: snippet : ConfigurationManagement.getAccess_deny(new Integer(1))// instead of using 0, use a non-zero value for testing purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: snippet : ConfigurationManagement.getAccess_deny(new Integer(1))// instead of using 0, use a non-zero value for testing purposes
 target is: ConfigurationManagement method is: getAccess_deny(java.lang.Integer)
statement is: ConfigurationManagement.getAccess_deny(new Double(2.5))// instead of using 0.0, use a non-zero value for testing purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_deny(new Double(2.5))// instead of using 0.0, use a non-zero value for testing purposes
 target is: ConfigurationManagement method is: getAccess_deny(java.lang.Double)
statement is: ConfigurationManagement.getAccess_deny("test")// instead of using an empty string, use a meaningful String for testing purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_deny("test")// instead of using an empty string, use a meaningful String for testing purposes
 target is: ConfigurationManagement method is: getAccess_deny(java.lang.String)
statement is: setSubnetmaski([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setSubnetmaski((int[]) null)
test data is: ConfigurationManagement.setSubnetmaski((int[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setSubnetmaski(new int[]{ 255, 255, 255, 0 });
    }
}
statement is: ConfigurationManagement.setSubnetmaski(new int[]{ 255, 255, 255, 0 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubnetmaski(new int[]{ 255, 255, 255, 0 }) target is: ConfigurationManagement method is: setSubnetmaski(int[])
Matched Method is: setSubnetmaski([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int[] intArray = null;
ConfigurationManagement.setSubnetmaski(intArray);

statement is: getScdata_txt()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String scdata_txt = ConfigurationManagement.getScdata_txt()
test data is: ConfigurationManagement.getScdata_txt();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int expectedResult = 10;
        String expectedErrorMessage = "Invalid input";
        // Original test data
        int expectedResult = 5;
        String expectedErrorMessage = null;
    }
}
statement is: // Improved test data
int expectedResult = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedErrorMessage = "Invalid input", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
int expectedResult = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedErrorMessage = null, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Invalid input"
* this is vulnerable: int _int = 5
TestCase is: int _int = 10;
String string = "Invalid input";
int _int = 5;

statement is: getGm_allow_level()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gm_allow_level = ConfigurationManagement.getGm_allow_level()
test data is: ConfigurationManagement.getGm_allow_level();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int expectedAllowLevel = 1;
        int actualAllowLevel = ConfigurationManagement.getGm_allow_level();
        assertEquals(expectedAllowLevel, actualAllowLevel);
    }
}
statement is: int expectedAllowLevel = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int actualAllowLevel = ConfigurationManagement.getGm_allow_level(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getGm_allow_level() target is: ConfigurationManagement method is: getGm_allow_level()
Matched Method is: getGm_allow_level()I
statement is: assertEquals(expectedAllowLevel, actualAllowLevel), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedAllowLevel, actualAllowLevel) target is:  method is: assertEquals(int,int)
* this is vulnerable: int _int = 1
TestCase is: int _int = 1;
ConfigurationManagement.getGm_allow_level();

statement is: getEmail_creation()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int email_creation = ConfigurationManagement.getEmail_creation()
test data is: ConfigurationManagement.getEmail_creation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return "new_email@example.com";
    }
}
statement is: return "new_email@example.com", class spoon.support.reflect.code.CtReturnImpl
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(1024)
statement is: getAccess_denynum()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access_denynum = ConfigurationManagement.getAccess_denynum()
test data is: ConfigurationManagement.setAccess_denynum(1024);
ConfigurationManagement.getAccess_denynum();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        ConfigurationManagement.setAccess_denynum(9001);
        ConfigurationManagement.getAccess_denynum();
    }
}
statement is: // Improved test data for the code snippet
ConfigurationManagement.setAccess_denynum(9001), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for the code snippet
ConfigurationManagement.setAccess_denynum(9001) target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: ConfigurationManagement.getAccess_denynum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_denynum() target is: ConfigurationManagement method is: getAccess_denynum()
Matched Method is: getAccess_denynum()I
TestCase is: int _int = 9001;
ConfigurationManagement.setAccess_denynum(_int);
ConfigurationManagement.getAccess_denynum();

statement is: addChar_id_count()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addChar_id_count()
statement is: getChar_id_count()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int char_id_count = ConfigurationManagement.getChar_id_count()
test data is: ConfigurationManagement.addChar_id_count();
ConfigurationManagement.getChar_id_count();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        // Add a character with ID "1" and count 5
        ConfigurationManagement.addChar_id_count(new Character("1", 5));
        // Get the character with ID "1" and check if the count is correct
        Character char1 = ConfigurationManagement.getChar_id_count("1");
        assertEquals(char1.getCount(), 5);
        // Add a character with ID "2" and count 10
        ConfigurationManagement.addChar_id_count(new Character("2", 10));
        // Get the character with ID "2" and check if the count is correct
        Character char2 = ConfigurationManagement.getChar_id_count("2");
        assertEquals(char2.getCount(), 10);
    }
}
statement is: // Improved test data for the above code snippet
// Add a character with ID "1" and count 5
ConfigurationManagement.addChar_id_count(new Character("1", 5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for the above code snippet
// Add a character with ID "1" and count 5
ConfigurationManagement.addChar_id_count(new Character("1", 5)) target is: ConfigurationManagement method is: addChar_id_count(java.lang.Character)
statement is: // Get the character with ID "1" and check if the count is correct
Character char1 = ConfigurationManagement.getChar_id_count("1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getChar_id_count("1") target is: ConfigurationManagement method is: getChar_id_count(java.lang.String)
statement is: assertEquals(char1.getCount(), 5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(char1.getCount(), 5) target is:  method is: assertEquals(<unknown>,int)
statement is: // Add a character with ID "2" and count 10
ConfigurationManagement.addChar_id_count(new Character("2", 10)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add a character with ID "2" and count 10
ConfigurationManagement.addChar_id_count(new Character("2", 10)) target is: ConfigurationManagement method is: addChar_id_count(java.lang.Character)
statement is: // Get the character with ID "2" and check if the count is correct
Character char2 = ConfigurationManagement.getChar_id_count("2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getChar_id_count("2") target is: ConfigurationManagement method is: getChar_id_count(java.lang.String)
statement is: assertEquals(char2.getCount(), 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(char2.getCount(), 10) target is:  method is: assertEquals(<unknown>,int)
statement is: getBackup_txt_flag()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String backup_txt_flag = ConfigurationManagement.getBackup_txt_flag()
test data is: ConfigurationManagement.getBackup_txt_flag();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return Boolean.parseBoolean(BACKUP_TXT_FLAG);
    }
}
statement is: return Boolean.parseBoolean(BACKUP_TXT_FLAG), class spoon.support.reflect.code.CtReturnImpl
statement is: addChar_id_count(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addChar_id_count(99)
test data is: ConfigurationManagement.addChar_id_count(99);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.addChar_id_count(100);
    }
}
statement is: ConfigurationManagement.addChar_id_count(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.addChar_id_count(100) target is: ConfigurationManagement method is: addChar_id_count(int)
Matched Method is: addChar_id_count(I)V
TestCase is: int _int = 100;
ConfigurationManagement.addChar_id_count(_int);

statement is: setNum_regs(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setNum_regs(0L)
test data is: ConfigurationManagement.setNum_regs(0L);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setNum_regs(0L);// Sets num_regs to 0

        ConfigurationManagement.setNum_regs(50L);// Sets num_regs to 50

        ConfigurationManagement.setNum_regs(-1L);// Sets num_regs to -1 (invalid value)

        ConfigurationManagement.setNum_regs(100L);// Sets num_regs to 100 (valid value but may not be supported by the hardware) }}

    }
}
statement is: ConfigurationManagement.setNum_regs(0L)// Sets num_regs to 0
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNum_regs(0L)// Sets num_regs to 0
 target is: ConfigurationManagement method is: setNum_regs(long)
Matched Method is: setNum_regs(J)V
statement is: ConfigurationManagement.setNum_regs(50L)// Sets num_regs to 50
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNum_regs(50L)// Sets num_regs to 50
 target is: ConfigurationManagement method is: setNum_regs(long)
Matched Method is: setNum_regs(J)V
statement is: ConfigurationManagement.setNum_regs(-1L)// Sets num_regs to -1 (invalid value)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNum_regs(-1L)// Sets num_regs to -1 (invalid value)
 target is: ConfigurationManagement method is: setNum_regs(long)
Matched Method is: setNum_regs(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.setNum_regs(100L)// Sets num_regs to 100 (valid value but may not be supported by the hardware) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNum_regs(100L)// Sets num_regs to 100 (valid value but may not be supported by the hardware) }}
 target is: ConfigurationManagement method is: setNum_regs(long)
Matched Method is: setNum_regs(J)V
TestCase is: long _long = 0L;
ConfigurationManagement.setNum_regs(_long);
long _long = 50L;
ConfigurationManagement.setNum_regs(_long);
long _long = null;
ConfigurationManagement.setNum_regs(_long);
long _long = 100L;
ConfigurationManagement.setNum_regs(_long);

statement is: getLogin_ip_str()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String login_ip_str = ConfigurationManagement.getLogin_ip_str()
test data is: ConfigurationManagement.getLogin_ip_str();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals("192.168.0.1", ConfigurationManagement.getLogin_ip_str());
    }
}
statement is: assertEquals("192.168.0.1", ConfigurationManagement.getLogin_ip_str()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("192.168.0.1", ConfigurationManagement.getLogin_ip_str()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: addGMMax(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addGMMax(0)
test data is: ConfigurationManagement.addGMMax(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.addGMMax("123456789");
    }
}
statement is: ConfigurationManagement.addGMMax("123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.addGMMax("123456789") target is: ConfigurationManagement method is: addGMMax(java.lang.String)
Matched Method is: addGMMax(I)V
TestCase is: String string = "123456789";
ConfigurationManagement.addGMMax((int) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@ffe0abac type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[4]
statement is: setSubneti([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setSubneti(arg0)
statement is: login_lan_config_read(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int login_lan_config_read = ConfigurationManagement.login_lan_config_read("127.0.0.1")
test data is: int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.login_lan_config_read("127.0.0.1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[4];
        for (int i = 0; i < intArray.length; i++) {
            intArray[i] = i + 1;
        }
        ConfigurationManagement.setSubnet(intArray);
        ConfigurationManagement.login_lan_config_read("127.0.0.1");
    }
}
statement is: int[] intArray = new int[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[4] Elements: []
lengths: [4] [4]
Their type are: class [I int[]
statement is: for (int i = 0; i < intArray.length; i++) {
    intArray[i] = i + 1;
}, class spoon.support.reflect.code.CtForImpl
statement is: ConfigurationManagement.setSubnet(intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubnet(intArray) target is: ConfigurationManagement method is: setSubnet(int[])
statement is: ConfigurationManagement.login_lan_config_read("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.login_lan_config_read("127.0.0.1") target is: ConfigurationManagement method is: login_lan_config_read(java.lang.String)
Matched Method is: login_lan_config_read(Ljava/lang/String;)I
TestCase is: int[] intArray = new int[4];
String string = "127.0.0.1";
ConfigurationManagement.login_lan_config_read(string);

statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("YES")
test data is: ConfigurationManagement.yesNoOnOffToBoolean("YES");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.yesNoOnOffToBoolean("YES");
        ConfigurationManagement.yesNoOnOffToBoolean("NO");
        ConfigurationManagement.yesNoOnOffToBoolean("OFF");
    }
}
statement is: ConfigurationManagement.yesNoOnOffToBoolean("YES"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("YES") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("NO"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("NO") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("OFF"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("OFF") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: String string = "YES";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "NO";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "OFF";
ConfigurationManagement.yesNoOnOffToBoolean(string);

statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("OFF")
test data is: ConfigurationManagement.yesNoOnOffToBoolean("OFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.yesNoOnOffToBoolean("ON");// Expected: true

        ConfigurationManagement.yesNoOnOffToBoolean("OFF");// Expected: false

        ConfigurationManagement.yesNoOnOffToBoolean("TRUE");// Expected: true

        ConfigurationManagement.yesNoOnOffToBoolean("FALSE");// Expected: false }}

    }
}
statement is: ConfigurationManagement.yesNoOnOffToBoolean("ON")// Expected: true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("ON")// Expected: true
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("OFF")// Expected: false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("OFF")// Expected: false
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("TRUE")// Expected: true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("TRUE")// Expected: true
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("FALSE")// Expected: false }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("FALSE")// Expected: false }}
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: String string = "ON";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "OFF";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "TRUE";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "FALSE";
ConfigurationManagement.yesNoOnOffToBoolean(string);

statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("ON")
test data is: ConfigurationManagement.yesNoOnOffToBoolean("ON");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.yesNoOnOffToBoolean("on");
    }
}
statement is: ConfigurationManagement.yesNoOnOffToBoolean("on"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("on") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: String string = "on";
ConfigurationManagement.yesNoOnOffToBoolean(string);

statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("NO")
test data is: ConfigurationManagement.yesNoOnOffToBoolean("NO");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.yesNoOnOffToBoolean("ENABLED");
        ConfigurationManagement.yesNoOnOffToBoolean("DISABLED");
        ConfigurationManagement.yesNoOnOffToBoolean("PENDING");
        ConfigurationManagement.yesNoOnOffToBoolean(null);
        ConfigurationManagement.yesNoOnOffToBoolean("");
    }
}
statement is: ConfigurationManagement.yesNoOnOffToBoolean("ENABLED"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("ENABLED") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("DISABLED"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("DISABLED") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("PENDING"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("PENDING") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean(null) target is: ConfigurationManagement method is: yesNoOnOffToBoolean(<unknown>)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.yesNoOnOffToBoolean(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("") target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: String string = "ENABLED";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "DISABLED";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "PENDING";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = null;
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "";
ConfigurationManagement.yesNoOnOffToBoolean(string);

statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("OF")
test data is: ConfigurationManagement.yesNoOnOffToBoolean("OF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.yesNoOnOffToBoolean("ON");// true

        ConfigurationManagement.yesNoOnOffToBoolean("OFF");// false

        ConfigurationManagement.yesNoOnOffToBoolean("YES");// true

        ConfigurationManagement.yesNoOnOffToBoolean("NO");// false }}

    }
}
statement is: ConfigurationManagement.yesNoOnOffToBoolean("ON")// true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("ON")// true
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("OFF")// false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("OFF")// false
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("YES")// true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("YES")// true
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: ConfigurationManagement.yesNoOnOffToBoolean("NO")// false }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.yesNoOnOffToBoolean("NO")// false }}
 target is: ConfigurationManagement method is: yesNoOnOffToBoolean(java.lang.String)
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: String string = "ON";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "OFF";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "YES";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "NO";
ConfigurationManagement.yesNoOnOffToBoolean(string);

statement is: display_conf_warnings()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.display_conf_warnings()
test data is: ConfigurationManagement.display_conf_warnings();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String[] configWarnings = new String[]{ "Warning 1", "Warning 2", "Warning 3" };
        boolean expectedResult = true;
    }
}
statement is: // Improved test data
String[] configWarnings = new String[]{ "Warning 1", "Warning 2", "Warning 3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean expectedResult = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: boolean _boolean = true
TestCase is: boolean _boolean = true;

statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: display_conf_warnings()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.display_conf_warnings()
test data is: ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ACO aCO = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_order(aCO);
        ConfigurationManagement.display_conf_warnings();
    }
}
statement is: ACO aCO = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.display_conf_warnings(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.display_conf_warnings() target is: ConfigurationManagement method is: display_conf_warnings()
Matched Method is: display_conf_warnings()V
TestCase is: ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum((-1952769234))
statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: display_conf_warnings()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.display_conf_warnings()
test data is: ConfigurationManagement.setAccess_allownum((-1952769234));
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAccess_allownum(123456789);// This is a more descriptive example for the access number

        ACO aCO = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_order(aCO);
        ConfigurationManagement.display_conf_warnings();
    }
}
statement is: ConfigurationManagement.setAccess_allownum(123456789)// This is a more descriptive example for the access number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(123456789)// This is a more descriptive example for the access number
 target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.display_conf_warnings(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.display_conf_warnings() target is: ConfigurationManagement method is: display_conf_warnings()
Matched Method is: display_conf_warnings()V
TestCase is: int _int = 123456789;
ConfigurationManagement.setAccess_allownum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();

statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU")
statement is: createFolder(Lorg/evosuite/runtime/testdata/EvoSuiteFile;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean createFolder = FileSystemHandling.createFolder(arg0)
statement is: login_config_readXML(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int login_config_readXML = ConfigurationManagement.login_config_readXML("ihGU")
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU");
FileSystemHandling.createFolder(evoSuiteFile);
ConfigurationManagement.login_config_readXML("ihGU");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("test-data-folder");
        FileSystemHandling.createFolder(evoSuiteFile);
        ConfigurationManagement.login_config_readXML("config-file.xml");
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("test-data-folder"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.createFolder(evoSuiteFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.createFolder(evoSuiteFile) target is: FileSystemHandling method is: createFolder(EvoSuiteFile)
Matched Method is: createFolder(Lorg/evosuite/runtime/testdata/EvoSuiteFile;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.login_config_readXML("config-file.xml"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.login_config_readXML("config-file.xml") target is: ConfigurationManagement method is: login_config_readXML(java.lang.String)
Matched Method is: login_config_readXML(Ljava/lang/String;)I
TestCase is: EvoSuiteFile evoSuiteFile = null;
FileSystemHandling.createFolder(evoSuiteFile);
String string = "config-file.xml";
ConfigurationManagement.login_config_readXML(string);

statement is: login_config_readXML(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int login_config_readXML = ConfigurationManagement.login_config_readXML("Cannot construct ")
test data is: ConfigurationManagement.login_config_readXML("Cannot construct ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input");
    }
}
statement is: ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input") target is: ConfigurationManagement method is: login_config_readXML(java.lang.String)
Matched Method is: login_config_readXML(Ljava/lang/String;)I
TestCase is: String string = "Cannot construct a valid XML document from the given input";
ConfigurationManagement.login_config_readXML(string);

statement is: getLoginAthenaConf()Lorg/javathena/conf/LoginAthena; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.conf.LoginAthena
statement code is: LoginAthena loginAthenaConf = ConfigurationManagement.getLoginAthenaConf()
test data is: ConfigurationManagement.getLoginAthenaConf();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the ConfigurationManagement.getLoginAthenaConf() method
        "  \"host\": \"athena-db.example.com\",\n" = "  \"port\": 5432,\n" + (("  \"database\": \"mydb\",\n" + "  \"username\": \"testuser\",\n") + "  \"password\": \"testpass\"\n");
    }
}
statement is: // Improved test data for the ConfigurationManagement.getLoginAthenaConf() method
"  \"host\": \"athena-db.example.com\",\n" = "  \"port\": 5432,\n" + (("  \"database\": \"mydb\",\n" + "  \"username\": \"testuser\",\n") + "  \"password\": \"testpass\"\n"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: setAccess_allow(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allow("0x'%?&@")
statement is: getAccess_allow()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String access_allow = ConfigurationManagement.getAccess_allow()
test data is: ConfigurationManagement.setAccess_allow("0x'%?&@");
ConfigurationManagement.getAccess_allow();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAccess_allow("1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        ConfigurationManagement.getAccess_allow();
    }
}
statement is: ConfigurationManagement.setAccess_allow("1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allow("1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") target is: ConfigurationManagement method is: setAccess_allow(java.lang.String)
Matched Method is: setAccess_allow(Ljava/lang/String;)V
statement is: ConfigurationManagement.getAccess_allow(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allow() target is: ConfigurationManagement method is: getAccess_allow()
Matched Method is: getAccess_allow()Ljava/lang/String;
TestCase is: String string = "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
ConfigurationManagement.setAccess_allow(string);
ConfigurationManagement.getAccess_allow();

statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum((-1446741810))
statement is: getAccess_allownum()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access_allownum = ConfigurationManagement.getAccess_allownum()
test data is: ConfigurationManagement.setAccess_allownum((-1446741810));
ConfigurationManagement.getAccess_allownum();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ConfigurationManagement.setAccess_allownum(-9223372036854775808L);// minimum long value

        ConfigurationManagement.getAccess_allownum();
        ConfigurationManagement.setAccess_allownum(0L);// maximum long value

        ConfigurationManagement.getAccess_allownum();
        ConfigurationManagement.setAccess_allownum(-1446741810);// negative integer

        ConfigurationManagement.getAccess_allownum();
        ConfigurationManagement.setAccess_allownum(2345678901234567890L);// positive integer

        ConfigurationManagement.getAccess_allownum();
        ConfigurationManagement.setAccess_allownum(123.45678901234568);// floating-point value

        ConfigurationManagement.getAccess_allownum();
        ConfigurationManagement.setAccess_allownum("Hello, world!");// string

        ConfigurationManagement.getAccess_allownum();
    }
}
statement is: // Improved test data
ConfigurationManagement.setAccess_allownum(-9223372036854775808L)// minimum long value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
ConfigurationManagement.setAccess_allownum(-9223372036854775808L)// minimum long value
 target is: ConfigurationManagement method is: setAccess_allownum(long)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
statement is: ConfigurationManagement.setAccess_allownum(0L)// maximum long value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(0L)// maximum long value
 target is: ConfigurationManagement method is: setAccess_allownum(long)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
statement is: ConfigurationManagement.setAccess_allownum(-1446741810)// negative integer
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(-1446741810)// negative integer
 target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
statement is: ConfigurationManagement.setAccess_allownum(2345678901234567890L)// positive integer
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(2345678901234567890L)// positive integer
 target is: ConfigurationManagement method is: setAccess_allownum(long)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
statement is: ConfigurationManagement.setAccess_allownum(123.45678901234568)// floating-point value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(123.45678901234568)// floating-point value
 target is: ConfigurationManagement method is: setAccess_allownum(double)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
statement is: ConfigurationManagement.setAccess_allownum("Hello, world!")// string
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum("Hello, world!")// string
 target is: ConfigurationManagement method is: setAccess_allownum(java.lang.String)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
TestCase is: long _long = (-9223372036854775808L);
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = 0L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = null;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = 2345678901234567890L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
double _double = 123.45678901234568;
ConfigurationManagement.setAccess_allownum((int) _double);
ConfigurationManagement.getAccess_allownum();
String string = "Hello, world!";
ConfigurationManagement.setAccess_allownum((int) string);
ConfigurationManagement.getAccess_allownum();

statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(30)
statement is: getAccess_allownum()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access_allownum = ConfigurationManagement.getAccess_allownum()
test data is: ConfigurationManagement.setAccess_allownum(30);
ConfigurationManagement.getAccess_allownum();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAccess_allownum(80);
        ConfigurationManagement.getAccess_allownum();
    }
}
statement is: ConfigurationManagement.setAccess_allownum(80), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(80) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.getAccess_allownum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_allownum() target is: ConfigurationManagement method is: getAccess_allownum()
Matched Method is: getAccess_allownum()I
TestCase is: int _int = 80;
ConfigurationManagement.setAccess_allownum(_int);
ConfigurationManagement.getAccess_allownum();

statement is: setAccess_deny(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_deny("")
statement is: getAccess_deny()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String access_deny = ConfigurationManagement.getAccess_deny()
test data is: ConfigurationManagement.setAccess_deny("");
ConfigurationManagement.getAccess_deny();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAccess_deny("The user does not have access to this resource");
        ConfigurationManagement.getAccess_deny();
    }
}
statement is: ConfigurationManagement.setAccess_deny("The user does not have access to this resource"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_deny("The user does not have access to this resource") target is: ConfigurationManagement method is: setAccess_deny(java.lang.String)
Matched Method is: setAccess_deny(Ljava/lang/String;)V
statement is: ConfigurationManagement.getAccess_deny(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_deny() target is: ConfigurationManagement method is: getAccess_deny()
Matched Method is: getAccess_deny()Ljava/lang/String;
TestCase is: String string = "The user does not have access to this resource";
ConfigurationManagement.setAccess_deny(string);
ConfigurationManagement.getAccess_deny();

statement is: ACO aCO = ACO.STRSIZE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.STRSIZE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: getAccess_order()Lorg/javathena/core/utiles/ACO; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO access_order = ConfigurationManagement.getAccess_order()
test data is: ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ACO aCO = ACO.STRSIZE;
        ConfigurationManagement.setAccess_order(aCO);
        ConfigurationManagement.getAccess_order();
        String expectedStr = "Example String";
        ConfigurationManagement.setString("key1", expectedStr);
        String actualStr = ConfigurationManagement.getString("key1");
        Assert.assertEquals(expectedStr, actualStr);
    }
}
statement is: ACO aCO = ACO.STRSIZE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.STRSIZE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getAccess_order(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_order() target is: ConfigurationManagement method is: getAccess_order()
Matched Method is: getAccess_order()Lorg/javathena/core/utiles/ACO;
statement is: String expectedStr = "Example String", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ConfigurationManagement.setString("key1", expectedStr), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setString("key1", expectedStr) target is: ConfigurationManagement method is: setString(java.lang.String,java.lang.String)
statement is: String actualStr = ConfigurationManagement.getString("key1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getString("key1") target is: ConfigurationManagement method is: getString(java.lang.String)
statement is: Assert.assertEquals(expectedStr, actualStr), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals(expectedStr, actualStr) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "Example String"
TestCase is: ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
String string = "Example String";

statement is: ACO aCO = ACO.MUTUAL_FAILTURE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.MUTUAL_FAILTURE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: getAccess_order()Lorg/javathena/core/utiles/ACO; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO access_order = ConfigurationManagement.getAccess_order()
test data is: ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ACO aCO = ACO.MUTUAL_FAILURE;// This value indicates that there is a mutual failure between two or more parties in the access control process.

        ConfigurationManagement.setAccess_order(aCO);
        ACO retrievedAco = ConfigurationManagement.getAccess_order();
        assertEquals(retrievedAco, aCO);// Verify that the value returned by getAccess_order() is the same as the value set using setAccess_order(). }}

    }
}
statement is: ACO aCO = ACO.MUTUAL_FAILURE// This value indicates that there is a mutual failure between two or more parties in the access control process.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.MUTUAL_FAILURE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ACO retrievedAco = ConfigurationManagement.getAccess_order(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAccess_order() target is: ConfigurationManagement method is: getAccess_order()
Matched Method is: getAccess_order()Lorg/javathena/core/utiles/ACO;
statement is: assertEquals(retrievedAco, aCO)// Verify that the value returned by getAccess_order() is the same as the value set using setAccess_order(). }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(retrievedAco, aCO)// Verify that the value returned by getAccess_order() is the same as the value set using setAccess_order(). }}
 target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();

statement is: setAuth_before_save_file(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAuth_before_save_file(65535)
statement is: getAuth_before_save_file()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_before_save_file = ConfigurationManagement.getAuth_before_save_file()
test data is: ConfigurationManagement.setAuth_before_save_file(65535);
ConfigurationManagement.getAuth_before_save_file();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setAuth_before_save_file(1);// Set authentication parameter to 1 (true) before saving the file

        ConfigurationManagement.getAuth_before_save_file();// Get current value of the authentication parameter (should be 1)

        ConfigurationManagement.setAuth_before_save_file(0);// Set authentication parameter to 0 (false) before saving the file

        ConfigurationManagement.getAuth_before_save_file();// Get current value of the authentication parameter (should be 0) }}

    }
}
statement is: ConfigurationManagement.setAuth_before_save_file(1)// Set authentication parameter to 1 (true) before saving the file
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAuth_before_save_file(1)// Set authentication parameter to 1 (true) before saving the file
 target is: ConfigurationManagement method is: setAuth_before_save_file(int)
Matched Method is: setAuth_before_save_file(I)V
statement is: ConfigurationManagement.getAuth_before_save_file()// Get current value of the authentication parameter (should be 1)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAuth_before_save_file()// Get current value of the authentication parameter (should be 1)
 target is: ConfigurationManagement method is: getAuth_before_save_file()
Matched Method is: getAuth_before_save_file()I
statement is: ConfigurationManagement.setAuth_before_save_file(0)// Set authentication parameter to 0 (false) before saving the file
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAuth_before_save_file(0)// Set authentication parameter to 0 (false) before saving the file
 target is: ConfigurationManagement method is: setAuth_before_save_file(int)
Matched Method is: setAuth_before_save_file(I)V
statement is: ConfigurationManagement.getAuth_before_save_file()// Get current value of the authentication parameter (should be 0) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getAuth_before_save_file()// Get current value of the authentication parameter (should be 0) }}
 target is: ConfigurationManagement method is: getAuth_before_save_file()
Matched Method is: getAuth_before_save_file()I
TestCase is: int _int = 1;
ConfigurationManagement.setAuth_before_save_file(_int);
ConfigurationManagement.getAuth_before_save_file();
int _int = 0;
ConfigurationManagement.setAuth_before_save_file(_int);
ConfigurationManagement.getAuth_before_save_file();

statement is: setChar_id_count(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setChar_id_count((-5369))
statement is: getChar_id_count()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int char_id_count = ConfigurationManagement.getChar_id_count()
test data is: ConfigurationManagement.setChar_id_count((-5369));
ConfigurationManagement.getChar_id_count();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setChar_id_count(((char) (12)));
        ConfigurationManagement.getChar_id_count();
    }
}
statement is: ConfigurationManagement.setChar_id_count(((char) (12))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setChar_id_count(((char) (12))) target is: ConfigurationManagement method is: setChar_id_count(char)
Matched Method is: setChar_id_count(I)V
statement is: ConfigurationManagement.getChar_id_count(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getChar_id_count() target is: ConfigurationManagement method is: getChar_id_count()
Matched Method is: getChar_id_count()I
TestCase is: int _int = 12;
ConfigurationManagement.setChar_id_count(_int);
ConfigurationManagement.getChar_id_count();

statement is: setGMMax(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setGMMax((-10))
statement is: getGMMax()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gMMax = ConfigurationManagement.getGMMax()
test data is: ConfigurationManagement.setGMMax((-10));
ConfigurationManagement.getGMMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setGMMax(2);
        ConfigurationManagement.getGMMax();
    }
}
statement is: ConfigurationManagement.setGMMax(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setGMMax(2) target is: ConfigurationManagement method is: setGMMax(int)
Matched Method is: setGMMax(I)V
statement is: ConfigurationManagement.getGMMax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getGMMax() target is: ConfigurationManagement method is: getGMMax()
Matched Method is: getGMMax()I
TestCase is: int _int = 2;
ConfigurationManagement.setGMMax(_int);
ConfigurationManagement.getGMMax();

statement is: setLan_char_ip(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setLan_char_ip(":!! 4%`{w=pcR_:")
statement is: getLan_char_ip()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String lan_char_ip = ConfigurationManagement.getLan_char_ip()
test data is: ConfigurationManagement.setLan_char_ip(":!! 4%`{w=pcR_:");
ConfigurationManagement.getLan_char_ip();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ConfigurationManagement.setLan_char_ip("192.168.0.1");
        ConfigurationManagement.getLan_char_ip();
    }
}
statement is: // Improved test data
ConfigurationManagement.setLan_char_ip("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
ConfigurationManagement.setLan_char_ip("192.168.0.1") target is: ConfigurationManagement method is: setLan_char_ip(java.lang.String)
Matched Method is: setLan_char_ip(Ljava/lang/String;)V
statement is: ConfigurationManagement.getLan_char_ip(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getLan_char_ip() target is: ConfigurationManagement method is: getLan_char_ip()
Matched Method is: getLan_char_ip()Ljava/lang/String;
TestCase is: String string = "192.168.0.1";
ConfigurationManagement.setLan_char_ip(string);
ConfigurationManagement.getLan_char_ip();

statement is: setNew_reg_tick(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setNew_reg_tick(1953L)
statement is: getNew_reg_tick()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long new_reg_tick = ConfigurationManagement.getNew_reg_tick()
test data is: ConfigurationManagement.setNew_reg_tick(1953L);
ConfigurationManagement.getNew_reg_tick();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setNew_reg_tick("2023-01-01T00:00:00");
        ConfigurationManagement.getNew_reg_tick();
    }
}
statement is: ConfigurationManagement.setNew_reg_tick("2023-01-01T00:00:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setNew_reg_tick("2023-01-01T00:00:00") target is: ConfigurationManagement method is: setNew_reg_tick(java.lang.String)
Matched Method is: setNew_reg_tick(J)V
statement is: ConfigurationManagement.getNew_reg_tick(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNew_reg_tick() target is: ConfigurationManagement method is: getNew_reg_tick()
Matched Method is: getNew_reg_tick()J
TestCase is: String string = "2023-01-01T00:00:00";
ConfigurationManagement.setNew_reg_tick((long) string);
ConfigurationManagement.getNew_reg_tick();

statement is: addNum_regs(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addNum_regs((-2557L))
statement is: getNum_regs()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long num_regs = ConfigurationManagement.getNum_regs()
test data is: ConfigurationManagement.addNum_regs((-2557L));
ConfigurationManagement.getNum_regs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.addNum_regs(-2557L);
        ConfigurationManagement.getNum_regs();
    }
}
statement is: ConfigurationManagement.addNum_regs(-2557L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.addNum_regs(-2557L) target is: ConfigurationManagement method is: addNum_regs(long)
Matched Method is: addNum_regs(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getNum_regs(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNum_regs() target is: ConfigurationManagement method is: getNum_regs()
Matched Method is: getNum_regs()J
TestCase is: long _long = null;
ConfigurationManagement.addNum_regs(_long);
ConfigurationManagement.getNum_regs();

statement is: addNum_regs(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.addNum_regs(2809L)
statement is: getNum_regs()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long num_regs = ConfigurationManagement.getNum_regs()
test data is: ConfigurationManagement.addNum_regs(2809L);
ConfigurationManagement.getNum_regs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.addNum_regs(15000L);
        ConfigurationManagement.getNum_regs();
    }
}
statement is: ConfigurationManagement.addNum_regs(15000L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.addNum_regs(15000L) target is: ConfigurationManagement method is: addNum_regs(long)
Matched Method is: addNum_regs(J)V
statement is: ConfigurationManagement.getNum_regs(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getNum_regs() target is: ConfigurationManagement method is: getNum_regs()
Matched Method is: getNum_regs()J
TestCase is: long _long = 15000L;
ConfigurationManagement.addNum_regs(_long);
ConfigurationManagement.getNum_regs();

statement is: setServer_num(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setServer_num((-1326))
statement is: getServer_num()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int server_num = ConfigurationManagement.getServer_num()
test data is: ConfigurationManagement.setServer_num((-1326));
ConfigurationManagement.getServer_num();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ConfigurationManagement.setServer_num(1);
        ConfigurationManagement.getServer_num();
    }
}
statement is: // Improved test data
ConfigurationManagement.setServer_num(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
ConfigurationManagement.setServer_num(1) target is: ConfigurationManagement method is: setServer_num(int)
Matched Method is: setServer_num(I)V
statement is: ConfigurationManagement.getServer_num(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getServer_num() target is: ConfigurationManagement method is: getServer_num()
Matched Method is: getServer_num()I
TestCase is: int _int = 1;
ConfigurationManagement.setServer_num(_int);
ConfigurationManagement.getServer_num();

statement is: setServer_num(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setServer_num(30)
statement is: getServer_num()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int server_num = ConfigurationManagement.getServer_num()
test data is: ConfigurationManagement.setServer_num(30);
ConfigurationManagement.getServer_num();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Setting server_num to 30 and retrieving it
        ConfigurationManagement.setServer_num(30);
        ConfigurationManagement.getServer_num();
        // Setting server_num to a different value (5) and retrieving it
        ConfigurationManagement.setServer_num(5);
        ConfigurationManagement.getServer_num();
        // Setting server_num to 0 and retrieving it
        ConfigurationManagement.setServer_num(0);
        ConfigurationManagement.getServer_num();
        // Setting server_num to a negative value (-1) and retrieving it
        ConfigurationManagement.setServer_num(-1);
        ConfigurationManagement.getServer_num();
    }
}
statement is: // Setting server_num to 30 and retrieving it
ConfigurationManagement.setServer_num(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Setting server_num to 30 and retrieving it
ConfigurationManagement.setServer_num(30) target is: ConfigurationManagement method is: setServer_num(int)
Matched Method is: setServer_num(I)V
statement is: ConfigurationManagement.getServer_num(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getServer_num() target is: ConfigurationManagement method is: getServer_num()
Matched Method is: getServer_num()I
statement is: // Setting server_num to a different value (5) and retrieving it
ConfigurationManagement.setServer_num(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Setting server_num to a different value (5) and retrieving it
ConfigurationManagement.setServer_num(5) target is: ConfigurationManagement method is: setServer_num(int)
Matched Method is: setServer_num(I)V
statement is: ConfigurationManagement.getServer_num(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getServer_num() target is: ConfigurationManagement method is: getServer_num()
Matched Method is: getServer_num()I
statement is: // Setting server_num to 0 and retrieving it
ConfigurationManagement.setServer_num(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Setting server_num to 0 and retrieving it
ConfigurationManagement.setServer_num(0) target is: ConfigurationManagement method is: setServer_num(int)
Matched Method is: setServer_num(I)V
statement is: ConfigurationManagement.getServer_num(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getServer_num() target is: ConfigurationManagement method is: getServer_num()
Matched Method is: getServer_num()I
statement is: // Setting server_num to a negative value (-1) and retrieving it
ConfigurationManagement.setServer_num(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Setting server_num to a negative value (-1) and retrieving it
ConfigurationManagement.setServer_num(-1) target is: ConfigurationManagement method is: setServer_num(int)
Matched Method is: setServer_num(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getServer_num(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getServer_num() target is: ConfigurationManagement method is: getServer_num()
Matched Method is: getServer_num()I
TestCase is: int _int = 30;
ConfigurationManagement.setServer_num(_int);
ConfigurationManagement.getServer_num();
int _int = 5;
ConfigurationManagement.setServer_num(_int);
ConfigurationManagement.getServer_num();
int _int = 0;
ConfigurationManagement.setServer_num(_int);
ConfigurationManagement.getServer_num();
int _int = null;
ConfigurationManagement.setServer_num(_int);
ConfigurationManagement.getServer_num();

statement is: setStart_limited_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setStart_limited_time(256L)
statement is: getStartLimitedTime()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long startLimitedTime = ConfigurationManagement.getStartLimitedTime()
test data is: ConfigurationManagement.setStart_limited_time(256L);
ConfigurationManagement.getStartLimitedTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: setStart_limited_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setStart_limited_time(0L)
statement is: getStartLimitedTime()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long startLimitedTime = ConfigurationManagement.getStartLimitedTime()
test data is: ConfigurationManagement.setStart_limited_time(0L);
ConfigurationManagement.getStartLimitedTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConfigurationManagement.setStartLimitedTime(1625075200000L);
        ConfigurationManagement.getStartLimitedTime();
    }
}
statement is: ConfigurationManagement.setStartLimitedTime(1625075200000L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setStartLimitedTime(1625075200000L) target is: ConfigurationManagement method is: setStartLimitedTime(long)
statement is: ConfigurationManagement.getStartLimitedTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getStartLimitedTime() target is: ConfigurationManagement method is: getStartLimitedTime()
Matched Method is: getStartLimitedTime()J
TestCase is: ConfigurationManagement.getStartLimitedTime();

statement is: org.evosuite.testcase.statements.ArrayStatement@c0d51848 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[0]
statement is: setSubneti([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setSubneti(arg0)
statement is: getSubneti()[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] subneti = ConfigurationManagement.getSubneti()
test data is: int[] intArray = new int[0];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray1 = new int[]{  };// empty array

        ConfigurationManagement.setSubneti(intArray1);
        ConfigurationManagement.getSubneti();
        int[] intArray2 = new int[]{ 1, 2, 3, 4, 5 };// normal input

        ConfigurationManagement.setSubneti(intArray2);
        ConfigurationManagement.getSubneti();
        int[] intArray3 = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };// large input

        ConfigurationManagement.setSubneti(intArray3);
        ConfigurationManagement.getSubneti();
        int[] intArray4 = new int[]{ -1, -2, -3, -4, -5 };// negative values

        ConfigurationManagement.setSubneti(intArray4);
        ConfigurationManagement.getSubneti();
        int[] intArray5 = new int[]{ 0, 0, 0, 0, 0 };// all zeros

        ConfigurationManagement.setSubneti(intArray5);
        ConfigurationManagement.getSubneti();
        int[] intArray6 = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };// large input with zeros

        ConfigurationManagement.setSubneti(intArray6);
        ConfigurationManagement.getSubneti();
    }
}
statement is: int[] intArray1 = new int[]{  }// empty array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{  } Elements: []
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray1) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
statement is: int[] intArray2 = new int[]{ 1, 2, 3, 4, 5 }// normal input
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray2) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
statement is: int[] intArray3 = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }// large input
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray3) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
statement is: int[] intArray4 = new int[]{ -1, -2, -3, -4, -5 }// negative values
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ -1, -2, -3, -4, -5 } Elements: [-1, -2, -3, -4, -5]
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray4) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
statement is: int[] intArray5 = new int[]{ 0, 0, 0, 0, 0 }// all zeros
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ 0, 0, 0, 0, 0 } Elements: [0, 0, 0, 0, 0]
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray5) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
statement is: int[] intArray6 = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }// large input with zeros
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[0] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
lengths: [0] []
statement is: ConfigurationManagement.setSubneti(intArray6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray6) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
TestCase is: int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();

statement is: org.evosuite.testcase.statements.ArrayStatement@33c32b86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[4]
statement is: setSubneti([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setSubneti(arg0)
statement is: getSubneti()[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] subneti = ConfigurationManagement.getSubneti()
test data is: int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 10, 20, 30, 40 };
        ConfigurationManagement.setSubneti(intArray);
        ConfigurationManagement.getSubneti();
    }
}
statement is: int[] intArray = new int[]{ 10, 20, 30, 40 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[4] isAssignment: false Array: new int[]{ 10, 20, 30, 40 } Elements: [10, 20, 30, 40]
lengths: [4] []
statement is: ConfigurationManagement.setSubneti(intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setSubneti(intArray) target is: ConfigurationManagement method is: setSubneti(int[])
Matched Method is: setSubneti([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ConfigurationManagement.getSubneti(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.getSubneti() target is: ConfigurationManagement method is: getSubneti()
Matched Method is: getSubneti()[I
TestCase is: int[] intArray = null;
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();

* test suite isTestSuite: 137
Test 0: 
ConfigurationManagement.getChar_txt();
Test 1: 
ConfigurationManagement.getMax_connect_user();
Test 2: 
ConfigurationManagement.addNum_regs();
Test 3: 
ConfigurationManagement.getSubneti();
Test 4: 
ACO aCO = ACO.DENY_ALLOW;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 5: 
ConfigurationManagement.getFriends_txt();
Test 6: 
ConfigurationManagement.getChar_id_count();
Test 7: 
ConfigurationManagement.getAccess_allownum();
Test 8: 
ConfigurationManagement.getGMMax();
Test 9: 
ConfigurationManagement.getAuth_before_save_file();
Test 10: 
ConfigurationManagement.isLogin_ip_set_();
Test 11: 
ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();
Test 12: 
ConfigurationManagement.getStartLimitedTime();
Test 13: 
ConfigurationManagement.getAutosave_time();
Test 14: 
ConfigurationManagement.getAccess_allow();
Test 15: 
ConfigurationManagement.setTimestamp_format("EARTH");
Test 16: 
ConfigurationManagement.getNew_reg_tick();
Test 17: 
ConfigurationManagement.getAccess_order();
Test 18: 
ConfigurationManagement.lesslessAuth_before_save_file();
ConfigurationManagement.getAuth_before_save_file();
Test 19: 
ConfigurationManagement.getSubnetmaski();
Test 20: 
ConfigurationManagement.getTimestamp_format();
Test 21: 
ConfigurationManagement.setNew_reg_tick((-56L));
ConfigurationManagement.getNew_reg_tick();
Test 22: 
ConfigurationManagement.getAutosave_interval();
Test 23: 
ConfigurationManagement.addGMMax();
Test 24: 
ConfigurationManagement.setStartLimitedTime(718L);
Test 25: 
ConfigurationManagement.getAccess_denynum();
Test 26: 
ConfigurationManagement.setLogin_ip_str("use_MD5_passwords");
Test 27: 
int[] intArray = new int[9];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_config_readTXT("F");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 28: 
ConfigurationManagement.getLan_char_ip();
Test 29: 
ConfigurationManagement.getWisp_server_name();
Test 30: 
ConfigurationManagement.isConsole_silent();
Test 31: 
ConfigurationManagement.getBackup_txt();
Test 32: 
ConfigurationManagement.getNum_regs();
Test 33: 
ConfigurationManagement.getServer_num();
Test 34: 
ConfigurationManagement.setAccess_deny("EARTH");
ConfigurationManagement.getAccess_deny();
Test 35: 
ConfigurationManagement.setAccess_allownum(1802);
ConfigurationManagement.display_conf_warnings();
Test 36: 
ConfigurationManagement.getAccess_deny();
Test 37: 
ConfigurationManagement.setSubnetmaski((int[]) null);
Test 38: 
ConfigurationManagement.getScdata_txt();
Test 39: 
ConfigurationManagement.getGm_allow_level();
Test 40: 
ConfigurationManagement.getEmail_creation();
Test 41: 
ConfigurationManagement.setAccess_denynum(1024);
ConfigurationManagement.getAccess_denynum();
Test 42: 
ConfigurationManagement.addChar_id_count();
ConfigurationManagement.getChar_id_count();
Test 43: 
ConfigurationManagement.getBackup_txt_flag();
Test 44: 
ConfigurationManagement.addChar_id_count(99);
Test 45: 
ConfigurationManagement.setNum_regs(0L);
Test 46: 
ConfigurationManagement.getLogin_ip_str();
Test 47: 
ConfigurationManagement.addGMMax(0);
Test 48: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_lan_config_read("127.0.0.1");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
ConfigurationManagement.yesNoOnOffToBoolean("YES");
Test 50: 
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
Test 51: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
Test 52: 
ConfigurationManagement.yesNoOnOffToBoolean("NO");
Test 53: 
// Undeclared exception!
try { 
  ConfigurationManagement.yesNoOnOffToBoolean("OF");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.utiles.ConfigurationManagement", e);
}

Test 54: 
ConfigurationManagement.display_conf_warnings();
Test 55: 
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 56: 
ConfigurationManagement.setAccess_allownum((-1952769234));
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 57: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU");
FileSystemHandling.createFolder(evoSuiteFile);
ConfigurationManagement.login_config_readXML("ihGU");
Test 58: 
ConfigurationManagement.login_config_readXML("Cannot construct ");
Test 59: 
ConfigurationManagement.getLoginAthenaConf();
Test 60: 
ConfigurationManagement.setAccess_allow("0x'%?&@");
ConfigurationManagement.getAccess_allow();
Test 61: 
ConfigurationManagement.setAccess_allownum((-1446741810));
ConfigurationManagement.getAccess_allownum();
Test 62: 
ConfigurationManagement.setAccess_allownum(30);
ConfigurationManagement.getAccess_allownum();
Test 63: 
ConfigurationManagement.setAccess_deny("");
ConfigurationManagement.getAccess_deny();
Test 64: 
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 65: 
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 66: 
ConfigurationManagement.setAuth_before_save_file(65535);
ConfigurationManagement.getAuth_before_save_file();
Test 67: 
ConfigurationManagement.setChar_id_count((-5369));
ConfigurationManagement.getChar_id_count();
Test 68: 
ConfigurationManagement.setGMMax((-10));
ConfigurationManagement.getGMMax();
Test 69: 
ConfigurationManagement.setLan_char_ip(":!! 4%`{w=pcR_:");
ConfigurationManagement.getLan_char_ip();
Test 70: 
ConfigurationManagement.setNew_reg_tick(1953L);
ConfigurationManagement.getNew_reg_tick();
Test 71: 
ConfigurationManagement.addNum_regs((-2557L));
ConfigurationManagement.getNum_regs();
Test 72: 
ConfigurationManagement.addNum_regs(2809L);
ConfigurationManagement.getNum_regs();
Test 73: 
ConfigurationManagement.setServer_num((-1326));
ConfigurationManagement.getServer_num();
Test 74: 
ConfigurationManagement.setServer_num(30);
ConfigurationManagement.getServer_num();
Test 75: 
ConfigurationManagement.setStart_limited_time(256L);
ConfigurationManagement.getStartLimitedTime();
Test 76: 
ConfigurationManagement.setStart_limited_time(0L);
ConfigurationManagement.getStartLimitedTime();
Test 77: 
int[] intArray = new int[0];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
Test 78: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
Test 79: 

Test 80: 

Test 81: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 82: 

Test 83: 

Test 84: 

Test 85: 
ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();

Test 86: 
ConfigurationManagement.getStartLimitedTime();

Test 87: 
ConfigurationManagement.getAccess_allow();

Test 88: 
ConfigurationManagement.setTimestamp_format("Eastern Standard Time");

Test 89: 
ConfigurationManagement.getNew_reg_tick();

Test 90: 

Test 91: 
ConfigurationManagement.getTimestamp_format();

Test 92: 
ConfigurationManagement.setNew_reg_tick((long) (Long) null);
ConfigurationManagement.getNew_reg_tick();

Test 93: 

Test 94: 
ConfigurationManagement.setStartLimitedTime(2019L);

Test 95: 
ConfigurationManagement.setLogin_ip_str("192.168.0.1");

Test 96: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.login_config_readTXT("F");

Test 97: 
ConfigurationManagement.isConsole_silent();

Test 98: 
ConfigurationManagement.getNum_regs();

Test 99: 
ConfigurationManagement.setAccess_deny("MOON");
ConfigurationManagement.getAccess_deny();

Test 100: 
ConfigurationManagement.setAccess_allownum(1000);
ConfigurationManagement.display_conf_warnings();

Test 101: 
ConfigurationManagement.setSubnetmaski((int[]) null);

Test 102: 

Test 103: 
ConfigurationManagement.getGm_allow_level();

Test 104: 
ConfigurationManagement.setAccess_denynum(9001);
ConfigurationManagement.getAccess_denynum();

Test 105: 
ConfigurationManagement.addChar_id_count(100);

Test 106: 
ConfigurationManagement.setNum_regs(0L);
ConfigurationManagement.setNum_regs(50L);
ConfigurationManagement.setNum_regs((long) (Long) null);
long _long = 100L;
ConfigurationManagement.setNum_regs(_long);

Test 107: 
ConfigurationManagement.addGMMax((int) "123456789");

Test 108: 
int[] intArray = new int[4];
ConfigurationManagement.login_lan_config_read("127.0.0.1");

Test 109: 
ConfigurationManagement.yesNoOnOffToBoolean("YES");
ConfigurationManagement.yesNoOnOffToBoolean("NO");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");

Test 110: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
ConfigurationManagement.yesNoOnOffToBoolean("TRUE");
String string = "FALSE";
ConfigurationManagement.yesNoOnOffToBoolean(string);

Test 111: 
ConfigurationManagement.yesNoOnOffToBoolean("on");

Test 112: 
ConfigurationManagement.yesNoOnOffToBoolean("ENABLED");
String string = "DISABLED";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "PENDING";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = null;
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "";
ConfigurationManagement.yesNoOnOffToBoolean(string);

Test 113: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
ConfigurationManagement.yesNoOnOffToBoolean("YES");
ConfigurationManagement.yesNoOnOffToBoolean("NO");

Test 114: 

Test 115: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 116: 
ConfigurationManagement.setAccess_allownum(123456789);
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 117: 
FileSystemHandling.createFolder((EvoSuiteFile) null);
ConfigurationManagement.login_config_readXML("config-file.xml");

Test 118: 
ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input");

Test 119: 
ConfigurationManagement.setAccess_allow("1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
ConfigurationManagement.getAccess_allow();

Test 120: 
ConfigurationManagement.setAccess_allownum((int) (-9223372036854775808L));
ConfigurationManagement.getAccess_allownum();
long _long = 0L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = null;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = 2345678901234567890L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
double _double = 123.45678901234568;
ConfigurationManagement.setAccess_allownum((int) _double);
ConfigurationManagement.getAccess_allownum();
String string = "Hello, world!";
ConfigurationManagement.setAccess_allownum((int) string);
ConfigurationManagement.getAccess_allownum();

Test 121: 
ConfigurationManagement.setAccess_allownum(80);
ConfigurationManagement.getAccess_allownum();

Test 122: 
ConfigurationManagement.setAccess_deny("The user does not have access to this resource");
ConfigurationManagement.getAccess_deny();

Test 123: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.getAccess_order();

Test 124: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.getAccess_order();

Test 125: 
ConfigurationManagement.setAuth_before_save_file(1);
ConfigurationManagement.getAuth_before_save_file();
ConfigurationManagement.setAuth_before_save_file(0);
ConfigurationManagement.getAuth_before_save_file();

Test 126: 
ConfigurationManagement.setChar_id_count(12);
ConfigurationManagement.getChar_id_count();

Test 127: 
ConfigurationManagement.setGMMax(2);
ConfigurationManagement.getGMMax();

Test 128: 
ConfigurationManagement.setLan_char_ip("192.168.0.1");
ConfigurationManagement.getLan_char_ip();

Test 129: 
ConfigurationManagement.setNew_reg_tick((long) "2023-01-01T00:00:00");
ConfigurationManagement.getNew_reg_tick();

Test 130: 
ConfigurationManagement.addNum_regs((long) (Long) null);
ConfigurationManagement.getNum_regs();

Test 131: 
ConfigurationManagement.addNum_regs(15000L);
ConfigurationManagement.getNum_regs();

Test 132: 
ConfigurationManagement.setServer_num(1);
ConfigurationManagement.getServer_num();

Test 133: 
ConfigurationManagement.setServer_num(30);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num(5);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num(0);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num((int) (Integer) null);
ConfigurationManagement.getServer_num();

Test 134: 
ConfigurationManagement.getStartLimitedTime();

Test 135: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();

Test 136: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();


* Generated after the refinement and before minimization 137 tests with total length 256
* test suite isTestSuite: 137
Test 0: 
ConfigurationManagement.getChar_txt();
Test 1: 
ConfigurationManagement.getMax_connect_user();
Test 2: 
ConfigurationManagement.addNum_regs();
Test 3: 
ConfigurationManagement.getSubneti();
Test 4: 
ACO aCO = ACO.DENY_ALLOW;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 5: 
ConfigurationManagement.getFriends_txt();
Test 6: 
ConfigurationManagement.getChar_id_count();
Test 7: 
ConfigurationManagement.getAccess_allownum();
Test 8: 
ConfigurationManagement.getGMMax();
Test 9: 
ConfigurationManagement.getAuth_before_save_file();
Test 10: 
ConfigurationManagement.isLogin_ip_set_();
Test 11: 
ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();
Test 12: 
ConfigurationManagement.getStartLimitedTime();
Test 13: 
ConfigurationManagement.getAutosave_time();
Test 14: 
ConfigurationManagement.getAccess_allow();
Test 15: 
ConfigurationManagement.setTimestamp_format("EARTH");
Test 16: 
ConfigurationManagement.getNew_reg_tick();
Test 17: 
ConfigurationManagement.getAccess_order();
Test 18: 
ConfigurationManagement.lesslessAuth_before_save_file();
ConfigurationManagement.getAuth_before_save_file();
Test 19: 
ConfigurationManagement.getSubnetmaski();
Test 20: 
ConfigurationManagement.getTimestamp_format();
Test 21: 
ConfigurationManagement.setNew_reg_tick((-56L));
ConfigurationManagement.getNew_reg_tick();
Test 22: 
ConfigurationManagement.getAutosave_interval();
Test 23: 
ConfigurationManagement.addGMMax();
Test 24: 
ConfigurationManagement.setStartLimitedTime(718L);
Test 25: 
ConfigurationManagement.getAccess_denynum();
Test 26: 
ConfigurationManagement.setLogin_ip_str("use_MD5_passwords");
Test 27: 
int[] intArray = new int[9];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_config_readTXT("F");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 28: 
ConfigurationManagement.getLan_char_ip();
Test 29: 
ConfigurationManagement.getWisp_server_name();
Test 30: 
ConfigurationManagement.isConsole_silent();
Test 31: 
ConfigurationManagement.getBackup_txt();
Test 32: 
ConfigurationManagement.getNum_regs();
Test 33: 
ConfigurationManagement.getServer_num();
Test 34: 
ConfigurationManagement.setAccess_deny("EARTH");
ConfigurationManagement.getAccess_deny();
Test 35: 
ConfigurationManagement.setAccess_allownum(1802);
ConfigurationManagement.display_conf_warnings();
Test 36: 
ConfigurationManagement.getAccess_deny();
Test 37: 
ConfigurationManagement.setSubnetmaski((int[]) null);
Test 38: 
ConfigurationManagement.getScdata_txt();
Test 39: 
ConfigurationManagement.getGm_allow_level();
Test 40: 
ConfigurationManagement.getEmail_creation();
Test 41: 
ConfigurationManagement.setAccess_denynum(1024);
ConfigurationManagement.getAccess_denynum();
Test 42: 
ConfigurationManagement.addChar_id_count();
ConfigurationManagement.getChar_id_count();
Test 43: 
ConfigurationManagement.getBackup_txt_flag();
Test 44: 
ConfigurationManagement.addChar_id_count(99);
Test 45: 
ConfigurationManagement.setNum_regs(0L);
Test 46: 
ConfigurationManagement.getLogin_ip_str();
Test 47: 
ConfigurationManagement.addGMMax(0);
Test 48: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_lan_config_read("127.0.0.1");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
ConfigurationManagement.yesNoOnOffToBoolean("YES");
Test 50: 
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
Test 51: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
Test 52: 
ConfigurationManagement.yesNoOnOffToBoolean("NO");
Test 53: 
// Undeclared exception!
try { 
  ConfigurationManagement.yesNoOnOffToBoolean("OF");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.utiles.ConfigurationManagement", e);
}

Test 54: 
ConfigurationManagement.display_conf_warnings();
Test 55: 
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 56: 
ConfigurationManagement.setAccess_allownum((-1952769234));
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 57: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU");
FileSystemHandling.createFolder(evoSuiteFile);
ConfigurationManagement.login_config_readXML("ihGU");
Test 58: 
ConfigurationManagement.login_config_readXML("Cannot construct ");
Test 59: 
ConfigurationManagement.getLoginAthenaConf();
Test 60: 
ConfigurationManagement.setAccess_allow("0x'%?&@");
ConfigurationManagement.getAccess_allow();
Test 61: 
ConfigurationManagement.setAccess_allownum((-1446741810));
ConfigurationManagement.getAccess_allownum();
Test 62: 
ConfigurationManagement.setAccess_allownum(30);
ConfigurationManagement.getAccess_allownum();
Test 63: 
ConfigurationManagement.setAccess_deny("");
ConfigurationManagement.getAccess_deny();
Test 64: 
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 65: 
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 66: 
ConfigurationManagement.setAuth_before_save_file(65535);
ConfigurationManagement.getAuth_before_save_file();
Test 67: 
ConfigurationManagement.setChar_id_count((-5369));
ConfigurationManagement.getChar_id_count();
Test 68: 
ConfigurationManagement.setGMMax((-10));
ConfigurationManagement.getGMMax();
Test 69: 
ConfigurationManagement.setLan_char_ip(":!! 4%`{w=pcR_:");
ConfigurationManagement.getLan_char_ip();
Test 70: 
ConfigurationManagement.setNew_reg_tick(1953L);
ConfigurationManagement.getNew_reg_tick();
Test 71: 
ConfigurationManagement.addNum_regs((-2557L));
ConfigurationManagement.getNum_regs();
Test 72: 
ConfigurationManagement.addNum_regs(2809L);
ConfigurationManagement.getNum_regs();
Test 73: 
ConfigurationManagement.setServer_num((-1326));
ConfigurationManagement.getServer_num();
Test 74: 
ConfigurationManagement.setServer_num(30);
ConfigurationManagement.getServer_num();
Test 75: 
ConfigurationManagement.setStart_limited_time(256L);
ConfigurationManagement.getStartLimitedTime();
Test 76: 
ConfigurationManagement.setStart_limited_time(0L);
ConfigurationManagement.getStartLimitedTime();
Test 77: 
int[] intArray = new int[0];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
Test 78: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
Test 79: 

Test 80: 

Test 81: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 82: 

Test 83: 

Test 84: 

Test 85: 
ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();

Test 86: 
ConfigurationManagement.getStartLimitedTime();

Test 87: 
ConfigurationManagement.getAccess_allow();

Test 88: 
ConfigurationManagement.setTimestamp_format("Eastern Standard Time");

Test 89: 
ConfigurationManagement.getNew_reg_tick();

Test 90: 

Test 91: 
ConfigurationManagement.getTimestamp_format();

Test 92: 
ConfigurationManagement.setNew_reg_tick((long) (Long) null);
ConfigurationManagement.getNew_reg_tick();

Test 93: 

Test 94: 
ConfigurationManagement.setStartLimitedTime(2019L);

Test 95: 
ConfigurationManagement.setLogin_ip_str("192.168.0.1");

Test 96: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.login_config_readTXT("F");

Test 97: 
ConfigurationManagement.isConsole_silent();

Test 98: 
ConfigurationManagement.getNum_regs();

Test 99: 
ConfigurationManagement.setAccess_deny("MOON");
ConfigurationManagement.getAccess_deny();

Test 100: 
ConfigurationManagement.setAccess_allownum(1000);
ConfigurationManagement.display_conf_warnings();

Test 101: 
ConfigurationManagement.setSubnetmaski((int[]) null);

Test 102: 

Test 103: 
ConfigurationManagement.getGm_allow_level();

Test 104: 
ConfigurationManagement.setAccess_denynum(9001);
ConfigurationManagement.getAccess_denynum();

Test 105: 
ConfigurationManagement.addChar_id_count(100);

Test 106: 
ConfigurationManagement.setNum_regs(0L);
ConfigurationManagement.setNum_regs(50L);
ConfigurationManagement.setNum_regs((long) (Long) null);
long _long = 100L;
ConfigurationManagement.setNum_regs(_long);

Test 107: 
ConfigurationManagement.addGMMax((int) "123456789");

Test 108: 
int[] intArray = new int[4];
ConfigurationManagement.login_lan_config_read("127.0.0.1");

Test 109: 
ConfigurationManagement.yesNoOnOffToBoolean("YES");
ConfigurationManagement.yesNoOnOffToBoolean("NO");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");

Test 110: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
ConfigurationManagement.yesNoOnOffToBoolean("TRUE");
String string = "FALSE";
ConfigurationManagement.yesNoOnOffToBoolean(string);

Test 111: 
ConfigurationManagement.yesNoOnOffToBoolean("on");

Test 112: 
ConfigurationManagement.yesNoOnOffToBoolean("ENABLED");
String string = "DISABLED";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "PENDING";
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = null;
ConfigurationManagement.yesNoOnOffToBoolean(string);
String string = "";
ConfigurationManagement.yesNoOnOffToBoolean(string);

Test 113: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
ConfigurationManagement.yesNoOnOffToBoolean("YES");
ConfigurationManagement.yesNoOnOffToBoolean("NO");

Test 114: 

Test 115: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 116: 
ConfigurationManagement.setAccess_allownum(123456789);
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.display_conf_warnings();

Test 117: 
FileSystemHandling.createFolder((EvoSuiteFile) null);
ConfigurationManagement.login_config_readXML("config-file.xml");

Test 118: 
ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input");

Test 119: 
ConfigurationManagement.setAccess_allow("1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
ConfigurationManagement.getAccess_allow();

Test 120: 
ConfigurationManagement.setAccess_allownum((int) (-9223372036854775808L));
ConfigurationManagement.getAccess_allownum();
long _long = 0L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = null;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
long _long = 2345678901234567890L;
ConfigurationManagement.setAccess_allownum((int) _long);
ConfigurationManagement.getAccess_allownum();
double _double = 123.45678901234568;
ConfigurationManagement.setAccess_allownum((int) _double);
ConfigurationManagement.getAccess_allownum();
String string = "Hello, world!";
ConfigurationManagement.setAccess_allownum((int) string);
ConfigurationManagement.getAccess_allownum();

Test 121: 
ConfigurationManagement.setAccess_allownum(80);
ConfigurationManagement.getAccess_allownum();

Test 122: 
ConfigurationManagement.setAccess_deny("The user does not have access to this resource");
ConfigurationManagement.getAccess_deny();

Test 123: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.getAccess_order();

Test 124: 
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.getAccess_order();

Test 125: 
ConfigurationManagement.setAuth_before_save_file(1);
ConfigurationManagement.getAuth_before_save_file();
ConfigurationManagement.setAuth_before_save_file(0);
ConfigurationManagement.getAuth_before_save_file();

Test 126: 
ConfigurationManagement.setChar_id_count(12);
ConfigurationManagement.getChar_id_count();

Test 127: 
ConfigurationManagement.setGMMax(2);
ConfigurationManagement.getGMMax();

Test 128: 
ConfigurationManagement.setLan_char_ip("192.168.0.1");
ConfigurationManagement.getLan_char_ip();

Test 129: 
ConfigurationManagement.setNew_reg_tick((long) "2023-01-01T00:00:00");
ConfigurationManagement.getNew_reg_tick();

Test 130: 
ConfigurationManagement.addNum_regs((long) (Long) null);
ConfigurationManagement.getNum_regs();

Test 131: 
ConfigurationManagement.addNum_regs(15000L);
ConfigurationManagement.getNum_regs();

Test 132: 
ConfigurationManagement.setServer_num(1);
ConfigurationManagement.getServer_num();

Test 133: 
ConfigurationManagement.setServer_num(30);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num(5);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num(0);
ConfigurationManagement.getServer_num();
ConfigurationManagement.setServer_num((int) (Integer) null);
ConfigurationManagement.getServer_num();

Test 134: 
ConfigurationManagement.getStartLimitedTime();

Test 135: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();

Test 136: 
ConfigurationManagement.setSubneti((int[]) null);
ConfigurationManagement.getSubneti();


* Minimizing test suite
* test suite isTestSuite: 79
Test 0: 
ConfigurationManagement.getChar_txt();
Test 1: 
ConfigurationManagement.getMax_connect_user();
Test 2: 
ConfigurationManagement.addNum_regs();
Test 3: 
ConfigurationManagement.getSubneti();
Test 4: 
ConfigurationManagement.getFriends_txt();
Test 5: 
ConfigurationManagement.getChar_id_count();
Test 6: 
ConfigurationManagement.setStart_limited_time(0L);
ConfigurationManagement.getStartLimitedTime();
Test 7: 
ConfigurationManagement.getAccess_allownum();
Test 8: 
ConfigurationManagement.getGMMax();
Test 9: 
ConfigurationManagement.getAuth_before_save_file();
Test 10: 
ConfigurationManagement.isLogin_ip_set_();
Test 11: 
ConfigurationManagement.setConsole_silent(true);
ConfigurationManagement.isConsole_silent();
Test 12: 
ConfigurationManagement.getStartLimitedTime();
Test 13: 
ConfigurationManagement.getAutosave_time();
Test 14: 
ConfigurationManagement.getAccess_allow();
Test 15: 
ConfigurationManagement.setTimestamp_format("Eastern Standard Time");
Test 16: 
ConfigurationManagement.getNew_reg_tick();
Test 17: 
ConfigurationManagement.addNum_regs(15000L);
ConfigurationManagement.getNum_regs();
Test 18: 
ConfigurationManagement.getAccess_order();
Test 19: 
ConfigurationManagement.lesslessAuth_before_save_file();
ConfigurationManagement.getAuth_before_save_file();
Test 20: 
ConfigurationManagement.getSubnetmaski();
Test 21: 
ConfigurationManagement.getTimestamp_format();
Test 22: 
ConfigurationManagement.setNew_reg_tick((-56L));
ConfigurationManagement.getNew_reg_tick();
Test 23: 
ConfigurationManagement.getAutosave_interval();
Test 24: 
ConfigurationManagement.addGMMax();
Test 25: 
ConfigurationManagement.setStartLimitedTime(2019L);
Test 26: 
ConfigurationManagement.getAccess_denynum();
Test 27: 
ConfigurationManagement.setLogin_ip_str("192.168.0.1");
Test 28: 
ConfigurationManagement.getLan_char_ip();
Test 29: 
ConfigurationManagement.getWisp_server_name();
Test 30: 
ConfigurationManagement.isConsole_silent();
Test 31: 
ConfigurationManagement.getBackup_txt();
Test 32: 
ConfigurationManagement.setLan_char_ip("192.168.0.1");
ConfigurationManagement.getLan_char_ip();
Test 33: 
ConfigurationManagement.getNum_regs();
Test 34: 
ConfigurationManagement.getServer_num();
Test 35: 
ConfigurationManagement.setServer_num(1);
ConfigurationManagement.getServer_num();
Test 36: 
ConfigurationManagement.getAccess_deny();
Test 37: 
ConfigurationManagement.setSubnetmaski((int[]) null);
Test 38: 
ConfigurationManagement.getScdata_txt();
Test 39: 
ConfigurationManagement.getGm_allow_level();
Test 40: 
ConfigurationManagement.getEmail_creation();
Test 41: 
ConfigurationManagement.addChar_id_count();
ConfigurationManagement.getChar_id_count();
Test 42: 
ConfigurationManagement.getBackup_txt_flag();
Test 43: 
ConfigurationManagement.addChar_id_count(100);
Test 44: 
ConfigurationManagement.setNum_regs(0L);
Test 45: 
ConfigurationManagement.getLogin_ip_str();
Test 46: 
ConfigurationManagement.addGMMax(0);
Test 47: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_lan_config_read("127.0.0.1");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
int[] intArray = new int[9];
ConfigurationManagement.setSubneti(intArray);
// Undeclared exception!
try { 
  ConfigurationManagement.login_config_readTXT("F");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
ConfigurationManagement.yesNoOnOffToBoolean("YES");
Test 50: 
ConfigurationManagement.yesNoOnOffToBoolean("NO");
Test 51: 
ConfigurationManagement.yesNoOnOffToBoolean("ON");
Test 52: 
ConfigurationManagement.yesNoOnOffToBoolean("OFF");
Test 53: 
// Undeclared exception!
try { 
  ConfigurationManagement.yesNoOnOffToBoolean("TRUE");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.utiles.ConfigurationManagement", e);
}

Test 54: 
ConfigurationManagement.display_conf_warnings();
Test 55: 
ACO aCO = ACO.DENY_ALLOW;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 56: 
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 57: 
ConfigurationManagement.setAccess_allownum((-1952769234));
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.display_conf_warnings();
Test 58: 
ConfigurationManagement.setAccess_allownum(123456789);
ConfigurationManagement.display_conf_warnings();
Test 59: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("ihGU");
FileSystemHandling.createFolder(evoSuiteFile);
ConfigurationManagement.login_config_readXML("ihGU");
Test 60: 
ConfigurationManagement.login_config_readXML("Cannot construct a valid XML document from the given input");
Test 61: 
ConfigurationManagement.getLoginAthenaConf();
Test 62: 
ConfigurationManagement.setAccess_allow("0x'%?&@");
ConfigurationManagement.getAccess_allow();
Test 63: 
ConfigurationManagement.setAccess_allownum((-1446741810));
ConfigurationManagement.getAccess_allownum();
Test 64: 
ConfigurationManagement.setAccess_allownum(30);
ConfigurationManagement.getAccess_allownum();
Test 65: 
ConfigurationManagement.setAccess_deny("");
ConfigurationManagement.getAccess_deny();
Test 66: 
ConfigurationManagement.setAccess_deny("EARTH");
ConfigurationManagement.getAccess_deny();
Test 67: 
ConfigurationManagement.setAccess_denynum(1024);
ConfigurationManagement.getAccess_denynum();
Test 68: 
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 69: 
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
ConfigurationManagement.getAccess_order();
Test 70: 
ConfigurationManagement.setAuth_before_save_file(65535);
ConfigurationManagement.getAuth_before_save_file();
Test 71: 
ConfigurationManagement.setChar_id_count((-5369));
ConfigurationManagement.getChar_id_count();
Test 72: 
ConfigurationManagement.setGMMax((-10));
ConfigurationManagement.getGMMax();
Test 73: 
ConfigurationManagement.setNew_reg_tick(1953L);
ConfigurationManagement.getNew_reg_tick();
Test 74: 
ConfigurationManagement.addNum_regs((-2557L));
ConfigurationManagement.getNum_regs();
Test 75: 
ConfigurationManagement.setServer_num((-1326));
ConfigurationManagement.getServer_num();
Test 76: 
ConfigurationManagement.setStart_limited_time(256L);
ConfigurationManagement.getStartLimitedTime();
Test 77: 
int[] intArray = new int[0];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();
Test 78: 
int[] intArray = new int[4];
ConfigurationManagement.setSubneti(intArray);
ConfigurationManagement.getSubneti();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 190
* Number of covered goals: 87
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 53%
* Total number of goals: 237
* Number of covered goals: 126
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 159
* Number of covered goals: 81
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 62
* Number of covered goals: 62
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 190
* Number of covered goals: 87
* Generated 79 tests with total length 122
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String char_txt = ConfigurationManagement.getChar_txt();
assertNull(char_txt);


** It was a parseable test case! 
refined test name is: testGetCharTxtReturnsNullOnNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String max_connect_user = ConfigurationManagement.getMax_connect_user();
assertNull(max_connect_user);


** It was a parseable test case! 
refined test name is: testGetMaxConnectUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConfigurationManagement.addNum_regs();

** It was a parseable test case! 
refined test name is: testAddNumRegs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int[] subneti = ConfigurationManagement.getSubneti();
assertNull(subneti);


** It was a parseable test case! 
* Computation finished
