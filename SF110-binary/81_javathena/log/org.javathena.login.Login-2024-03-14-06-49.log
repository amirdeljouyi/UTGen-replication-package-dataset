* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.Login
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 12916
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:49:14.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:49:14.223 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:49:14.227 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 06:49:14.432 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:49:14.466 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:49:14.467 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:49:14.481 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:49:14.485 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:49:14.486 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:49:14.494 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:49:14.495 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:49:14.496 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:49:14.497 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:49:14.499 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:49:14.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:49:14.520 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 06:49:14.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.Login
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1064
* Using seed 1710398948601
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 371 / 1064
[MASTER] 06:49:15.714 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:>                             1%] [Cov:===========>                       34%][Progress:>                             2%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:==============>                    40%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:===============>                   44%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:================>                  46%][Progress:==>                           9%] [Cov:================>                  46%][Progress:==>                           9%] [Cov:================>                  46%][Progress:==>                           9%] [Cov:================>                  46%][Progress:===>                          10%] [Cov:================>                  46%][Progress:===>                          10%] [Cov:================>                  46%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:=================>                 49%][Progress:===>                          13%] [Cov:=================>                 49%][Progress:====>                         14%] [Cov:=================>                 49%][Progress:====>                         14%] [Cov:=================>                 49%][Progress:====>                         14%] [Cov:=================>                 49%][Progress:====>                         14%] [Cov:=================>                 50%][Progress:====>                         14%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:========>                     27%] [Cov:=================>                 51%][Progress:========>                     27%] [Cov:=================>                 51%][Progress:========>                     27%] [Cov:=================>                 51%][Progress:========>                     28%] [Cov:=================>                 51%][Progress:========>                     28%] [Cov:=================>                 51%][Progress:========>                     28%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:=================>                 51%][Progress:=========>                    30%] [Cov:=================>                 51%][Progress:=========>                    30%] [Cov:=================>                 51%][Progress:=========>                    30%] [Cov:=================>                 51%][Progress:=========>                    30%] [Cov:=================>                 51%][Progress:=========>                    31%] [Cov:=================>                 51%][Progress:=========>                    31%] [Cov:=================>                 51%][Progress:=========>                    31%] [Cov:=================>                 51%][Progress:=========>                    32%] [Cov:=================>                 51%][Progress:=========>                    32%] [Cov:=================>                 51%][Progress:=========>                    32%] [Cov:=================>                 51%][Progress:=========>                    33%] [Cov:=================>                 51%][Progress:=========>                    33%] [Cov:=================>                 51%][Progress:=========>                    33%] [Cov:=================>                 51%][Progress:=========>                    33%] [Cov:=================>                 51%][Progress:==========>                   34%] [Cov:=================>                 51%][Progress:==========>                   34%] [Cov:=================>                 51%][Progress:==========>                   34%] [Cov:=================>                 51%][Progress:==========>                   34%] [Cov:=================>                 51%][Progress:==========>                   35%] [Cov:=================>                 51%][Progress:==========>                   35%] [Cov:=================>                 51%][Progress:==========>                   35%] [Cov:=================>                 51%][Progress:==========>                   35%] [Cov:=================>                 51%][Progress:==========>                   36%] [Cov:=================>                 51%][Progress:==========>                   36%] [Cov:=================>                 51%][Progress:==========>                   36%] [Cov:=================>                 51%][Progress:===========>                  37%] [Cov:=================>                 51%][Progress:===========>                  37%] [Cov:=================>                 51%][Progress:===========>                  37%] [Cov:==================>                52%][Progress:===========>                  37%] [Cov:==================>                52%][Progress:===========>                  38%] [Cov:==================>                52%][Progress:===========>                  38%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:============>                 40%] [Cov:==================>                52%][Progress:============>                 40%] [Cov:==================>                52%][Progress:============>                 40%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 42%] [Cov:==================>                52%][Progress:============>                 42%] [Cov:==================>                52%][Progress:============>                 42%] [Cov:==================>                52%][Progress:============>                 43%] [Cov:==================>                52%][Progress:============>                 43%] [Cov:==================>                52%][Progress:============>                 43%] [Cov:==================>                52%][Progress:============>                 43%] [Cov:==================>                52%][Progress:=============>                44%] [Cov:==================>                52%][Progress:=============>                44%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:==============>               49%] [Cov:==================>                52%][Progress:==============>               49%] [Cov:==================>                52%][Progress:==============>               49%] [Cov:==================>                52%][Progress:==============>               49%] [Cov:==================>                52%][Progress:==============>               49%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                53%][Progress:===============>              50%] [Cov:==================>                53%][Progress:===============>              51%] [Cov:==================>                53%][Progress:===============>              51%] [Cov:==================>                53%][Progress:===============>              51%] [Cov:==================>                53%][Progress:===============>              52%] [Cov:==================>                53%][Progress:===============>              52%] [Cov:==================>                53%][Progress:===============>              52%] [Cov:==================>                53%][Progress:===============>              53%] [Cov:==================>                53%][Progress:===============>              53%] [Cov:==================>                54%][Progress:===============>              53%] [Cov:==================>                54%][Progress:===============>              53%] [Cov:==================>                54%][Progress:===============>              53%] [Cov:==================>                54%][Progress:================>             54%] [Cov:==================>                54%][Progress:================>             54%] [Cov:==================>                54%][Progress:================>             54%] [Cov:==================>                54%][Progress:================>             54%] [Cov:==================>                54%][Progress:================>             54%] [Cov:==================>                54%][Progress:================>             55%] [Cov:==================>                54%][Progress:================>             55%] [Cov:==================>                54%][Progress:================>             55%] [Cov:==================>                54%][Progress:================>             55%] [Cov:==================>                54%][Progress:================>             56%] [Cov:==================>                54%][Progress:================>             56%] [Cov:==================>                54%][Progress:================>             56%] [Cov:==================>                54%][Progress:================>             56%] [Cov:==================>                54%][Progress:================>             56%] [Cov:==================>                54%][Progress:=================>            57%] [Cov:==================>                54%][Progress:=================>            57%] [Cov:==================>                54%][Progress:=================>            57%] [Cov:==================>                54%][Progress:=================>            57%] [Cov:==================>                54%][Progress:=================>            58%] [Cov:==================>                54%][Progress:=================>            58%] [Cov:==================>                54%][Progress:=================>            58%] [Cov:==================>                54%][Progress:=================>            59%] [Cov:==================>                54%][Progress:=================>            59%] [Cov:==================>                54%][Progress:=================>            59%] [Cov:==================>                54%][Progress:=================>            59%] [Cov:==================>                54%][Progress:==================>           60%] [Cov:==================>                54%][Progress:==================>           60%] [Cov:==================>                54%][Progress:==================>           60%] [Cov:==================>                54%][Progress:==================>           60%] [Cov:==================>                54%][Progress:==================>           61%] [Cov:==================>                54%][Progress:==================>           61%] [Cov:==================>                54%][Progress:==================>           61%] [Cov:==================>                54%][Progress:==================>           61%] [Cov:==================>                54%][Progress:==================>           62%] [Cov:==================>                54%][Progress:==================>           62%] [Cov:==================>                54%][Progress:==============================100%] [Cov:==================>                54%]
* Search finished after 206s and 232 generations, 59161 statements, best individual has fitness: 466.0
* Generated before the refinement 67 tests with total length 190
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.javathena.login.Login$ConnectionListener(Lorg/javathena/login/Login;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login$ConnectionListener
statement code is: Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_ConnectionListener.close()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_ConnectionListener.run()
test data is: Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
        // Close the connection after running it
        login_ConnectionListener.close();
        // Run the connection listener in a separate thread
        Thread t = new Thread(login_ConnectionListener);
        t.start();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Close the connection after running it
login_ConnectionListener.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Close the connection after running it
login_ConnectionListener.close() target is: login_ConnectionListener method is: close()
statement is: // Run the connection listener in a separate thread
Thread t = new Thread(login_ConnectionListener), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: t.start(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: t.start() target is: t method is: start()
TestCase is: Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getLog_fp()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.File
statement code is: File log_fp = login.getLog_fp()
test data is: Login login = new Login();
login.getLog_fp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setUsername("john.doe");
        login.setPassword("password123");
        login.getLog_fp();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setUsername("john.doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername("john.doe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password123") target is: login method is: setPassword(java.lang.String)
statement is: login.getLog_fp(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getLog_fp() target is: login method is: getLog_fp()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: getLog_fp()Ljava/io/File;
TestCase is: Login login = new Login();
login.getLog_fp();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setOut(Ljava/io/PrintWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.setOut((PrintWriter) null)
test data is: Login login = new Login();
login.setOut((PrintWriter) null);

* Computation finished
