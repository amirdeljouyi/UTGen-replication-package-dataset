* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.UserManagement
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 11877
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:36:51.710 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:36:51.716 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:36:51.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:36:52.143 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 02:36:52.240 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:36:52.242 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:36:52.244 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:36:53.732 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 02:36:53.743 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 02:36:53.744 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 02:36:54.387 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 02:36:54.387 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 02:36:54.388 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 02:36:54.388 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 02:36:54.390 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 02:36:54.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 02:36:54.514 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 02:36:54.823 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.UserManagement
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1851
* Using seed 1710383806724
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 845 / 1851
[Progress:>                             2%] [Cov:=====>                             16%][Progress:>                             3%] [Cov:======>                            19%][Progress:=>                            4%] [Cov:=======>                           20%][Progress:=>                            5%] [Cov:=======>                           21%][Progress:=>                            5%] [Cov:=======>                           22%][Progress:=>                            5%] [Cov:=======>                           22%][Progress:=>                            6%] [Cov:========>                          23%][MASTER] 02:37:08.432 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:=>                            6%] [Cov:========>                          23%][Progress:=>                            6%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           8%] [Cov:========>                          24%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][MASTER] 02:37:36.276 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Class<T> : Type points to itself
[MASTER] 02:37:36.276 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:======>                       23%] [Cov:==========>                        29%][Progress:======>                       23%] [Cov:==========>                        29%][Progress:=======>                      24%] [Cov:==========>                        29%][Progress:=======>                      24%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:==========>                        29%][Progress:=========>                    32%] [Cov:==========>                        29%][Progress:=========>                    33%] [Cov:==========>                        29%][Progress:=========>                    33%] [Cov:==========>                        29%][Progress:=========>                    33%] [Cov:==========>                        29%][Progress:=========>                    33%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   35%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  37%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:===========>                  39%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 42%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:=============>                44%] [Cov:==========>                        29%][Progress:=============>                44%] [Cov:==========>                        29%][Progress:=============>                44%] [Cov:==========>                        29%][Progress:=============>                44%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                46%] [Cov:==========>                        29%][Progress:=============>                46%] [Cov:==========>                        29%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:=============>                46%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               47%] [Cov:==========>                        30%][Progress:==============>               48%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:==============>               49%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            58%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:=================>            59%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           60%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          64%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          65%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:===================>          66%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        72%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:=====================>        73%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       74%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:=======================>      79%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     80%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%]
* Search finished after 202s and 804 generations, 189911 statements, best individual has fitness: 1392.0
* Generated before the refinement 87 tests with total length 210
statement is: addAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount((-3203))
test data is: UserManagement.addAccountIdCount((-3203));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addAccountIdCount(98765);
    }
}
statement is: UserManagement.addAccountIdCount(98765), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(98765) target is: UserManagement method is: addAccountIdCount(int)
Matched Method is: addAccountIdCount(I)V
TestCase is: int _int = 98765;
UserManagement.addAccountIdCount(_int);

statement is: getNBGM()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBGM = UserManagement.getNBGM()
test data is: UserManagement.getNBGM();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before:
        UserManagement.getNBGM();
        // After:
        UserManagement.getNBGM(10, "John Doe", 25);
        UserManagement.getNBGM(15, "Jane Smith", 30);
        UserManagement.getNBGM(20, "Bob Johnson", 40);
    }
}
statement is: // Before:
UserManagement.getNBGM(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Before:
UserManagement.getNBGM() target is: UserManagement method is: getNBGM()
Matched Method is: getNBGM()I
statement is: // After:
UserManagement.getNBGM(10, "John Doe", 25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After:
UserManagement.getNBGM(10, "John Doe", 25) target is: UserManagement method is: getNBGM(int,java.lang.String,int)
statement is: UserManagement.getNBGM(15, "Jane Smith", 30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM(15, "Jane Smith", 30) target is: UserManagement method is: getNBGM(int,java.lang.String,int)
statement is: UserManagement.getNBGM(20, "Bob Johnson", 40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM(20, "Bob Johnson", 40) target is: UserManagement method is: getNBGM(int,java.lang.String,int)
TestCase is: UserManagement.getNBGM();

statement is: setAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAccountIdCount((-842))
test data is: UserManagement.setAccountIdCount((-842));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.setAccountIdCount(10);// Testing with 10 account IDs }}

    }
}
statement is: UserManagement.setAccountIdCount(10)// Testing with 10 account IDs }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAccountIdCount(10)// Testing with 10 account IDs }}
 target is: UserManagement method is: setAccountIdCount(int)
Matched Method is: setAccountIdCount(I)V
TestCase is: int _int = 10;
UserManagement.setAccountIdCount(_int);

statement is: debugXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.debugXML()
test data is: UserManagement.debugXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Example test data for the UserManagement class
        String userID = "JohnDoe";
        int age = 30;
        boolean isAdmin = false;
        // Create a new user object with the above values
        User user = new User(userID, age, isAdmin);
        // Check if the user is an admin
        if (user.isAdmin()) {
            System.out.println(("The user " + userID) + " is an admin.");
        } else {
            System.out.println(("The user " + userID) + " is not an admin.");
        }
        // Change the user's age to 35
        user.setAge(35);
        // Check if the user is still an admin
        if (user.isAdmin()) {
            System.out.println(("The user " + userID) + " is still an admin.");
        } else {
            System.out.println(("The user " + userID) + " is no longer an admin.");
        }
        // Change the user's age to 40
        user.setAge(40);
        // Check if the user is still an admin
        if (user.isAdmin()) {
            System.out.println(("The user " + userID) + " is still an admin.");
        } else {
            System.out.println(("The user " + userID) + " is no longer an admin.");
        }
    }
}
statement is: // Example test data for the UserManagement class
String userID = "JohnDoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isAdmin = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Create a new user object with the above values
User user = new User(userID, age, isAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Check if the user is an admin
if (user.isAdmin()) {
    System.out.println(("The user " + userID) + " is an admin.");
} else {
    System.out.println(("The user " + userID) + " is not an admin.");
}, class spoon.support.reflect.code.CtIfImpl
statement is: // Change the user's age to 35
user.setAge(35), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Change the user's age to 35
user.setAge(35) target is: user method is: setAge(int)
statement is: // Check if the user is still an admin
if (user.isAdmin()) {
    System.out.println(("The user " + userID) + " is still an admin.");
} else {
    System.out.println(("The user " + userID) + " is no longer an admin.");
}, class spoon.support.reflect.code.CtIfImpl
statement is: // Change the user's age to 40
user.setAge(40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Change the user's age to 40
user.setAge(40) target is: user method is: setAge(int)
statement is: // Check if the user is still an admin
if (user.isAdmin()) {
    System.out.println(("The user " + userID) + " is still an admin.");
} else {
    System.out.println(("The user " + userID) + " is no longer an admin.");
}, class spoon.support.reflect.code.CtIfImpl
* this is vulnerable: String string = "JohnDoe"
* this is vulnerable: int _int = 30
* this is vulnerable: boolean _boolean = false
TestCase is: String string = "JohnDoe";
int _int = 30;
boolean _boolean = false;

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: unLogServer(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unLogServer(arg0)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        // A valid socket object
        Socket socket = new Socket("localhost", 8080);
        // An invalid socket object (with a null address)
        Socket invalid_socket = new Socket(null, -1);
    }
}
statement is: // Improved test data for the given code snippet
// A valid socket object
Socket socket = new Socket("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // An invalid socket object (with a null address)
Socket invalid_socket = new Socket(null, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toBecomeGM(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toBecomeGM(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 54321);
        Socket_data socket_data = new Socket_data(mockSocket, "user_id", "password");
        UserManagement.toBecomeGM(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 54321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, "user_id", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.toBecomeGM(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toBecomeGM(socket_data) target is: UserManagement method is: toBecomeGM(Socket_data)
Matched Method is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toBecomeGM(socket_data);

statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("", "", "", (-122))
test data is: UserManagement.addUserSQL("", "", "", (-122));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123);
    }
}
statement is: UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123) target is: UserManagement method is: addUserSQL(java.lang.String,java.lang.String,java.lang.String,int)
Matched Method is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Jane Doe";
String string = "janedoe@example.com";
String string = "9876543210";
int _int = 123;
UserManagement.addUserSQL(string, string, string, _int);

statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // Arrange
        int accountId1 = 123456;
        int accountId2 = 987654;
        String username1 = "johndoe";
        String username2 = "janedoe";
        String password1 = "password123";
        String password2 = "password321";
        // Act
        int accountIdCount = UserManagement.getAccountIdCount();
        // Assert
        assertEquals(accountIdCount, 2);
    }
}
statement is: // Arrange
int accountId1 = 123456, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accountId2 = 987654, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username1 = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username2 = "janedoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password1 = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password2 = "password321", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Act
int accountIdCount = UserManagement.getAccountIdCount(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount() target is: UserManagement method is: getAccountIdCount()
Matched Method is: getAccountIdCount()I
statement is: // Assert
assertEquals(accountIdCount, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals(accountIdCount, 2) target is:  method is: assertEquals(int,int)
* this is vulnerable: int _int = 123456
* this is vulnerable: int _int = 987654
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "janedoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: String string = "password321"
TestCase is: int _int = 123456;
int _int = 987654;
String string = "johndoe";
String string = "janedoe";
String string = "password123";
String string = "password321";
UserManagement.getAccountIdCount();

statement is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL("Incorrect Password.")
test data is: UserManagement.getUserSQL("Incorrect Password.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Change
        the password;
        argument from;
        to a;
        such as;
    }
}
statement is: @Change
the password, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: argument from, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: such as, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.numberOfUser((Socket_data) null, (byte[]) null)
test data is: UserManagement.numberOfUser((Socket_data) null, (byte[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.numberOfUser(new Socket_data("username", "password"), new byte[]{ 1, 2, 3 });
    }
}
statement is: UserManagement.numberOfUser(new Socket_data("username", "password"), new byte[]{ 1, 2, 3 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.numberOfUser(new Socket_data("username", "password"), new byte[]{ 1, 2, 3 }) target is: UserManagement method is: numberOfUser(Socket_data,byte[])
Matched Method is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.numberOfUser(socket_data, byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("4ARf(ln]?", "", "", '=')
statement is: getAccount_id()Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer account_id = auth_data.getAccount_id()
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("4ARf(ln]?", "", "", '=');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", '=');
        Integer account_id = addUserTXT.getAccount_id();
        UserManagement.getUserTxt(account_id);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", '='), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", '=') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Integer account_id = addUserTXT.getAccount_id(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.getAccount_id() target is: addUserTXT method is: getAccount_id()
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: getAccount_id()Ljava/lang/Integer;
statement is: UserManagement.getUserTxt(account_id), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(account_id) target is: UserManagement method is: getUserTxt(java.lang.Integer)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "password123";
char _char = '=';
UserManagement.addUserTXT(string, string, string, _char);
Integer account_id = ((Auth_data) string).getAccount_id();
UserManagement.getUserTxt(account_id);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: addSession(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addSession(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy("127.0.0.1", 8080, "username", "password");
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.addSession(socket_data);
    }
}
statement is: Proxy proxy = new Proxy("127.0.0.1", 8080, "username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.addSession(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(socket_data) target is: UserManagement method is: addSession(Socket_data)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.addSession(socket_data);

statement is: getSessionAt(I)Lorg/javathena/core/data/Socket_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data sessionAt = UserManagement.getSessionAt(87)
test data is: UserManagement.getSessionAt(87);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getSessionAt(new Date().getTime());
    }
}
statement is: UserManagement.getSessionAt(new Date().getTime()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getSessionAt(new Date().getTime()) target is: UserManagement method is: getSessionAt()
Matched Method is: getSessionAt(I)Lorg/javathena/core/data/Socket_data;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = null;
UserManagement.getSessionAt(_int);

statement is: addAccountIdCount()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount()
test data is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int accountId = 987654321;
        String userName = "janedoe";
        String password = "password987";
        // Add the account to the database
        UserManagement.addAccount(accountId, userName, password);
        // Check if the account was added successfully
        if (UserManagement.isAccountAdded()) {
            System.out.println("Account added successfully");
        } else {
            System.out.println("Error adding account");
        }
        // Retrieve the number of accounts in the database
        int count = UserManagement.getAccountCount();
        System.out.println("Number of accounts: " + count);
    }
}
statement is: int accountId = 987654321, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String userName = "janedoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password987", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Add the account to the database
UserManagement.addAccount(accountId, userName, password), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add the account to the database
UserManagement.addAccount(accountId, userName, password) target is: UserManagement method is: addAccount(int,java.lang.String,java.lang.String)
statement is: // Check if the account was added successfully
if (UserManagement.isAccountAdded()) {
    System.out.println("Account added successfully");
} else {
    System.out.println("Error adding account");
}, class spoon.support.reflect.code.CtIfImpl
statement is: // Retrieve the number of accounts in the database
int count = UserManagement.getAccountCount(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountCount() target is: UserManagement method is: getAccountCount()
statement is: System.out.println("Number of accounts: " + count), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Number of accounts: " + count) target is: System.out method is: println(java.lang.String)
* this is vulnerable: int _int = 987654321
* this is vulnerable: String string = "janedoe"
* this is vulnerable: String string = "password987"
TestCase is: int _int = 987654321;
String string = "janedoe";
String string = "password987";

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(4694)
statement is: is_user_online(Ljava/lang/Integer;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean is_user_online = UserManagement.is_user_online(arg0)
test data is: Integer integer = new Integer(4694);
UserManagement.is_user_online(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(2503128);
        UserManagement.is_user_online(integer);
    }
}
statement is: Integer integer = new Integer(2503128), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.is_user_online(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.is_user_online(integer) target is: UserManagement method is: is_user_online(java.lang.Integer)
Matched Method is: is_user_online(Ljava/lang/Integer;)Z
TestCase is: int _int = 2503128;
Integer integer = new Integer(_int);
UserManagement.is_user_online(integer);

statement is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((Integer) null)
test data is: UserManagement.getUserSQL((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL(987654321);
    }
}
statement is: UserManagement.getUserSQL(987654321), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL(987654321) target is: UserManagement method is: getUserSQL(int)
Matched Method is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 987654321;
UserManagement.getUserSQL((Integer) _int);

statement is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer accountID = UserManagement.getAccountID("")
test data is: UserManagement.getAccountID("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getAccountID("johndoe@example.com");
    }
}
statement is: UserManagement.getAccountID("johndoe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountID("johndoe@example.com") target is: UserManagement method is: getAccountID(java.lang.String)
Matched Method is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer;
TestCase is: String string = "johndoe@example.com";
UserManagement.getAccountID(string);

statement is: getNBSession()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBSession = UserManagement.getNBSession()
statement is: anyLocalAddress()Ljava/net/InetAddress; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.net.Inet4Address
statement code is: Inet4Address anyLocalAddress = (Inet4Address)MockInetAddress.anyLocalAddress()
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/InetAddress;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0, 2693)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: int _int = 0 type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = 0
statement is: getSessionAt(I)Lorg/javathena/core/data/Socket_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data sessionAt = UserManagement.getSessionAt(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@856aebae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: byte _byte = (byte)0 type is: class org.evosuite.testcase.statements.numeric.BytePrimitiveStatement return type byte
statement code is: byte _byte = (byte)0
statement is: org.evosuite.testcase.statements.AssignmentStatement@fb4c2c16 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = _byte
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: int _int = 82 type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = 82
statement is: setListenPort(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: socket_data.setListenPort(arg0)
statement is: administationLogin(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.administationLogin(arg0)
statement is: addAccountIdCount()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount()
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) fromClient.PACKAGE_TO_SMALL)
statement is: String string = "" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ""
statement is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: UserManagement.getNBSession();
Inet4Address anyLocalAddress = (Inet4Address)MockInetAddress.anyLocalAddress();
MockSocket mockSocket = new MockSocket(anyLocalAddress, 2693);
FromClient fromClient = new FromClient();
int _int = 0;
Socket_data sessionAt = UserManagement.getSessionAt(_int);
byte[] byteArray = new byte[1];
byte _byte = (byte)0;
byteArray[0] = _byte;
fromClient.parse(sessionAt, byteArray);
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
int _int = 82;
socket_data.setListenPort(_int);
UserManagement.administationLogin(socket_data);
UserManagement.addAccountIdCount();
UserManagement.getUserTxt((Integer) fromClient.PACKAGE_TO_SMALL);
String string = "";
UserManagement.getUserTxt(string);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(99)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(100);
        UserManagement.remove_online_user(integer);
    }
}
statement is: Integer integer = new Integer(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 100;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
test data is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
        // Replace this with a more descriptive and representative value
        auth_dats.put(1234567890, new Auth_data("username1", "password1", "email@example.com"));
        UserManagement.setAuth_dats(auth_dats);
    }
}
statement is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: // Replace this with a more descriptive and representative value
auth_dats.put(1234567890, new Auth_data("username1", "password1", "email@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace this with a more descriptive and representative value
auth_dats.put(1234567890, new Auth_data("username1", "password1", "email@example.com")) target is: auth_dats method is: put(int,Auth_data)
statement is: UserManagement.setAuth_dats(auth_dats), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(auth_dats) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
TestCase is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
test data is: UserManagement.getNBUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int userID = 98765;// Replace with a more descriptive value, such as the user's name or email address

        String username = "jackdoe";// Replace with a more descriptive value, such as the user's full name or username }}

    }
}
statement is: int userID = 98765// Replace with a more descriptive value, such as the user's name or email address
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "jackdoe"// Replace with a more descriptive value, such as the user's full name or username }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 98765
* this is vulnerable: String string = "jackdoe"
TestCase is: int _int = 98765;
String string = "jackdoe";

statement is: addIpToBanListMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addIpToBanListMySQL("")
test data is: UserManagement.addIpToBanListMySQL("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addIpToBanListMySQL("192.168.0.1");
    }
}
statement is: UserManagement.addIpToBanListMySQL("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("192.168.0.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
TestCase is: String string = "192.168.0.1";
UserManagement.addIpToBanListMySQL(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@9e317ae4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xff)), ((byte) (0xab)) };
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xff)), ((byte) (0xab)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ ((byte) (0xff)), ((byte) (0xab)) } Elements: [((byte) (0xff)), ((byte) (0xab))]
lengths: [2] []
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: byte[] byteArray = null;
UserManagement.tabHexToInt(byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p')
statement is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data removeUser = UserManagement.removeUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
UserManagement.removeUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p');
        UserManagement.removeUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.removeUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.removeUser(addUserTXT) target is: UserManagement method is: removeUser(Auth_data)
Matched Method is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Smith";
String string = "johnsmith@email.com";
String string = "GX";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
UserManagement.removeUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: add_online_user(Lorg/javathena/core/data/Auth_data;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int add_online_user = UserManagement.add_online_user(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data("John", "Doe", 30, "johndoe@email.com");
        UserManagement.add_online_user(auth_data);
        // Add an online user with a different name and email address
        Auth_data auth_data2 = new Auth_data("Jane", "Smith", 25, "janesmith@email.com");
        UserManagement.add_online_user(auth_data2);
        // Add an online user with a different age group
        Auth_data auth_data3 = new Auth_data("Bob", "Baker", 40, "bobbaker@email.com");
        UserManagement.add_online_user(auth_data3);
    }
}
statement is: Auth_data auth_data = new Auth_data("John", "Doe", 30, "johndoe@email.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.add_online_user(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Add an online user with a different name and email address
Auth_data auth_data2 = new Auth_data("Jane", "Smith", 25, "janesmith@email.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.add_online_user(auth_data2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data2) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Add an online user with a different age group
Auth_data auth_data3 = new Auth_data("Bob", "Baker", 40, "bobbaker@email.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.add_online_user(auth_data3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data3) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);

statement is: org.evosuite.testcase.statements.ArrayStatement@d8ea747b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[31]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient((Socket_data) null, arg1, false)
test data is: byte[] byteArray = new byte[31];
UserManagement.connectionOfClient((Socket_data) null, byteArray, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[31];
        // Improve the test data by using more descriptive and representative values for the byte array
        UserManagement.connectionOfClient(((Socket_data) (null)), byteArray, false);
    }
}
statement is: byte[] byteArray = new byte[31], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [31] Ct is: byte[] byteArray = new byte[31] isAssignment: false Array: new byte[31] Elements: []
lengths: [31] [31]
Their type are: class [B byte[]
statement is: // Improve the test data by using more descriptive and representative values for the byte array
UserManagement.connectionOfClient(((Socket_data) (null)), byteArray, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improve the test data by using more descriptive and representative values for the byte array
UserManagement.connectionOfClient(((Socket_data) (null)), byteArray, false) target is: UserManagement method is: connectionOfClient(Socket_data,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[31];
boolean _boolean = false;
boolean _boolean = null;
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) _boolean, _boolean);

statement is: org.evosuite.testcase.statements.ArrayStatement@eed0593d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[31]
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient(arg0, arg1, true)
test data is: byte[] byteArray = new byte[31];
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.connectionOfClient(socket_data, byteArray, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        byte[] byteArray = new byte[31];
        Socket socket = new Socket();// Create a fake socket object.

        UserManagement.connectionOfClient(socket, byteArray, true);
    }
}
statement is: // Improved test data:
byte[] byteArray = new byte[31], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [31] Ct is: byte[] byteArray = new byte[31] isAssignment: false Array: new byte[31] Elements: []
lengths: [31] [31]
Their type are: class [B byte[]
statement is: Socket socket = new Socket()// Create a fake socket object.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.connectionOfClient(socket, byteArray, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(socket, byteArray, true) target is: UserManagement method is: connectionOfClient(Socket,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[31];
boolean _boolean = true;
boolean _boolean = null;
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) _boolean, _boolean);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(1970, " KT;", 1970, 1970)
test data is: UserManagement.levelIsValid(1970, " KT;", 1970, 1970);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(1970, "KT;", 1970, 1970);
        // Improved test data:
        UserManagement.levelIsValid("2022-03-04", "KT;", "2022-03-04", "2022-03-04");
    }
}
statement is: UserManagement.levelIsValid(1970, "KT;", 1970, 1970), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(1970, "KT;", 1970, 1970) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
statement is: // Improved test data:
UserManagement.levelIsValid("2022-03-04", "KT;", "2022-03-04", "2022-03-04"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
UserManagement.levelIsValid("2022-03-04", "KT;", "2022-03-04", "2022-03-04") target is: UserManagement method is: levelIsValid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 1970;
String string = "KT;";
int _int = 1970;
int _int = 1970;
UserManagement.levelIsValid(_int, string, _int, _int);
String string = "2022-03-04";
String string = "KT;";
String string = "2022-03-04";
String string = "2022-03-04";
UserManagement.levelIsValid((int) string, string, (int) string, (int) string);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid((-1305), "", (-1305), (-1305))
test data is: UserManagement.levelIsValid((-1305), "", (-1305), (-1305));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(-1305, "John Doe", 50, -1);
    }
}
statement is: UserManagement.levelIsValid(-1305, "John Doe", 50, -1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(-1305, "John Doe", 50, -1) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: String string = "John Doe";
int _int = 50;
int _int = null;
int _int = null;
UserManagement.levelIsValid((int) string, (String) _int, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(46, "MQy>@]Vtgi/o>%:@m", 46, 46)
test data is: UserManagement.levelIsValid(46, "MQy>@]Vtgi/o>%:@m", 46, 46);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(46, "A level string that is too long", 46, 46);
        UserManagement.levelIsValid(46, "A level string that is too short", 46, 46);
        UserManagement.levelIsValid(46, "A level string with an invalid character", 46, 46);
    }
}
statement is: UserManagement.levelIsValid(46, "A level string that is too long", 46, 46), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(46, "A level string that is too long", 46, 46) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
statement is: UserManagement.levelIsValid(46, "A level string that is too short", 46, 46), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(46, "A level string that is too short", 46, 46) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
statement is: UserManagement.levelIsValid(46, "A level string with an invalid character", 46, 46), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(46, "A level string with an invalid character", 46, 46) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 46;
String string = "A level string that is too long";
int _int = 46;
int _int = 46;
UserManagement.levelIsValid(_int, string, _int, _int);
int _int = 46;
String string = "A level string that is too short";
int _int = 46;
int _int = 46;
UserManagement.levelIsValid(_int, string, _int, _int);
int _int = 46;
String string = "A level string with an invalid character";
int _int = 46;
int _int = 46;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer((-42))
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer((-42));
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(1000000000);
        UserManagement.remove_online_user(integer);
    }
}
statement is: Integer integer = new Integer(1000000000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 1000000000;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: org.evosuite.testcase.statements.ArrayStatement@8cdc6bd2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[8]
statement is: charif_sendallwos(I[I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(745, arg1)
test data is: int[] intArray = new int[8];
UserManagement.charif_sendallwos(745, intArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 123, 456, 789 };
        UserManagement.charif_sendallwos(745, intArray);
    }
}
statement is: int[] intArray = new int[]{ 123, 456, 789 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[8] isAssignment: false Array: new int[]{ 123, 456, 789 } Elements: [123, 456, 789]
lengths: [8] []
statement is: UserManagement.charif_sendallwos(745, intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(745, intArray) target is: UserManagement method is: charif_sendallwos(int,int[])
Matched Method is: charif_sendallwos(I[I)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 745;
int[] intArray = null;
UserManagement.charif_sendallwos(_int, intArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@73693ef0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[31]
statement is: charif_sendallwos(I[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos(5559, arg1)
test data is: byte[] byteArray = new byte[31];
UserManagement.charif_sendallwos(5559, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0x12)), ((byte) (0x34)), ((byte) (0x56)), ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)) };
        UserManagement.charif_sendallwos(5559, byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0x12)), ((byte) (0x34)), ((byte) (0x56)), ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[31] isAssignment: false Array: new byte[]{ ((byte) (0x12)), ((byte) (0x34)), ((byte) (0x56)), ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde)) } Elements: [((byte) (0x12)), ((byte) (0x34)), ((byte) (0x56)), ((byte) (0x78)), ((byte) (0x9a)), ((byte) (0xbc)), ((byte) (0xde))]
lengths: [31] []
statement is: UserManagement.charif_sendallwos(5559, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos(5559, byteArray) target is: UserManagement method is: charif_sendallwos(int,byte[])
Matched Method is: charif_sendallwos(I[B)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 5559;
byte[] byteArray = null;
UserManagement.charif_sendallwos(_int, byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~')
test data is: UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');
    }
}
statement is: UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "CC3D?66nK_";
String string = "CC3D?66nK_";
String string = "Prepared@tatement.54";
char _char = '~';
UserManagement.addUserTXT(string, string, string, _char);

statement is: isGM(J)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gM = UserManagement.isGM(16L)
test data is: UserManagement.isGM(16L);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.isGM("John Doe");
        UserManagement.isGM("Jane Smith");
        UserManagement.isGM("Administrator");
        UserManagement.isGM("Guest");
    }
}
statement is: UserManagement.isGM("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM("John Doe") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
statement is: UserManagement.isGM("Jane Smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM("Jane Smith") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
statement is: UserManagement.isGM("Administrator"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM("Administrator") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
statement is: UserManagement.isGM("Guest"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM("Guest") target is: UserManagement method is: isGM(java.lang.String)
Matched Method is: isGM(J)I
TestCase is: String string = "John Doe";
UserManagement.isGM((long) string);
String string = "Jane Smith";
UserManagement.isGM((long) string);
String string = "Administrator";
UserManagement.isGM((long) string);
String string = "Guest";
UserManagement.isGM((long) string);

statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
test data is: UserManagement.getAccountIds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int userId = 123456789;// replace with a real user ID

        String username = "johndoe";// replace with a real username

        UserManagement.getAccountIds(userId, username);
    }
}
statement is: int userId = 123456789// replace with a real user ID
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "johndoe"// replace with a real username
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.getAccountIds(userId, username), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIds(userId, username) target is: UserManagement method is: getAccountIds(int,java.lang.String)
* this is vulnerable: int _int = 123456789
* this is vulnerable: String string = "johndoe"
TestCase is: int _int = 123456789;
String string = "johndoe";

statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("yQOKF.lo}3hkV)>;}$o")
test data is: UserManagement.dynamicFailBanCheckTXT("yQOKF.lo}3hkV)>;}$o");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("")
test data is: UserManagement.dynamicFailBanCheckTXT("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.dynamicFailBanCheckTXT("This is a test string to check if the fail ban check works correctly.");
    }
}
statement is: UserManagement.dynamicFailBanCheckTXT("This is a test string to check if the fail ban check works correctly."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckTXT("This is a test string to check if the fail ban check works correctly.") target is: UserManagement method is: dynamicFailBanCheckTXT(java.lang.String)
Matched Method is: dynamicFailBanCheckTXT(Ljava/lang/String;)V
TestCase is: String string = "This is a test string to check if the fail ban check works correctly.";
UserManagement.dynamicFailBanCheckTXT(string);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", 'm')
statement is: sendUserList(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.sendUserList(arg0)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.sendUserList(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Socket_data socket_data = new Socket_data("localhost");
        UserManagement.addUserTXT("John Doe", "johndoe@example.com", "123456", 'm');
        UserManagement.sendUserList(socket_data);
    }
}
statement is: // Improved test data
Socket_data socket_data = new Socket_data("localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "123456", 'm'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "123456", 'm') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.sendUserList(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.sendUserList(socket_data) target is: UserManagement method is: sendUserList(Socket_data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
TestCase is: String string = "localhost";
Socket_data socket_data = new Socket_data((Socket) string);
String string = "John Doe";
String string = "johndoe@example.com";
String string = "123456";
char _char = 'm';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.sendUserList(socket_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9')
statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
test data is: UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
        FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
        auth_dats.put(123456789, new Auth_data("John Doe", "johndoe@example.com", "03/24/1987"));
        UserManagement.setAuth_dats(auth_dats);
    }
}
statement is: UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: auth_dats.put(123456789, new Auth_data("John Doe", "johndoe@example.com", "03/24/1987")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_dats.put(123456789, new Auth_data("John Doe", "johndoe@example.com", "03/24/1987")) target is: auth_dats method is: put(int,Auth_data)
statement is: UserManagement.setAuth_dats(auth_dats), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(auth_dats) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
TestCase is: String string = "-y39^yElsz";
String string = "r'oZmFFY774G.^;X";
String string = "r'oZmFFY774G.^;X";
char _char = '9';
UserManagement.addUserTXT(string, string, string, _char);
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@2d7544e6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAllOnlinAccounts(arg0, arg1)
test data is: FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data((Socket) null, fromAdmin);
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromAdmin fromAdmin = new FromAdmin();
        Socket_data socket_data = new Socket_data("localhost", 8080, fromAdmin);
        byte[] byteArray = new byte[5];
        UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
    }
}
statement is: FromAdmin fromAdmin = new FromAdmin(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data("localhost", 8080, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray) target is: UserManagement method is: receiveAllOnlinAccounts(Socket_data,byte[])
Matched Method is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: FromAdmin fromAdmin = new FromAdmin();
byte[] byteArray = new byte[5];
byte[] byteArray = null;
UserManagement.receiveAllOnlinAccounts((Socket_data) byteArray, byteArray);

statement is: online_db_final()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int online_db_final = UserManagement.online_db_final()
test data is: UserManagement.online_db_final();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.online_db_final();
        String username = "johndoe";
        String password = "password123";
        int userId = 1;
        String email = "johndoe@example.com";
        boolean isAdmin = true;
        // Test data for the login function
        String usernameInput = "johndoe";
        String passwordInput = "password123";
        boolean expectedOutput = true;
        // Test data for the getUserById function
        int userIdInput = 1;
        User expectedOutputUser = new User(username, password, email, isAdmin);
        // Test data for the getAllUsers function
        List<User> expectedOutputUsers = Arrays.asList(new User("johndoe", "password123", "johndoe@example.com", true), new User("janedoe", "password456", "janedoe@example.com", false));
    }
}
statement is: UserManagement.online_db_final(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.online_db_final() target is: UserManagement method is: online_db_final()
Matched Method is: online_db_final()I
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int userId = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email = "johndoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isAdmin = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Test data for the login function
String usernameInput = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String passwordInput = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedOutput = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Test data for the getUserById function
int userIdInput = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: User expectedOutputUser = new User(username, password, email, isAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Test data for the getAllUsers function
List<User> expectedOutputUsers = Arrays.asList(new User("johndoe", "password123", "johndoe@example.com", true), new User("janedoe", "password456", "janedoe@example.com", false)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(new User("johndoe", "password123", "johndoe@example.com", true), new User("janedoe", "password456", "janedoe@example.com", false)) target is: Arrays method is: asList(User,User)
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: int _int = 1
* this is vulnerable: String string = "johndoe@example.com"
* this is vulnerable: boolean _boolean = true
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: boolean _boolean = true
* this is vulnerable: int _int = 1
TestCase is: UserManagement.online_db_final();
String string = "johndoe";
String string = "password123";
int _int = 1;
String string = "johndoe@example.com";
boolean _boolean = true;
String string = "johndoe";
String string = "password123";
boolean _boolean = true;
int _int = 1;

statement is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((String) null)
test data is: UserManagement.getUserTxt((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserTxt("John Doe");
    }
}
statement is: UserManagement.getUserTxt("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt("John Doe") target is: UserManagement method is: getUserTxt(java.lang.String)
Matched Method is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
UserManagement.getUserTxt(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT((String) null, "status_1", "status_1", '~')
statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
test data is: UserManagement.addUserTXT((String) null, "status_1", "status_1", '~');
UserManagement.getAccountIds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'A');
        UserManagement.getAccountIds("johndoe@example.com");
    }
}
statement is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'A') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAccountIds("johndoe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIds("johndoe@example.com") target is: UserManagement method is: getAccountIds(java.lang.String)
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "password123";
char _char = 'A';
UserManagement.addUserTXT(string, string, string, _char);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time((-2689L))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-2689L));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setBan_until_time(-2689L);
        UserManagement.addUser(auth_data);
        // The -2689 value represents the time at which the user was banned, assuming that the system clock has not been adjusted since then. }}
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setBan_until_time(-2689L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setBan_until_time(-2689L) target is: auth_data method is: setBan_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setBan_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: // The -2689 value represents the time at which the user was banned, assuming that the system clock has not been adjusted since then. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: Auth_data auth_data = new Auth_data();
long _long = null;
auth_data.setBan_until_time(_long);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time(717L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(717L);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setBan_until_time(new Date(System.currentTimeMillis() + ((((717 * 24) * 60) * 60) * 1000L)).getTime());
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setBan_until_time(new Date(System.currentTimeMillis() + ((((717 * 24) * 60) * 60) * 1000L)).getTime()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setBan_until_time(new Date(System.currentTimeMillis() + ((((717 * 24) * 60) * 60) * 1000L)).getTime()) target is: auth_data method is: setBan_until_time()
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setBan_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
long _long = null;
auth_data.setBan_until_time(_long);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType((-274))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setClientType((-274));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setClientType("Mobile");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setClientType("Mobile"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setClientType("Mobile") target is: auth_data method is: setClientType(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "Mobile";
auth_data.setClientType((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType(45)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setClientType(45);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setClientType("PREMIUM");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setClientType("PREMIUM"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setClientType("PREMIUM") target is: auth_data method is: setClientType(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "PREMIUM";
auth_data.setClientType((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setConnect_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setConnect_until_time((-1862L))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((-1862L));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Auth_data auth_data = new Auth_data();
        auth_data.setConnect_until_time(-1862L);
        UserManagement.addUser(auth_data);
        // More descriptive and representative values for the primitive variables:
        auth_data.setConnect_until_time(-1862L);// This value is negative, indicating that the user's connection has expired.

        // More illustrative values for the String variables:
        UserManagement.addUser(auth_data);// This method adds a new user to the system with the provided auth data. }}

    }
}
statement is: // Improved test data
Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setConnect_until_time(-1862L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setConnect_until_time(-1862L) target is: auth_data method is: setConnect_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setConnect_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: // More descriptive and representative values for the primitive variables:
auth_data.setConnect_until_time(-1862L)// This value is negative, indicating that the user's connection has expired.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // More descriptive and representative values for the primitive variables:
auth_data.setConnect_until_time(-1862L)// This value is negative, indicating that the user's connection has expired.
 target is: auth_data method is: setConnect_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setConnect_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // More illustrative values for the String variables:
UserManagement.addUser(auth_data)// This method adds a new user to the system with the provided auth data. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // More illustrative values for the String variables:
UserManagement.addUser(auth_data)// This method adds a new user to the system with the provided auth data. }}
 target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
long _long = null;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);
long _long = null;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p')
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag((-1691))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setDelflag((-1691));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@example.com", "+1234567890", 'p');
        addUserTXT.setDelflag(-1);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@example.com", "+1234567890", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Smith", "johnsmith@example.com", "+1234567890", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setDelflag(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setDelflag(-1) target is: addUserTXT method is: setDelflag(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setDelflag(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Smith";
String string = "johnsmith@example.com";
String string = "+1234567890";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setDelflag(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag(1474)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1474);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setDelflag("enable");// This value is more descriptive and easier to understand in the context of this test case.

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setDelflag("enable")// This value is more descriptive and easier to understand in the context of this test case.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setDelflag("enable")// This value is more descriptive and easier to understand in the context of this test case.
 target is: auth_data method is: setDelflag(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setDelflag(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "enable";
auth_data.setDelflag((int) string);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p')
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel((-1930))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLevel((-1930));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "john123", "John Doe", 'p');
        addUserTXT.setLevel(99);// set a high level for testing purposes

        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "john123", "John Doe", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("johndoe", "john123", "John Doe", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLevel(99)// set a high level for testing purposes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLevel(99)// set a high level for testing purposes
 target is: addUserTXT method is: setLevel(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLevel(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "johndoe";
String string = "john123";
String string = "John Doe";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 99;
((Auth_data) string).setLevel(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel(503)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setUsername("John Doe");
        auth_data.setPassword("password123");
        auth_data.setLevel(503);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setUsername("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("John Doe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: auth_data.setLevel(503), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(503) target is: auth_data method is: setLevel(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLevel(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 503;
auth_data.setLevel(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1((-2100))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-2100));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id1("johndoe");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id1("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id1("johndoe") target is: auth_data method is: setLogin_id1(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id1(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "johndoe";
auth_data.setLogin_id1((int) string);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1(1059)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(1059);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id1("johndoe");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id1("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id1("johndoe") target is: auth_data method is: setLogin_id1(java.lang.String)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id1(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
String string = "johndoe";
auth_data.setLogin_id1((int) string);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p')
statement is: setLogin_id2(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id2(2)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLogin_id2(2);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("QWERTYUIOP123456789", "password@#$%!^&*()_+-=[]{}|;\':\"<>,./~", "John Doe", 'p');
        addUserTXT.setLogin_id2(2);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("QWERTYUIOP123456789", "password@#$%!^&*()_+-=[]{}|;\':\"<>,./~", "John Doe", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("QWERTYUIOP123456789", "password@#$%!^&*()_+-=[]{}|;\':\"<>,./~", "John Doe", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogin_id2(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogin_id2(2) target is: addUserTXT method is: setLogin_id2(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "QWERTYUIOP123456789";
String string = "password@#$%!^&*()_+-=[]{}|;':\"<>,./~";
String string = "John Doe";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 2;
((Auth_data) string).setLogin_id2(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogincount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogincount((-1036))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogincount((-1036));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogincount(-3);// Changed -1036 to -3 to make the test data more descriptive and representative of the situation being tested.

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogincount(-3)// Changed -1036 to -3 to make the test data more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogincount(-3)// Changed -1036 to -3 to make the test data more descriptive and representative of the situation being tested.
 target is: auth_data method is: setLogincount(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogincount(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = null;
auth_data.setLogincount(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLastlogin()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLastlogin()
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLastlogin("2023-03-17 15:30:00");
        auth_data.setUsername("johndoe123456");
        auth_data.setFirstName("John");
        auth_data.setLastName("Doe");
        auth_data.setEmailAddress("johndoe@example.com");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLastlogin("2023-03-17 15:30:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLastlogin("2023-03-17 15:30:00") target is: auth_data method is: setLastlogin(java.lang.String)
statement is: auth_data.setUsername("johndoe123456"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("johndoe123456") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setFirstName("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setFirstName("John") target is: auth_data method is: setFirstName(java.lang.String)
statement is: auth_data.setLastName("Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLastName("Doe") target is: auth_data method is: setLastName(java.lang.String)
statement is: auth_data.setEmailAddress("johndoe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setEmailAddress("johndoe@example.com") target is: auth_data method is: setEmailAddress(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p')
statement is: setState(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setState(2708)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setState(2708);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "janesmith@email.com", "9876543210", 'p');
        addUserTXT.setState(12);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "janesmith@email.com", "9876543210", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Jane Smith", "janesmith@email.com", "9876543210", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setState(12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setState(12) target is: addUserTXT method is: setState(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setState(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Jane Smith";
String string = "janesmith@email.com";
String string = "9876543210";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 12;
((Auth_data) string).setState(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setVersion(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setVersion((-1928))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setVersion((-1928));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setVersion(((int) (100)));
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setVersion(((int) (100))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setVersion(((int) (100))) target is: auth_data method is: setVersion(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setVersion(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 100;
auth_data.setVersion(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p')
statement is: setVersion(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setVersion(1082535490)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
addUserTXT.setVersion(1082535490);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@email.com", "GX", 'p');
        addUserTXT.setVersion(1082535490);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@email.com", "GX", 'p'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@email.com", "GX", 'p') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setVersion(1082535490), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setVersion(1082535490) target is: addUserTXT method is: setVersion(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setVersion(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@email.com";
String string = "GX";
char _char = 'p';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 1082535490;
((Auth_data) string).setVersion(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setResetLogincoun(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setResetLogincoun(true)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setResetLogincoun(true);
        auth_data.setUsername("johndoe");
        auth_data.setPassword("password123");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setResetLogincoun(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setResetLogincoun(true) target is: auth_data method is: setResetLogincoun(boolean)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setResetLogincoun(Z)V
statement is: auth_data.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("johndoe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
boolean _boolean = true;
auth_data.setResetLogincoun(_boolean);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT((String) null, (String) null, "TC|YqM:aC(4x| hoDP", 'l')
statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.addUserTXT((String) null, (String) null, "TC|YqM:aC(4x| hoDP", 'l');
UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a');
        UserManagement.getAccountIdCount();
    }
}
statement is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAccountIdCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount() target is: UserManagement method is: getAccountIdCount()
Matched Method is: getAccountIdCount()I
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "SuperSecretPassword!";
char _char = 'a';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getAccountIdCount();

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", 'm')
statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
test data is: UserManagement.addUserTXT("", "", "", 'm');
UserManagement.getNBUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("John Doe", "johndoe@email.com", "1234567890", 'm');
        UserManagement.getNBUser();
    }
}
statement is: UserManagement.addUserTXT("John Doe", "johndoe@email.com", "1234567890", 'm'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@email.com", "1234567890", 'm') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getNBUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBUser() target is: UserManagement method is: getNBUser()
Matched Method is: getNBUser()I
TestCase is: String string = "John Doe";
String string = "johndoe@email.com";
String string = "1234567890";
char _char = 'm';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getNBUser();

statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) null)
test data is: UserManagement.getUserTxt((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int userId = 1234;
        String username = "john";
        String password = "password123";
    }
}
statement is: int userId = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "john", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "john"
* this is vulnerable: String string = "password123"
TestCase is: int _int = 1234;
String string = "john";
String string = "password123";

statement is: org.evosuite.testcase.statements.ArrayStatement@6566b413 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@93fd5e67 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[5] = (byte) (-74)
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        byte[] byteArray = new byte[6];
        byteArray[5] = ((byte) (-127));// Changed to a more descriptive value

        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: // Improved test data for the code snippet
byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: byteArray[5] = ((byte) (-127))// Changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (-127)) Ct is: byteArray[5] = ((byte) (-127))// Changed to a more descriptive value

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@85f7c607 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@38fbbc57 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)87
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
byteArray[1] = (byte)87;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (0xff));// negative number

        byteArray[1] = ((byte) (0x80));// overflow condition

        UserManagement.tabHexToInt(byteArray);
        byteArray[0] = ((byte) (0xa));// decimal 10 in hex

        byteArray[1] = ((byte) (0x64));// decimal 100 in hex

        UserManagement.tabHexToInt(byteArray);
        byteArray[0] = ((byte) ('A'));// ASCII code for letter A

        byteArray[1] = ((byte) (0x3e));// greater than operator

        UserManagement.tabHexToInt(byteArray);
        byteArray[0] = ((byte) (0x20));// space character

        byteArray[1] = ((byte) (0xd));// carriage return character

        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (0xff))// negative number
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0xff)) Ct is: byteArray[0] = ((byte) (0xff))// negative number

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x80))// overflow condition
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x80)) Ct is: byteArray[1] = ((byte) (0x80))// overflow condition

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
statement is: byteArray[0] = ((byte) (0xa))// decimal 10 in hex
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0xa)) Ct is: byteArray[0] = ((byte) (0xa))// decimal 10 in hex

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x64))// decimal 100 in hex
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x64)) Ct is: byteArray[1] = ((byte) (0x64))// decimal 100 in hex

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
statement is: byteArray[0] = ((byte) ('A'))// ASCII code for letter A
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('A')) Ct is: byteArray[0] = ((byte) ('A'))// ASCII code for letter A

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x3e))// greater than operator
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x3e)) Ct is: byteArray[1] = ((byte) (0x3e))// greater than operator

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
statement is: byteArray[0] = ((byte) (0x20))// space character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x20)) Ct is: byteArray[0] = ((byte) (0x20))// space character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0xd))// carriage return character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0xd)) Ct is: byteArray[1] = ((byte) (0xd))// carriage return character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[2];
int _int = 255;
byteArray[1] = (byte) _int;
int _int = 128;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);
int _int = 10;
byteArray[1] = (byte) _int;
int _int = 100;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);
char _char = 'A';
byteArray[1] = (byte) _char;
int _int = 62;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);
int _int = 32;
byteArray[1] = (byte) _int;
int _int = 13;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@803a5259 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOffline((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[4];
UserManagement.account_idToOffline((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4 };
        UserManagement.account_idToOffline(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: UserManagement.account_idToOffline(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOffline(((Socket_data) (null)), byteArray) target is: UserManagement method is: account_idToOffline(Socket_data,byte[])
Matched Method is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.account_idToOffline(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@339cc751 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOnline(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
UserManagement.account_idToOnline(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 };
        UserManagement.account_idToOnline(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 } Elements: [0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0]
lengths: [8] []
statement is: UserManagement.account_idToOnline(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOnline(socket_data, byteArray) target is: UserManagement method is: account_idToOnline(Socket_data,byte[])
Matched Method is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = null;
UserManagement.account_idToOnline(socket_data, byteArray);

statement is: addGM(II)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addGM = UserManagement.addGM((-42), (-42))
test data is: UserManagement.addGM((-42), (-42));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addGM(1000, 2000);
    }
}
statement is: UserManagement.addGM(1000, 2000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addGM(1000, 2000) target is: UserManagement method is: addGM(int,int)
Matched Method is: addGM(II)Z
TestCase is: int _int = 1000;
int _int = 2000;
UserManagement.addGM(_int, _int);

statement is: administationLogin(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.administationLogin((Socket_data) null)
test data is: UserManagement.administationLogin((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.administrationLogin(new SocketData("admin", "password"));
    }
}
statement is: UserManagement.administrationLogin(new SocketData("admin", "password")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.administrationLogin(new SocketData("admin", "password")) target is: UserManagement method is: administrationLogin(SocketData)
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: banResquest(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.banResquest(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.banResquest(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);
        Socket_data socket_data = new Socket_data(mockSocket, "John Doe");
        UserManagement.banResquest(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, "John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.banResquest(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.banResquest(socket_data) target is: UserManagement method is: banResquest(Socket_data)
Matched Method is: banResquest(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.banResquest(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: changeSex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSex(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("male", 25, "John Doe");
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.changeSex(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("male", 25, "John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.changeSex(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSex(socket_data) target is: UserManagement method is: changeSex(Socket_data)
Matched Method is: changeSex(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.changeSex(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSexChrif_changesex(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSexChrif_changesex(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.changeSexChrif_changesex("male", socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.changeSexChrif_changesex("male", socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSexChrif_changesex("male", socket_data) target is: UserManagement method is: changeSexChrif_changesex(java.lang.String,Socket_data)
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@b03f0e87 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.charServerToAuthentify(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data("https://www.example.com");
        byte[] byteArray = new byte[8];
        UserManagement.charServerToAuthentify(socket_data, byteArray);
    }
}
statement is: Socket_data socket_data = new Socket_data("https://www.example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: UserManagement.charServerToAuthentify(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charServerToAuthentify(socket_data, byteArray) target is: UserManagement method is: charServerToAuthentify(Socket_data,byte[])
Matched Method is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: String string = "https://www.example.com";
Socket_data socket_data = new Socket_data((Socket) string);
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@8f6d9408 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfCharServer((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[3];
UserManagement.connectionOfCharServer((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3 };
        UserManagement.connectionOfCharServer(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [3] []
statement is: UserManagement.connectionOfCharServer(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfCharServer(((Socket_data) (null)), byteArray) target is: UserManagement method is: connectionOfCharServer(Socket_data,byte[])
Matched Method is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.connectionOfCharServer(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClientEncrypted(arg0)
test data is: MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        FromAdmin fromAdmin = new FromAdmin();
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        UserManagement.connectionOfClientEncrypted(socket_data);
        // Improved test data
        mockSocket = new MockSocket("localhost", 8080);// Changed the default host and port to a more descriptive example

        fromAdmin = new FromAdmin("admin@example.com", "password");// Changed the username and password to more descriptive examples

        socket_data = new Socket_data(mockSocket, fromAdmin);
        UserManagement.connectionOfClientEncrypted(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromAdmin fromAdmin = new FromAdmin(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.connectionOfClientEncrypted(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(socket_data) target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
statement is: // Improved test data
mockSocket = new MockSocket("localhost", 8080)// Changed the default host and port to a more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: fromAdmin = new FromAdmin("admin@example.com", "password")// Changed the username and password to more descriptive examples
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtAssignmentImpl
statement is: UserManagement.connectionOfClientEncrypted(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(socket_data) target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
TestCase is: MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);
UserManagement.connectionOfClientEncrypted(socket_data);

statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL("(I")
test data is: UserManagement.dynamicFailBanCheckMySQL("(I");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.dynamicFailBanCheckMySQL("(👨‍💻)");
    }
}
statement is: UserManagement.dynamicFailBanCheckMySQL("(👨‍💻)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckMySQL("(👨‍💻)") target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
TestCase is: String string = "(\uD83D\uDC68\u200D\uD83D\uDCBB)";
UserManagement.dynamicFailBanCheckMySQL(string);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: emailCreation(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailCreation(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailCreation(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.emailCreation(socket_data);
        // Improved test data
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data("example@email.com", "password123");
        UserManagement.emailCreation(socket_data);
    }
}
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.emailCreation(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data) target is: UserManagement method is: emailCreation(Socket_data)
Matched Method is: emailCreation(Lorg/javathena/core/data/Socket_data;)V
statement is: // Improved test data
Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data("example@email.com", "password123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.emailCreation(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data) target is: UserManagement method is: emailCreation(Socket_data)
Matched Method is: emailCreation(Lorg/javathena/core/data/Socket_data;)V
TestCase is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailCreation(socket_data);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
UserManagement.emailCreation(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailLimitedTime(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailLimitedTime(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.emailLimitedTime(socket_data);
        // Replace the primitive values with more descriptive examples
        int userId = 1234;
        String emailAddress = "johndoe@example.com";
        int accountExpirationDate = LocalDateTime.of(2022, 1, 1, 12, 0).toEpochSecond();
        // Replace the String with a more descriptive example
        String messageSubject = "Your Account is Expiring Soon!";
        String messageBody = ((("Dear John Doe," + System.lineSeparator()) + "Your account will expire on January 1, 2022 at 12:00 PM.") + System.lineSeparator()) + "Please renew your subscription to continue using our services.";
        // Call the method with the improved test data
        UserManagement.emailLimitedTime(userId, emailAddress, accountExpirationDate, messageSubject, messageBody);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.emailLimitedTime(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailLimitedTime(socket_data) target is: UserManagement method is: emailLimitedTime(Socket_data)
Matched Method is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V
statement is: // Replace the primitive values with more descriptive examples
int userId = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String emailAddress = "johndoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accountExpirationDate = LocalDateTime.of(2022, 1, 1, 12, 0).toEpochSecond(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: LocalDateTime.of(2022, 1, 1, 12, 0).toEpochSecond() target is: LocalDateTime.of(2022, 1, 1, 12, 0) method is: toEpochSecond()
statement is: // Replace the String with a more descriptive example
String messageSubject = "Your Account is Expiring Soon!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String messageBody = ((("Dear John Doe," + System.lineSeparator()) + "Your account will expire on January 1, 2022 at 12:00 PM.") + System.lineSeparator()) + "Please renew your subscription to continue using our services.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: ((("Dear John Doe," + System.lineSeparator()) + "Your account will expire on January 1, 2022 at 12:00 PM.") + System.lineSeparator()) + "Please renew your subscription to continue using our services."
statement is: // Call the method with the improved test data
UserManagement.emailLimitedTime(userId, emailAddress, accountExpirationDate, messageSubject, messageBody), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the method with the improved test data
UserManagement.emailLimitedTime(userId, emailAddress, accountExpirationDate, messageSubject, messageBody) target is: UserManagement method is: emailLimitedTime(int,java.lang.String,int,java.lang.String,java.lang.String)
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "johndoe@example.com"
* this is vulnerable: String string = "Your Account is Expiring Soon!"
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailLimitedTime(socket_data);
int _int = 1234;
String string = "johndoe@example.com";
String string = "Your Account is Expiring Soon!";

statement is: getUserSQL(Ljava/sql/ResultSet;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((ResultSet) null)
test data is: UserManagement.getUserSQL((ResultSet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        throw new IllegalArgumentException("Connection cannot be null");
    }

    Statement stmt = conn.createStatement();
}
statement is: throw new IllegalArgumentException("Connection cannot be null"), class spoon.support.reflect.code.CtThrowImpl
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@2a317eed type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[21]
statement is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAccountReg2(arg0, arg1)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[21];
UserManagement.receiveAccountReg2(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy("proxy.example.com", 80);
        MockSocket mockSocket = new MockSocket("192.168.1.100", 80);
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[21];
        UserManagement.receiveAccountReg2(socket_data, byteArray);
    }
}
statement is: Proxy proxy = new Proxy("proxy.example.com", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket("192.168.1.100", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: byte[] byteArray = new byte[21], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [21] Ct is: byte[] byteArray = new byte[21] isAssignment: false Array: new byte[21] Elements: []
lengths: [21] [21]
Their type are: class [B byte[]
statement is: UserManagement.receiveAccountReg2(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAccountReg2(socket_data, byteArray) target is: UserManagement method is: receiveAccountReg2(Socket_data,byte[])
Matched Method is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[21];
byte[] byteArray = null;
UserManagement.receiveAccountReg2((Socket_data) byteArray, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@301e639c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountData(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
UserManagement.requestAccountData(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        // Improved test data: Using a more descriptive and representative value for the socket object
        Socket_data socket_data = new Socket_data(mockSocket);
        socket_data.setServerIP("192.168.0.1");// Setting a realistic IP address for the server

        byte[] byteArray = new byte[7];
        // Improved test data: Using a more descriptive and representative value for the byte array
        for (int i = 0; i < byteArray.length; i++) {
            byteArray[i] = ((byte) (i));// Filling the byte array with random values

        }
        UserManagement.requestAccountData(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data: Using a more descriptive and representative value for the socket object
Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: socket_data.setServerIP("192.168.0.1")// Setting a realistic IP address for the server
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: socket_data.setServerIP("192.168.0.1")// Setting a realistic IP address for the server
 target is: socket_data method is: setServerIP(java.lang.String)
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: // Improved test data: Using a more descriptive and representative value for the byte array
for (int i = 0; i < byteArray.length; i++) {
    byteArray[i] = ((byte) (i));// Filling the byte array with random values

}, class spoon.support.reflect.code.CtForImpl
statement is: UserManagement.requestAccountData(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountData(socket_data, byteArray) target is: UserManagement method is: requestAccountData(Socket_data,byte[])
Matched Method is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
UserManagement.requestAccountData(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@e4cf6118 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[16]
statement is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountReg2((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[16];
        Random random = new Random();
        for (int i = 0; i < byteArray.length; i++) {
            byteArray[i] = ((byte) (random.nextInt(256)));
        }
        UserManagement.requestAccountReg2(((Socket_data) (null)), byteArray);
    }
}
statement is: byte[] byteArray = new byte[16], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [16] Ct is: byte[] byteArray = new byte[16] isAssignment: false Array: new byte[16] Elements: []
lengths: [16] [16]
Their type are: class [B byte[]
statement is: Random random = new Random(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: for (int i = 0; i < byteArray.length; i++) {
    byteArray[i] = ((byte) (random.nextInt(256)));
}, class spoon.support.reflect.code.CtForImpl
statement is: UserManagement.requestAccountReg2(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountReg2(((Socket_data) (null)), byteArray) target is: UserManagement method is: requestAccountReg2(Socket_data,byte[])
Matched Method is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[16];
byte[] byteArray = null;
UserManagement.requestAccountReg2((Socket_data) byteArray, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@801042ed type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.statusChange(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
UserManagement.statusChange(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        // Improved test data
        mockSocket.setRemoteAddress("127.0.0.1");
        mockSocket.setPort(8080);
        byte[] byteArray = new byte[9];
        UserManagement.statusChange(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
mockSocket.setRemoteAddress("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
mockSocket.setRemoteAddress("127.0.0.1") target is: mockSocket method is: setRemoteAddress(java.lang.String)
statement is: mockSocket.setPort(8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.setPort(8080) target is: mockSocket method is: setPort(int)
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: UserManagement.statusChange(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.statusChange(socket_data, byteArray) target is: UserManagement method is: statusChange(byte[])
Matched Method is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[9];
byte[] byteArray = null;
UserManagement.statusChange((Socket_data) byteArray, byteArray);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toChangeAnEmail(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toChangeAnEmail(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy(Type.HTTP, new InetSocketAddress("example.com", 80));
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.toChangeAnEmail(socket_data);
    }
}
statement is: Proxy proxy = new Proxy(Type.HTTP, new InetSocketAddress("example.com", 80)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.toChangeAnEmail(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toChangeAnEmail(socket_data) target is: UserManagement method is: toChangeAnEmail(Socket_data)
Matched Method is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toChangeAnEmail(socket_data);

statement is: unban(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unban((Socket_data) null)
test data is: UserManagement.unban((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // code to unban a user }}
    }
}
statement is: // code to unban a user }}, class spoon.support.reflect.code.CtCommentImpl
* test suite isTestSuite: 167
Test 0: 
UserManagement.addAccountIdCount((-3203));
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount((-842));
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("", "", "", (-122));
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Incorrect Password.");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Auth_data addUserTXT = UserManagement.addUserTXT("4ARf(ln]?", "", "", '=');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 11: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 12: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(87);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 13: 
UserManagement.addAccountIdCount();
Test 14: 
Integer integer = new Integer(4694);
UserManagement.is_user_online(integer);
Test 15: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 16: 
UserManagement.getAccountID("");
Test 17: 
UserManagement.getNBSession();
Inet4Address anyLocalAddress = (Inet4Address)MockInetAddress.anyLocalAddress();
MockSocket mockSocket = null;
try {
  mockSocket = new MockSocket(anyLocalAddress, 2693);
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7dedbcd3
   //
   verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
}

FromClient fromClient = new FromClient();
int _int = 0;
Socket_data sessionAt = UserManagement.getSessionAt(_int);
byte[] byteArray = new byte[1];
byte _byte = (byte)0;
byteArray[0] = _byte;
fromClient.parse(sessionAt, byteArray);
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
int _int = 82;
socket_data.setListenPort(_int);
UserManagement.administationLogin(socket_data);
UserManagement.addAccountIdCount();
UserManagement.getUserTxt((Integer) fromClient.PACKAGE_TO_SMALL);
String string = "";
UserManagement.getUserTxt(string);
Test 18: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 19: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 20: 
UserManagement.getNBUser();
Test 21: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 22: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
UserManagement.removeUser(addUserTXT);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 25: 
byte[] byteArray = new byte[31];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
byte[] byteArray = new byte[31];
Socket_data socket_data = new Socket_data((Socket) null);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 27: 
UserManagement.levelIsValid(1970, " KT;", 1970, 1970);
Test 28: 
UserManagement.levelIsValid((-1305), "", (-1305), (-1305));
Test 29: 
UserManagement.levelIsValid(46, "MQy>@]Vtgi/o>%:@m", 46, 46);
Test 30: 
Integer integer = new Integer((-42));
UserManagement.remove_online_user(integer);
Test 31: 
int[] intArray = new int[8];
UserManagement.charif_sendallwos(745, intArray);
Test 32: 
byte[] byteArray = new byte[31];
UserManagement.charif_sendallwos(5559, byteArray);
Test 33: 
UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');
Test 34: 
UserManagement.isGM(16L);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
UserManagement.dynamicFailBanCheckTXT("yQOKF.lo}3hkV)>;}$o");
Test 37: 
UserManagement.dynamicFailBanCheckTXT("");
Test 38: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.sendUserList(socket_data);
Test 39: 
UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 40: 
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data((Socket) null, fromAdmin);
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 41: 
UserManagement.online_db_final();
Test 42: 
UserManagement.getUserTxt((String) null);
Test 43: 
UserManagement.addUserTXT((String) null, "status_1", "status_1", '~');
UserManagement.getAccountIds();
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-2689L));
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(717L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-274));
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType(45);
UserManagement.addUser(auth_data);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((-1862L));
UserManagement.addUser(auth_data);
Test 49: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setDelflag((-1691));
UserManagement.addUser(addUserTXT);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1474);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLevel((-1930));
UserManagement.addUser(addUserTXT);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-2100));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(1059);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLogin_id2(2);
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount((-1036));
UserManagement.addUser(auth_data);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setState(2708);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion((-1928));
UserManagement.addUser(auth_data);
Test 60: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
addUserTXT.setVersion(1082535490);
UserManagement.addUser(addUserTXT);
Test 61: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 62: 
UserManagement.addUserTXT((String) null, (String) null, "TC|YqM:aC(4x| hoDP", 'l');
UserManagement.getAccountIdCount();
Test 63: 
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.getNBUser();
Test 64: 
UserManagement.getUserTxt((Integer) null);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)87;
UserManagement.tabHexToInt(byteArray);
Test 67: 
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
// Undeclared exception!
try { 
  UserManagement.addGM((-42), (-42));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
// Undeclared exception!
try { 
  UserManagement.administationLogin((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 72: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 76: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("(I");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 78: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 80: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 83: 
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 84: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 85: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 86: 
// Undeclared exception!
try { 
  UserManagement.unban((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 87: 
UserManagement.addAccountIdCount(98765);

Test 88: 
UserManagement.getNBGM();

Test 89: 
UserManagement.setAccountIdCount(10);

Test 90: 

Test 91: 
UserManagement.toBecomeGM((Socket_data) null);

Test 92: 
UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123);

Test 93: 
UserManagement.getAccountIdCount();

Test 94: 
UserManagement.numberOfUser((Socket_data) null, (byte[]) null);

Test 95: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", '=');
Integer account_id = ((Auth_data)"John Doe").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 96: 
UserManagement.addSession((Socket_data) null);

Test 97: 
UserManagement.getSessionAt((int) (Integer) null);

Test 98: 

Test 99: 
Integer integer = new Integer(2503128);
UserManagement.is_user_online(integer);

Test 100: 
UserManagement.getUserSQL((Integer) 987654321);

Test 101: 
UserManagement.getAccountID("johndoe@example.com");

Test 102: 
Integer integer = new Integer(100);
UserManagement.remove_online_user(integer);

Test 103: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

Test 104: 

Test 105: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 106: 
UserManagement.tabHexToInt((byte[]) null);

Test 107: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p');
UserManagement.removeUser(addUserTXT);

Test 108: 
UserManagement.add_online_user((Auth_data) null);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);

Test 109: 
byte[] byteArray = new byte[31];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) false, (boolean) (Boolean) null);

Test 110: 
byte[] byteArray = new byte[31];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) true, (boolean) (Boolean) null);

Test 111: 
UserManagement.levelIsValid(1970, "KT;", 1970, 1970);
UserManagement.levelIsValid((int) "2022-03-04", "KT;", (int) "2022-03-04", (int) "2022-03-04");

Test 112: 
UserManagement.levelIsValid((int) "John Doe", (String) 50, (int) (Integer) null, (int) (Integer) null);

Test 113: 
UserManagement.levelIsValid(46, "A level string that is too long", 46, 46);
UserManagement.levelIsValid(46, "A level string that is too short", 46, 46);
UserManagement.levelIsValid(46, "A level string with an invalid character", 46, 46);

Test 114: 
Integer integer = new Integer(1000000000);
UserManagement.remove_online_user(integer);

Test 115: 
UserManagement.charif_sendallwos(745, (int[]) null);

Test 116: 
UserManagement.charif_sendallwos(5559, (byte[]) null);

Test 117: 
UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');

Test 118: 
UserManagement.isGM((long) "John Doe");
String string = "Jane Smith";
UserManagement.isGM((long) string);
String string = "Administrator";
UserManagement.isGM((long) string);
String string = "Guest";
UserManagement.isGM((long) string);

Test 119: 

Test 120: 
UserManagement.dynamicFailBanCheckTXT("This is a test string to check if the fail ban check works correctly.");

Test 121: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
String string = "John Doe";
String string = "johndoe@example.com";
String string = "123456";
char _char = 'm';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.sendUserList(socket_data);

Test 122: 
UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

Test 123: 
FromAdmin fromAdmin = new FromAdmin();
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts((Socket_data) byteArray, (byte[]) null);

Test 124: 
UserManagement.online_db_final();

Test 125: 
UserManagement.getUserTxt("John Doe");

Test 126: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'A');

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "Mobile");
UserManagement.addUser(auth_data);

Test 130: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "PREMIUM");
UserManagement.addUser(auth_data);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((long) (Long) null);
UserManagement.addUser(auth_data);
long _long = null;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@example.com", "+1234567890", 'p');
((Auth_data)"John Smith").setDelflag((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) "enable");
UserManagement.addUser(auth_data);

Test 134: 
Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "john123", "John Doe", 'p');
((Auth_data)"johndoe").setLevel(99);
UserManagement.addUser(addUserTXT);

Test 135: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);

Test 136: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((int) "johndoe");
UserManagement.addUser(auth_data);

Test 137: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((int) "johndoe");
UserManagement.addUser(auth_data);

Test 138: 
Auth_data addUserTXT = UserManagement.addUserTXT("QWERTYUIOP123456789", "password@#$%!^&*()_+-=[]{}|;':\"<>,./~", "John Doe", 'p');
((Auth_data)"QWERTYUIOP123456789").setLogin_id2(2);
UserManagement.addUser(addUserTXT);

Test 139: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 140: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 141: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "janesmith@email.com", "9876543210", 'p');
((Auth_data)"Jane Smith").setState(12);
UserManagement.addUser(addUserTXT);

Test 142: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(100);
UserManagement.addUser(auth_data);

Test 143: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@email.com", "GX", 'p');
((Auth_data)"John Doe").setVersion(1082535490);
UserManagement.addUser(addUserTXT);

Test 144: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 145: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a');
UserManagement.getAccountIdCount();

Test 146: 
UserManagement.addUserTXT("John Doe", "johndoe@email.com", "1234567890", 'm');
UserManagement.getNBUser();

Test 147: 

Test 148: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);

Test 149: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 255;
byteArray[1] = (byte) 128;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 10;
byteArray[1] = (byte) 100;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 'A';
byteArray[1] = (byte) 62;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 32;
byteArray[1] = (byte) 13;
UserManagement.tabHexToInt(byteArray);

Test 150: 
UserManagement.account_idToOffline((Socket_data) null, (byte[]) null);

Test 151: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.account_idToOnline(socket_data, (byte[]) null);

Test 152: 
UserManagement.addGM(1000, 2000);

Test 153: 
UserManagement.banResquest((Socket_data) null);

Test 154: 
UserManagement.changeSex((Socket_data) null);

Test 155: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

Test 156: 
Socket_data socket_data = new Socket_data((Socket) "https://www.example.com");
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

Test 157: 
UserManagement.connectionOfCharServer((Socket_data) null, (byte[]) null);

Test 158: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 159: 
UserManagement.dynamicFailBanCheckMySQL("(\uD83D\uDC68\u200D\uD83D\uDCBB)");

Test 160: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailCreation(socket_data);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
UserManagement.emailCreation(socket_data);

Test 161: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailLimitedTime(socket_data);

Test 162: 
byte[] byteArray = new byte[21];
UserManagement.receiveAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 163: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
UserManagement.requestAccountData(socket_data, byteArray);

Test 164: 
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 165: 
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[9];
UserManagement.statusChange((Socket_data) byteArray, (byte[]) null);

Test 166: 
UserManagement.toChangeAnEmail((Socket_data) null);


* Generated after the refinement and before minimization 167 tests with total length 396
* test suite isTestSuite: 167
Test 0: 
UserManagement.addAccountIdCount((-3203));
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount((-842));
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("", "", "", (-122));
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Incorrect Password.");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Auth_data addUserTXT = UserManagement.addUserTXT("4ARf(ln]?", "", "", '=');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 11: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 12: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(87);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 13: 
UserManagement.addAccountIdCount();
Test 14: 
Integer integer = new Integer(4694);
UserManagement.is_user_online(integer);
Test 15: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 16: 
UserManagement.getAccountID("");
Test 17: 
UserManagement.getNBSession();
Inet4Address anyLocalAddress = (Inet4Address)MockInetAddress.anyLocalAddress();
MockSocket mockSocket = null;
try {
  mockSocket = new MockSocket(anyLocalAddress, 2693);
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7dedbcd3
   //
   verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
}

FromClient fromClient = new FromClient();
int _int = 0;
Socket_data sessionAt = UserManagement.getSessionAt(_int);
byte[] byteArray = new byte[1];
byte _byte = (byte)0;
byteArray[0] = _byte;
fromClient.parse(sessionAt, byteArray);
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
int _int = 82;
socket_data.setListenPort(_int);
UserManagement.administationLogin(socket_data);
UserManagement.addAccountIdCount();
UserManagement.getUserTxt((Integer) fromClient.PACKAGE_TO_SMALL);
String string = "";
UserManagement.getUserTxt(string);
Test 18: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 19: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 20: 
UserManagement.getNBUser();
Test 21: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 22: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
UserManagement.removeUser(addUserTXT);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 25: 
byte[] byteArray = new byte[31];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
byte[] byteArray = new byte[31];
Socket_data socket_data = new Socket_data((Socket) null);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 27: 
UserManagement.levelIsValid(1970, " KT;", 1970, 1970);
Test 28: 
UserManagement.levelIsValid((-1305), "", (-1305), (-1305));
Test 29: 
UserManagement.levelIsValid(46, "MQy>@]Vtgi/o>%:@m", 46, 46);
Test 30: 
Integer integer = new Integer((-42));
UserManagement.remove_online_user(integer);
Test 31: 
int[] intArray = new int[8];
UserManagement.charif_sendallwos(745, intArray);
Test 32: 
byte[] byteArray = new byte[31];
UserManagement.charif_sendallwos(5559, byteArray);
Test 33: 
UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');
Test 34: 
UserManagement.isGM(16L);
Test 35: 
UserManagement.getAccountIds();
Test 36: 
UserManagement.dynamicFailBanCheckTXT("yQOKF.lo}3hkV)>;}$o");
Test 37: 
UserManagement.dynamicFailBanCheckTXT("");
Test 38: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.sendUserList(socket_data);
Test 39: 
UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 40: 
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data((Socket) null, fromAdmin);
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 41: 
UserManagement.online_db_final();
Test 42: 
UserManagement.getUserTxt((String) null);
Test 43: 
UserManagement.addUserTXT((String) null, "status_1", "status_1", '~');
UserManagement.getAccountIds();
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-2689L));
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(717L);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-274));
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType(45);
UserManagement.addUser(auth_data);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((-1862L));
UserManagement.addUser(auth_data);
Test 49: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setDelflag((-1691));
UserManagement.addUser(addUserTXT);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1474);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLevel((-1930));
UserManagement.addUser(addUserTXT);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-2100));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(1059);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLogin_id2(2);
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount((-1036));
UserManagement.addUser(auth_data);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setState(2708);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion((-1928));
UserManagement.addUser(auth_data);
Test 60: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
addUserTXT.setVersion(1082535490);
UserManagement.addUser(addUserTXT);
Test 61: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 62: 
UserManagement.addUserTXT((String) null, (String) null, "TC|YqM:aC(4x| hoDP", 'l');
UserManagement.getAccountIdCount();
Test 63: 
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.getNBUser();
Test 64: 
UserManagement.getUserTxt((Integer) null);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)87;
UserManagement.tabHexToInt(byteArray);
Test 67: 
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
// Undeclared exception!
try { 
  UserManagement.addGM((-42), (-42));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
// Undeclared exception!
try { 
  UserManagement.administationLogin((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 72: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 75: 
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 76: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("(I");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 78: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 80: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 83: 
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 84: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 85: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 86: 
// Undeclared exception!
try { 
  UserManagement.unban((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 87: 
UserManagement.addAccountIdCount(98765);

Test 88: 
UserManagement.getNBGM();

Test 89: 
UserManagement.setAccountIdCount(10);

Test 90: 

Test 91: 
UserManagement.toBecomeGM((Socket_data) null);

Test 92: 
UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123);

Test 93: 
UserManagement.getAccountIdCount();

Test 94: 
UserManagement.numberOfUser((Socket_data) null, (byte[]) null);

Test 95: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", '=');
Integer account_id = ((Auth_data)"John Doe").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 96: 
UserManagement.addSession((Socket_data) null);

Test 97: 
UserManagement.getSessionAt((int) (Integer) null);

Test 98: 

Test 99: 
Integer integer = new Integer(2503128);
UserManagement.is_user_online(integer);

Test 100: 
UserManagement.getUserSQL((Integer) 987654321);

Test 101: 
UserManagement.getAccountID("johndoe@example.com");

Test 102: 
Integer integer = new Integer(100);
UserManagement.remove_online_user(integer);

Test 103: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

Test 104: 

Test 105: 
UserManagement.addIpToBanListMySQL("192.168.0.1");

Test 106: 
UserManagement.tabHexToInt((byte[]) null);

Test 107: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p');
UserManagement.removeUser(addUserTXT);

Test 108: 
UserManagement.add_online_user((Auth_data) null);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);
Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);

Test 109: 
byte[] byteArray = new byte[31];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) false, (boolean) (Boolean) null);

Test 110: 
byte[] byteArray = new byte[31];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) true, (boolean) (Boolean) null);

Test 111: 
UserManagement.levelIsValid(1970, "KT;", 1970, 1970);
UserManagement.levelIsValid((int) "2022-03-04", "KT;", (int) "2022-03-04", (int) "2022-03-04");

Test 112: 
UserManagement.levelIsValid((int) "John Doe", (String) 50, (int) (Integer) null, (int) (Integer) null);

Test 113: 
UserManagement.levelIsValid(46, "A level string that is too long", 46, 46);
UserManagement.levelIsValid(46, "A level string that is too short", 46, 46);
UserManagement.levelIsValid(46, "A level string with an invalid character", 46, 46);

Test 114: 
Integer integer = new Integer(1000000000);
UserManagement.remove_online_user(integer);

Test 115: 
UserManagement.charif_sendallwos(745, (int[]) null);

Test 116: 
UserManagement.charif_sendallwos(5559, (byte[]) null);

Test 117: 
UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');

Test 118: 
UserManagement.isGM((long) "John Doe");
String string = "Jane Smith";
UserManagement.isGM((long) string);
String string = "Administrator";
UserManagement.isGM((long) string);
String string = "Guest";
UserManagement.isGM((long) string);

Test 119: 

Test 120: 
UserManagement.dynamicFailBanCheckTXT("This is a test string to check if the fail ban check works correctly.");

Test 121: 
Socket_data socket_data = new Socket_data((Socket) "localhost");
String string = "John Doe";
String string = "johndoe@example.com";
String string = "123456";
char _char = 'm';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.sendUserList(socket_data);

Test 122: 
UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

Test 123: 
FromAdmin fromAdmin = new FromAdmin();
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts((Socket_data) byteArray, (byte[]) null);

Test 124: 
UserManagement.online_db_final();

Test 125: 
UserManagement.getUserTxt("John Doe");

Test 126: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "password123", 'A');

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((long) (Long) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "Mobile");
UserManagement.addUser(auth_data);

Test 130: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((int) "PREMIUM");
UserManagement.addUser(auth_data);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((long) (Long) null);
UserManagement.addUser(auth_data);
long _long = null;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@example.com", "+1234567890", 'p');
((Auth_data)"John Smith").setDelflag((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) "enable");
UserManagement.addUser(auth_data);

Test 134: 
Auth_data addUserTXT = UserManagement.addUserTXT("johndoe", "john123", "John Doe", 'p');
((Auth_data)"johndoe").setLevel(99);
UserManagement.addUser(addUserTXT);

Test 135: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);

Test 136: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((int) "johndoe");
UserManagement.addUser(auth_data);

Test 137: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((int) "johndoe");
UserManagement.addUser(auth_data);

Test 138: 
Auth_data addUserTXT = UserManagement.addUserTXT("QWERTYUIOP123456789", "password@#$%!^&*()_+-=[]{}|;':\"<>,./~", "John Doe", 'p');
((Auth_data)"QWERTYUIOP123456789").setLogin_id2(2);
UserManagement.addUser(addUserTXT);

Test 139: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 140: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);

Test 141: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane Smith", "janesmith@email.com", "9876543210", 'p');
((Auth_data)"Jane Smith").setState(12);
UserManagement.addUser(addUserTXT);

Test 142: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion(100);
UserManagement.addUser(auth_data);

Test 143: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@email.com", "GX", 'p');
((Auth_data)"John Doe").setVersion(1082535490);
UserManagement.addUser(addUserTXT);

Test 144: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 145: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a');
UserManagement.getAccountIdCount();

Test 146: 
UserManagement.addUserTXT("John Doe", "johndoe@email.com", "1234567890", 'm');
UserManagement.getNBUser();

Test 147: 

Test 148: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);

Test 149: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 255;
byteArray[1] = (byte) 128;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 10;
byteArray[1] = (byte) 100;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 'A';
byteArray[1] = (byte) 62;
UserManagement.tabHexToInt(byteArray);
byteArray[1] = (byte) 32;
byteArray[1] = (byte) 13;
UserManagement.tabHexToInt(byteArray);

Test 150: 
UserManagement.account_idToOffline((Socket_data) null, (byte[]) null);

Test 151: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.account_idToOnline(socket_data, (byte[]) null);

Test 152: 
UserManagement.addGM(1000, 2000);

Test 153: 
UserManagement.banResquest((Socket_data) null);

Test 154: 
UserManagement.changeSex((Socket_data) null);

Test 155: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);

Test 156: 
Socket_data socket_data = new Socket_data((Socket) "https://www.example.com");
byte[] byteArray = new byte[8];
UserManagement.charServerToAuthentify(socket_data, byteArray);

Test 157: 
UserManagement.connectionOfCharServer((Socket_data) null, (byte[]) null);

Test 158: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 159: 
UserManagement.dynamicFailBanCheckMySQL("(\uD83D\uDC68\u200D\uD83D\uDCBB)");

Test 160: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailCreation(socket_data);
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
UserManagement.emailCreation(socket_data);

Test 161: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailLimitedTime(socket_data);

Test 162: 
byte[] byteArray = new byte[21];
UserManagement.receiveAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 163: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
UserManagement.requestAccountData(socket_data, byteArray);

Test 164: 
byte[] byteArray = new byte[16];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 165: 
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[9];
UserManagement.statusChange((Socket_data) byteArray, (byte[]) null);

Test 166: 
UserManagement.toChangeAnEmail((Socket_data) null);


* Minimizing test suite
* test suite isTestSuite: 86
Test 0: 
UserManagement.addAccountIdCount(98765);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(10);
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
UserManagement.toBecomeGM((Socket_data) null);
Test 6: 
UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Incorrect Password.");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
UserManagement.getUserTxt((Integer) null);
Test 11: 
UserManagement.addSession((Socket_data) null);
Test 12: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(87);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 13: 
UserManagement.addAccountIdCount();
Test 14: 
Integer integer = new Integer(2503128);
UserManagement.is_user_online(integer);
Test 15: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 987654321);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 16: 
UserManagement.getAccountID("johndoe@example.com");
Test 17: 
UserManagement.getNBSession();
Test 18: 
UserManagement.online_db_final();
Test 19: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 20: 
UserManagement.getNBUser();
Test 21: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 22: 
byte[] byteArray = new byte[6];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p');
UserManagement.removeUser(addUserTXT);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 25: 
byte[] byteArray = new byte[31];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
byte[] byteArray = new byte[31];
Socket_data socket_data = new Socket_data((Socket) null);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 27: 
UserManagement.levelIsValid(1970, "KT;", 1970, 1970);
Test 28: 
UserManagement.levelIsValid((-1305), "", (-1305), (-1305));
Test 29: 
UserManagement.levelIsValid(46, "A level string that is too long", 46, 46);
Test 30: 
Integer integer = new Integer(100);
UserManagement.remove_online_user(integer);
Test 31: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 32: 
UserManagement.charif_sendallwos(745, (int[]) null);
Test 33: 
UserManagement.charif_sendallwos(5559, (byte[]) null);
Test 34: 
UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');
Test 35: 
UserManagement.isGM(16L);
Test 36: 
UserManagement.getUserTxt("John Doe");
Test 37: 
UserManagement.getAccountIds();
Test 38: 
UserManagement.addUserTXT((String) null, "status_1", "status_1", '~');
UserManagement.getAccountIds();
Test 39: 
UserManagement.dynamicFailBanCheckTXT("yQOKF.lo}3hkV)>;}$o");
Test 40: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.sendUserList(socket_data);
Test 41: 
UserManagement.addUserTXT("-y39^yElsz", "r'oZmFFY774G.^;X", "r'oZmFFY774G.^;X", '9');
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 42: 
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data((Socket) null, fromAdmin);
byte[] byteArray = new byte[5];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-2689L));
UserManagement.addUser(auth_data);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time(717L);
UserManagement.addUser(auth_data);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType((-274));
UserManagement.addUser(auth_data);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setClientType(45);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time((-1862L));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setDelflag((-1691));
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(1474);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLevel((-1930));
UserManagement.addUser(addUserTXT);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel(503);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-2100));
UserManagement.addUser(auth_data);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(1059);
UserManagement.addUser(auth_data);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setLogin_id2(2);
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount((-1036));
UserManagement.addUser(auth_data);
Test 56: 
Auth_data auth_data = new Auth_data();
auth_data.setLastlogin();
UserManagement.addUser(auth_data);
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT(").-R[5n>`|", ").-R[5n>`|", ").-R[5n>`|", 'p');
addUserTXT.setState(2708);
UserManagement.addUser(addUserTXT);
Test 58: 
Auth_data auth_data = new Auth_data();
auth_data.setVersion((-1928));
UserManagement.addUser(auth_data);
Test 59: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "GX", 'p');
addUserTXT.setVersion(1082535490);
UserManagement.addUser(addUserTXT);
Test 60: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 61: 
UserManagement.addUserTXT("John Doe", "johndoe@example.com", "SuperSecretPassword!", 'a');
UserManagement.getAccountIdCount();
Test 62: 
UserManagement.addUserTXT("", "", "", 'm');
UserManagement.getNBUser();
Test 63: 
Auth_data addUserTXT = UserManagement.addUserTXT("4ARf(ln]?", "", "", '=');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 64: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) (-74);
UserManagement.tabHexToInt(byteArray);
Test 65: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)87;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 67: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM((-42), (-42));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
// Undeclared exception!
try { 
  UserManagement.administationLogin((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
// Undeclared exception!
try { 
  UserManagement.changeSex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex(socket_data);
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[3];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 76: 
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("(I");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 79: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[21];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
byte[] byteArray = new byte[16];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 83: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 84: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 85: 
// Undeclared exception!
try { 
  UserManagement.unban((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 54
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 28%
* Total number of goals: 711
* Number of covered goals: 196
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 423
* Number of covered goals: 86
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 54
* Generated 86 tests with total length 183
* Resulting test suite's coverage: 31% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount(98765);

** It was a parseable test case! 
refined test name is: testAddAccountIdCountIncrementsTheCountByOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBGM = UserManagement.getNBGM();
assertEquals(0, nBGM);


** It was a parseable test case! 
refined test name is: testInitialNumberOfBackgroundMessagesIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.setAccountIdCount(10);

** It was a parseable test case! 
refined test name is: setAccountIdCountCorrectValueShouldBeSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.debugXML();

** It was a parseable test case! 
refined test name is: testDebugXML
* Compiling Tests
refined test name is: testDebugXML
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
UserManagement.unLogServer(arg0);
assertNull(arg0.getName());


** It was a parseable test case! 
refined test name is: testUnlogServerSetsNameToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.toBecomeGM((Socket_data) null);

** It was a parseable test case! 
refined test name is: testCreateNewGMRole
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserSQL = UserManagement.addUserSQL("Jane Doe", "janedoe@example.com", "9876543210", 123);
assertNull(addUserSQL);


** It was a parseable test case! 
refined test name is: testAddUserReturnsNullWhenNoDataIsProvided
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int accountIdCount = UserManagement.getAccountIdCount();
assertEquals(0, accountIdCount);


** It was a parseable test case! 
refined test name is: testStartWithNoExistingUsers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL("Incorrect Password.");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLwithIncorrectPassword
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testThrowNullPointerExceptionOnNullSocketData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) null);
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtWithNonExistentUserId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
refined test name is: testAddSessionThrowsExceptionWithNullArgument
* Compiling Tests
refined test name is: testAddSessionNullData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getSessionAt(87);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}


** It was a parseable test case! 
refined test name is: testGetSessionAtIndexOutOfBounds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
refined test name is: testAddAccount
* Compiling Tests
refined test name is: testAddAccountIncreasesNumberOfAccountsByOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(2503128);
boolean is_user_online = UserManagement.is_user_online(arg0);
assertFalse(is_user_online);


** It was a parseable test case! 
refined test name is: testIsUserOnlineAfterLogin
* Compiling Tests
refined test name is: testUserLogsIn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) 987654321);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLWithInvalidInputThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer accountID = UserManagement.getAccountID("johndoe@example.com");
assertNull(accountID);


** It was a parseable test case! 
refined test name is: testGetAccountIDInvalidEmail
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBSession = UserManagement.getNBSession();
assertEquals(0, nBSession);


** It was a parseable test case! 
refined test name is: testGetNBSessionWhenUserNotLoggedInReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int online_db_final = UserManagement.online_db_final();
assertEquals(0, online_db_final);


** It was a parseable test case! 
refined test name is: testRetrieveDataFromOnlineDatabase
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastMap<Integer, Auth_data> arg0 = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(arg0);
assertEquals(0, arg0.size());


** It was a parseable test case! 
refined test name is: testSetAuthdatsSetsSizeOfMapToZero
* Compiling Tests
refined test name is: testSetAuthdatsWithNonEmptyMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBUser = UserManagement.getNBUser();
assertEquals(0, nBUser);


** It was a parseable test case! 
refined test name is: testGetNBUserNoUsersAddedReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}


** It was a parseable test case! 
refined test name is: testAddIpToBanListMySQLInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[6];
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals(0, tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = UserManagement.addUserTXT("John Smith", "johnsmith@email.com", "GX", 'p');
assertNotNull(arg0);

Auth_data removeUser = UserManagement.removeUser(arg0);
assertEquals(0, arg0.getLogincount());
assertEquals(0, arg0.getState());
assertEquals(0, (int)arg0.getAccount_id());
assertEquals('p', arg0.getSex());
assertEquals("-", arg0.getEmail());
assertEquals("John Smith", arg0.getUserid());
assertNull(removeUser);


** It was a parseable test case! 
refined test name is: testRemoveUserreturnsNullAfterRemoval
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
int add_online_user = UserManagement.add_online_user(arg0);
assertEquals(0, add_online_user);


** It was a parseable test case! 
refined test name is: testAddOnlineUserValidInput
* Compiling Tests
refined test name is: testAddOnlineUserSuccessful
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[31];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, arg1, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfClientWithNullSocket
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[31];
Socket_data arg0 = new Socket_data((Socket) null);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(arg0, arg1, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 46
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testConnectionOfClientWithValidArgsAndTrueThirdArg
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(1970, "KT;", 1970, 1970);
assertEquals(99, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidgivenValidUserInfolevelIsValid
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid((-1305), "", (-1305), (-1305));
assertEquals((-1), levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidWithInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int levelIsValid = UserManagement.levelIsValid(46, "A level string that is too long", 46, 46);
assertEquals(46, levelIsValid);


** It was a parseable test case! 
refined test name is: testLevelIsValidvalidUserreturnsTrue
* Compiling Tests
refined test name is: testLevelIsValidwithValidUserreturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(100);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(99);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUser
* Compiling Tests
refined test name is: testRemoveOnlineUserValidIdDecreasesCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int charif_sendallwos = UserManagement.charif_sendallwos(745, (int[]) null);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int charif_sendallwos = UserManagement.charif_sendallwos(5559, (byte[]) null);
assertEquals(0, charif_sendallwos);


** It was a parseable test case! 
refined test name is: testCharifSendallwosWithNullByteArrayReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserTXT = UserManagement.addUserTXT("CC3D?66nK_", "CC3D?66nK_", "Prepared@tatement.54", '~');
assertEquals(0, (int)addUserTXT.getAccount_id());
assertEquals("CC3D?66nK_", addUserTXT.getUserid());
assertEquals(0, addUserTXT.getState());
assertEquals("Prepared@tatement.54", addUserTXT.getEmail());
assertEquals(0, addUserTXT.getLogincount());
assertEquals('~', addUserTXT.getSex());
assertEquals("CC3D?66nK_", addUserTXT.getPass());


** It was a parseable test case! 
refined test name is: testAddUserTXTWithValidData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int gM = UserManagement.isGM(16L);
assertEquals((-1), gM);


** It was a parseable test case! 
refined test name is: testIsGmReturnsNegativeOneWhenUserIsNotGM
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt("John Doe");
assertNull(userTxt);


* Computation finished
