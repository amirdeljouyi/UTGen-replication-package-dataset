* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.parse.FromClient
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 20728
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:51:58.688 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:51:58.697 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:51:58.697 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:51:58.719 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:51:58.722 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:51:58.722 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:51:58.726 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:51:58.727 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:51:58.729 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:51:58.730 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:51:58.731 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:51:58.733 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:51:58.750 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 06:51:58.775 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:51:58.778 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:51:58.779 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 06:51:58.790 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.parse.FromClient
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 163
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709275916015
* Starting evolution
* Initial Number of Goals in DynaMOSA = 13 / 163
[Progress:>                             0%] [Cov:========>                          24%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:================>                  48%][Progress:===>                          10%] [Cov:================>                  48%][Progress:===>                          11%] [Cov:================>                  48%][Progress:===>                          11%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:================>                  48%][Progress:====>                         14%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        17%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:=====>                        19%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       21%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       22%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      26%] [Cov:=================>                 50%][Progress:=======>                      26%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     28%] [Cov:=================>                 50%][Progress:========>                     28%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:=========>                    30%] [Cov:=================>                 50%][Progress:=========>                    31%] [Cov:=================>                 50%][Progress:=========>                    31%] [Cov:=================>                 50%][Progress:=========>                    32%] [Cov:=================>                 50%][Progress:=========>                    32%] [Cov:=================>                 50%][Progress:=========>                    33%] [Cov:=================>                 50%][Progress:=========>                    33%] [Cov:=================>                 50%][Progress:==========>                   34%] [Cov:=================>                 50%][Progress:==========>                   35%] [Cov:=================>                 50%][Progress:==========>                   35%] [Cov:=================>                 50%][Progress:==========>                   36%] [Cov:=================>                 50%][Progress:==========>                   36%] [Cov:=================>                 50%][Progress:==========>                   36%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 41%] [Cov:=================>                 50%][Progress:============>                 41%] [Cov:=================>                 50%][Progress:============>                 42%] [Cov:=================>                 50%][Progress:============>                 42%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:=============>                44%] [Cov:=================>                 50%][Progress:=============>                44%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:==============>               47%] [Cov:=================>                 50%][Progress:==============>               47%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           60%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           62%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          64%] [Cov:=================>                 50%][Progress:===================>          65%] [Cov:=================>                 50%][Progress:===================>          65%] [Cov:=================>                 50%][Progress:===================>          65%] [Cov:=================>                 50%][Progress:===================>          66%] [Cov:=================>                 50%][Progress:===================>          66%] [Cov:=================>                 50%][Progress:====================>         67%] [Cov:=================>                 50%][Progress:====================>         67%] [Cov:=================>                 50%][Progress:====================>         68%] [Cov:=================>                 50%][Progress:====================>         68%] [Cov:=================>                 50%][Progress:====================>         68%] [Cov:=================>                 50%][Progress:====================>         69%] [Cov:=================>                 50%][Progress:====================>         69%] [Cov:=================>                 50%][Progress:=====================>        70%] [Cov:=================>                 50%][Progress:=====================>        70%] [Cov:=================>                 50%][Progress:=====================>        71%] [Cov:=================>                 50%][Progress:=====================>        72%] [Cov:=================>                 50%][Progress:=====================>        72%] [Cov:=================>                 50%][Progress:=====================>        73%] [Cov:=================>                 50%][Progress:=====================>        73%] [Cov:=================>                 50%][Progress:======================>       74%] [Cov:=================>                 50%][Progress:======================>       75%] [Cov:=================>                 50%][Progress:======================>       75%] [Cov:=================>                 50%][Progress:======================>       76%] [Cov:=================>                 50%][Progress:=======================>      77%] [Cov:=================>                 50%][Progress:=======================>      77%] [Cov:=================>                 50%][Progress:=======================>      78%] [Cov:=================>                 50%][Progress:=======================>      79%] [Cov:=================>                 50%][Progress:=======================>      79%] [Cov:=================>                 50%][Progress:========================>     80%] [Cov:=================>                 50%][Progress:========================>     80%] [Cov:=================>                 50%][Progress:========================>     81%] [Cov:=================>                 50%][Progress:========================>     81%] [Cov:=================>                 50%][Progress:========================>     82%] [Cov:=================>                 50%][Progress:========================>     83%] [Cov:=================>                 50%][Progress:========================>     83%] [Cov:=================>                 50%][Progress:=========================>    84%] [Cov:=================>                 50%][Progress:=========================>    84%] [Cov:=================>                 50%][Progress:=========================>    85%] [Cov:=================>                 50%][Progress:=========================>    86%] [Cov:=================>                 50%][Progress:==========================>   87%] [Cov:=================>                 50%][Progress:==========================>   87%] [Cov:=================>                 50%][Progress:==========================>   88%] [Cov:=================>                 50%][Progress:==========================>   89%] [Cov:=================>                 50%][Progress:==========================>   89%] [Cov:=================>                 50%][Progress:===========================>  90%] [Cov:=================>                 50%][Progress:===========================>  90%] [Cov:=================>                 50%][Progress:===========================>  91%] [Cov:=================>                 50%][Progress:===========================>  92%] [Cov:=================>                 50%][Progress:===========================>  93%] [Cov:=================>                 50%][Progress:===========================>  93%] [Cov:=================>                 50%][Progress:============================> 94%] [Cov:=================>                 50%][Progress:============================> 94%] [Cov:=================>                 50%][Progress:============================> 95%] [Cov:=================>                 50%][Progress:============================> 96%] [Cov:=================>                 50%][Progress:============================> 96%] [Cov:=================>                 50%][Progress:=============================>97%] [Cov:=================>                 50%][Progress:=============================>97%] [Cov:=================>                 50%][Progress:=============================>98%] [Cov:=================>                 50%][Progress:=============================>99%] [Cov:=================>                 50%][Progress:=============================>99%] [Cov:=================>                 50%][Progress:==============================100%] [Cov:=================>                 50%][Progress:==============================100%] [Cov:=================>                 50%]
* Search finished after 102s and 199 generations, 124729 statements, best individual has fitness: 98.0
* Generated before the refinement 3 tests with total length 25
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@f4ee329f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[11]
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[11];
        fromClient.parse(socket_data, byteArray);
        // Improved test data
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[1024];// Improved to a more realistic size

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[11], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [11] Ct is: byte[] byteArray = new byte[11] isAssignment: false Array: new byte[11] Elements: []
lengths: [11] [11]
Their type are: class [B byte[]
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
statement is: // Improved test data
FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 10
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[1024]// Improved to a more realistic size
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1024] Ct is: byte[] byteArray = new byte[11] isAssignment: false Array: new byte[1024] Elements: []
lengths: [11] [1024]
Their type are: class [B byte[]
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 7
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@1a3b6836 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[11]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7f2cf799 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[11];
        // Changing the primitive values and Strings to more illustrative examples
        byteArray[0] = ((byte) (255));// Using a larger value for the first byte

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[11], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [11] Ct is: byte[] byteArray = new byte[11] isAssignment: false Array: new byte[11] Elements: []
lengths: [11] [11]
Their type are: class [B byte[]
statement is: // Changing the primitive values and Strings to more illustrative examples
byteArray[0] = ((byte) (255))// Using a larger value for the first byte
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (255)) Ct is: // Changing the primitive values and Strings to more illustrative examples
byteArray[0] = ((byte) (255))// Using a larger value for the first byte

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
int _int = 255;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.evosuite.testcase.statements.ArrayStatement@1fb55619 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6d41d01 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: org.evosuite.testcase.statements.AssignmentStatement@446b9dac type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)26
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte)121;
byteArray[0] = (byte)26;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initXML();
        Socket_data socket_data = new Socket_data(mockSocket);
        mockSocket.close();
        byte[] byteArray = new byte[7];
        byteArray[1] = ((byte) (0x79));// y

        byteArray[0] = ((byte) (0x42));// B

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initXML()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 1, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 1
Matched Method is: close()V
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (0x79))// y
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x79)) Ct is: byteArray[1] = ((byte) (0x79))// y

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[0] = ((byte) (0x42))// B
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x42)) Ct is: byteArray[0] = ((byte) (0x42))// B

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
int _int = 121;
byteArray[1] = (byte) _int;
int _int = 66;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

* test suite isTestSuite: 6
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte)121;
byteArray[0] = (byte)26;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);

Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte) 255;
fromClient.parse(socket_data, byteArray);

Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte) 121;
byteArray[0] = (byte) 66;
fromClient.parse(socket_data, byteArray);


* Generated after the refinement and before minimization 6 tests with total length 57
* test suite isTestSuite: 6
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte)121;
byteArray[0] = (byte)26;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);

Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte) 255;
fromClient.parse(socket_data, byteArray);

Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte) 121;
byteArray[0] = (byte) 66;
fromClient.parse(socket_data, byteArray);


* Minimizing test suite
* test suite isTestSuite: 3
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[11];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initXML();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[7];
byteArray[1] = (byte)121;
byteArray[0] = (byte)26;
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 49
* Number of covered goals: 23
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 27%
* Total number of goals: 60
* Number of covered goals: 16
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 49
* Number of covered goals: 23
* Generated 3 tests with total length 25
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Writing tests to file
* Writing JUnit test case 'FromClient_ESTest' to evosuite-tests
* Done!

* Computation finished
