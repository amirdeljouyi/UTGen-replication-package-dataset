* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.UserManagement
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 20285
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:42:17.471 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:42:17.487 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:42:17.488 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:42:18.047 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 13:42:18.149 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:42:18.150 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:42:18.152 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 13:42:19.150 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 13:42:19.157 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 13:42:19.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 13:42:19.364 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 13:42:19.368 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 13:42:19.369 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 13:42:19.370 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 13:42:19.372 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 13:42:19.374 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 13:42:19.408 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 13:42:19.487 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.UserManagement
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1851
* Using seed 1710337333264
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 845 / 1851
[Progress:>                             0%] [Cov:====>                              12%][Progress:>                             1%] [Cov:=====>                             17%][Progress:>                             2%] [Cov:======>                            19%][MASTER] 13:42:25.089 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:>                             2%] [Cov:=======>                           21%][Progress:>                             2%] [Cov:=======>                           21%][Progress:>                             3%] [Cov:=======>                           21%][Progress:>                             3%] [Cov:========>                          23%][Progress:>                             3%] [Cov:========>                          24%][Progress:>                             3%] [Cov:========>                          24%][Progress:=>                            4%] [Cov:========>                          24%][Progress:=>                            4%] [Cov:========>                          24%][MASTER] 13:42:28.496 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:=========>                         26%][Progress:=>                            4%] [Cov:=========>                         26%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         27%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:=>                            6%] [Cov:==========>                        29%][Progress:==>                           7%] [Cov:==========>                        29%][Progress:==>                           7%] [Cov:==========>                        29%][Progress:==>                           7%] [Cov:==========>                        29%][Progress:==>                           7%] [Cov:==========>                        29%][Progress:==>                           8%] [Cov:==========>                        29%][Progress:==>                           8%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:==>                           9%] [Cov:==========>                        29%][Progress:===>                          10%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          12%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][MASTER] 13:42:55.584 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Class<T> : Type points to itself
[Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       21%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       22%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    31%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  37%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:===========>                  39%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 42%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                44%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:=============>                46%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               47%] [Cov:==========>                        31%][Progress:==============>               48%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              51%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:===============>              52%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             54%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:================>             56%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            57%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            58%] [Cov:==========>                        31%][Progress:=================>            59%] [Cov:==========>                        31%][Progress:=================>            59%] [Cov:==========>                        31%][Progress:=================>            59%] [Cov:==========>                        31%][Progress:=================>            59%] [Cov:==========>                        31%][Progress:==================>           60%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           62%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          64%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         67%] [Cov:==========>                        31%][Progress:====================>         68%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:====================>         69%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        70%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       74%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      77%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:=======================>      79%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     80%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     82%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 96%] [Cov:==========>                        31%][Progress:============================> 96%] [Cov:==========>                        31%][Progress:============================> 96%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>97%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>98%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:=============================>99%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:==========>                        31%]
* Search finished after 202s and 934 generations, 218229 statements, best individual has fitness: 1375.0
* Generated before the refinement 84 tests with total length 245
statement is: addAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount(0)
test data is: UserManagement.addAccountIdCount(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addAccountIdCount(123456789);
    }
}
statement is: UserManagement.addAccountIdCount(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(123456789) target is: UserManagement method is: addAccountIdCount(int)
Matched Method is: addAccountIdCount(I)V
TestCase is: int _int = 123456789;
UserManagement.addAccountIdCount(_int);

statement is: getNBGM()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBGM = UserManagement.getNBGM()
test data is: UserManagement.getNBGM();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getNBGM();
        // Test data for a successful response
        int nbgm = 10;
        assertEquals(nbgm, UserManagement.getNBGM());
        // Test data for an unsuccessful response
        int nbgm = -1;
        assertNotEquals(nbgm, UserManagement.getNBGM());
    }
}
statement is: UserManagement.getNBGM(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBGM() target is: UserManagement method is: getNBGM()
Matched Method is: getNBGM()I
statement is: // Test data for a successful response
int nbgm = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(nbgm, UserManagement.getNBGM()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(nbgm, UserManagement.getNBGM()) target is:  method is: assertEquals(int,<unknown>)
statement is: // Test data for an unsuccessful response
int nbgm = -1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -1
statement is: assertNotEquals(nbgm, UserManagement.getNBGM()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(nbgm, UserManagement.getNBGM()) target is:  method is: assertNotEquals(int,<unknown>)
* this is vulnerable: int _int = 10
TestCase is: UserManagement.getNBGM();
int _int = 10;

statement is: setAccountIdCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAccountIdCount(942)
test data is: UserManagement.setAccountIdCount(942);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.setAccountIdCount(1000);
    }
}
statement is: UserManagement.setAccountIdCount(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAccountIdCount(1000) target is: UserManagement method is: setAccountIdCount(int)
Matched Method is: setAccountIdCount(I)V
TestCase is: int _int = 1000;
UserManagement.setAccountIdCount(_int);

statement is: debugXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.debugXML()
test data is: UserManagement.debugXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.debugXML(123, "John Doe", 456, "johndoe@example.com", "Employee", "01/01/1970");
    }
}
statement is: UserManagement.debugXML(123, "John Doe", 456, "johndoe@example.com", "Employee", "01/01/1970"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.debugXML(123, "John Doe", 456, "johndoe@example.com", "Employee", "01/01/1970") target is: UserManagement method is: debugXML(int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: unLogServer(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unLogServer(arg0)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        Socket_data socket_data = new Socket_data("192.168.0.1");
        UserManagement.unLogServer(socket_data);
    }
}
statement is: // Improved test data:
Socket_data socket_data = new Socket_data("192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.unLogServer(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unLogServer(socket_data) target is: UserManagement method is: unLogServer(Socket_data)
Matched Method is: unLogServer(Lorg/javathena/core/data/Socket_data;)V
TestCase is: String string = "192.168.0.1";
Socket_data socket_data = new Socket_data((Socket) string);
UserManagement.unLogServer(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toBecomeGM(arg0)
test data is: MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toBecomeGM(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 54321);
        FromChar fromChar = new FromChar('a', 'A');
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        UserManagement.toBecomeGM(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 54321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar('a', 'A'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.toBecomeGM(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toBecomeGM(socket_data) target is: UserManagement method is: toBecomeGM(Socket_data)
Matched Method is: toBecomeGM(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.toBecomeGM(socket_data);

statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n")
test data is: UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n");
    }
}
statement is: UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n") target is: UserManagement method is: getUserSQL(java.lang.String)
Matched Method is: getUserSQL(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n";
UserManagement.getUserSQL(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@dc4a9f1b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: numberOfUser(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.numberOfUser((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[1];
UserManagement.numberOfUser((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        byteArray[0] = 5;// Modified to a more descriptive example

        byteArray[1] = 10;// Modified to a more descriptive example

        UserManagement.numberOfUsers(null, byteArray);
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[2] Elements: []
lengths: [1] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = 5// Modified to a more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:5 Ct is: byteArray[0] = 5// Modified to a more descriptive example

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = 10// Modified to a more descriptive example
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:10 Ct is: byteArray[1] = 10// Modified to a more descriptive example

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.numberOfUsers(null, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.numberOfUsers(null, byteArray) target is: UserManagement method is: numberOfUsers(<unknown>,byte[])
TestCase is: byte[] byteArray = new byte[1];

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd')
statement is: getAccount_id()Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer account_id = auth_data.getAccount_id()
statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("utf8mb4", "utf8mb4", "utf8mb4", 'a');
        Integer account_id = addUserTXT.getAccount_id();
        UserManagement.getUserTxt(account_id);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("utf8mb4", "utf8mb4", "utf8mb4", 'a'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("utf8mb4", "utf8mb4", "utf8mb4", 'a') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Integer account_id = addUserTXT.getAccount_id(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.getAccount_id() target is: addUserTXT method is: getAccount_id()
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: getAccount_id()Ljava/lang/Integer;
statement is: UserManagement.getUserTxt(account_id), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(account_id) target is: UserManagement method is: getUserTxt(java.lang.Integer)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "utf8mb4";
String string = "utf8mb4";
String string = "utf8mb4";
char _char = 'a';
UserManagement.addUserTXT(string, string, string, _char);
Integer account_id = ((Auth_data) string).getAccount_id();
UserManagement.getUserTxt(account_id);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: addSession(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addSession(arg0)
test data is: MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8081, "user1", "password1");
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.addSession(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8081, "user1", "password1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.addSession(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addSession(socket_data) target is: UserManagement method is: addSession(Socket_data)
Matched Method is: addSession(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.addSession(socket_data);

statement is: addAccountIdCount()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addAccountIdCount()
test data is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addAccountIdCount(100, 50);// Add a new account ID count with a value of 100 and an initial count of 50

        UserManagement.addAccountIdCount(200, 100);// Add a new account ID count with a value of 200 and an initial count of 100 }}

    }
}
statement is: UserManagement.addAccountIdCount(100, 50)// Add a new account ID count with a value of 100 and an initial count of 50
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(100, 50)// Add a new account ID count with a value of 100 and an initial count of 50
 target is: UserManagement method is: addAccountIdCount(int,int)
statement is: UserManagement.addAccountIdCount(200, 100)// Add a new account ID count with a value of 200 and an initial count of 100 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addAccountIdCount(200, 100)// Add a new account ID count with a value of 200 and an initial count of 100 }}
 target is: UserManagement method is: addAccountIdCount(int,int)
statement is: is_user_online(Ljava/lang/Integer;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean is_user_online = UserManagement.is_user_online((Integer) null)
test data is: UserManagement.is_user_online((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.is_user_online(123456789);
    }
}
statement is: UserManagement.is_user_online(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.is_user_online(123456789) target is: UserManagement method is: is_user_online(int)
Matched Method is: is_user_online(Ljava/lang/Integer;)Z
TestCase is: int _int = 123456789;
UserManagement.is_user_online((Integer) _int);

statement is: getUserSQL(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((Integer) null)
test data is: UserManagement.getUserSQL((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for UserManagement.getUserSQL() method
        user = new User(1, "John Doe", 25, "johndoe@example.com");
        // Improved test data for UserManagement.getUserSQL((Integer) null);
        nullValue = null;
    }
}
statement is: // Improved test data for UserManagement.getUserSQL() method
user = new User(1, "John Doe", 25, "johndoe@example.com"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: // Improved test data for UserManagement.getUserSQL((Integer) null);
nullValue = null, class spoon.support.reflect.code.CtAssignmentImpl
statement is: getNBSession()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBSession = UserManagement.getNBSession()
statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL("w~<#hK")
test data is: UserManagement.getNBSession();
UserManagement.dynamicFailBanCheckMySQL("w~<#hK");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getNBSession();
        UserManagement.dynamicFailBanCheckMySQL("1234567890");
    }
}
statement is: UserManagement.getNBSession(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBSession() target is: UserManagement method is: getNBSession()
Matched Method is: getNBSession()I
statement is: UserManagement.dynamicFailBanCheckMySQL("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckMySQL("1234567890") target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
TestCase is: UserManagement.getNBSession();
String string = "1234567890";
UserManagement.dynamicFailBanCheckMySQL(string);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(99)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(1234567890);
        UserManagement.remove_online_user(integer);
    }
}
statement is: Integer integer = new Integer(1234567890), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
TestCase is: int _int = 1234567890;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);

statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
test data is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
        UserManagement.setAuth_dats(auth_dats);
        // Modified test data
        auth_dats.put(123456789, new Auth_data("user@example.com", "qwerty"));
        auth_dats.put(234567890, new Auth_data("admin@example.com", "iloveyou"));
        // End of modified test data
        UserManagement.setAuth_dats(auth_dats);
    }
}
statement is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: UserManagement.setAuth_dats(auth_dats), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(auth_dats) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
statement is: // Modified test data
auth_dats.put(123456789, new Auth_data("user@example.com", "qwerty")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Modified test data
auth_dats.put(123456789, new Auth_data("user@example.com", "qwerty")) target is: auth_dats method is: put(int,Auth_data)
statement is: auth_dats.put(234567890, new Auth_data("admin@example.com", "iloveyou")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_dats.put(234567890, new Auth_data("admin@example.com", "iloveyou")) target is: auth_dats method is: put(int,Auth_data)
statement is: // End of modified test data
UserManagement.setAuth_dats(auth_dats), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // End of modified test data
UserManagement.setAuth_dats(auth_dats) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
TestCase is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
UserManagement.setAuth_dats(auth_dats);

statement is: org.evosuite.testcase.statements.ArrayStatement@e84a75e7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOnline((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[6];
UserManagement.account_idToOnline((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        UserManagement.account_idToOnline(new Socket_data("127.0.0.1", 8080), byteArray);
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: UserManagement.account_idToOnline(new Socket_data("127.0.0.1", 8080), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOnline(new Socket_data("127.0.0.1", 8080), byteArray) target is: UserManagement method is: account_idToOnline(Socket_data,byte[])
Matched Method is: account_idToOnline(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[6];
byte[] byteArray = null;
UserManagement.account_idToOnline((Socket_data) byteArray, byteArray);

statement is: addIpToBanListMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.addIpToBanListMySQL("S1009")
test data is: UserManagement.addIpToBanListMySQL("S1009");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addIpToBanListMySQL("192.168.0.1");
        UserManagement.addIpToBanListMySQL("172.16.254.1");
        UserManagement.addIpToBanListMySQL("10.0.0.1");
    }
}
statement is: UserManagement.addIpToBanListMySQL("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("192.168.0.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
statement is: UserManagement.addIpToBanListMySQL("172.16.254.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("172.16.254.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
statement is: UserManagement.addIpToBanListMySQL("10.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addIpToBanListMySQL("10.0.0.1") target is: UserManagement method is: addIpToBanListMySQL(java.lang.String)
Matched Method is: addIpToBanListMySQL(Ljava/lang/String;)V
TestCase is: String string = "192.168.0.1";
UserManagement.addIpToBanListMySQL(string);
String string = "172.16.254.1";
UserManagement.addIpToBanListMySQL(string);
String string = "10.0.0.1";
UserManagement.addIpToBanListMySQL(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@fc0ec783 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) };
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) } Elements: [((byte) (0xab)), ((byte) (0xcd))]
lengths: [2] []
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: byte[] byteArray = null;
UserManagement.tabHexToInt(byteArray);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data removeUser = UserManagement.removeUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Auth_data auth_data = new Auth_data("John", "Doe", 30, "johndoe@example.com");
        UserManagement.removeUser(auth_data);
    }
}
statement is: // Improved test data
Auth_data auth_data = new Auth_data("John", "Doe", 30, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.removeUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.removeUser(auth_data) target is: UserManagement method is: removeUser(Auth_data)
Matched Method is: removeUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Auth_data auth_data = null;
UserManagement.removeUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
statement is: add_online_user(Lorg/javathena/core/data/Auth_data;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int add_online_user = UserManagement.add_online_user(arg0)
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", '4')
statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", '4');
UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setUsername("John Doe");
        auth_data.setPassword("abc123");
        auth_data.setLevel(5);
        UserManagement.addUser(auth_data);
        UserManagement.add_online_user(auth_data);
        UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", 5, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n");
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setUsername("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("John Doe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("abc123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("abc123") target is: auth_data method is: setPassword(java.lang.String)
statement is: auth_data.setLevel(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(5) target is: auth_data method is: setLevel(int)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.add_online_user(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
statement is: UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", 5, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", 5, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n") target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,int,java.lang.String)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
String string = "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n";
String string = "John Doe";
int _int = 5;
String string = "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n";
UserManagement.addUserTXT(string, string, (String) _int, (char) string);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: add_online_user(Lorg/javathena/core/data/Auth_data;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int add_online_user = UserManagement.add_online_user(arg0)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data("john.doe@example.com", "qwerty");
        auth_data.setName("John Doe");
        auth_data.setAddress("123 Main St.");
        UserManagement.add_online_user(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data("john.doe@example.com", "qwerty"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setName("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setName("John Doe") target is: auth_data method is: setName(java.lang.String)
statement is: auth_data.setAddress("123 Main St."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setAddress("123 Main St.") target is: auth_data method is: setAddress(java.lang.String)
statement is: UserManagement.add_online_user(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.add_online_user(auth_data) target is: UserManagement method is: add_online_user(Auth_data)
Matched Method is: add_online_user(Lorg/javathena/core/data/Auth_data;)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Auth_data auth_data = null;
UserManagement.add_online_user(auth_data);

statement is: org.evosuite.testcase.statements.ArrayStatement@ace70565 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[38]
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient((Socket_data) null, arg1, false)
test data is: byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) null, byteArray, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[38];
        UserManagement.connectionOfClient(null, byteArray, false);
    }
}
statement is: byte[] byteArray = new byte[38], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [38] Ct is: byte[] byteArray = new byte[38] isAssignment: false Array: new byte[38] Elements: []
lengths: [38] [38]
Their type are: class [B byte[]
statement is: UserManagement.connectionOfClient(null, byteArray, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(null, byteArray, false) target is: UserManagement method is: connectionOfClient(<unknown>,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[38];
boolean _boolean = false;
boolean _boolean = null;
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) _boolean, _boolean);

statement is: org.evosuite.testcase.statements.ArrayStatement@c9e1732b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[19]
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClient(arg0, arg1, true)
test data is: byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClient(socket_data, byteArray, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56 };
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.connectionOfClient(socket_data, byteArray, true);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[19] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56 } Elements: [0x12, 0x34, 0x56]
lengths: [19] []
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.connectionOfClient(socket_data, byteArray, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClient(socket_data, byteArray, true) target is: UserManagement method is: connectionOfClient(Socket_data,byte[],boolean)
Matched Method is: connectionOfClient(Lorg/javathena/core/data/Socket_data;[BZ)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
boolean _boolean = true;
boolean _boolean = null;
UserManagement.connectionOfClient(socket_data, (byte[]) _boolean, _boolean);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(3, "D>*B:+`G>t", 1023, 3)
test data is: UserManagement.levelIsValid(3, "D>*B:+`G>t", 1023, 3);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(3, "Superuser", 1023, 3);
    }
}
statement is: UserManagement.levelIsValid(3, "Superuser", 1023, 3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(3, "Superuser", 1023, 3) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 3;
String string = "Superuser";
int _int = 1023;
int _int = 3;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(0, "zL[%}=A", (-1), 0)
test data is: UserManagement.levelIsValid(0, "zL[%}=A", (-1), 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(-1, "a", -2, 0);
    }
}
statement is: UserManagement.levelIsValid(-1, "a", -2, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(-1, "a", -2, 0) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: String string = "a";
int _int = 0;
int _int = null;
int _int = null;
UserManagement.levelIsValid((int) string, (String) _int, _int, _int);

statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(1265, "", 1265, 1265)
test data is: UserManagement.levelIsValid(1265, "", 1265, 1265);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.levelIsValid(1265, "AwesomeSauce", "p@ssword123!", "p@ssword123!");
    }
}
statement is: UserManagement.levelIsValid(1265, "AwesomeSauce", "p@ssword123!", "p@ssword123!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(1265, "AwesomeSauce", "p@ssword123!", "p@ssword123!") target is: UserManagement method is: levelIsValid(int,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
TestCase is: int _int = 1265;
String string = "AwesomeSauce";
String string = "p@ssword123!";
String string = "p@ssword123!";
UserManagement.levelIsValid(_int, string, (int) string, (int) string);

statement is: java.lang.Integer(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Integer
statement code is: Integer integer = new Integer(24)
statement is: remove_online_user(Ljava/lang/Integer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.remove_online_user(arg0)
test data is: Integer integer = new Integer(24);
UserManagement.remove_online_user(integer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Integer integer = new Integer(987654321);
        UserManagement.remove_online_user(integer);
        String username = "johndoe";
        String password = "password1";
        String email = "johndoe@example.com";
        User user = new User(username, password, email);
        int onlineUsers = 3;
    }
}
statement is: Integer integer = new Integer(987654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.remove_online_user(integer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.remove_online_user(integer) target is: UserManagement method is: remove_online_user(java.lang.Integer)
Matched Method is: remove_online_user(Ljava/lang/Integer;)V
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String email = "johndoe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: User user = new User(username, password, email), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int onlineUsers = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password1"
* this is vulnerable: String string = "johndoe@example.com"
* this is vulnerable: int _int = 3
TestCase is: int _int = 987654321;
Integer integer = new Integer(_int);
UserManagement.remove_online_user(integer);
String string = "johndoe";
String string = "password1";
String string = "johndoe@example.com";
int _int = 3;

statement is: org.evosuite.testcase.statements.ArrayStatement@c3f0caa4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [I
statement code is: int[] intArray = new int[3]
statement is: charif_sendallwos(I[I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos((-3202), arg1)
test data is: int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] intArray = new int[]{ 10, 20, 30 };
        UserManagement.charif_sendallwos("WOS_ALL", intArray);
    }
}
statement is: int[] intArray = new int[]{ 10, 20, 30 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: int[] intArray = new int[3] isAssignment: false Array: new int[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [3] []
statement is: UserManagement.charif_sendallwos("WOS_ALL", intArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charif_sendallwos("WOS_ALL", intArray) target is: UserManagement method is: charif_sendallwos(java.lang.String,int[])
Matched Method is: charif_sendallwos(I[I)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "WOS_ALL";
int[] intArray = null;
UserManagement.charif_sendallwos((int) string, intArray);

statement is: charif_sendallwos(I[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int charif_sendallwos = UserManagement.charif_sendallwos((-5), (byte[]) null)
test data is: UserManagement.charif_sendallwos((-5), (byte[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for testing UserManagement.charif_sendallwos() method
        UserManagement.charif_sendallwos(-10, new byte[]{ ((byte) (0x0)), ((byte) (0x1)) });
    }
}
statement is: // Improved test data for testing UserManagement.charif_sendallwos() method
UserManagement.charif_sendallwos(-10, new byte[]{ ((byte) (0x0)), ((byte) (0x1)) }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for testing UserManagement.charif_sendallwos() method
UserManagement.charif_sendallwos(-10, new byte[]{ ((byte) (0x0)), ((byte) (0x1)) }) target is: UserManagement method is: charif_sendallwos(int,byte[])
Matched Method is: charif_sendallwos(I[B)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: int _int = null;
byte[] byteArray = null;
UserManagement.charif_sendallwos(_int, byteArray);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%')
test data is: UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        UserManagement.addUserTXT("johndoe@email.com", "John Doe", "1234 Main St.", 'M');
    }
}
statement is: // Improved test data
UserManagement.addUserTXT("johndoe@email.com", "John Doe", "1234 Main St.", 'M'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
UserManagement.addUserTXT("johndoe@email.com", "John Doe", "1234 Main St.", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "johndoe@email.com";
String string = "John Doe";
String string = "1234 Main St.";
char _char = 'M';
UserManagement.addUserTXT(string, string, string, _char);

statement is: isGM(J)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int gM = UserManagement.isGM(30002)
test data is: UserManagement.isGM(30002);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.isGM(10002);// false

        UserManagement.isGM(20002);// true

        UserManagement.isGM(30002);// true }}

    }
}
statement is: UserManagement.isGM(10002)// false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM(10002)// false
 target is: UserManagement method is: isGM(int)
Matched Method is: isGM(J)I
statement is: UserManagement.isGM(20002)// true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM(20002)// true
 target is: UserManagement method is: isGM(int)
Matched Method is: isGM(J)I
statement is: UserManagement.isGM(30002)// true }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.isGM(30002)// true }}
 target is: UserManagement method is: isGM(int)
Matched Method is: isGM(J)I
TestCase is: int _int = 10002;
UserManagement.isGM(_int);
int _int = 20002;
UserManagement.isGM(_int);
int _int = 30002;
UserManagement.isGM(_int);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((String) null)
statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL((String) null)
statement is: int _int = 10036 type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = 10036
statement is: String string = "" type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ""
statement is: int _int = 7 type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = 7
statement is: int _int = (-758) type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = (-758)
statement is: levelIsValid(ILjava/lang/String;II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int levelIsValid = UserManagement.levelIsValid(arg0, arg1, arg2, arg3)
test data is: Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt((String) null);
UserManagement.dynamicFailBanCheckMySQL((String) null);
int _int = 10036;
String string = "";
int _int = 7;
int _int = (-758);
UserManagement.levelIsValid(_int, string, _int, _int);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        UserManagement.getUserTxt("testuser123");
        UserManagement.dynamicFailBanCheckMySQL("127.0.0.1");
        int _int = 5;
        String string = "admin";
        int _int = 999;
        int _int = -86;
        UserManagement.levelIsValid(_int, string, _int, _int);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.getUserTxt("testuser123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt("testuser123") target is: UserManagement method is: getUserTxt(java.lang.String)
Matched Method is: getUserTxt(Ljava/lang/String;)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.dynamicFailBanCheckMySQL("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckMySQL("127.0.0.1") target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
statement is: int _int = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string = "admin", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int _int = 999, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int _int = -86, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -86
statement is: UserManagement.levelIsValid(_int, string, _int, _int), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.levelIsValid(_int, string, _int, _int) target is: UserManagement method is: levelIsValid(int,java.lang.String,int,int)
Matched Method is: levelIsValid(ILjava/lang/String;II)I
* this is vulnerable: int _int = 5
TestCase is: Auth_data auth_data = new Auth_data();
String string = "testuser123";
UserManagement.getUserTxt(string);
String string = "127.0.0.1";
UserManagement.dynamicFailBanCheckMySQL(string);
int _int = 5;
String string = "admin";
int _int = 999;
UserManagement.levelIsValid(_int, string, _int, _int);

statement is: getAccountIds()Ljavolution/util/FastTable; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastTable<java.lang.Integer>
statement code is: FastTable<Integer> accountIds = UserManagement.getAccountIds()
test data is: UserManagement.getAccountIds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before Refining
        UserManagement.getAccountIds();
        // After Refining
        UserManagement.getAccountIds(new String[]{ "John Doe", "123-45-6789" });
    }
}
statement is: // Before Refining
UserManagement.getAccountIds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Before Refining
UserManagement.getAccountIds() target is: UserManagement method is: getAccountIds()
Matched Method is: getAccountIds()Ljavolution/util/FastTable;
statement is: // After Refining
UserManagement.getAccountIds(new String[]{ "John Doe", "123-45-6789" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After Refining
UserManagement.getAccountIds(new String[]{ "John Doe", "123-45-6789" }) target is: UserManagement method is: getAccountIds(java.lang.String[])
TestCase is: UserManagement.getAccountIds();

statement is: dynamicFailBanCheckTXT(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckTXT("")
statement is: org.evosuite.testcase.statements.ArrayStatement@ed324e0b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@139bfb49 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)4
statement is: org.evosuite.testcase.statements.AssignmentStatement@7dc50867 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)26
statement is: sendDataOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendDataOnTcp = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@f69ca569 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bce37f00 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)39
statement is: org.evosuite.testcase.statements.AssignmentStatement@f54d13a3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[2] = (byte) (-39)
statement is: org.evosuite.testcase.statements.AssignmentStatement@70ae2156 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[3] = (byte) (-90)
statement is: org.evosuite.testcase.statements.AssignmentStatement@36eb7997 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[4] = (byte)66
statement is: org.evosuite.testcase.statements.AssignmentStatement@a14d6000 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[5] = (byte)0
statement is: org.evosuite.testcase.statements.AssignmentStatement@839e9e72 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[6] = (byte) (-13)
statement is: org.evosuite.testcase.statements.AssignmentStatement@b7d7ee96 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[7] = (byte)85
statement is: org.evosuite.testcase.statements.AssignmentStatement@397862c9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[8] = (byte)117
statement is: sendDataOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendDataOnTcp = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, arg1)
statement is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer accountID = UserManagement.getAccountID("")
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7) type is: class org.evosuite.testcase.statements.environment.RemoteAddressPrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteRemoteAddress
statement code is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7)
statement is: openRemoteTcpServer(Lorg/evosuite/runtime/testdata/EvoSuiteRemoteAddress;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean openRemoteTcpServer = NetworkHandling.openRemoteTcpServer(arg0)
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClientEncrypted(arg0)
test data is: UserManagement.dynamicFailBanCheckTXT("");
byte[] byteArray = new byte[2];
byteArray[0] = (byte)4;
byteArray[1] = (byte)26;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
byte[] byteArray = new byte[9];
byteArray[1] = (byte)39;
byteArray[2] = (byte) (-39);
byteArray[3] = (byte) (-90);
byteArray[4] = (byte)66;
byteArray[5] = (byte)0;
byteArray[6] = (byte) (-13);
byteArray[7] = (byte)85;
byteArray[8] = (byte)117;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byteArray[0] = ((byte) (4));// Changed to a more descriptive value, such as "USERNAME_LENGTH"

        byteArray[1] = ((byte) (26));// Changed to a more descriptive value, such as "PASSWORD_LENGTH"

        NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray);// Changed the value of the first argument to better reflect the purpose of the method

        byteArray[1] = ((byte) (39));// Changed to a more descriptive value, such as "SPECIAL_CHARACTER"

        byteArray[2] = ((byte) (-39));// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

        byteArray[3] = ((byte) (-90));// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

        byteArray[4] = ((byte) (66));// Changed to a more descriptive value, such as "LETTER_A"

        byteArray[5] = ((byte) (0));// Changed to a more descriptive value, such as "NULL_BYTE"

        byteArray[6] = ((byte) (-13));// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

        byteArray[7] = ((byte) (85));// Changed to a more descriptive value, such as "LETTER_U"

        byteArray[8] = ((byte) (117));// Changed to a more descriptive value, such as "LETTER_Q"

        NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray);// Changed the value of the first argument to better reflect the purpose of the method

        UserManagement.getAccountID("");// Changed the value of the argument to a more descriptive value, such as "ACCOUNT_USERNAME"

        MockSocket mockSocket = new MockSocket();// Added a comment explaining what this line does

        EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7);// Added a comment explaining what this line does

        NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);// Changed the value of the first argument to better reflect the purpose of the method

        FromAdmin fromAdmin = new FromAdmin();// Added a comment explaining what this line does

        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);// Changed the value of the first argument to better reflect the purpose of the method

        UserManagement.connectionOfClientEncrypted(socket_data);// Changed the value of the first argument to better reflect the purpose of the method }}

    }
}
statement is: byteArray[0] = ((byte) (4))// Changed to a more descriptive value, such as "USERNAME_LENGTH"
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: byteArray[1] = ((byte) (26))// Changed to a more descriptive value, such as "PASSWORD_LENGTH"
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray)// Changed the value of the first argument to better reflect the purpose of the method
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray)// Changed the value of the first argument to better reflect the purpose of the method
 target is: NetworkHandling method is: sendDataOnTcp(EvoSuiteLocalAddress)
Matched Method is: sendDataOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: byteArray[1] = ((byte) (39))// Changed to a more descriptive value, such as "SPECIAL_CHARACTER"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (39)) Ct is: byteArray[1] = ((byte) (39))// Changed to a more descriptive value, such as "SPECIAL_CHARACTER"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = ((byte) (-39))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (-39)) Ct is: byteArray[2] = ((byte) (-39))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[3] = ((byte) (-90))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (-90)) Ct is: byteArray[3] = ((byte) (-90))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[4] = ((byte) (66))// Changed to a more descriptive value, such as "LETTER_A"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (66)) Ct is: byteArray[4] = ((byte) (66))// Changed to a more descriptive value, such as "LETTER_A"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[5] = ((byte) (0))// Changed to a more descriptive value, such as "NULL_BYTE"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (0)) Ct is: byteArray[5] = ((byte) (0))// Changed to a more descriptive value, such as "NULL_BYTE"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[6] = ((byte) (-13))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (-13)) Ct is: byteArray[6] = ((byte) (-13))// Changed to a more descriptive value, such as "NEGATIVE_NUMBER"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[7] = ((byte) (85))// Changed to a more descriptive value, such as "LETTER_U"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (85)) Ct is: byteArray[7] = ((byte) (85))// Changed to a more descriptive value, such as "LETTER_U"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[8] = ((byte) (117))// Changed to a more descriptive value, such as "LETTER_Q"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[8] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((byte) (117)) Ct is: byteArray[8] = ((byte) (117))// Changed to a more descriptive value, such as "LETTER_Q"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray)// Changed the value of the first argument to better reflect the purpose of the method
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendDataOnTcp(((EvoSuiteLocalAddress) (null)), byteArray)// Changed the value of the first argument to better reflect the purpose of the method
 target is: NetworkHandling method is: sendDataOnTcp(EvoSuiteLocalAddress)
Matched Method is: sendDataOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;[B)Z
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: UserManagement.getAccountID("")// Changed the value of the argument to a more descriptive value, such as "ACCOUNT_USERNAME"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountID("")// Changed the value of the argument to a more descriptive value, such as "ACCOUNT_USERNAME"
 target is: UserManagement method is: getAccountID(java.lang.String)
Matched Method is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer;
statement is: MockSocket mockSocket = new MockSocket()// Added a comment explaining what this line does
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7)// Added a comment explaining what this line does
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress)// Changed the value of the first argument to better reflect the purpose of the method
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress)// Changed the value of the first argument to better reflect the purpose of the method
 target is: NetworkHandling method is: openRemoteTcpServer(EvoSuiteRemoteAddress)
Matched Method is: openRemoteTcpServer(Lorg/evosuite/runtime/testdata/EvoSuiteRemoteAddress;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: FromAdmin fromAdmin = new FromAdmin()// Added a comment explaining what this line does
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin)// Changed the value of the first argument to better reflect the purpose of the method
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.connectionOfClientEncrypted(socket_data)// Changed the value of the first argument to better reflect the purpose of the method }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(socket_data)// Changed the value of the first argument to better reflect the purpose of the method }}
 target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
TestCase is: EvoSuiteLocalAddress evoSuiteLocalAddress = null;
byte[] byteArray = null;
NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress, byteArray);
EvoSuiteLocalAddress evoSuiteLocalAddress = null;
byte[] byteArray = null;
NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress, byteArray);
String string = "";
UserManagement.getAccountID(string);
MockSocket mockSocket = new MockSocket();
EvoSuiteRemoteAddress evoSuiteRemoteAddress = null;
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);

statement is: sendUserList(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.sendUserList((Socket_data) null)
test data is: UserManagement.sendUserList((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        UserManagement.sendUserList(new Socket_data("127.0.0.1", 8080));
    }
}
statement is: // Improved test data
UserManagement.sendUserList(new Socket_data("127.0.0.1", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
UserManagement.sendUserList(new Socket_data("127.0.0.1", 8080)) target is: UserManagement method is: sendUserList(Socket_data)
Matched Method is: sendUserList(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.sendUserList(socket_data);

statement is: org.evosuite.testcase.statements.ArrayStatement@7188f24c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
statement is: mock(javolution.util.FastComparator<java.lang.Object>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type javolution.util.FastComparator<java.lang.Object>
statement code is: FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer())
statement is: setValueComparator(Ljavolution/util/FastComparator;)Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> setValueComparator = fastMap.setValueComparator(arg0)
statement is: getAuth_dats()Ljavolution/util/FastMap; type is: class org.evosuite.testcase.statements.MethodStatement return type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>
statement code is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats()
statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("u);iI1dc", "}J?{%@FzF^'YMj7", "0", (byte)0)
statement is: setAuth_dats(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.setAuth_dats(arg0)
test data is: byte[] byteArray = new byte[1];
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = auth_dats.setValueComparator(fastComparator);
UserManagement.getAuth_dats();
UserManagement.addUserSQL("u);iI1dc", "}J?{%@FzF^'YMj7", "0", (byte)0);
UserManagement.setAuth_dats(setValueComparator);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 };
        FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
        FastComparator<Object> fastComparator = ((FastComparator<Object>) (mock(FastComparator.class, new ViolatedAssumptionAnswer())));
        FastMap<Integer, Auth_data> setValueComparator = auth_dats.setValueComparator(fastComparator);
        UserManagement.getAuth_dats();
        UserManagement.addUserSQL("john", "doe123", "0", ((byte) (0)));
        UserManagement.setAuth_dats(setValueComparator);
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [1] []
statement is: FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: FastComparator<Object> fastComparator = ((FastComparator<Object>) (mock(FastComparator.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((FastComparator<Object>) (mock(FastComparator.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: FastComparator argument is: FastComparator.class
Matched Method is: mock(javolution.util.FastComparator<java.lang.Object>)
statement is: FastMap<Integer, Auth_data> setValueComparator = auth_dats.setValueComparator(fastComparator), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_dats.setValueComparator(fastComparator) target is: auth_dats method is: setValueComparator(FastComparator)
source statement: getAuth_dats()Ljavolution/util/FastMap; callee: VariableReference: Statement 1, type javolution.util.FastMap<java.lang.Integer, org.javathena.core.data.Auth_data>index is: 0
Matched Method is: setValueComparator(Ljavolution/util/FastComparator;)Ljavolution/util/FastMap;
statement is: UserManagement.getAuth_dats(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAuth_dats() target is: UserManagement method is: getAuth_dats()
Matched Method is: getAuth_dats()Ljavolution/util/FastMap;
statement is: UserManagement.addUserSQL("john", "doe123", "0", ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserSQL("john", "doe123", "0", ((byte) (0))) target is: UserManagement method is: addUserSQL(java.lang.String,java.lang.String,java.lang.String,byte)
Matched Method is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.setAuth_dats(setValueComparator), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.setAuth_dats(setValueComparator) target is: UserManagement method is: setAuth_dats(FastMap)
Matched Method is: setAuth_dats(Ljavolution/util/FastMap;)V
TestCase is: UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = ((FastMap) fastComparator).setValueComparator(fastComparator);
UserManagement.getAuth_dats();
String string = "john";
String string = "doe123";
String string = "0";
int _int = 0;
UserManagement.addUserSQL(string, string, string, _int);
UserManagement.setAuth_dats(setValueComparator);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@7c08f2e1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAllOnlinAccounts(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for testing UserManagement.receiveAllOnlineAccounts()
        Socket_data socket_data = new Socket_data(((Socket) (null)));
        byte[] byteArray = new byte[8];
        UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
    }
}
statement is: // Improved test data for testing UserManagement.receiveAllOnlineAccounts()
Socket_data socket_data = new Socket_data(((Socket) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAllOnlinAccounts(socket_data, byteArray) target is: UserManagement method is: receiveAllOnlinAccounts(Socket_data,byte[])
Matched Method is: receiveAllOnlinAccounts(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: javolution.util.FastMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type javolution.util.FastMap<java.lang.String, java.lang.String>
statement code is: FastMap<String, String> fastMap = new FastMap<String, String>()
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String put = fastMap.put("CCr", "")
statement is: setAccount_reg2(Ljavolution/util/FastMap;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setAccount_reg2(arg0)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        FastMap<String, String> fastMap = new FastMap<String, String>();
        fastMap.put("CCr", "creditCard123");
        auth_data.setAccount_reg2(fastMap);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FastMap<String, String> fastMap = new FastMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fastMap.put("CCr", "creditCard123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fastMap.put("CCr", "creditCard123") target is: fastMap method is: put(java.lang.String,java.lang.String)
source statement: javolution.util.FastMap()V callee: VariableReference: Statement 1, type javolution.util.FastMap<java.lang.String, java.lang.String>index is: 1
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: auth_data.setAccount_reg2(fastMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setAccount_reg2(fastMap) target is: auth_data method is: setAccount_reg2(FastMap)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setAccount_reg2(Ljavolution/util/FastMap;)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
String string = "CCr";
String string = "creditCard123";
fastMap.put(string, string);
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time((-21267))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S')
statement is: setBan_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setBan_until_time(1170L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'S');
        addUserTXT.setBan_until_time(1170L);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'S'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'S') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setBan_until_time(1170L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setBan_until_time(1170L) target is: addUserTXT method is: setBan_until_time(long)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setBan_until_time(J)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "1234567890";
char _char = 'S';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
long _long = 1170L;
((Auth_data) string).setBan_until_time(_long);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setCharserver(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setCharserver(138)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setCharserver(138);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setCharserver('Z');
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setCharserver('Z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setCharserver('Z') target is: auth_data method is: setCharserver(char)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setCharserver(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
char _char = 'Z';
auth_data.setCharserver(_char);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u')
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType((-1709))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "Administrators", 'u');
        addUserTXT.setClientType(-1709);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "Administrators", 'u'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "Administrators", 'u') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setClientType(-1709), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setClientType(-1709) target is: addUserTXT method is: setClientType(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setClientType(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "Administrators";
char _char = 'u';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setClientType(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$')
statement is: setClientType(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setClientType(2011)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "john.doe@example.com", "1234567890", '$');
        addUserTXT.setClientType(2011);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "john.doe@example.com", "1234567890", '$'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "john.doe@example.com", "1234567890", '$') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setClientType(2011), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setClientType(2011) target is: addUserTXT method is: setClientType(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setClientType(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "john.doe@example.com";
String string = "1234567890";
char _char = '$';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 2011;
((Auth_data) string).setClientType(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']')
statement is: setConnect_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setConnect_until_time((-630))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F');
        addUserTXT.setConnect_until_time(-630);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setConnect_until_time(-630), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setConnect_until_time(-630) target is: addUserTXT method is: setConnect_until_time(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setConnect_until_time(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Jane";
String string = "Smith";
String string = "janesmith@example.com";
char _char = 'F';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setConnect_until_time(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setConnect_until_time(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setConnect_until_time(2686L)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(2686L);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setConnect_until_time(1647028930L);// This represents a timestamp for 2022-03-15T11:46:00Z (i.e., Wednesday, March 15, 2022 at 11:46:00 AM GMT+0)

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setConnect_until_time(1647028930L)// This represents a timestamp for 2022-03-15T11:46:00Z (i.e., Wednesday, March 15, 2022 at 11:46:00 AM GMT+0)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setConnect_until_time(1647028930L)// This represents a timestamp for 2022-03-15T11:46:00Z (i.e., Wednesday, March 15, 2022 at 11:46:00 AM GMT+0)
 target is: auth_data method is: setConnect_until_time(long)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setConnect_until_time(J)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
long _long = 1647028930L;
auth_data.setConnect_until_time(_long);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag((-461))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setDelflag(-461);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setDelflag(-461), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setDelflag(-461) target is: auth_data method is: setDelflag(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setDelflag(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = null;
auth_data.setDelflag(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setDelflag(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setDelflag(2119)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setDelflag(2119);
        auth_data.setUsername("John");
        auth_data.setPassword("password123");
        auth_data.setEmail("john@example.com");
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setDelflag(2119), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setDelflag(2119) target is: auth_data method is: setDelflag(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setDelflag(I)V
statement is: auth_data.setUsername("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setUsername("John") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: auth_data.setEmail("john@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setEmail("john@example.com") target is: auth_data method is: setEmail(java.lang.String)
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 2119;
auth_data.setDelflag(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel((-474))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLevel(-100);// Changed the level to a negative value to simulate an invalid input

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLevel(-100)// Changed the level to a negative value to simulate an invalid input
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLevel(-100)// Changed the level to a negative value to simulate an invalid input
 target is: auth_data method is: setLevel(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLevel(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = null;
auth_data.setLevel(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0')
statement is: setLevel(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLevel(1023)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("Test User", "test@email.com", "password123", '0');
        addUserTXT.setLevel(50);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("Test User", "test@email.com", "password123", '0'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Test User", "test@email.com", "password123", '0') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLevel(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLevel(50) target is: addUserTXT method is: setLevel(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLevel(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "Test User";
String string = "test@email.com";
String string = "password123";
char _char = '0';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 50;
((Auth_data) string).setLevel(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1((-1186))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id1(12345);// Changed from (-1186) to a more descriptive and representative value

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id1(12345)// Changed from (-1186) to a more descriptive and representative value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id1(12345)// Changed from (-1186) to a more descriptive and representative value
 target is: auth_data method is: setLogin_id1(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id1(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 12345;
auth_data.setLogin_id1(_int);
UserManagement.addUser(auth_data);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogin_id1(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id1(176)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(176);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogin_id1(200);// Changed from 176 to a larger value to better represent a user with a unique login ID.

        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogin_id1(200)// Changed from 176 to a larger value to better represent a user with a unique login ID.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogin_id1(200)// Changed from 176 to a larger value to better represent a user with a unique login ID.
 target is: auth_data method is: setLogin_id1(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogin_id1(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 200;
auth_data.setLogin_id1(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']')
statement is: setLogin_id2(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogin_id2(2607)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("username1", "password1", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
        addUserTXT.setLogin_id2(2607);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("username1", "password1", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("username1", "password1", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogin_id2(2607), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogin_id2(2607) target is: addUserTXT method is: setLogin_id2(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogin_id2(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "username1";
String string = "password1";
String string = "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'";
char _char = ']';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 2607;
((Auth_data) string).setLogin_id2(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']')
statement is: setLogincount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogincount((-630))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "-630", ']');
        addUserTXT.setLogincount(-630);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "-630", ']'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("john", "doe", "-630", ']') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setLogincount(-630), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setLogincount(-630) target is: addUserTXT method is: setLogincount(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setLogincount(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "john";
String string = "doe";
String string = "-630";
char _char = ']';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setLogincount(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setLogincount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setLogincount(2498)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setLogincount(2498);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setLogincount(100);
        UserManagement.addUser(auth_data);
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setLogincount(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setLogincount(100) target is: auth_data method is: setLogincount(int)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setLogincount(I)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: Auth_data auth_data = new Auth_data();
int _int = 100;
auth_data.setLogincount(_int);
UserManagement.addUser(auth_data);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$')
statement is: setState(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setState(1635)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "0123456789", '!');
        addUserTXT.setState(100);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "0123456789", '!'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John Doe", "johndoe@example.com", "0123456789", '!') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setState(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setState(100) target is: addUserTXT method is: setState(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setState(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John Doe";
String string = "johndoe@example.com";
String string = "0123456789";
char _char = '!';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 100;
((Auth_data) string).setState(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']')
statement is: setVersion(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setVersion((-630))
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("John", "Doe", "johndoe@example.com", 'M');
        addUserTXT.setVersion(-630);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("John", "Doe", "johndoe@example.com", 'M'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("John", "Doe", "johndoe@example.com", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: addUserTXT.setVersion(-630), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setVersion(-630) target is: addUserTXT method is: setVersion(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setVersion(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "John";
String string = "Doe";
String string = "johndoe@example.com";
char _char = 'M';
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = null;
((Auth_data) string).setVersion(_int);
UserManagement.addUser(addUserTXT);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']')
statement is: setVersion(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setVersion(2607)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data addUserTXT = UserManagement.addUserTXT("testUser", "customerAdmin", "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'", current_timestamp);
        addUserTXT.setVersion(2607);
        UserManagement.addUser(addUserTXT);
    }
}
statement is: Auth_data addUserTXT = UserManagement.addUserTXT("testUser", "customerAdmin", "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'", current_timestamp), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("testUser", "customerAdmin", "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'", current_timestamp) target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: addUserTXT.setVersion(2607), class spoon.support.reflect.code.CtInvocationImpl
invocation is: addUserTXT.setVersion(2607) target is: addUserTXT method is: setVersion(int)
source statement: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 4
Matched Method is: setVersion(I)V
statement is: UserManagement.addUser(addUserTXT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(addUserTXT) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
TestCase is: String string = "testUser";
String string = "customerAdmin";
String string = "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'";
char _char = null;
Auth_data addUserTXT = UserManagement.addUserTXT(string, string, string, _char);
int _int = 2607;
((Auth_data) string).setVersion(_int);
UserManagement.addUser(addUserTXT);

statement is: org.javathena.core.data.Auth_data()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data auth_data = new Auth_data()
statement is: setResetLogincoun(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: auth_data.setResetLogincoun(true)
statement is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUser = UserManagement.addUser(arg0)
test data is: Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Auth_data auth_data = new Auth_data();
        auth_data.setResetLogincoun(true);
        UserManagement.addUser(auth_data);
        // Improved test data
        auth_data.setUsername("johndoe");
        auth_data.setPassword("password123");
        auth_data.setEmail("johndoe@example.com");
    }
}
statement is: Auth_data auth_data = new Auth_data(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: auth_data.setResetLogincoun(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setResetLogincoun(true) target is: auth_data method is: setResetLogincoun(boolean)
source statement: org.javathena.core.data.Auth_data()V callee: VariableReference: Statement 0, type org.javathena.core.data.Auth_dataindex is: 0
Matched Method is: setResetLogincoun(Z)V
statement is: UserManagement.addUser(auth_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUser(auth_data) target is: UserManagement method is: addUser(Auth_data)
Matched Method is: addUser(Lorg/javathena/core/data/Auth_data;)Lorg/javathena/core/data/Auth_data;
statement is: // Improved test data
auth_data.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
auth_data.setUsername("johndoe") target is: auth_data method is: setUsername(java.lang.String)
statement is: auth_data.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setPassword("password123") target is: auth_data method is: setPassword(java.lang.String)
statement is: auth_data.setEmail("johndoe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: auth_data.setEmail("johndoe@example.com") target is: auth_data method is: setEmail(java.lang.String)
TestCase is: Auth_data auth_data = new Auth_data();
boolean _boolean = true;
auth_data.setResetLogincoun(_boolean);
UserManagement.addUser(auth_data);

statement is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer accountID = UserManagement.getAccountID((String) null)
test data is: UserManagement.getAccountID((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getAccountID("john@example.com");
    }
}
statement is: UserManagement.getAccountID("john@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountID("john@example.com") target is: UserManagement method is: getAccountID(java.lang.String)
Matched Method is: getAccountID(Ljava/lang/String;)Ljava/lang/Integer;
TestCase is: String string = "john@example.com";
UserManagement.getAccountID(string);

statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("", "z ?Px7q%z4S?K\u0007J)", "z ?Px7q%z4S?K\u0007J)", '>')
statement is: getAccountIdCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int accountIdCount = UserManagement.getAccountIdCount()
test data is: UserManagement.addUserTXT("", "z ?Px7q%z4S?K\u0007J)", "z ?Px7q%z4S?K\u0007J)", '>');
UserManagement.getAccountIdCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addUserTXT("Jane Doe", "janedoe@example.com", "+9876543210", 'B');
        UserManagement.addUserTXT("Bob Smith", "bobsmith@example.com", "+1112223333", 'C');
        UserManagement.getAccountIdCount();
    }
}
statement is: UserManagement.addUserTXT("Jane Doe", "janedoe@example.com", "+9876543210", 'B'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Jane Doe", "janedoe@example.com", "+9876543210", 'B') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.addUserTXT("Bob Smith", "bobsmith@example.com", "+1112223333", 'C'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("Bob Smith", "bobsmith@example.com", "+1112223333", 'C') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getAccountIdCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getAccountIdCount() target is: UserManagement method is: getAccountIdCount()
Matched Method is: getAccountIdCount()I
TestCase is: String string = "Jane Doe";
String string = "janedoe@example.com";
String string = "+9876543210";
char _char = 'B';
UserManagement.addUserTXT(string, string, string, _char);
String string = "Bob Smith";
String string = "bobsmith@example.com";
String string = "+1112223333";
char _char = 'C';
UserManagement.addUserTXT(string, string, string, _char);
UserManagement.getAccountIdCount();

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserSQL = UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8)
statement is: getNBUser()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int nBUser = UserManagement.getNBUser()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.toChangeAnEmail(arg0)
test data is: MockSocket mockSocket = new MockSocket();
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toChangeAnEmail(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
        UserManagement.getNBUser();
        FromChar fromChar = new FromChar();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        UserManagement.toChangeAnEmail(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8) target is: UserManagement method is: addUserSQL(java.lang.String,java.lang.String,java.lang.String,int)
Matched Method is: addUserSQL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/javathena/core/data/Auth_data;
statement is: UserManagement.getNBUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getNBUser() target is: UserManagement method is: getNBUser()
Matched Method is: getNBUser()I
statement is: FromChar fromChar = new FromChar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.toChangeAnEmail(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.toChangeAnEmail(socket_data) target is: UserManagement method is: toChangeAnEmail(Socket_data)
Matched Method is: toChangeAnEmail(Lorg/javathena/core/data/Socket_data;)V
TestCase is: MockSocket mockSocket = new MockSocket();
String string = "login_log_28";
String string = "set users %s : %d\n";
String string = "login_log_28";
int _int = 8;
UserManagement.addUserSQL(string, string, string, _int);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toChangeAnEmail(socket_data);

statement is: sendMessageOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(j;QMQ")
statement is: online_db_final()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int online_db_final = UserManagement.online_db_final()
statement is: getSessionAt(I)Lorg/javathena/core/data/Socket_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data sessionAt = UserManagement.getSessionAt(0)
statement is: setMaintenance(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: socket_data.setMaintenance(0)
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/lang/String;IZ)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false)
statement is: String string = null type is: class org.evosuite.testcase.statements.NullStatement return type class java.lang.String
statement code is: String string = null
statement is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.dynamicFailBanCheckMySQL(arg0)
test data is: NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(j;QMQ");
UserManagement.online_db_final();
Socket_data sessionAt = UserManagement.getSessionAt(0);
sessionAt.setMaintenance(0);
MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false);
String string = null;
UserManagement.dynamicFailBanCheckMySQL(string);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NetworkHandling.sendMessageOnTcp(((EvoSuiteLocalAddress) (null)), "(j;QMQ");
        UserManagement.online_db_final();
        Socket_data sessionAt = UserManagement.getSessionAt(0);
        sessionAt.setMaintenance(0);
        MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false);
        String string = "This is a test string";
        UserManagement.dynamicFailBanCheckMySQL(string);
    }
}
statement is: NetworkHandling.sendMessageOnTcp(((EvoSuiteLocalAddress) (null)), "(j;QMQ"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NetworkHandling.sendMessageOnTcp(((EvoSuiteLocalAddress) (null)), "(j;QMQ") target is: NetworkHandling method is: sendMessageOnTcp(EvoSuiteLocalAddress,java.lang.String)
Matched Method is: sendMessageOnTcp(Lorg/evosuite/runtime/testdata/EvoSuiteLocalAddress;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: UserManagement.online_db_final(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.online_db_final() target is: UserManagement method is: online_db_final()
Matched Method is: online_db_final()I
statement is: Socket_data sessionAt = UserManagement.getSessionAt(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getSessionAt(0) target is: UserManagement method is: getSessionAt(int)
Matched Method is: getSessionAt(I)Lorg/javathena/core/data/Socket_data;
statement is: sessionAt.setMaintenance(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sessionAt.setMaintenance(0) target is: sessionAt method is: setMaintenance(int)
source statement: getSessionAt(I)Lorg/javathena/core/data/Socket_data; callee: VariableReference: Statement 2, type org.javathena.core.data.Socket_dataindex is: 5
Matched Method is: setMaintenance(I)V
statement is: MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String string = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.dynamicFailBanCheckMySQL(string), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.dynamicFailBanCheckMySQL(string) target is: UserManagement method is: dynamicFailBanCheckMySQL(java.lang.String)
Matched Method is: dynamicFailBanCheckMySQL(Ljava/lang/String;)V
TestCase is: String string = "(j;QMQ";
String string = null;
boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) string, string);
UserManagement.online_db_final();
int _int = 0;
UserManagement.getSessionAt(_int);
int _int = 0;
((Socket_data) sendMessageOnTcp).setMaintenance(_int);
String string = "gw4b:35;YHyp";
int _int = 0;
boolean _boolean = false;
MockSocket mockSocket = new MockSocket(string, _int, _boolean);
String string = "This is a test string";
UserManagement.dynamicFailBanCheckMySQL(string);

statement is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) null)
test data is: UserManagement.getUserTxt((Integer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.getUserTxt(123456789);
    }
}
statement is: UserManagement.getUserTxt(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.getUserTxt(123456789) target is: UserManagement method is: getUserTxt(int)
Matched Method is: getUserTxt(Ljava/lang/Integer;)Lorg/javathena/core/data/Auth_data;
TestCase is: int _int = 123456789;
UserManagement.getUserTxt((Integer) _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@5e4ddf3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@25f3e52e type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[5] = (byte)86
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        byteArray[0] = 1;
        byteArray[1] = 2;
        byteArray[2] = 3;
        byteArray[3] = 4;
        byteArray[4] = 5;
        byteArray[5] = ((byte) (86));
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: byteArray[0] = 1, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:1 Ct is: byteArray[0] = 1
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = 2, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:2 Ct is: byteArray[1] = 2
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = 3, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:3 Ct is: byteArray[2] = 3
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[3] = 4, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:4 Ct is: byteArray[3] = 4
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[4] = 5, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:5 Ct is: byteArray[4] = 5
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[5] = ((byte) (86)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (86)) Ct is: byteArray[5] = ((byte) (86))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[6];
int _int = 1;
byteArray[5] = (byte) _int;
int _int = 2;
byteArray[5] = (byte) _int;
int _int = 3;
byteArray[5] = (byte) _int;
int _int = 4;
byteArray[5] = (byte) _int;
int _int = 5;
byteArray[5] = (byte) _int;
int _int = 86;
byteArray[5] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@4fc0f5b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2cce1034 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)53
statement is: tabHexToInt([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int tabHexToInt = UserManagement.tabHexToInt(arg0)
test data is: byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (0xff));
        byteArray[1] = ((byte) (0x3e));
        UserManagement.tabHexToInt(byteArray);
    }
}
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (0xff)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0xff)) Ct is: byteArray[0] = ((byte) (0xff))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (0x3e)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x3e)) Ct is: byteArray[1] = ((byte) (0x3e))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: UserManagement.tabHexToInt(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.tabHexToInt(byteArray) target is: UserManagement method is: tabHexToInt(byte[])
Matched Method is: tabHexToInt([B)I
TestCase is: byte[] byteArray = new byte[2];
int _int = 255;
byteArray[1] = (byte) _int;
int _int = 62;
byteArray[1] = (byte) _int;
UserManagement.tabHexToInt(byteArray);

statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@1c262b1b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.account_idToOffline(arg0, arg1)
test data is: Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
UserManagement.account_idToOffline(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Socket_data socket_data = new Socket_data("192.168.0.1", 8080);
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4 };
        UserManagement.account_idToOffline(socket_data, byteArray);
    }
}
statement is: Socket_data socket_data = new Socket_data("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4 } Elements: [0x1, 0x2, 0x3, 0x4]
lengths: [4] []
statement is: UserManagement.account_idToOffline(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.account_idToOffline(socket_data, byteArray) target is: UserManagement method is: account_idToOffline(Socket_data,byte[])
Matched Method is: account_idToOffline(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.account_idToOffline(socket_data, byteArray);

statement is: addGM(II)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addGM = UserManagement.addGM(10027, (-3453))
test data is: UserManagement.addGM(10027, (-3453));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.addGM(10027, 3.14);
    }
}
statement is: UserManagement.addGM(10027, 3.14), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addGM(10027, 3.14) target is: UserManagement method is: addGM(int,double)
Matched Method is: addGM(II)Z
TestCase is: int _int = 10027;
double _double = 3.14;
UserManagement.addGM(_int, (int) _double);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null, arg1)
statement is: administationLogin(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.administationLogin(arg0)
test data is: FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
UserManagement.administationLogin(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(new Socket("192.168.0.1", 5000), fromClient);
        UserManagement.administationLogin(socket_data);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(new Socket("192.168.0.1", 5000), fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.administationLogin(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.administationLogin(socket_data) target is: UserManagement method is: administationLogin(Socket_data)
Matched Method is: administationLogin(Lorg/javathena/core/data/Socket_data;)V
TestCase is: FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) fromClient, fromClient);
UserManagement.administationLogin(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: banResquest(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.banResquest(arg0)
test data is: MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.banResquest(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);
        FromChar fromChar = new FromChar("username");
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        UserManagement.banResquest(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar("username"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.banResquest(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.banResquest(socket_data) target is: UserManagement method is: banResquest(Socket_data)
Matched Method is: banResquest(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.banResquest(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: changeSex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSex(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        mockSocket.close();
        // Use a more descriptive and representative value for the socket_data object
        Socket_data socket_data = new Socket_data(new String("1234567890"));
        UserManagement.changeSex(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: // Use a more descriptive and representative value for the socket_data object
Socket_data socket_data = new Socket_data(new String("1234567890")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.changeSex(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSex(socket_data) target is: UserManagement method is: changeSex(Socket_data)
Matched Method is: changeSex(Lorg/javathena/core/data/Socket_data;)V
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

statement is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.changeSexChrif_changesex((Socket_data) null)
test data is: UserManagement.changeSexChrif_changesex((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        UserManagement.changeSexChrif_changesex(new Socket_data("1234567890", "John Doe", "Female"));
    }
}
statement is: UserManagement.changeSexChrif_changesex(new Socket_data("1234567890", "John Doe", "Female")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.changeSexChrif_changesex(new Socket_data("1234567890", "John Doe", "Female")) target is: UserManagement method is: changeSexChrif_changesex(Socket_data)
Matched Method is: changeSexChrif_changesex(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.changeSexChrif_changesex(socket_data);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@abf205c1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.charServerToAuthentify(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
UserManagement.charServerToAuthentify(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 54321);
        FromAdmin fromAdmin = new FromAdmin("john.doe@example.com");
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        byte[] byteArray = new byte[6];
        UserManagement.charServerToAuthentify(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 54321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromAdmin fromAdmin = new FromAdmin("john.doe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: UserManagement.charServerToAuthentify(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.charServerToAuthentify(socket_data, byteArray) target is: UserManagement method is: charServerToAuthentify(Socket_data,byte[])
Matched Method is: charServerToAuthentify(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[6];
byte[] byteArray = null;
UserManagement.charServerToAuthentify((Socket_data) byteArray, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@d7c2641c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfCharServer((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[6];
UserManagement.connectionOfCharServer((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[arrayLength];
        UserManagement.connectionOfCharServer(socketData, byteArray);
    }
}
statement is: byte[] byteArray = new byte[arrayLength], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [arrayLength] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[arrayLength] Elements: []
lengths: [6] [arrayLength]
Their type are: class [B byte[]
statement is: UserManagement.connectionOfCharServer(socketData, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfCharServer(socketData, byteArray) target is: UserManagement method is: connectionOfCharServer(byte[])
Matched Method is: connectionOfCharServer(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[6];
byte[] byteArray = null;
UserManagement.connectionOfCharServer((Socket_data) byteArray, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.connectionOfClientEncrypted(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClientEncrypted(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        // Change the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples.
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.connectionOfClientEncrypted(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Change the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples.
mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Change the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples.
mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 0, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 0
Matched Method is: close()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.connectionOfClientEncrypted(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.connectionOfClientEncrypted(socket_data) target is: UserManagement method is: connectionOfClientEncrypted(Socket_data)
Matched Method is: connectionOfClientEncrypted(Lorg/javathena/core/data/Socket_data;)V
TestCase is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClientEncrypted(socket_data);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: emailCreation(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailCreation(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.emailCreation(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = new Proxy("https://www.example.com", 443, "user@example.com", "password");
        MockSocket mockSocket = new MockSocket(proxy);
        FromAdmin fromAdmin = new FromAdmin("admin@example.com", "password");
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        UserManagement.emailCreation(socket_data);
    }
}
statement is: Proxy proxy = new Proxy("https://www.example.com", 443, "user@example.com", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V
statement is: FromAdmin fromAdmin = new FromAdmin("admin@example.com", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: UserManagement.emailCreation(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailCreation(socket_data) target is: UserManagement method is: emailCreation(Socket_data)
Matched Method is: emailCreation(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.emailCreation(socket_data);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: emailLimitedTime(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.emailLimitedTime(arg0)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.emailLimitedTime(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.emailLimitedTime(socket_data, "john.doe@example.com", 10);
    }
}
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.emailLimitedTime(socket_data, "john.doe@example.com", 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.emailLimitedTime(socket_data, "john.doe@example.com", 10) target is: UserManagement method is: emailLimitedTime(Socket_data,java.lang.String,int)
TestCase is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);

statement is: getUserSQL(Ljava/sql/ResultSet;)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data userSQL = UserManagement.getUserSQL((ResultSet) null)
test data is: UserManagement.getUserSQL((ResultSet) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // a more descriptive and representative value for the ID column
    }

    @Override
    public String getString(int columnIndex) throws SQLException {
        return "John Doe";// a more descriptive and representative value for the name column

    }

    @Override
    public int getInt(String columnName) throws SQLException {
        return 123;// a more descriptive and representative value for the ID column

    }

    @Override
    public String getString(String columnName) throws SQLException {
        return "John Doe";// a more descriptive and representative value for the name column }}

    }
}
statement is: return 123// a more descriptive and representative value for the ID column
, class spoon.support.reflect.code.CtReturnImpl
statement is: return "John Doe"// a more descriptive and representative value for the name column
, class spoon.support.reflect.code.CtReturnImpl
statement is: return "John Doe"// a more descriptive and representative value for the name column }}
, class spoon.support.reflect.code.CtReturnImpl
statement is: // a more descriptive and representative value for the ID column, class spoon.support.reflect.code.CtCommentImpl
statement is: org.evosuite.testcase.statements.ArrayStatement@546206a0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[17]
statement is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.receiveAccountReg2((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[17];
UserManagement.receiveAccountReg2((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 };
        UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray);
    }
}
statement is: // Improved test data
byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[17] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5]
lengths: [17] []
statement is: UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.receiveAccountReg2(((Socket_data) (null)), byteArray) target is: UserManagement method is: receiveAccountReg2(Socket_data,byte[])
Matched Method is: receiveAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: Socket_data socket_data = null;
byte[] byteArray = null;
UserManagement.receiveAccountReg2(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, (IParse) null)
statement is: org.evosuite.testcase.statements.ArrayStatement@ceb8fe92 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountData(arg0, arg1)
test data is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
UserManagement.requestAccountData(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null)));
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7 };
        UserManagement.requestAccountData(socket_data, byteArray);
    }
}
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, ((IParse) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6, 7 } Elements: [1, 2, 3, 4, 5, 6, 7]
lengths: [7] []
statement is: UserManagement.requestAccountData(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountData(socket_data, byteArray) target is: UserManagement method is: requestAccountData(Socket_data,byte[])
Matched Method is: requestAccountData(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = null;
UserManagement.requestAccountData(socket_data, byteArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@4faafa9e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[12]
statement is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.requestAccountReg2((Socket_data) null, arg1)
test data is: byte[] byteArray = new byte[12];
UserManagement.requestAccountReg2((Socket_data) null, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[12];
        UserManagement.requestAccountReg2(null, byteArray);
    }
}
statement is: byte[] byteArray = new byte[12], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [12] Ct is: byte[] byteArray = new byte[12] isAssignment: false Array: new byte[12] Elements: []
lengths: [12] [12]
Their type are: class [B byte[]
statement is: UserManagement.requestAccountReg2(null, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.requestAccountReg2(null, byteArray) target is: UserManagement method is: requestAccountReg2(<unknown>,byte[])
Matched Method is: requestAccountReg2(Lorg/javathena/core/data/Socket_data;[B)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: byte[] byteArray = new byte[12];
byte[] byteArray = null;
UserManagement.requestAccountReg2((Socket_data) byteArray, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromAdmin()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromAdmin
statement code is: FromAdmin fromAdmin = new FromAdmin()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@fa0edb47 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.statusChange(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
UserManagement.statusChange(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        FromAdmin fromAdmin = new FromAdmin();
        Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
        byte[] byteArray = new byte[10];
        UserManagement.statusChange(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromAdmin fromAdmin = new FromAdmin(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromAdmin), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[10] Elements: []
lengths: [0] [10]
Their type are: class [B byte[]
statement is: UserManagement.statusChange(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.statusChange(socket_data, byteArray) target is: UserManagement method is: statusChange(Socket_data,byte[])
Matched Method is: statusChange(Lorg/javathena/core/data/Socket_data;[B)V
TestCase is: MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
UserManagement.statusChange(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: unban(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: UserManagement.unban(arg0)
test data is: MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.unban(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080, "user1");
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket);
        UserManagement.unban(socket_data);
    }
}
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080, "user1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: UserManagement.unban(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.unban(socket_data) target is: UserManagement method is: unban(Socket_data)
Matched Method is: unban(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Socket_data socket_data = null;
UserManagement.unban(socket_data);

* test suite isTestSuite: 162
Test 0: 
UserManagement.addAccountIdCount(0);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(942);
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.getAccountIdCount();
Test 7: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 8: 
byte[] byteArray = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 9: 
Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 10: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 11: 
UserManagement.addAccountIdCount();
Test 12: 
UserManagement.is_user_online((Integer) null);
Test 13: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 14: 
UserManagement.getNBSession();
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("w~<#hK");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 16: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 17: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 18: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("S1009");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 19: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 20: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 21: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", '4');
UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82);
Test 22: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(3, "D>*B:+`G>t", 1023, 3);
Test 26: 
UserManagement.levelIsValid(0, "zL[%}=A", (-1), 0);
Test 27: 
UserManagement.levelIsValid(1265, "", 1265, 1265);
Test 28: 
Integer integer = new Integer(24);
UserManagement.remove_online_user(integer);
Test 29: 
int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);
Test 30: 
UserManagement.charif_sendallwos((-5), (byte[]) null);
Test 31: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%');
Test 32: 
UserManagement.isGM(30002);
Test 33: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt((String) null);
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

int _int = 10036;
String string = "";
int _int = 7;
int _int = (-758);
UserManagement.levelIsValid(_int, string, _int, _int);
Test 34: 
UserManagement.getAccountIds();
Test 35: 
UserManagement.dynamicFailBanCheckTXT("");
byte[] byteArray = new byte[2];
byteArray[0] = (byte)4;
byteArray[1] = (byte)26;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
byte[] byteArray = new byte[9];
byteArray[1] = (byte)39;
byteArray[2] = (byte) (-39);
byteArray[3] = (byte) (-90);
byteArray[4] = (byte)66;
byteArray[5] = (byte)0;
byteArray[6] = (byte) (-13);
byteArray[7] = (byte)85;
byteArray[8] = (byte)117;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 36: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 37: 
byte[] byteArray = new byte[1];
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = auth_dats.setValueComparator(fastComparator);
UserManagement.getAuth_dats();
UserManagement.addUserSQL("u);iI1dc", "}J?{%@FzF^'YMj7", "0", (byte)0);
UserManagement.setAuth_dats(setValueComparator);
Test 38: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 39: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);
Test 40: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(138);
UserManagement.addUser(auth_data);
Test 43: 
Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);
Test 44: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);
Test 45: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(2686L);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);
Test 50: 
Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(176);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(2498);
UserManagement.addUser(auth_data);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 60: 
UserManagement.getAccountID((String) null);
Test 61: 
UserManagement.addUserTXT("", "z ?Px7q%z4S?K\u0007J)", "z ?Px7q%z4S?K\u0007J)", '>');
UserManagement.getAccountIdCount();
Test 62: 
MockSocket mockSocket = new MockSocket();
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(j;QMQ");
UserManagement.online_db_final();
// Undeclared exception!
Socket_data sessionAt = null;
try { 
  sessionAt = UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

sessionAt.setMaintenance(0);
MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false);
String string = null;
UserManagement.dynamicFailBanCheckMySQL(string);
Test 64: 
UserManagement.getUserTxt((Integer) null);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);
Test 67: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM(10027, (-3453));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[17];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
byte[] byteArray = new byte[12];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 83: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 84: 
UserManagement.addAccountIdCount(123456789);

Test 85: 
UserManagement.getNBGM();

Test 86: 
UserManagement.setAccountIdCount(1000);

Test 87: 
Socket_data socket_data = new Socket_data((Socket) "192.168.0.1");
UserManagement.unLogServer(socket_data);

Test 88: 
UserManagement.toBecomeGM((Socket_data) null);

Test 89: 
UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n");

Test 90: 
byte[] byteArray = new byte[1];

Test 91: 
UserManagement.addUserTXT("utf8mb4", "utf8mb4", "utf8mb4", 'a');
Integer account_id = ((Auth_data)"utf8mb4").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 92: 
UserManagement.addSession((Socket_data) null);

Test 93: 
UserManagement.is_user_online((Integer) 123456789);

Test 94: 
UserManagement.getNBSession();
UserManagement.dynamicFailBanCheckMySQL("1234567890");

Test 95: 
Integer integer = new Integer(1234567890);
UserManagement.remove_online_user(integer);

Test 96: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
UserManagement.setAuth_dats(auth_dats);

Test 97: 
byte[] byteArray = new byte[6];
UserManagement.account_idToOnline((Socket_data) byteArray, (byte[]) null);

Test 98: 
UserManagement.addIpToBanListMySQL("192.168.0.1");
String string = "172.16.254.1";
UserManagement.addIpToBanListMySQL(string);
String string = "10.0.0.1";
UserManagement.addIpToBanListMySQL(string);

Test 99: 
UserManagement.tabHexToInt((byte[]) null);

Test 100: 
UserManagement.removeUser((Auth_data) null);

Test 101: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", (String) 5, (char) "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n");

Test 102: 
UserManagement.add_online_user((Auth_data) null);

Test 103: 
byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) false, (boolean) (Boolean) null);

Test 104: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClient(socket_data, (byte[]) true, (boolean) (Boolean) null);

Test 105: 
UserManagement.levelIsValid(3, "Superuser", 1023, 3);

Test 106: 
UserManagement.levelIsValid((int) "a", (String) 0, (int) (Integer) null, (int) (Integer) null);

Test 107: 
UserManagement.levelIsValid(1265, "AwesomeSauce", (int) "p@ssword123!", (int) "p@ssword123!");

Test 108: 
Integer integer = new Integer(987654321);
UserManagement.remove_online_user(integer);

Test 109: 
UserManagement.charif_sendallwos((int) "WOS_ALL", (int[]) null);

Test 110: 
UserManagement.charif_sendallwos((int) (Integer) null, (byte[]) null);

Test 111: 
UserManagement.addUserTXT("johndoe@email.com", "John Doe", "1234 Main St.", 'M');

Test 112: 
UserManagement.isGM(10002);
UserManagement.isGM(20002);
UserManagement.isGM(30002);

Test 113: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt("testuser123");
UserManagement.dynamicFailBanCheckMySQL("127.0.0.1");
String string = "admin";
int _int = 999;
UserManagement.levelIsValid(_int, string, _int, _int);

Test 114: 
UserManagement.getAccountIds();

Test 115: 
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 116: 
UserManagement.sendUserList((Socket_data) null);

Test 117: 
UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = ((FastMap) fastComparator).setValueComparator(fastComparator);
UserManagement.getAuth_dats();
String string = "john";
String string = "doe123";
String string = "0";
int _int = 0;
UserManagement.addUserSQL(string, string, string, _int);
UserManagement.setAuth_dats(setValueComparator);

Test 118: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

Test 119: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "creditCard123");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);

Test 120: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'S');
((Auth_data)"John Doe").setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);

Test 121: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('Z');
UserManagement.addUser(auth_data);

Test 122: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "Administrators", 'u');
((Auth_data)"John Doe").setClientType((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 123: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "john.doe@example.com", "1234567890", '$');
((Auth_data)"John Doe").setClientType(2011);
UserManagement.addUser(addUserTXT);

Test 124: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F');
((Auth_data)"Jane").setConnect_until_time((long) (Long) null);
UserManagement.addUser(addUserTXT);

Test 125: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1647028930L);
UserManagement.addUser(auth_data);

Test 126: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data addUserTXT = UserManagement.addUserTXT("Test User", "test@email.com", "password123", '0');
((Auth_data)"Test User").setLevel(50);
UserManagement.addUser(addUserTXT);

Test 130: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(12345);
UserManagement.addUser(auth_data);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(200);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("username1", "password1", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
((Auth_data)"username1").setLogin_id2(2607);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "-630", ']');
((Auth_data)"john").setLogincount((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 134: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(100);
UserManagement.addUser(auth_data);

Test 135: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "0123456789", '!');
((Auth_data)"John Doe").setState(100);
UserManagement.addUser(addUserTXT);

Test 136: 
Auth_data addUserTXT = UserManagement.addUserTXT("John", "Doe", "johndoe@example.com", 'M');
((Auth_data)"John").setVersion((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 137: 
String string = "testUser";
Auth_data addUserTXT = UserManagement.addUserTXT("testUser", "customerAdmin", "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'", (char) (Character) null);
int _int = 2607;
((Auth_data) string).setVersion(_int);
UserManagement.addUser(addUserTXT);

Test 138: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 139: 
UserManagement.getAccountID("john@example.com");

Test 140: 
UserManagement.addUserTXT("Jane Doe", "janedoe@example.com", "+9876543210", 'B');
UserManagement.addUserTXT("Bob Smith", "bobsmith@example.com", "+1112223333", 'C');
UserManagement.getAccountIdCount();

Test 141: 
MockSocket mockSocket = new MockSocket();
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toChangeAnEmail(socket_data);

Test 142: 
boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) "(j;QMQ", (String) null);
UserManagement.online_db_final();
int _int = 0;
UserManagement.getSessionAt(_int);
int _int = 0;
((Socket_data) sendMessageOnTcp).setMaintenance(_int);
String string = "gw4b:35;YHyp";
int _int = 0;
boolean _boolean = false;
MockSocket mockSocket = new MockSocket(string, _int, _boolean);
String string = "This is a test string";
UserManagement.dynamicFailBanCheckMySQL(string);

Test 143: 
UserManagement.getUserTxt((Integer) 123456789);

Test 144: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) 1;
byteArray[5] = (byte) 2;
byteArray[5] = (byte) 3;
byteArray[5] = (byte) 4;
byteArray[5] = (byte) 5;
byteArray[5] = (byte) 86;
UserManagement.tabHexToInt(byteArray);

Test 145: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 255;
byteArray[1] = (byte) 62;
UserManagement.tabHexToInt(byteArray);

Test 146: 
UserManagement.account_idToOffline((Socket_data) null, (byte[]) null);

Test 147: 
UserManagement.addGM(10027, (int) 3.14);

Test 148: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) fromClient, fromClient);
UserManagement.administationLogin(socket_data);

Test 149: 
UserManagement.banResquest((Socket_data) null);

Test 150: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

Test 151: 
UserManagement.changeSexChrif_changesex((Socket_data) null);

Test 152: 
byte[] byteArray = new byte[6];
UserManagement.charServerToAuthentify((Socket_data) byteArray, (byte[]) null);

Test 153: 
byte[] byteArray = new byte[6];
UserManagement.connectionOfCharServer((Socket_data) byteArray, (byte[]) null);

Test 154: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 155: 
UserManagement.emailCreation((Socket_data) null);

Test 156: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);

Test 157: 
UserManagement.receiveAccountReg2((Socket_data) null, (byte[]) null);

Test 158: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.requestAccountData(socket_data, (byte[]) null);

Test 159: 
byte[] byteArray = new byte[12];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 160: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
UserManagement.statusChange(socket_data, byteArray);

Test 161: 
UserManagement.unban((Socket_data) null);


* Generated after the refinement and before minimization 162 tests with total length 460
* test suite isTestSuite: 162
Test 0: 
UserManagement.addAccountIdCount(0);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(942);
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.getAccountIdCount();
Test 7: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 8: 
byte[] byteArray = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 9: 
Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 10: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 11: 
UserManagement.addAccountIdCount();
Test 12: 
UserManagement.is_user_online((Integer) null);
Test 13: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 14: 
UserManagement.getNBSession();
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("w~<#hK");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 15: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 16: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 17: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 18: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("S1009");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 19: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 20: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 21: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", '4');
UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82);
Test 22: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(3, "D>*B:+`G>t", 1023, 3);
Test 26: 
UserManagement.levelIsValid(0, "zL[%}=A", (-1), 0);
Test 27: 
UserManagement.levelIsValid(1265, "", 1265, 1265);
Test 28: 
Integer integer = new Integer(24);
UserManagement.remove_online_user(integer);
Test 29: 
int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);
Test 30: 
UserManagement.charif_sendallwos((-5), (byte[]) null);
Test 31: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%');
Test 32: 
UserManagement.isGM(30002);
Test 33: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt((String) null);
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

int _int = 10036;
String string = "";
int _int = 7;
int _int = (-758);
UserManagement.levelIsValid(_int, string, _int, _int);
Test 34: 
UserManagement.getAccountIds();
Test 35: 
UserManagement.dynamicFailBanCheckTXT("");
byte[] byteArray = new byte[2];
byteArray[0] = (byte)4;
byteArray[1] = (byte)26;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
byte[] byteArray = new byte[9];
byteArray[1] = (byte)39;
byteArray[2] = (byte) (-39);
byteArray[3] = (byte) (-90);
byteArray[4] = (byte)66;
byteArray[5] = (byte)0;
byteArray[6] = (byte) (-13);
byteArray[7] = (byte)85;
byteArray[8] = (byte)117;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 36: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 37: 
byte[] byteArray = new byte[1];
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = auth_dats.setValueComparator(fastComparator);
UserManagement.getAuth_dats();
UserManagement.addUserSQL("u);iI1dc", "}J?{%@FzF^'YMj7", "0", (byte)0);
UserManagement.setAuth_dats(setValueComparator);
Test 38: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 39: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);
Test 40: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);
Test 41: 
Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);
Test 42: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(138);
UserManagement.addUser(auth_data);
Test 43: 
Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);
Test 44: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);
Test 45: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(2686L);
UserManagement.addUser(auth_data);
Test 47: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);
Test 50: 
Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(176);
UserManagement.addUser(auth_data);
Test 53: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);
Test 54: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(2498);
UserManagement.addUser(auth_data);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 60: 
UserManagement.getAccountID((String) null);
Test 61: 
UserManagement.addUserTXT("", "z ?Px7q%z4S?K\u0007J)", "z ?Px7q%z4S?K\u0007J)", '>');
UserManagement.getAccountIdCount();
Test 62: 
MockSocket mockSocket = new MockSocket();
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 63: 
NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(j;QMQ");
UserManagement.online_db_final();
// Undeclared exception!
Socket_data sessionAt = null;
try { 
  sessionAt = UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

sessionAt.setMaintenance(0);
MockSocket mockSocket = new MockSocket("gw4b:35;YHyp", 0, false);
String string = null;
UserManagement.dynamicFailBanCheckMySQL(string);
Test 64: 
UserManagement.getUserTxt((Integer) null);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);
Test 67: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM(10027, (-3453));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[17];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
byte[] byteArray = new byte[12];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 83: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 84: 
UserManagement.addAccountIdCount(123456789);

Test 85: 
UserManagement.getNBGM();

Test 86: 
UserManagement.setAccountIdCount(1000);

Test 87: 
Socket_data socket_data = new Socket_data((Socket) "192.168.0.1");
UserManagement.unLogServer(socket_data);

Test 88: 
UserManagement.toBecomeGM((Socket_data) null);

Test 89: 
UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n");

Test 90: 
byte[] byteArray = new byte[1];

Test 91: 
UserManagement.addUserTXT("utf8mb4", "utf8mb4", "utf8mb4", 'a');
Integer account_id = ((Auth_data)"utf8mb4").getAccount_id();
UserManagement.getUserTxt(account_id);

Test 92: 
UserManagement.addSession((Socket_data) null);

Test 93: 
UserManagement.is_user_online((Integer) 123456789);

Test 94: 
UserManagement.getNBSession();
UserManagement.dynamicFailBanCheckMySQL("1234567890");

Test 95: 
Integer integer = new Integer(1234567890);
UserManagement.remove_online_user(integer);

Test 96: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
UserManagement.setAuth_dats(auth_dats);

Test 97: 
byte[] byteArray = new byte[6];
UserManagement.account_idToOnline((Socket_data) byteArray, (byte[]) null);

Test 98: 
UserManagement.addIpToBanListMySQL("192.168.0.1");
String string = "172.16.254.1";
UserManagement.addIpToBanListMySQL(string);
String string = "10.0.0.1";
UserManagement.addIpToBanListMySQL(string);

Test 99: 
UserManagement.tabHexToInt((byte[]) null);

Test 100: 
UserManagement.removeUser((Auth_data) null);

Test 101: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", (String) 5, (char) "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n");

Test 102: 
UserManagement.add_online_user((Auth_data) null);

Test 103: 
byte[] byteArray = new byte[38];
UserManagement.connectionOfClient((Socket_data) byteArray, (byte[]) false, (boolean) (Boolean) null);

Test 104: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClient(socket_data, (byte[]) true, (boolean) (Boolean) null);

Test 105: 
UserManagement.levelIsValid(3, "Superuser", 1023, 3);

Test 106: 
UserManagement.levelIsValid((int) "a", (String) 0, (int) (Integer) null, (int) (Integer) null);

Test 107: 
UserManagement.levelIsValid(1265, "AwesomeSauce", (int) "p@ssword123!", (int) "p@ssword123!");

Test 108: 
Integer integer = new Integer(987654321);
UserManagement.remove_online_user(integer);

Test 109: 
UserManagement.charif_sendallwos((int) "WOS_ALL", (int[]) null);

Test 110: 
UserManagement.charif_sendallwos((int) (Integer) null, (byte[]) null);

Test 111: 
UserManagement.addUserTXT("johndoe@email.com", "John Doe", "1234 Main St.", 'M');

Test 112: 
UserManagement.isGM(10002);
UserManagement.isGM(20002);
UserManagement.isGM(30002);

Test 113: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt("testuser123");
UserManagement.dynamicFailBanCheckMySQL("127.0.0.1");
String string = "admin";
int _int = 999;
UserManagement.levelIsValid(_int, string, _int, _int);

Test 114: 
UserManagement.getAccountIds();

Test 115: 
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 116: 
UserManagement.sendUserList((Socket_data) null);

Test 117: 
UserManagement.getAuth_dats();
FastComparator<Object> fastComparator = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
FastMap<Integer, Auth_data> setValueComparator = ((FastMap) fastComparator).setValueComparator(fastComparator);
UserManagement.getAuth_dats();
String string = "john";
String string = "doe123";
String string = "0";
int _int = 0;
UserManagement.addUserSQL(string, string, string, _int);
UserManagement.setAuth_dats(setValueComparator);

Test 118: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);

Test 119: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "creditCard123");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);

Test 120: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "1234567890", 'S');
((Auth_data)"John Doe").setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);

Test 121: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('Z');
UserManagement.addUser(auth_data);

Test 122: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "Administrators", 'u');
((Auth_data)"John Doe").setClientType((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 123: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "john.doe@example.com", "1234567890", '$');
((Auth_data)"John Doe").setClientType(2011);
UserManagement.addUser(addUserTXT);

Test 124: 
Auth_data addUserTXT = UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F');
((Auth_data)"Jane").setConnect_until_time((long) (Long) null);
UserManagement.addUser(addUserTXT);

Test 125: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1647028930L);
UserManagement.addUser(auth_data);

Test 126: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 127: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);

Test 128: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((int) (Integer) null);
UserManagement.addUser(auth_data);

Test 129: 
Auth_data addUserTXT = UserManagement.addUserTXT("Test User", "test@email.com", "password123", '0');
((Auth_data)"Test User").setLevel(50);
UserManagement.addUser(addUserTXT);

Test 130: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(12345);
UserManagement.addUser(auth_data);

Test 131: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(200);
UserManagement.addUser(auth_data);

Test 132: 
Auth_data addUserTXT = UserManagement.addUserTXT("username1", "password1", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
((Auth_data)"username1").setLogin_id2(2607);
UserManagement.addUser(addUserTXT);

Test 133: 
Auth_data addUserTXT = UserManagement.addUserTXT("john", "doe", "-630", ']');
((Auth_data)"john").setLogincount((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 134: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(100);
UserManagement.addUser(auth_data);

Test 135: 
Auth_data addUserTXT = UserManagement.addUserTXT("John Doe", "johndoe@example.com", "0123456789", '!');
((Auth_data)"John Doe").setState(100);
UserManagement.addUser(addUserTXT);

Test 136: 
Auth_data addUserTXT = UserManagement.addUserTXT("John", "Doe", "johndoe@example.com", 'M');
((Auth_data)"John").setVersion((int) (Integer) null);
UserManagement.addUser(addUserTXT);

Test 137: 
String string = "testUser";
Auth_data addUserTXT = UserManagement.addUserTXT("testUser", "customerAdmin", "SELECT `username`,`password`,`firstname`,`lastname`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`status`,`email` FROM `users` WHERE BINARY `username`='testUser'", (char) (Character) null);
int _int = 2607;
((Auth_data) string).setVersion(_int);
UserManagement.addUser(addUserTXT);

Test 138: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);

Test 139: 
UserManagement.getAccountID("john@example.com");

Test 140: 
UserManagement.addUserTXT("Jane Doe", "janedoe@example.com", "+9876543210", 'B');
UserManagement.addUserTXT("Bob Smith", "bobsmith@example.com", "+1112223333", 'C');
UserManagement.getAccountIdCount();

Test 141: 
MockSocket mockSocket = new MockSocket();
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
UserManagement.getNBUser();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toChangeAnEmail(socket_data);

Test 142: 
boolean sendMessageOnTcp = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) "(j;QMQ", (String) null);
UserManagement.online_db_final();
int _int = 0;
UserManagement.getSessionAt(_int);
int _int = 0;
((Socket_data) sendMessageOnTcp).setMaintenance(_int);
String string = "gw4b:35;YHyp";
int _int = 0;
boolean _boolean = false;
MockSocket mockSocket = new MockSocket(string, _int, _boolean);
String string = "This is a test string";
UserManagement.dynamicFailBanCheckMySQL(string);

Test 143: 
UserManagement.getUserTxt((Integer) 123456789);

Test 144: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte) 1;
byteArray[5] = (byte) 2;
byteArray[5] = (byte) 3;
byteArray[5] = (byte) 4;
byteArray[5] = (byte) 5;
byteArray[5] = (byte) 86;
UserManagement.tabHexToInt(byteArray);

Test 145: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 255;
byteArray[1] = (byte) 62;
UserManagement.tabHexToInt(byteArray);

Test 146: 
UserManagement.account_idToOffline((Socket_data) null, (byte[]) null);

Test 147: 
UserManagement.addGM(10027, (int) 3.14);

Test 148: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) fromClient, fromClient);
UserManagement.administationLogin(socket_data);

Test 149: 
UserManagement.banResquest((Socket_data) null);

Test 150: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.changeSex(socket_data);

Test 151: 
UserManagement.changeSexChrif_changesex((Socket_data) null);

Test 152: 
byte[] byteArray = new byte[6];
UserManagement.charServerToAuthentify((Socket_data) byteArray, (byte[]) null);

Test 153: 
byte[] byteArray = new byte[6];
UserManagement.connectionOfCharServer((Socket_data) byteArray, (byte[]) null);

Test 154: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.connectionOfClientEncrypted(socket_data);

Test 155: 
UserManagement.emailCreation((Socket_data) null);

Test 156: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);

Test 157: 
UserManagement.receiveAccountReg2((Socket_data) null, (byte[]) null);

Test 158: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
UserManagement.requestAccountData(socket_data, (byte[]) null);

Test 159: 
byte[] byteArray = new byte[12];
UserManagement.requestAccountReg2((Socket_data) byteArray, (byte[]) null);

Test 160: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
UserManagement.statusChange(socket_data, byteArray);

Test 161: 
UserManagement.unban((Socket_data) null);


* Minimizing test suite
* test suite isTestSuite: 86
Test 0: 
UserManagement.addAccountIdCount(123456789);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(1000);
Test 3: 
UserManagement.debugXML();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
UserManagement.toBecomeGM((Socket_data) null);
Test 6: 
UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
byte[] byteArray = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
UserManagement.getUserTxt((Integer) 123456789);
Test 11: 
UserManagement.addSession((Socket_data) null);
Test 12: 
// Undeclared exception!
try { 
  UserManagement.getSessionAt(0);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 13: 
UserManagement.addAccountIdCount();
Test 14: 
UserManagement.is_user_online((Integer) 123456789);
Test 15: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 16: 
UserManagement.getNBSession();
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("1234567890");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 17: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 18: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 19: 
UserManagement.getNBUser();
Test 20: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 21: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 22: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 23: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 25: 
Auth_data auth_data = new Auth_data();
UserManagement.addUser(auth_data);
UserManagement.add_online_user(auth_data);
// Undeclared exception!
try { 
  UserManagement.addUserTXT("Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", "John Doe", (String) 5, (char) "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n");
  fail("Expecting exception: CodeUnderTestException");

} catch(Throwable e) {
}

Test 26: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 27: 
byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 28: 
UserManagement.levelIsValid(3, "Superuser", 1023, 3);
Test 29: 
UserManagement.levelIsValid(0, "zL[%}=A", (-1), 0);
Test 30: 
UserManagement.levelIsValid(1265, "", 1265, 1265);
Test 31: 
Integer integer = new Integer(1234567890);
UserManagement.remove_online_user(integer);
Test 32: 
int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);
Test 33: 
UserManagement.charif_sendallwos((-5), (byte[]) null);
Test 34: 
UserManagement.addUserTXT("Jane", "Smith", "janesmith@example.com", 'F');
Test 35: 
UserManagement.isGM(10002);
Test 36: 
UserManagement.getUserTxt((String) null);
Test 37: 
UserManagement.getAccountIds();
Test 38: 
UserManagement.dynamicFailBanCheckTXT("");
byte[] byteArray = new byte[2];
byteArray[0] = (byte)4;
byteArray[1] = (byte)26;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
byte[] byteArray = new byte[9];
byteArray[1] = (byte)39;
byteArray[2] = (byte) (-39);
byteArray[3] = (byte) (-90);
byteArray[4] = (byte)66;
byteArray[5] = (byte)0;
byteArray[6] = (byte) (-13);
byteArray[7] = (byte)85;
byteArray[8] = (byte)117;
NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray);
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
EvoSuiteRemoteAddress evoSuiteRemoteAddress = new EvoSuiteRemoteAddress("", 7);
NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
Test 39: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 40: 
UserManagement.online_db_final();
Test 41: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);
Test 42: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);
Test 43: 
Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver('Z');
UserManagement.addUser(auth_data);
Test 45: 
Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(1647028930L);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);
Test 52: 
Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(12345);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(100);
UserManagement.addUser(auth_data);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);
Test 60: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);
Test 61: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 62: 
UserManagement.getAccountID((String) null);
Test 63: 
UserManagement.addUserTXT("", "z ?Px7q%z4S?K\u0007J)", "z ?Px7q%z4S?K\u0007J)", '>');
UserManagement.getAccountIdCount();
Test 64: 
Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);
Test 67: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM(10027, (-3453));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[17];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
byte[] byteArray = new byte[12];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
// Undeclared exception!
try { 
  UserManagement.sendUserList((Socket_data) null);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("javolution.util.FastTable", e);
}

Test 83: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 84: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 85: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 53
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 28%
* Total number of goals: 711
* Number of covered goals: 201
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 423
* Number of covered goals: 89
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 53
* Generated 86 tests with total length 219
* Resulting test suite's coverage: 32% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount(123456789);

** It was a parseable test case! 
refined test name is: testAddAccountId
* Compiling Tests
refined test name is: testAddAccountId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBGM = UserManagement.getNBGM();
assertEquals(0, nBGM);


** It was a parseable test case! 
refined test name is: testNumberOfBackgroundMessagesIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.setAccountIdCount(1000);

** It was a parseable test case! 
refined test name is: testSetAccountIdCount
* Compiling Tests
refined test name is: testSetAndGetAccountIdCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.debugXML();

** It was a parseable test case! 
refined test name is: testDebugXMLReturnsCorrectDocument
* Compiling Tests
refined test name is: testDebugXMLShouldReturnDocument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data arg0 = new Socket_data((Socket) null);
UserManagement.unLogServer(arg0);
assertEquals(0, arg0.getUsers());


** It was a parseable test case! 
refined test name is: testUnlogServernumberOfUsersZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.toBecomeGM((Socket_data) null);

** It was a parseable test case! 
refined test name is: testToBecomeGMWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data addUserSQL = UserManagement.addUserSQL("login_log_28", "set users %s : %d\n", "login_log_28", 8);
assertNull(addUserSQL);


** It was a parseable test case! 
refined test name is: testAddUserReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int accountIdCount = UserManagement.getAccountIdCount();
assertEquals(0, accountIdCount);


** It was a parseable test case! 
refined test name is: testCreateNewUserIncreasesUserCount
* Compiling Tests
refined test name is: testCreateNewUserIncreasesUserCountByOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: root, pass: password123, banned until 2023-01-01, ip: 192.168.0.1)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLMySQLConnectionRefused
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testNumberOfUserThrowsNPEWhenSocketDataIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data userTxt = UserManagement.getUserTxt((Integer) 123456789);
assertNull(userTxt);


** It was a parseable test case! 
refined test name is: testGetUserTxtNonExistentUserId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addSession((Socket_data) null);

** It was a parseable test case! 
refined test name is: testAddSessionNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Socket_data sessionAt = UserManagement.getSessionAt(0);
assertNull(sessionAt);


** It was a parseable test case! 
refined test name is: testGetSessionAtValidIndex
* Compiling Tests
refined test name is: testGetSessionAtShouldReturnValidSocketDataObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.addAccountIdCount();

** It was a parseable test case! 
refined test name is: testAddingAccountId
* Compiling Tests
refined test name is: testAddAccountIdShouldAddAccountIdToTheListOfIds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean is_user_online = UserManagement.is_user_online((Integer) 123456789);
assertFalse(is_user_online);


** It was a parseable test case! 
refined test name is: testIsUserOnlineWithValidIdReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testGetUserSQLNullPointerExceptionThrown
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: UserManagement.getNBSession();
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL("1234567890");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}


** It was a parseable test case! 
refined test name is: testDynamicFailBanCheckMySQLWithInvalidUserID
* Compiling Tests
refined test name is: testDynamicFailBanCheckMySQLInvalidUserId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Integer arg0 = new Integer(99);
UserManagement.remove_online_user(arg0);

** It was a parseable test case! 
refined test name is: testRemoveOnlineUserNotFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FastMap<Integer, Auth_data> arg0 = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(arg0);
assertEquals(0, arg0.size());


** It was a parseable test case! 
refined test name is: testSetAuthDatsWithEmptyMap
* Compiling Tests
refined test name is: testSetAuthDatsShouldClearMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int nBUser = UserManagement.getNBUser();
assertEquals(0, nBUser);


** It was a parseable test case! 
refined test name is: testGetNBUserNoUsersInDB
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg1 = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


** It was a parseable test case! 
refined test name is: testNullPointerExceptionThrownWhenAccountIdIsNull
* Compiling Tests
refined test name is: testAccountIdToOnlineWithNullSocketData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("192.168.0.1");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}


** It was a parseable test case! 
refined test name is: testAddIpToBanListMySQLInvalidIPAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[2];
int tabHexToInt = UserManagement.tabHexToInt(arg0);
assertEquals(0, tabHexToInt);


** It was a parseable test case! 
refined test name is: testTabHexToIntZeroInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
Auth_data removeUser = UserManagement.removeUser(arg0);
assertNull(removeUser);


** It was a parseable test case! 
refined test name is: testRemoveUserWithValidDataShouldReturnNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
int add_online_user = UserManagement.add_online_user(arg0);
assertEquals(0, add_online_user);


** It was a parseable test case! 
refined test name is: testAddOnlineUserSuccessful
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Auth_data arg0 = new Auth_data();
UserManagement.addUser(arg0);
UserManagement.add_online_user(arg0);

** It was a parseable test case! 
refined test name is: testAddUserAndMakeOnlineUser
[MASTER] 19:29:30.193 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
[MASTER] 19:29:31.424 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 85
Test 0: 
UserManagement.addAccountIdCount(0);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(942);
Test 3: 
UserManagement.debugXML();
FromChar fromChar = new FromChar();
Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
byte[] byteArray = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 11: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 12: 
UserManagement.addAccountIdCount();
Test 13: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 14: 
UserManagement.getNBSession();
Test 15: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 16: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 17: 
UserManagement.getNBUser();
Test 18: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 19: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("S1009");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 20: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 21: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 22: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 23: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 24: 
byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 25: 
UserManagement.levelIsValid(2, "zL[%}=A", (-1), 2);
Test 26: 
UserManagement.levelIsValid(1265, "", 1265, 1265);
Test 27: 
Integer integer = new Integer(24);
UserManagement.remove_online_user(integer);
Test 28: 
int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);
Test 29: 
UserManagement.charif_sendallwos((-5), (byte[]) null);
Test 30: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%');
Test 31: 
UserManagement.isGM(30002);
Test 32: 
UserManagement.getUserTxt("#Kdd");
Test 33: 
UserManagement.getUserTxt((String) null);
Test 34: 
UserManagement.getAccountIds();
Test 35: 
UserManagement.dynamicFailBanCheckTXT("");
UserManagement.getAccountID("");
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Integer integer = new Integer((-677));
UserManagement.is_user_online((Integer) null);
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
UserManagement.sendUserList(socket_data);
UserManagement.connectionOfClientEncrypted(socket_data);
UserManagement.changeSex(socket_data);
Test 36: 
// Undeclared exception!
UserManagement.sendUserList((Socket_data) null);
Test 37: 
FastMap<Integer, Auth_data> newInstance = FastMap.newInstance();
UserManagement.setAuth_dats(newInstance);
Test 38: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 39: 
UserManagement.online_db_final();
Test 40: 
UserManagement.levelIsValid((-2624), ")r_TAKV3+#^Z", (-2624), 7);
Test 41: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);
Test 42: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);
Test 43: 
Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);
Test 44: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(138);
UserManagement.addUser(auth_data);
Test 45: 
Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);
Test 48: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(2686L);
UserManagement.addUser(auth_data);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);
Test 52: 
Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);
Test 53: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(176);
UserManagement.addUser(auth_data);
Test 55: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(2498);
UserManagement.addUser(auth_data);
Test 58: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);
Test 59: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);
Test 60: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);
Test 61: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 62: 
UserManagement.getAccountID((String) null);
Test 63: 
UserManagement.getSessionAt(0);
Test 64: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt((String) null);
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

int _int = 10036;
String string = "";
int _int = 7;
int _int = (-758);
UserManagement.levelIsValid(_int, string, _int, _int);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);
Test 67: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM(10027, (-3453));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[17];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
byte[] byteArray = new byte[12];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 83: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 84: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Minimizing test suite
[MASTER] 19:29:50.186 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 86
Test 0: 
UserManagement.addAccountIdCount(0);
Test 1: 
UserManagement.getNBGM();
Test 2: 
UserManagement.setAccountIdCount(942);
Test 3: 
// Undeclared exception!
try { 
  UserManagement.debugXML();
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Could not call javolution.util.FastMap.writeObject() : Loop has been executed more times than the allowed 10000
   // ---- Debugging information ----
   // message             : Could not call javolution.util.FastMap.writeObject()
   // cause-exception     : org.evosuite.runtime.TooManyResourcesException
   // cause-message       : Loop has been executed more times than the allowed 10000
   // -------------------------------
   //
   verifyException("com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker", e);
}

Test 4: 
Socket_data socket_data = new Socket_data((Socket) null);
UserManagement.unLogServer(socket_data);
Test 5: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
UserManagement.toBecomeGM(socket_data);
Test 6: 
UserManagement.addUserSQL("dG{lwy'", (String) null, "Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n", 82);
Test 7: 
UserManagement.getAccountIdCount();
Test 8: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL("Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 9: 
byte[] byteArray = new byte[1];
// Undeclared exception!
try { 
  UserManagement.numberOfUser((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 10: 
Auth_data addUserTXT = UserManagement.addUserTXT("cp1250_general_ci", "cp1250_general_ci", "cp1250_general_ci", 'd');
Integer account_id = addUserTXT.getAccount_id();
UserManagement.getUserTxt(account_id);
Test 11: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
UserManagement.addSession(socket_data);
Test 12: 
UserManagement.getSessionAt(0);
Test 13: 
UserManagement.addAccountIdCount();
Test 14: 
Auth_data auth_data = new Auth_data();
UserManagement.add_online_user(auth_data);
Test 15: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((Integer) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

Test 16: 
UserManagement.getAccountID((String) null);
Test 17: 
UserManagement.getNBSession();
Test 18: 
UserManagement.online_db_final();
Test 19: 
FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
UserManagement.setAuth_dats(auth_dats);
Test 20: 
UserManagement.getNBUser();
Test 21: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.account_idToOnline((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 22: 
// Undeclared exception!
try { 
  UserManagement.addIpToBanListMySQL("S1009");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"java.lang.String@0000000001\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 23: 
byte[] byteArray = new byte[2];
UserManagement.tabHexToInt(byteArray);
Test 24: 
Auth_data auth_data = new Auth_data();
UserManagement.removeUser(auth_data);
Test 25: 
byte[] byteArray = new byte[38];
// Undeclared exception!
try { 
  UserManagement.connectionOfClient((Socket_data) null, byteArray, false);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 54
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 26: 
byte[] byteArray = new byte[19];
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClient(socket_data, byteArray, true);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 30
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 27: 
UserManagement.levelIsValid(1265, "", 1265, 1265);
Test 28: 
UserManagement.levelIsValid((-2624), ")r_TAKV3+#^Z", (-2624), 7);
Test 29: 
UserManagement.levelIsValid(2, "zL[%}=A", (-1), 2);
Test 30: 
Integer integer = new Integer(24);
UserManagement.remove_online_user(integer);
Test 31: 
Integer integer = new Integer(99);
UserManagement.remove_online_user(integer);
Test 32: 
int[] intArray = new int[3];
UserManagement.charif_sendallwos((-3202), intArray);
Test 33: 
UserManagement.charif_sendallwos((-5), (byte[]) null);
Test 34: 
UserManagement.addUserTXT("a@a.com", "a@a.com", "a@a.com", '%');
Test 35: 
UserManagement.isGM(30002);
Test 36: 
UserManagement.getUserTxt("#Kdd");
Test 37: 
UserManagement.getUserTxt((String) null);
Test 38: 
UserManagement.getAccountIds();
Test 39: 
UserManagement.dynamicFailBanCheckTXT("");
Test 40: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[8];
UserManagement.receiveAllOnlinAccounts(socket_data, byteArray);
Test 41: 
UserManagement.is_user_online((Integer) null);
Test 42: 
Auth_data auth_data = new Auth_data();
FastMap<String, String> fastMap = new FastMap<String, String>();
fastMap.put("CCr", "");
auth_data.setAccount_reg2(fastMap);
UserManagement.addUser(auth_data);
Test 43: 
Auth_data auth_data = new Auth_data();
auth_data.setBan_until_time((-21267));
UserManagement.addUser(auth_data);
Test 44: 
Auth_data addUserTXT = UserManagement.addUserTXT("]'Gw:X<v", "]'Gw:X<v", "]'Gw:X<v", 'S');
addUserTXT.setBan_until_time(1170L);
UserManagement.addUser(addUserTXT);
Test 45: 
Auth_data auth_data = new Auth_data();
auth_data.setCharserver(138);
UserManagement.addUser(auth_data);
Test 46: 
Auth_data addUserTXT = UserManagement.addUserTXT("TB^", "TB^", "Not Permitted Group", 'u');
addUserTXT.setClientType((-1709));
UserManagement.addUser(addUserTXT);
Test 47: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setClientType(2011);
UserManagement.addUser(addUserTXT);
Test 48: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setConnect_until_time((-630));
UserManagement.addUser(addUserTXT);
Test 49: 
Auth_data auth_data = new Auth_data();
auth_data.setConnect_until_time(2686L);
UserManagement.addUser(auth_data);
Test 50: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag((-461));
UserManagement.addUser(auth_data);
Test 51: 
Auth_data auth_data = new Auth_data();
auth_data.setDelflag(2119);
UserManagement.addUser(auth_data);
Test 52: 
Auth_data auth_data = new Auth_data();
auth_data.setLevel((-474));
UserManagement.addUser(auth_data);
Test 53: 
Auth_data addUserTXT = UserManagement.addUserTXT("D>*B:+`G>t", "D>*B:+`G>t", "D>*B:+`G>t", '0');
addUserTXT.setLevel(1023);
UserManagement.addUser(addUserTXT);
Test 54: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1((-1186));
UserManagement.addUser(auth_data);
Test 55: 
Auth_data auth_data = new Auth_data();
auth_data.setLogin_id1(176);
UserManagement.addUser(auth_data);
Test 56: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setLogin_id2(2607);
UserManagement.addUser(addUserTXT);
Test 57: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setLogincount((-630));
UserManagement.addUser(addUserTXT);
Test 58: 
Auth_data auth_data = new Auth_data();
auth_data.setLogincount(2498);
UserManagement.addUser(auth_data);
Test 59: 
Auth_data addUserTXT = UserManagement.addUserTXT("Clob.13", "Clob.13", "Clob.13", '$');
addUserTXT.setState(1635);
UserManagement.addUser(addUserTXT);
Test 60: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "", "", ']');
addUserTXT.setVersion((-630));
UserManagement.addUser(addUserTXT);
Test 61: 
Auth_data addUserTXT = UserManagement.addUserTXT("", "cA", "SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'", ']');
addUserTXT.setVersion(2607);
UserManagement.addUser(addUserTXT);
Test 62: 
Auth_data auth_data = new Auth_data();
auth_data.setResetLogincoun(true);
UserManagement.addUser(auth_data);
Test 63: 
UserManagement.getAccountID("");
Test 64: 
Auth_data auth_data = new Auth_data();
UserManagement.getUserTxt((String) null);
// Undeclared exception!
try { 
  UserManagement.dynamicFailBanCheckMySQL((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.utiles.sql.MySQLConfig", e);
}

int _int = 10036;
String string = "";
int _int = 7;
int _int = (-758);
UserManagement.levelIsValid(_int, string, _int, _int);
Test 65: 
byte[] byteArray = new byte[6];
byteArray[5] = (byte)86;
UserManagement.tabHexToInt(byteArray);
Test 66: 
byte[] byteArray = new byte[2];
byteArray[1] = (byte)53;
UserManagement.tabHexToInt(byteArray);
Test 67: 
Socket_data socket_data = new Socket_data((Socket) null);
byte[] byteArray = new byte[4];
// Undeclared exception!
try { 
  UserManagement.account_idToOffline(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 68: 
// Undeclared exception!
try { 
  UserManagement.addGM(10027, (-3453));
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 69: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
// Undeclared exception!
try { 
  UserManagement.administationLogin(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 70: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.banResquest(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 71: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.changeSex(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 72: 
// Undeclared exception!
try { 
  UserManagement.changeSexChrif_changesex((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 73: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.charServerToAuthentify(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 74: 
byte[] byteArray = new byte[6];
// Undeclared exception!
try { 
  UserManagement.connectionOfCharServer((Socket_data) null, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 26
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 75: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.connectionOfClientEncrypted(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 76: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
// Undeclared exception!
try { 
  UserManagement.emailCreation(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 77: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.emailLimitedTime(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 78: 
// Undeclared exception!
try { 
  UserManagement.getUserSQL((ResultSet) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 79: 
byte[] byteArray = new byte[17];
// Undeclared exception!
try { 
  UserManagement.receiveAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 80: 
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
Socket_data socket_data = new Socket_data(mockSocket, (IParse) null);
byte[] byteArray = new byte[7];
// Undeclared exception!
try { 
  UserManagement.requestAccountData(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 81: 
byte[] byteArray = new byte[12];
// Undeclared exception!
try { 
  UserManagement.requestAccountReg2((Socket_data) null, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}

Test 82: 
// Undeclared exception!
UserManagement.sendUserList((Socket_data) null);
Test 83: 
MockSocket mockSocket = new MockSocket();
FromAdmin fromAdmin = new FromAdmin();
Socket_data socket_data = new Socket_data(mockSocket, fromAdmin);
byte[] byteArray = new byte[0];
// Undeclared exception!
try { 
  UserManagement.statusChange(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 84: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
// Undeclared exception!
try { 
  UserManagement.toChangeAnEmail(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 85: 
MockSocket mockSocket = new MockSocket();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket);
// Undeclared exception!
try { 
  UserManagement.unban(socket_data);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.UserManagement", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 53
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 28%
* Total number of goals: 711
* Number of covered goals: 201
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 423
* Number of covered goals: 92
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 329
* Number of covered goals: 53
* Generated 86 tests with total length 206
* Resulting test suite's coverage: 32% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:29:51.165 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 19:29:56.542 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:03.269 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:03.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:03.436 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:03.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:03.531 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:03.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:03.671 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:03.672 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.011 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.070 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.128 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.167 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.228 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.312 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.314 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.368 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.631 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.725 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.727 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.827 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:04.880 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:04.882 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.024 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.141 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.143 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.193 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.251 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.309 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.310 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.366 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.428 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.429 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
[MASTER] 19:30:05.490 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.535 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.585 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.586 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.630 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.690 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.691 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.752 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.753 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.822 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.871 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.922 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:05.976 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:05.976 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.036 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.037 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.089 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.089 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.153 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.154 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:30:06.204 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.261 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.376 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.377 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.490 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.560 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.639 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.640 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.714 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.774 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.775 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.831 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.883 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.937 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.938 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:06.981 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:06.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.031 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.118 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.195 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.197 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.334 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.401 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.402 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.460 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.461 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.589 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.590 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.652 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.715 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.717 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.797 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.863 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.864 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:07.977 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:07.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.064 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.066 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.150 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.152 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.317 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.319 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.412 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.475 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.476 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.670 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.671 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.781 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:30:08.842 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.843 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 19:30:08.904 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:08.905 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
[MASTER] 19:30:11.467 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:11.469 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
[MASTER] 19:30:13.672 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar6002757164498009545.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:30:13.673 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6002757164498009545.jar
* Writing tests to file
[MASTER] 19:30:13.674 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'UserManagement_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 65 called: 60 to improve: false
** Write a test suite: 67 called: 61 to improve: false
** Write a test suite: 69 called: 62 to improve: false
** Write a test suite: 72 called: 63 to improve: false
** Write a test suite: 73 called: 64 to improve: false
** Write a test suite: 78 called: 65 to improve: false
** Write a test suite: 82 called: 66 to improve: false
** Write a test suite: 83 called: 67 to improve: false
** Write a test suite: 85 called: 68 to improve: false
* Writing JUnit test case 'UserManagement_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
** Write a test suite: 46 called: 46 to improve: false
** Write a test suite: 47 called: 47 to improve: false
** Write a test suite: 48 called: 48 to improve: false
** Write a test suite: 49 called: 49 to improve: false
** Write a test suite: 50 called: 50 to improve: false
** Write a test suite: 51 called: 51 to improve: false
** Write a test suite: 52 called: 52 to improve: false
** Write a test suite: 53 called: 53 to improve: false
** Write a test suite: 54 called: 54 to improve: false
** Write a test suite: 55 called: 55 to improve: false
** Write a test suite: 56 called: 56 to improve: false
** Write a test suite: 57 called: 57 to improve: false
** Write a test suite: 58 called: 58 to improve: false
** Write a test suite: 59 called: 59 to improve: false
** Write a test suite: 60 called: 60 to improve: false
** Write a test suite: 61 called: 61 to improve: false
** Write a test suite: 62 called: 62 to improve: false
** Write a test suite: 63 called: 63 to improve: false
** Write a test suite: 64 called: 64 to improve: false
** Write a test suite: 65 called: 65 to improve: false
** Write a test suite: 66 called: 66 to improve: false
** Write a test suite: 67 called: 67 to improve: false
** Write a test suite: 68 called: 68 to improve: false
** Write a test suite: 69 called: 69 to improve: false
** Write a test suite: 70 called: 70 to improve: false
** Write a test suite: 71 called: 71 to improve: false
* Done!

* Computation finished
