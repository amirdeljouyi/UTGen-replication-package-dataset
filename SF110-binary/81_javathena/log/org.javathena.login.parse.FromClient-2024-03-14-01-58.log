* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.parse.FromClient
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 20491
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:58:46.828 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 01:58:46.839 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 01:58:46.839 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 01:58:46.869 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:58:46.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:58:46.873 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:58:46.881 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 01:58:46.882 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 01:58:46.884 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 01:58:46.884 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 01:58:46.887 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 01:58:46.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 01:58:46.915 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 01:58:46.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:58:46.955 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:58:46.956 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:58:46.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.parse.FromClient
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 163
* Using seed 1710381523910
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 13 / 163
[Progress:>                             0%] [Cov:========>                          24%][Progress:>                             0%] [Cov:========>                          24%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           8%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:==>                           9%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         15%] [Cov:================>                  47%][Progress:====>                         15%] [Cov:================>                  47%][Progress:====>                         15%] [Cov:================>                  47%][Progress:====>                         15%] [Cov:================>                  47%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:==================>                52%][Progress:======>                       23%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    32%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   34%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:==========>                   36%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:==================>                54%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:=====================>             60%][Progress:===========>                  39%] [Cov:=====================>             60%][Progress:===========>                  39%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 40%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                46%] [Cov:=====================>             61%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:======================>            63%][Progress:===============>              51%] [Cov:======================>            63%][Progress:===============>              51%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              52%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            64%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:===================>          66%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         67%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        72%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     81%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     82%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           66%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   88%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:==========================>   89%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  90%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  91%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  92%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:===========================>  93%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 94%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 95%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:============================> 96%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%]
* Search finished after 201s and 1072 generations, 635477 statements, best individual has fitness: 53.0
* Generated before the refinement 14 tests with total length 124
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@f5402f1b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6c238555 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[7];
        byteArray[0] = ((byte) (254));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (254)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (254)) Ct is: byteArray[0] = ((byte) (254))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
int _int = 254;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@dff8a304 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[68]
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket("127.0.0.1", 5432);
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[]{ 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 };
        FromClient fromClient = new FromClient();
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket("127.0.0.1", 5432), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V
statement is: byte[] byteArray = new byte[]{ 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[68] isAssignment: false Array: new byte[]{ 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 } Elements: [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7]
lengths: [68] []
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 5, type org.javathena.login.parse.FromClientindex is: 2
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase Could not be added: parse(Lorg/javathena/core/data/Socket_data;[B)I
* this is vulnerable: Socket_data socket_data = null
* this is vulnerable: byte[] byteArray = null
TestCase is: Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();
Socket_data socket_data = null;
byte[] byteArray = null;

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@f0f47c9f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8786f28c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[4];
        // Replace the hardcoded value of 2 with a more descriptive one
        byteArray[1] = ((byte) (0x2));// This represents the value of 2 in hexadecimal format

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[4] Elements: []
lengths: [4] [4]
Their type are: class [B byte[]
statement is: // Replace the hardcoded value of 2 with a more descriptive one
byteArray[1] = ((byte) (0x2))// This represents the value of 2 in hexadecimal format
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (0x2)) Ct is: // Replace the hardcoded value of 2 with a more descriptive one
byteArray[1] = ((byte) (0x2))// This represents the value of 2 in hexadecimal format

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@d6dfe9de type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[12]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a9154288 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)4
statement is: org.evosuite.testcase.statements.AssignmentStatement@dca6290 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[12];
        // Changing the primitive values and strings to more illustrative examples
        byteArray[0] = ((byte) (4));// Changed this value to 4 to indicate a successful login

        byteArray[1] = ((byte) (2));// Changed this value to 2 to indicate a message type of "chat"

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[12], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [12] Ct is: byte[] byteArray = new byte[12] isAssignment: false Array: new byte[12] Elements: []
lengths: [12] [12]
Their type are: class [B byte[]
statement is: // Changing the primitive values and strings to more illustrative examples
byteArray[0] = ((byte) (4))// Changed this value to 4 to indicate a successful login
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (4)) Ct is: // Changing the primitive values and strings to more illustrative examples
byteArray[0] = ((byte) (4))// Changed this value to 4 to indicate a successful login

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// Changed this value to 2 to indicate a message type of "chat"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// Changed this value to 2 to indicate a message type of "chat"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
int _int = 4;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@4db8adff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[93]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f68ac8f6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)119
statement is: org.evosuite.testcase.statements.AssignmentStatement@1f2d48e6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[93];
        byteArray[0] = ((byte) (119));// 119 is a valid ASCII code for the "s" character

        byteArray[1] = ((byte) (2));// 2 is a valid ASCII code for the "b" character

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[93], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [93] Ct is: byte[] byteArray = new byte[93] isAssignment: false Array: new byte[93] Elements: []
lengths: [93] [93]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (119))// 119 is a valid ASCII code for the "s" character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (119)) Ct is: byteArray[0] = ((byte) (119))// 119 is a valid ASCII code for the "s" character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// 2 is a valid ASCII code for the "b" character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// 2 is a valid ASCII code for the "b" character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
int _int = 119;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@76182e44 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[68]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8da469a type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)124
statement is: org.evosuite.testcase.statements.AssignmentStatement@68a77ded type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[68];
        byteArray[0] = ((byte) (124));// This value is more descriptive as it represents a specific character.

        byteArray[1] = ((byte) (2));// This value is more descriptive as it represents a specific character.

        FromClient fromClient = new FromClient();
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[68], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [68] Ct is: byte[] byteArray = new byte[68] isAssignment: false Array: new byte[68] Elements: []
lengths: [68] [68]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (124))// This value is more descriptive as it represents a specific character.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (124)) Ct is: byteArray[0] = ((byte) (124))// This value is more descriptive as it represents a specific character.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// This value is more descriptive as it represents a specific character.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// This value is more descriptive as it represents a specific character.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 7, type org.javathena.login.parse.FromClientindex is: 9
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
int _int = 124;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
FromClient fromClient = new FromClient();
((FromClient) _int).parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@54f98057 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b9fd1cdb type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)16
statement is: org.evosuite.testcase.statements.AssignmentStatement@70d84586 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)39
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (16));// Changed to a more descriptive value, such as 'A'

        byteArray[1] = ((byte) (39));// Changed to a more descriptive value, such as 'Z'

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (16))// Changed to a more descriptive value, such as 'A'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (16)) Ct is: byteArray[0] = ((byte) (16))// Changed to a more descriptive value, such as 'A'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (39))// Changed to a more descriptive value, such as 'Z'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (39)) Ct is: byteArray[1] = ((byte) (39))// Changed to a more descriptive value, such as 'Z'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
int _int = 16;
byteArray[0] = (byte) _int;
int _int = 39;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@8efaf6d8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@421bb1d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)48
statement is: org.evosuite.testcase.statements.AssignmentStatement@2fba6d65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)117
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[9];
        // Changing the primitive values to more illustrative examples
        byteArray[0] = ((byte) ('A'));
        byteArray[1] = ((byte) ('B'));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: // Changing the primitive values to more illustrative examples
byteArray[0] = ((byte) ('A')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('A')) Ct is: // Changing the primitive values to more illustrative examples
byteArray[0] = ((byte) ('A'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) ('B')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('B')) Ct is: byteArray[1] = ((byte) ('B'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
char _char = 'A';
byteArray[0] = (byte) _char;
char _char = 'B';
byteArray[1] = (byte) _char;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.testcase.statements.ArrayStatement@740fe8a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@33c839f3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)50
statement is: org.evosuite.testcase.statements.AssignmentStatement@558db4a type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)117
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket);
        FromClient fromClient = new FromClient();
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) (87));// "W"

        byteArray[1] = ((byte) (97));// "a"

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (87))// "W"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (87)) Ct is: byteArray[0] = ((byte) (87))// "W"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (97))// "a"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (97)) Ct is: byteArray[1] = ((byte) (97))// "a"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 4, type org.javathena.login.parse.FromClientindex is: 4
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
int _int = 87;
byteArray[0] = (byte) _int;
int _int = 97;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.testcase.statements.ArrayStatement@e267ad3e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7accd37d type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)124
statement is: org.evosuite.testcase.statements.AssignmentStatement@3dd5a67f type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromChar fromChar = new FromChar();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        FromClient fromClient = new FromClient();
        byte[] byteArray = new byte[7];
        byteArray[0] = ((byte) (124));// "|"

        byteArray[1] = ((byte) (2));// ASCII code for character "b"

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (124))// "|"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (124)) Ct is: byteArray[0] = ((byte) (124))// "|"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// ASCII code for character "b"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// ASCII code for character "b"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 5, type org.javathena.login.parse.FromClientindex is: 5
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
int _int = 124;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@721d248e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[57]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9ceb1796 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[57];
        byteArray[0] = ((byte) (1));// First byte with value 1

        byteArray[1] = ((byte) (2));// Second byte with value 2

        byteArray[2] = ((byte) (3));// Third byte with value 3

        byteArray[3] = ((byte) (4));// Fourth byte with value 4

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[57], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [57] Ct is: byte[] byteArray = new byte[57] isAssignment: false Array: new byte[57] Elements: []
lengths: [57] [57]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (1))// First byte with value 1
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[0] = ((byte) (1))// First byte with value 1

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// Second byte with value 2
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// Second byte with value 2

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = ((byte) (3))// Third byte with value 3
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (3)) Ct is: byteArray[2] = ((byte) (3))// Third byte with value 3

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[3] = ((byte) (4))// Fourth byte with value 4
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (4)) Ct is: byteArray[3] = ((byte) (4))// Fourth byte with value 4

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
int _int = 1;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[0] = (byte) _int;
int _int = 3;
byteArray[0] = (byte) _int;
int _int = 4;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@ff415cf7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3a21dc12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)119
statement is: org.evosuite.testcase.statements.AssignmentStatement@ae243aa7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        byte[] byteArray = new byte[9];
        byteArray[0] = ((byte) (87));// This value represents the ASCII code for the letter 'W'

        byteArray[1] = ((byte) (2));// This value represents the ASCII code for the letter 'b'

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (87))// This value represents the ASCII code for the letter 'W'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (87)) Ct is: byteArray[0] = ((byte) (87))// This value represents the ASCII code for the letter 'W'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2))// This value represents the ASCII code for the letter 'b'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))// This value represents the ASCII code for the letter 'b'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
int _int = 87;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.evosuite.testcase.statements.ArrayStatement@2996a6cf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[24]
statement is: org.evosuite.testcase.statements.AssignmentStatement@da683453 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)26
statement is: org.evosuite.testcase.statements.AssignmentStatement@9beaf8de type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        mockSocket.close();
        byte[] byteArray = new byte[24];
        byteArray[0] = ((byte) (13));// changed to a more descriptive value, such as 13 for "ASCII"

        byteArray[1] = ((byte) (15));// changed to a more descriptive value, such as 15 for "EOF"

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 2, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 2
Matched Method is: close()V
statement is: byte[] byteArray = new byte[24], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [24] Ct is: byte[] byteArray = new byte[24] isAssignment: false Array: new byte[24] Elements: []
lengths: [24] [24]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (13))// changed to a more descriptive value, such as 13 for "ASCII"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (13)) Ct is: byteArray[0] = ((byte) (13))// changed to a more descriptive value, such as 13 for "ASCII"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (15))// changed to a more descriptive value, such as 15 for "EOF"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (15)) Ct is: byteArray[1] = ((byte) (15))// changed to a more descriptive value, such as 15 for "EOF"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
int _int = 13;
byteArray[0] = (byte) _int;
int _int = 15;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.evosuite.testcase.statements.ArrayStatement@be8c3ee5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[19]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1467061a type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)24
statement is: org.evosuite.testcase.statements.AssignmentStatement@9185d2fa type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initTXT();
        MockSocket mockSocket = new MockSocket();
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data(mockSocket);
        mockSocket.close();
        byte[] byteArray = new byte[19];
        byteArray[0] = ((byte) (24));// Replace with a more descriptive value, such as "REQUEST_TYPE"

        byteArray[1] = ((byte) (121));// Replace with a more descriptive value, such as "SUCCESS"

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 2, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 2
Matched Method is: close()V
statement is: byte[] byteArray = new byte[19], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [19] Ct is: byte[] byteArray = new byte[19] isAssignment: false Array: new byte[19] Elements: []
lengths: [19] [19]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (24))// Replace with a more descriptive value, such as "REQUEST_TYPE"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (24)) Ct is: byteArray[0] = ((byte) (24))// Replace with a more descriptive value, such as "REQUEST_TYPE"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (121))// Replace with a more descriptive value, such as "SUCCESS"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (121)) Ct is: byteArray[1] = ((byte) (121))// Replace with a more descriptive value, such as "SUCCESS"

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 3, type org.javathena.login.parse.FromClientindex is: 3
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
int _int = 24;
byteArray[0] = (byte) _int;
int _int = 121;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

* test suite isTestSuite: 28
Test 0: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 2: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 5: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 10: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 11: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 12: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 13: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 14: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 254;
fromClient.parse(socket_data, byteArray);

Test 15: 
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();

Test 16: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 17: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 18: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 19: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
FromClient fromClient = new FromClient();
((FromClient)2).parse(socket_data, byteArray);

Test 20: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
fromClient.parse(socket_data, byteArray);

Test 21: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 'A';
byteArray[1] = (byte) 'B';
fromClient.parse(socket_data, byteArray);

Test 22: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 87;
byteArray[1] = (byte) 97;
fromClient.parse(socket_data, byteArray);

Test 23: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 24: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte) 1;
byteArray[0] = (byte) 2;
byteArray[0] = (byte) 3;
byteArray[0] = (byte) 4;
fromClient.parse(socket_data, byteArray);

Test 25: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 87;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 26: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte) 13;
byteArray[1] = (byte) 15;
fromClient.parse(socket_data, byteArray);

Test 27: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);


* Generated after the refinement and before minimization 28 tests with total length 247
* test suite isTestSuite: 28
Test 0: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 2: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 5: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 10: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 11: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 12: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 13: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 14: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 254;
fromClient.parse(socket_data, byteArray);

Test 15: 
Login login = new Login();
login.do_initTXT();
FromClient fromClient = new FromClient();

Test 16: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 17: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 18: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 19: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
FromClient fromClient = new FromClient();
((FromClient)2).parse(socket_data, byteArray);

Test 20: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
fromClient.parse(socket_data, byteArray);

Test 21: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 'A';
byteArray[1] = (byte) 'B';
fromClient.parse(socket_data, byteArray);

Test 22: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 87;
byteArray[1] = (byte) 97;
fromClient.parse(socket_data, byteArray);

Test 23: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 24: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte) 1;
byteArray[0] = (byte) 2;
byteArray[0] = (byte) 3;
byteArray[0] = (byte) 4;
fromClient.parse(socket_data, byteArray);

Test 25: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 87;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 26: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte) 13;
byteArray[1] = (byte) 15;
fromClient.parse(socket_data, byteArray);

Test 27: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);


* Minimizing test suite
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 3: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 4: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 5: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 6: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 11: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 12: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 13: 
Login login = new Login();
login.do_initTXT();
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 60
* Number of covered goals: 35
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Generated 14 tests with total length 124
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 45%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 02:36:37.333 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 1: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 2: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 5: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 11: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 12: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 13: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

* Minimizing test suite
[MASTER] 02:36:40.678 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[57];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 1: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 2: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[4];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[12];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[93];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 5: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[68];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
FromClient fromClient = new FromClient();
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 12: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[24];
byteArray[0] = (byte)26;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 13: 
MockSocket mockSocket = new MockSocket();
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data(mockSocket);
mockSocket.close();
byte[] byteArray = new byte[19];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 60
* Number of covered goals: 35
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Generated 14 tests with total length 96
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:36:40.719 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 02:36:43.259 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Writing tests to file
[MASTER] 02:36:44.271 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'FromClient_ESTest' to evosuite-tests
* Writing JUnit test case 'FromClient_Original_ESTest' to evosuite-tests
* Done!

* Computation finished
