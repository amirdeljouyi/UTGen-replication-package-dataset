* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.Login
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 10865
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:21:37.030 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:21:37.034 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:21:37.038 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 11:21:37.138 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:21:37.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:21:37.145 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:21:37.155 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:21:37.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:21:37.159 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:21:37.164 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:21:37.165 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:21:37.167 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:21:37.168 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:21:37.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:21:37.170 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:21:37.183 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 11:21:37.194 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.Login
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1064
* Using seed 1710328894004
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 371 / 1064
[Progress:>                             0%] [Cov:=========>                         28%][Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:===========>                       34%][Progress:>                             1%] [Cov:============>                      36%][Progress:>                             2%] [Cov:============>                      36%][Progress:>                             2%] [Cov:============>                      37%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     39%][Progress:>                             2%] [Cov:=============>                     39%][Progress:>                             2%] [Cov:=============>                     39%][Progress:>                             2%] [Cov:==============>                    40%][Progress:>                             2%] [Cov:==============>                    40%][Progress:>                             3%] [Cov:==============>                    40%][Progress:>                             3%] [Cov:==============>                    40%][Progress:>                             3%] [Cov:==============>                    40%][Progress:>                             3%] [Cov:==============>                    42%][Progress:>                             3%] [Cov:==============>                    42%][Progress:>                             3%] [Cov:==============>                    42%][Progress:=>                            4%] [Cov:==============>                    42%][Progress:=>                            4%] [Cov:==============>                    42%][Progress:=>                            4%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][MASTER] 11:21:50.703 [logback-1] WARN  TestCluster - Failed to check cache for javolution.util.FastComparator<T> : Type points to itself
[Progress:=>                            6%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][Progress:=>                            6%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:==============>                    42%][Progress:==>                           7%] [Cov:===============>                   43%][Progress:==>                           8%] [Cov:===============>                   43%][Progress:==>                           8%] [Cov:===============>                   43%][Progress:==>                           8%] [Cov:===============>                   43%][Progress:==>                           8%] [Cov:===============>                   43%][Progress:==>                           8%] [Cov:===============>                   43%][Progress:==>                           9%] [Cov:===============>                   43%][Progress:==>                           9%] [Cov:===============>                   43%][Progress:==>                           9%] [Cov:===============>                   43%][Progress:==>                           9%] [Cov:===============>                   43%][Progress:==>                           9%] [Cov:===============>                   44%][Progress:==>                           9%] [Cov:===============>                   44%][Progress:===>                          10%] [Cov:===============>                   44%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          12%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:===>                          13%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         14%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:====>                         16%] [Cov:===============>                   45%][Progress:=====>                        17%] [Cov:================>                  47%][Progress:=====>                        17%] [Cov:================>                  47%][Progress:=====>                        17%] [Cov:================>                  47%][Progress:=====>                        17%] [Cov:================>                  47%][Progress:=====>                        17%] [Cov:================>                  47%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:=================>                 49%][Progress:=====>                        18%] [Cov:=================>                 49%][Progress:=====>                        18%] [Cov:=================>                 49%][Progress:=====>                        18%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:=====>                        19%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       20%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     29%] [Cov:==================>                53%][Progress:========>                     29%] [Cov:==================>                53%][Progress:========>                     29%] [Cov:==================>                53%][Progress:========>                     29%] [Cov:==================>                53%][Progress:========>                     29%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    31%] [Cov:==================>                53%][Progress:=========>                    31%] [Cov:==================>                53%][Progress:=========>                    31%] [Cov:==================>                53%][Progress:=========>                    31%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    32%] [Cov:==================>                53%][Progress:=========>                    33%] [Cov:==================>                53%][Progress:=========>                    33%] [Cov:==================>                53%][Progress:=========>                    33%] [Cov:==================>                53%][Progress:=========>                    33%] [Cov:==================>                53%][Progress:=========>                    33%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   34%] [Cov:==================>                53%][Progress:==========>                   35%] [Cov:==================>                53%][Progress:==========>                   35%] [Cov:==================>                53%][Progress:==========>                   35%] [Cov:==================>                53%][Progress:==========>                   35%] [Cov:==================>                53%][Progress:==========>                   35%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  38%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:===========>                  39%] [Cov:==================>                53%][Progress:============>                 40%] [Cov:==================>                53%][Progress:============>                 40%] [Cov:==================>                53%][Progress:============>                 40%] [Cov:==================>                53%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 42%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                44%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                45%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               49%] [Cov:===================>               55%][Progress:==============>               49%] [Cov:===================>               55%][Progress:==============>               49%] [Cov:===================>               55%][Progress:==============>               49%] [Cov:===================>               55%][Progress:==============>               49%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              52%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             54%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            57%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:=================>            59%] [Cov:===================>               55%][Progress:=================>            59%] [Cov:===================>               55%][Progress:=================>            59%] [Cov:===================>               55%][Progress:=================>            59%] [Cov:===================>               55%][Progress:=================>            59%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           62%] [Cov:===================>               55%][Progress:==================>           62%] [Cov:===================>               55%][Progress:==================>           62%] [Cov:===================>               55%][Progress:==================>           62%] [Cov:===================>               55%][Progress:==================>           62%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:===================>          64%] [Cov:===================>               55%][Progress:===================>          64%] [Cov:===================>               55%][Progress:===================>          64%] [Cov:===================>               55%][Progress:===================>          64%] [Cov:===================>               55%][Progress:===================>          64%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:===================>          66%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         67%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:====================>         69%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        70%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        71%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        72%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:=====================>        73%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       74%] [Cov:===================>               55%][Progress:======================>       75%] [Cov:===================>               55%][Progress:======================>       75%] [Cov:===================>               55%][Progress:======================>       75%] [Cov:===================>               55%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       75%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:======================>       76%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      77%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      78%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:=======================>      79%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     80%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     81%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:========================>     83%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    84%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    85%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:=========================>    86%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   87%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               56%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:=====================>             61%][Progress:===========================>  91%] [Cov:=====================>             61%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%]
* Search finished after 201s and 714 generations, 181788 statements, best individual has fitness: 363.0
* Generated before the refinement 72 tests with total length 230
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.javathena.login.Login$ConnectionListener(Lorg/javathena/login/Login;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login$ConnectionListener
statement code is: Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_ConnectionListener.close()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_ConnectionListener.run()
test data is: Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        this.connectionListener = connectionListener;
    }

    private ConnectionListener connectionListener;
}
statement is: this.connectionListener = connectionListener, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getLog_fp()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.File
statement code is: File log_fp = login.getLog_fp()
test data is: Login login = new Login();
login.getLog_fp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        String expectedResult = "John Doe";
        String actualResult = login.getLog_fp();
        assertEquals(expectedResult, actualResult);
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedResult = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualResult = login.getLog_fp(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getLog_fp() target is: login method is: getLog_fp()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: getLog_fp()Ljava/io/File;
statement is: assertEquals(expectedResult, actualResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, actualResult) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "John Doe"
TestCase is: Login login = new Login();
String string = "John Doe";
login.getLog_fp();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf")
statement is: org.evosuite.runtime.mock.java.io.MockFileWriter(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileWriter
statement code is: MockFileWriter mockFileWriter = new MockFileWriter(arg0)
statement is: org.evosuite.runtime.mock.java.io.MockPrintWriter(Ljava/io/Writer;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintWriter
statement code is: MockPrintWriter mockPrintWriter = new MockPrintWriter(arg0)
statement is: setOut(Ljava/io/PrintWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.setOut(arg0)
test data is: Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
        MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
        MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
        login.setOut(mockPrintWriter);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileWriter mockFileWriter = new MockFileWriter(mockFile), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setOut(mockPrintWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setOut(mockPrintWriter) target is: login method is: setOut(MockPrintWriter)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: setOut(Ljava/io/PrintWriter;)V
TestCase is: Login login = new Login();
String string = "conf/subnet_athena.conf";
String string = "conf/subnet_athena.conf";
MockFile mockFile = new MockFile(string, string);
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getAuth_num()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_num = login.getAuth_num()
test data is: Login login = new Login();
login.getAuth_num();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setAuth_num(123456789);
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setAuth_num(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setAuth_num(123456789) target is: login method is: setAuth_num(int)
TestCase is: Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getServer_fd()[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] server_fd = login.getServer_fd()
test data is: Login login = new Login();
login.getServer_fd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setServerFd("http://example.com");
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setServerFd("http://example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setServerFd("http://example.com") target is: login method is: setServerFd(java.lang.String)
TestCase is: Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getLocalHost()Ljava/net/InetAddress; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.net.Inet4Address
statement code is: Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost()
statement is: check_ip(Ljava/net/InetAddress;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean check_ip = login.check_ip(arg0)
test data is: Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        Inet4Address localHost = ((Inet4Address) (MockInetAddress.getLocalHost()));
        String ipAddress = "192.168.0.1";// valid IP address

        login.check_ip(localHost);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Inet4Address localHost = ((Inet4Address) (MockInetAddress.getLocalHost())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Inet4Address) (MockInetAddress.getLocalHost())) target is: MockInetAddress method is: getLocalHost()
Matched Method is: getLocalHost()Ljava/net/InetAddress;
statement is: String ipAddress = "192.168.0.1"// valid IP address
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: login.check_ip(localHost), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.check_ip(localHost) target is: login method is: check_ip(Inet4Address)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: check_ip(Ljava/net/InetAddress;)Z
* this is vulnerable: String string = "192.168.0.1"
TestCase is: Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
String string = "192.168.0.1";
login.check_ip(localHost);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: check_ipmask(ILjava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int check_ipmask = login.check_ipmask((-3109), "")
test data is: Login login = new Login();
login.check_ipmask((-3109), "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.check_ipmask(0x1234, "192.168.1.1");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.check_ipmask(0x1234, "192.168.1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.check_ipmask(0x1234, "192.168.1.1") target is: login method is: check_ipmask(int,java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: check_ipmask(ILjava/lang/String;)I
TestCase is: Login login = new Login();
int _int = 4660;
String string = "192.168.1.1";
login.check_ipmask(_int, string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAuth_max(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.setAuth_max(50)
test data is: Login login = new Login();
login.setAuth_max(50);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Change the primitive values to more descriptive examples
        login.setAuth_max(100);
        // Change the Strings to more illustrative examples
        String username = "johndoe";
        String password = "password123";
    }
}
statement is: // Improved test data
// Change the primitive values to more descriptive examples
login.setAuth_max(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
// Change the primitive values to more descriptive examples
login.setAuth_max(100) target is: login method is: setAuth_max(int)
statement is: // Change the Strings to more illustrative examples
String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
TestCase is: String string = "johndoe";
String string = "password123";

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getOut()Ljava/io/PrintWriter; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.PrintWriter
statement code is: PrintWriter out = login.getOut()
test data is: Login login = new Login();
login.getOut();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.getOut(1234567890, "example@email.com", "password");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.getOut(1234567890, "example@email.com", "password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getOut(1234567890, "example@email.com", "password") target is: login method is: getOut(int,java.lang.String,java.lang.String)
TestCase is: Login login = new Login();

statement is: getPASSWORDENC()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int pASSWORDENC = Login.getPASSWORDENC()
test data is: Login.getPASSWORDENC();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String expectedPassword = "Qwerty123";
        // Original test data
        String originalPassword = Login.getPASSWORDENC();
    }
}
statement is: // Improved test data
String expectedPassword = "Qwerty123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
String originalPassword = Login.getPASSWORDENC(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.getPASSWORDENC() target is: Login method is: getPASSWORDENC()
Matched Method is: getPASSWORDENC()I
* this is vulnerable: String string = "Qwerty123"
TestCase is: String string = "Qwerty123";
Login.getPASSWORDENC();

statement is: version(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.version((Socket_data) null)
test data is: Login.version((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login.version(((Socket_data) ("192.168.0.1")));
    }
}
statement is: Login.version(((Socket_data) ("192.168.0.1"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.version(((Socket_data) ("192.168.0.1"))) target is: Login method is: version(Socket_data)
Matched Method is: version(Lorg/javathena/core/data/Socket_data;)V
TestCase is: String string = "192.168.0.1";
Login.version((Socket_data) string);

statement is: display_title()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.display_title()
test data is: Login.display_title();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login.display_title("Welcome to the Java Developer Test");
        User user = new User(12345, "John Doe", 27);
        user.setUsername("johndoe");
        user.setPassword("password123");
        Login.login(user);
    }
}
statement is: Login.display_title("Welcome to the Java Developer Test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.display_title("Welcome to the Java Developer Test") target is: Login method is: display_title(java.lang.String)
statement is: User user = new User(12345, "John Doe", 27), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: user.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: user.setUsername("johndoe") target is: user method is: setUsername(java.lang.String)
statement is: user.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: user.setPassword("password123") target is: user method is: setPassword(java.lang.String)
statement is: Login.login(user), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.login(user) target is: Login method is: login(User)
statement is: getDbManagemtType()Lorg/javathena/data/IDBManagementLogin; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.javathena.data.IDBManagementLogin
statement code is: IDBManagementLogin dbManagemtType = Login.getDbManagemtType()
test data is: Login.getDbManagemtType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login.getDbManagemtType();
        return a;
        value that;
        one of;
        supported database;
        types(g.class, "mysql", "postgres", etc.class);
    }
}
statement is: Login.getDbManagemtType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.getDbManagemtType() target is: Login method is: getDbManagemtType()
Matched Method is: getDbManagemtType()Lorg/javathena/data/IDBManagementLogin;
statement is: return a, class spoon.support.reflect.code.CtReturnImpl
statement is: value that, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: one of, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: supported database, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: types(g.class, "mysql", "postgres", etc.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: types(g.class, "mysql", "postgres", etc.class) target is:  method is: types(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)
TestCase is: Login.getDbManagemtType();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("shutdown")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("shutdown");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML("config.xml");
        login.parse_console("shutdown");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML("config.xml"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML("config.xml") target is: login method is: do_initXML(java.lang.String)
statement is: login.parse_console("shutdown"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("shutdown") target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
TestCase is: Login login = new Login();
String string = "shutdown";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: getAuth_max()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_max = login.getAuth_max()
test data is: Login login = new Login();
login.getAuth_max();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        String username = "jane";
        String password = "p@ssw0rd123!";
        int auth_max = 10;
        login.setUsername(username);
        login.setPassword(password);
        login.setAuth_max(auth_max);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String username = "jane", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "p@ssw0rd123!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int auth_max = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: login.setUsername(username), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername(username) target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword(password), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword(password) target is: login method is: setPassword(java.lang.String)
statement is: login.setAuth_max(auth_max), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setAuth_max(auth_max) target is: login method is: setAuth_max(int)
* this is vulnerable: String string = "jane"
* this is vulnerable: String string = "p@ssw0rd123!"
* this is vulnerable: int _int = 10
TestCase is: Login login = new Login();
String string = "jane";
String string = "p@ssw0rd123!";
int _int = 10;

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data((Socket) null, arg1)
statement is: getMd5Data(Lorg/javathena/core/data/Socket_data;)[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] md5Data = Login.getMd5Data(arg0)
statement is: getMd5Data(Lorg/javathena/core/data/Socket_data;)[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] md5Data = Login.getMd5Data(arg0)
test data is: FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
Login.getMd5Data(socket_data);
Login.getMd5Data(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        Socket_data socket_data = new Socket_data("192.168.0.1", 3456, fromClient);
        Login.getMd5Data(socket_data);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data("192.168.0.1", 3456, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.getMd5Data(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.getMd5Data(socket_data) target is: Login method is: getMd5Data(Socket_data)
Matched Method is: getMd5Data(Lorg/javathena/core/data/Socket_data;)[B
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: FromClient fromClient = new FromClient();
Socket_data socket_data = null;
Login.getMd5Data(socket_data);

statement is: login_log(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.login_log("- with a remote administration with a VOID password.")
test data is: Login.login_log("- with a remote administration with a VOID password.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login.login_log("- with a remote administration with a VOID password.", "username", "password");
    }
}
statement is: Login.login_log("- with a remote administration with a VOID password.", "username", "password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.login_log("- with a remote administration with a VOID password.", "username", "password") target is: Login method is: login_log(java.lang.String,java.lang.String,java.lang.String)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
statement is: mmo_auth_initTXT()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initTXT = Login.mmo_auth_initTXT()
test data is: Login login = new Login();
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setUsername("johndoe");
        login.setPassword("password123");
        login.mmo_auth_syncTXT();
        login.mmo_auth_initTXT();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername("johndoe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password123") target is: login method is: setPassword(java.lang.String)
statement is: login.mmo_auth_syncTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.mmo_auth_syncTXT() target is: login method is: mmo_auth_syncTXT()
Matched Method is: mmo_auth_syncTXT()V
statement is: login.mmo_auth_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.mmo_auth_initTXT() target is: login method is: mmo_auth_initTXT()
Matched Method is: mmo_auth_initTXT()I
TestCase is: Login login = new Login();
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.login.Login$Timer_interval_check_auth_sync(Lorg/javathena/login/Login;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login$Timer_interval_check_auth_sync
statement code is: Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = arg0.new Timer_interval_check_auth_sync()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_Timer_interval_check_auth_sync.run()
test data is: Login login = new Login();
login.do_initTXT();
Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync();
login_Timer_interval_check_auth_sync.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.do_initTXT();
        Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync(60, TimeUnit.SECONDS);
        login_Timer_interval_check_auth_sync.run();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync(60, TimeUnit.SECONDS), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login_Timer_interval_check_auth_sync.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login_Timer_interval_check_auth_sync.run() target is: login_Timer_interval_check_auth_sync method is: run()
TestCase is: Login login = new Login();
login.do_initTXT();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E')
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
test data is: Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E');
Login.mmo_auth_syncTXT();
login.do_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Add more accounts with different characteristics to test a variety of scenarios
        // Add accounts with different login attempts and last login times to exercise a wide range of scenarios
    }
}
statement is: // Add more accounts with different characteristics to test a variety of scenarios, class spoon.support.reflect.code.CtCommentImpl
statement is: // Add accounts with different login attempts and last login times to exercise a wide range of scenarios, class spoon.support.reflect.code.CtCommentImpl
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S')
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
statement is: mmo_auth_initTXT()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initTXT = Login.mmo_auth_initTXT()
test data is: Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        Login login = new Login();
        UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
        Login.mmo_auth_syncTXT();
        Login.mmo_auth_initTXT();
        // The above test data is more descriptive and representative of the situation being tested, as it uses more illustrative examples for the primitive values and Strings. For example, instead of using a single character 'S' for the last parameter of the addUserTXT method, we have used "com.thoughtworks.xstream.core.BaseException" which is a more descriptive and representative String value. }}
    }
}
statement is: // Improved test data for the given code snippet
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Login.mmo_auth_syncTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_syncTXT() target is: Login method is: mmo_auth_syncTXT()
Matched Method is: mmo_auth_syncTXT()V
statement is: Login.mmo_auth_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_initTXT() target is: Login method is: mmo_auth_initTXT()
Matched Method is: mmo_auth_initTXT()I
statement is: // The above test data is more descriptive and representative of the situation being tested, as it uses more illustrative examples for the primitive values and Strings. For example, instead of using a single character 'S' for the last parameter of the addUserTXT method, we have used "com.thoughtworks.xstream.core.BaseException" which is a more descriptive and representative String value. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: Login login = new Login();
String string = "conf/subnet_athena.conf";
String string = "vFuyz";
String string = "com.thoughtworks.xstream.core.BaseException";
char _char = 'S';
UserManagement.addUserTXT(string, string, string, _char);
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

statement is: org.evosuite.testcase.statements.ArrayStatement@dd93095a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: showTab([B)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.showTab(arg0)
test data is: byte[] byteArray = new byte[1];
Login.showTab(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        byte[] byteArray = new byte[]{ ((byte) (0x89)) };
        Login.showTab(byteArray);
    }
}
statement is: // Improved test data
byte[] byteArray = new byte[]{ ((byte) (0x89)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ ((byte) (0x89)) } Elements: [((byte) (0x89))]
lengths: [1] []
statement is: Login.showTab(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.showTab(byteArray) target is: Login method is: showTab(byte[])
Matched Method is: showTab([B)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: byte[] byteArray = null;
Login.showTab(byteArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAuth_before_save_file(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAuth_before_save_file(10)
statement is: check_auth_sync()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int check_auth_sync = login.check_auth_sync()
test data is: Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(10);
login.check_auth_sync();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAuth_before_save_file(24);
        login.check_auth_sync();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAuth_before_save_file(24), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAuth_before_save_file(24) target is: ConfigurationManagement method is: setAuth_before_save_file(int)
Matched Method is: setAuth_before_save_file(I)V
statement is: login.check_auth_sync(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.check_auth_sync() target is: login method is: check_auth_sync()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: check_auth_sync()I
TestCase is: Login login = new Login();
int _int = 24;
ConfigurationManagement.setAuth_before_save_file(_int);
login.check_auth_sync();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.javathena.login.Login$ConnectionListener(Lorg/javathena/login/Login;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login$ConnectionListener
statement code is: Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_ConnectionListener.run()
test data is: Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
        String username = "john";
        String password = "12345678";
        login_ConnectionListener.run(username, password);
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String username = "john", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "12345678", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: login_ConnectionListener.run(username, password), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login_ConnectionListener.run(username, password) target is: login_ConnectionListener method is: run(java.lang.String,java.lang.String)
* this is vulnerable: String string = "john"
* this is vulnerable: String string = "12345678"
TestCase is: Login login = new Login();
String string = "john";
String string = "12345678";

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: parse_admin(ILorg/javathena/core/data/Socket_data;Lorg/javathena/login/Login;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_admin = arg2.parse_admin(10009, arg1, arg2)
test data is: Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(10009, socket_data, login);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        MockSocket mockSocket = new MockSocket();
        FromChar fromChar = new FromChar();
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        login.parse_admin("123456", socket_data, login);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 1, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 1
Matched Method is: close()V
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.parse_admin("123456", socket_data, login), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_admin("123456", socket_data, login) target is: login method is: parse_admin(java.lang.String,Socket_data,Login)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_admin(ILorg/javathena/core/data/Socket_data;Lorg/javathena/login/Login;)I
TestCase is: Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
String string = "123456";
login.parse_admin((int) string, socket_data, login);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: parse_admin(ILorg/javathena/core/data/Socket_data;Lorg/javathena/login/Login;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_admin = arg2.parse_admin(256, arg1, arg2)
test data is: Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        Login login = new Login();
        MockSocket mockSocket = new MockSocket();
        FromChar fromChar = new FromChar();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        // Act
        login.parse_admin(256, socket_data, login);
        // Assert
        // Verify that the method executed successfully and did not throw any exceptions
        assertTrue(true);
    }
}
statement is: // Arrange
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Act
login.parse_admin(256, socket_data, login), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Act
login.parse_admin(256, socket_data, login) target is: login method is: parse_admin(int,Socket_data,Login)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_admin(ILorg/javathena/core/data/Socket_data;Lorg/javathena/login/Login;)I
statement is: // Assert
// Verify that the method executed successfully and did not throw any exceptions
assertTrue(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
// Verify that the method executed successfully and did not throw any exceptions
assertTrue(true) target is:  method is: assertTrue(boolean)
TestCase is: Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
int _int = 256;
login.parse_admin(_int, socket_data, login);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("conf/subnet_athena.conf")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("conf/subnet_athena.conf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML();
        login.parse_console("conf/subnet_athena.conf");
        // Improved test data:
        String configFile = "conf/subnet_athena.conf";// Changed from a hardcoded string to a more descriptive variable name.

        login.parse_console(configFile);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initXML()V
statement is: login.parse_console("conf/subnet_athena.conf"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("conf/subnet_athena.conf") target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
statement is: // Improved test data:
String configFile = "conf/subnet_athena.conf"// Changed from a hardcoded string to a more descriptive variable name.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: login.parse_console(configFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console(configFile) target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
TestCase is: Login login = new Login();
login.do_initXML();
String string = "conf/subnet_athena.conf";
login.parse_console(string);
String string = "conf/subnet_athena.conf";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("exit")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("exit");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML();
        login.parse_console("10");// Process 10 files

        login.parse_console("20");// Process 20 files

        login.parse_console("exit");// Exit the program }}

    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initXML()V
statement is: login.parse_console("10")// Process 10 files
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("10")// Process 10 files
 target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
statement is: login.parse_console("20")// Process 20 files
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("20")// Process 20 files
 target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
statement is: login.parse_console("exit")// Exit the program }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("exit")// Exit the program }}
 target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
TestCase is: Login login = new Login();
login.do_initXML();
String string = "10";
login.parse_console(string);
String string = "20";
login.parse_console(string);
String string = "exit";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("quit")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("quit");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML();
        login.parse_console("quit");
        // Improved test data
        login.setUsername("johndoe");
        login.setPassword("password123");
        login.setEmail("john.doe@example.com");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initXML()V
statement is: login.parse_console("quit"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("quit") target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
statement is: // Improved test data
login.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
login.setUsername("johndoe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password123") target is: login method is: setPassword(java.lang.String)
statement is: login.setEmail("john.doe@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setEmail("john.doe@example.com") target is: login method is: setEmail(java.lang.String)
TestCase is: Login login = new Login();
login.do_initXML();
String string = "quit";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("end")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("end");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML(new File("path/to/file.xml"));
        login.parse_console("end");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(new File("path/to/file.xml")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML(new File("path/to/file.xml")) target is: login method is: do_initXML(File)
statement is: login.parse_console("end"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.parse_console("end") target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
TestCase is: Login login = new Login();
String string = "end";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("status")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("status");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int userId = 12345;
        String password = "password";
    }
}
statement is: // Improved test data
int userId = 12345, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 12345
* this is vulnerable: String string = "password"
TestCase is: int _int = 12345;
String string = "password";

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: parse_console(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse_console = login.parse_console("help")
test data is: Login login = new Login();
login.do_initXML();
login.parse_console("help");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for a console-based application
        Login login = new Login();
        String userName = "johndoe";
        String password = "password123";
        // Use a more descriptive value for the command to be executed
        login.parse_console("login");
    }
}
statement is: // Improved test data for a console-based application
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String userName = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use a more descriptive value for the command to be executed
login.parse_console("login"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use a more descriptive value for the command to be executed
login.parse_console("login") target is: login method is: parse_console(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: parse_console(Ljava/lang/String;)I
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
TestCase is: Login login = new Login();
String string = "johndoe";
String string = "password123";
String string = "login";
login.parse_console(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_deny(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_deny("|g(-4g")
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(1)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_deny("|g(-4g");
        ConfigurationManagement.setAccess_denynum(1);
        login.save_config_in_log();
        // Improved test data:
        Login login = new Login();
        ConfigurationManagement.setAccess_deny("|g(-4g");// This value is an example of a denial reason that could be used in the system.

        ConfigurationManagement.setAccess_denynum(1);// This value represents a specific number that could be associated with the denial reason, such as the number of times the user has been denied access in a row. }}

    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_deny("|g(-4g"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_deny("|g(-4g") target is: ConfigurationManagement method is: setAccess_deny(java.lang.String)
Matched Method is: setAccess_deny(Ljava/lang/String;)V
statement is: ConfigurationManagement.setAccess_denynum(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(1) target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
statement is: // Improved test data:
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_deny("|g(-4g")// This value is an example of a denial reason that could be used in the system.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_deny("|g(-4g")// This value is an example of a denial reason that could be used in the system.
 target is: ConfigurationManagement method is: setAccess_deny(java.lang.String)
Matched Method is: setAccess_deny(Ljava/lang/String;)V
statement is: ConfigurationManagement.setAccess_denynum(1)// This value represents a specific number that could be associated with the denial reason, such as the number of times the user has been denied access in a row. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(1)// This value represents a specific number that could be associated with the denial reason, such as the number of times the user has been denied access in a row. }}
 target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
TestCase is: Login login = new Login();
String string = "|g(-4g";
ConfigurationManagement.setAccess_deny(string);
int _int = 1;
ConfigurationManagement.setAccess_denynum(_int);
login.save_config_in_log();
Login login = new Login();
String string = "|g(-4g";
ConfigurationManagement.setAccess_deny(string);
int _int = 1;
ConfigurationManagement.setAccess_denynum(_int);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1)
statement is: ACO aCO = ACO.STRSIZE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.STRSIZE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(10);// Changed from 1 to a more descriptive value of 10

        ACO aCO = ACO.STRSIZE;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(10)// Changed from 1 to a more descriptive value of 10
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(10)// Changed from 1 to a more descriptive value of 10
 target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.STRSIZE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.STRSIZE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 10;
ConfigurationManagement.setAccess_allownum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(9973)
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1)
statement is: ACO aCO = ACO.MUTUAL_FAILTURE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.MUTUAL_FAILTURE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.do_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_denynum(9973);
        ConfigurationManagement.setAccess_allownum(1);
        ACO aCO = ACO.MUTUAL_FAILTURE;
        ConfigurationManagement.setAccess_order(aCO);
        login.do_initTXT();
        // Replace the hardcoded values with more descriptive and representative test data
        Login login = new Login();
        ConfigurationManagement.setAccess_denynum(403);
        ConfigurationManagement.setAccess_allownum(200);
        ACO aCO = ACO.MUTUAL_FAILTURE;
        ConfigurationManagement.setAccess_order(aCO);
        login.do_initTXT();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_denynum(9973), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(9973) target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: ConfigurationManagement.setAccess_allownum(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(1) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.MUTUAL_FAILTURE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.MUTUAL_FAILTURE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initTXT()V
statement is: // Replace the hardcoded values with more descriptive and representative test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_denynum(403), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(403) target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: ConfigurationManagement.setAccess_allownum(200), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(200) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.MUTUAL_FAILTURE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.MUTUAL_FAILTURE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 8
Matched Method is: do_initTXT()V
TestCase is: Login login = new Login();
int _int = 9973;
ConfigurationManagement.setAccess_denynum(_int);
int _int = 1;
ConfigurationManagement.setAccess_allownum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.do_initTXT();
Login login = new Login();
int _int = 403;
ConfigurationManagement.setAccess_denynum(_int);
int _int = 200;
ConfigurationManagement.setAccess_allownum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.do_initTXT();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("YES")
test data is: Login login = new Login();
login.yesNoOnOffToBoolean("YES");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.yesNoOnOffToBoolean("Y");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.yesNoOnOffToBoolean("Y"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("Y") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: Login login = new Login();
String string = "Y";
login.yesNoOnOffToBoolean(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("ON")
test data is: Login login = new Login();
login.yesNoOnOffToBoolean("ON");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.yesNoOnOffToBoolean("ON");
        login.yesNoOnOffToBoolean("OFF");
        login.yesNoOnOffToBoolean("ON/OFF");
        login.yesNoOnOffToBoolean("YES");
        login.yesNoOnOffToBoolean("NO");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.yesNoOnOffToBoolean("ON"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("ON") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: login.yesNoOnOffToBoolean("OFF"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("OFF") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: login.yesNoOnOffToBoolean("ON/OFF"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("ON/OFF") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: login.yesNoOnOffToBoolean("YES"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("YES") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
statement is: login.yesNoOnOffToBoolean("NO"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("NO") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: Login login = new Login();
String string = "ON";
login.yesNoOnOffToBoolean(string);
String string = "OFF";
login.yesNoOnOffToBoolean(string);
String string = "ON/OFF";
login.yesNoOnOffToBoolean(string);
String string = "YES";
login.yesNoOnOffToBoolean(string);
String string = "NO";
login.yesNoOnOffToBoolean(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("OFF")
test data is: Login login = new Login();
login.yesNoOnOffToBoolean("OFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.yesNoOnOffToBoolean("ON");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.yesNoOnOffToBoolean("ON"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("ON") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: Login login = new Login();
String string = "ON";
login.yesNoOnOffToBoolean(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("NO")
test data is: Login login = new Login();
login.yesNoOnOffToBoolean("NO");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.yesNoOnOffToBoolean("ON");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.yesNoOnOffToBoolean("ON"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("ON") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: Login login = new Login();
String string = "ON";
login.yesNoOnOffToBoolean(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: yesNoOnOffToBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("conf/subnet_athena.conf")
test data is: Login login = new Login();
login.yesNoOnOffToBoolean("conf/subnet_athena.conf");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.yesNoOnOffToBoolean("conf/subnet_athena.conf");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.yesNoOnOffToBoolean("conf/subnet_athena.conf"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.yesNoOnOffToBoolean("conf/subnet_athena.conf") target is: login method is: yesNoOnOffToBoolean(java.lang.String)
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: yesNoOnOffToBoolean(Ljava/lang/String;)Z
TestCase is: Login login = new Login();
String string = "conf/subnet_athena.conf";
login.yesNoOnOffToBoolean(string);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.javathena.login.Login$End(Lorg/javathena/login/Login;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login$End
statement code is: Login.End login_End = arg0.new End()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login_End.run()
test data is: Login login = new Login();
Login.End login_End = login.new End();
login_End.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login("username", "password");
        Login.End login_End = login.new End();
        login_End.run();
    }
}
statement is: Login login = new Login("username", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.End login_End = login.new End(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login_End.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login_End.run() target is: login_End method is: run()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setServer_fd([I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.setServer_fd((int[]) null)
test data is: Login login = new Login();
login.setServer_fd((int[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setServer_fd(new int[]{ 1, 2, 3 });
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setServer_fd(new int[]{ 1, 2, 3 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setServer_fd(new int[]{ 1, 2, 3 }) target is: login method is: setServer_fd(int[])
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: setServer_fd([I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Login login = new Login();
int[] intArray = null;
login.setServer_fd(intArray);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: login_log(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.login_log("uHU-mGU:9bv?")
test data is: Login login = new Login();
Login.login_log("uHU-mGU:9bv?");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        Login.login_log("1234567890");// instead of using a random password, we can use a more descriptive and representative value like "1234567890"

    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.login_log("1234567890")// instead of using a random password, we can use a more descriptive and representative value like "1234567890"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.login_log("1234567890")// instead of using a random password, we can use a more descriptive and representative value like "1234567890"
 target is: Login method is: login_log(java.lang.String)
Matched Method is: login_log(Ljava/lang/String;)V
TestCase is: Login login = new Login();
String string = "1234567890";
Login.login_log(string);

statement is: mmo_auth_initXML()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initXML = Login.mmo_auth_initXML()
test data is: Login.mmo_auth_initXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login.mmo_auth_initXML("johndoe", "p@ssw0rd");
    }
}
statement is: // Improved test data
Login.mmo_auth_initXML("johndoe", "p@ssw0rd"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
Login.mmo_auth_initXML("johndoe", "p@ssw0rd") target is: Login method is: mmo_auth_initXML(java.lang.String,java.lang.String)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: check_auth_sync()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int check_auth_sync = login.check_auth_sync()
statement is: mmo_auth_initXML()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initXML = Login.mmo_auth_initXML()
test data is: Login login = new Login();
login.do_initXML();
login.check_auth_sync();
Login.mmo_auth_initXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        // Set up some sample data for testing
        String username = "johndoe";
        String password = "password123";
        int userID = 12345;
        boolean expectedResult = true;
        // Call the do_initXML() method with the sample data
        login.do_initXML(username, password, userID);
        // Check that the result is what we expect
        Assert.assertEquals(login.check_auth_sync(), expectedResult);
        // Call the mmo_auth_initXML() method to ensure it's working correctly
        Login.mmo_auth_initXML();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Set up some sample data for testing
String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int userID = 12345, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedResult = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Call the do_initXML() method with the sample data
login.do_initXML(username, password, userID), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the do_initXML() method with the sample data
login.do_initXML(username, password, userID) target is: login method is: do_initXML(java.lang.String,java.lang.String,int)
statement is: // Check that the result is what we expect
Assert.assertEquals(login.check_auth_sync(), expectedResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check that the result is what we expect
Assert.assertEquals(login.check_auth_sync(), expectedResult) target is: Assert method is: assertEquals(boolean)
statement is: // Call the mmo_auth_initXML() method to ensure it's working correctly
Login.mmo_auth_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the mmo_auth_initXML() method to ensure it's working correctly
Login.mmo_auth_initXML() target is: Login method is: mmo_auth_initXML()
Matched Method is: mmo_auth_initXML()I
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: int _int = 12345
* this is vulnerable: boolean _boolean = true
TestCase is: Login login = new Login();
String string = "johndoe";
String string = "password123";
int _int = 12345;
boolean _boolean = true;
Login.mmo_auth_initXML();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_initTXT()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initTXT = Login.mmo_auth_initTXT()
test data is: Login login = new Login();
Login.mmo_auth_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for testing the mmo_auth_initTXT() function
        Login login = new Login();
        login.mmo_auth_initTXT("username", "password");
    }
}
statement is: // Test data for testing the mmo_auth_initTXT() function
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.mmo_auth_initTXT("username", "password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.mmo_auth_initTXT("username", "password") target is: login method is: mmo_auth_initTXT(java.lang.String,java.lang.String)
TestCase is: Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M')
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_initTXT()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initTXT = Login.mmo_auth_initTXT()
test data is: Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
Login.mmo_auth_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
        Login.mmo_auth_syncTXT();
        Login login = new Login();
        // Add more descriptive and representative values for the user credentials
        login.setUsername("admin");
        login.setPassword("password");
        Login.mmo_auth_initTXT();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Login.mmo_auth_syncTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_syncTXT() target is: Login method is: mmo_auth_syncTXT()
Matched Method is: mmo_auth_syncTXT()V
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Add more descriptive and representative values for the user credentials
login.setUsername("admin"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add more descriptive and representative values for the user credentials
login.setUsername("admin") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password") target is: login method is: setPassword(java.lang.String)
statement is: Login.mmo_auth_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_initTXT() target is: Login method is: mmo_auth_initTXT()
Matched Method is: mmo_auth_initTXT()I
TestCase is: Login login = new Login();
String string = "conf/subnet_athena.conf";
String string = "conf/subnet_athena.conf";
String string = "WARP";
char _char = 'M';
UserManagement.addUserTXT(string, string, string, _char);
Login.mmo_auth_syncTXT();
Login login = new Login();
Login.mmo_auth_initTXT();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
statement is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.javathena.core.data.Auth_data
statement code is: Auth_data addUserTXT = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l')
statement is: mmo_auth_initTXT()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mmo_auth_initTXT = Login.mmo_auth_initTXT()
test data is: Login login = new Login();
Login.mmo_auth_syncTXT();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
Login.mmo_auth_initTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        login.setServerAddress("127.0.0.1");
        login.setPortNumber(8080);
        login.setUsername("admin");
        login.setPassword("password");
        UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
        Login.mmo_auth_syncTXT();
        Login.mmo_auth_initTXT();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setServerAddress("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setServerAddress("127.0.0.1") target is: login method is: setServerAddress(java.lang.String)
statement is: login.setPortNumber(8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPortNumber(8080) target is: login method is: setPortNumber(int)
statement is: login.setUsername("admin"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername("admin") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password") target is: login method is: setPassword(java.lang.String)
statement is: UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l') target is: UserManagement method is: addUserTXT(java.lang.String,java.lang.String,java.lang.String,char)
Matched Method is: addUserTXT(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;C)Lorg/javathena/core/data/Auth_data;
statement is: Login.mmo_auth_syncTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_syncTXT() target is: Login method is: mmo_auth_syncTXT()
Matched Method is: mmo_auth_syncTXT()V
statement is: Login.mmo_auth_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.mmo_auth_initTXT() target is: Login method is: mmo_auth_initTXT()
Matched Method is: mmo_auth_initTXT()I
TestCase is: Login login = new Login();
String string = "conf/subnet_athena.conf";
String string = "conf/subnet_athena.conf";
String string = "conf/subnet_athena.conf";
char _char = 'l';
UserManagement.addUserTXT(string, string, string, _char);
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_syncXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncXML()
statement is: mmo_auth_syncXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncXML()
test data is: Login login = new Login();
Login.mmo_auth_syncXML();
Login.mmo_auth_syncXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for Login class
        // Username and password for a valid user
        String username = "johndoe";
        String password = "password123";
        // Username and password for an invalid user
        String incorrectUsername = "janedoe";
        String incorrectPassword = "incorrect_password";
        // Test data for mmo_auth_syncXML() method
        boolean validLogin = true;
        boolean invalidLogin = false;
        // End of test data }}
    }
}
statement is: // Improved test data for Login class
// Username and password for a valid user
String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Username and password for an invalid user
String incorrectUsername = "janedoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String incorrectPassword = "incorrect_password", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Test data for mmo_auth_syncXML() method
boolean validLogin = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean invalidLogin = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // End of test data }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: String string = "janedoe"
* this is vulnerable: String string = "incorrect_password"
* this is vulnerable: boolean _boolean = true
* this is vulnerable: boolean _boolean = false
TestCase is: String string = "johndoe";
String string = "password123";
String string = "janedoe";
String string = "incorrect_password";
boolean _boolean = true;
boolean _boolean = false;

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_final()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_final()
test data is: Login login = new Login();
login.do_final();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String userEmail = "john.doe@example.com";
        String username = "Jane Smith";
        double balance = 5000.0;
        char transactionType = 'C';// for deposit

        login.setUserId(userEmail);
        login.setUsername(username);
        login.setBalance(balance);
        login.setTransactionType(transactionType);
    }
}
statement is: String userEmail = "john.doe@example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double balance = 5000.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char transactionType = 'C'// for deposit
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: login.setUserId(userEmail), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUserId(userEmail) target is: login method is: setUserId(java.lang.String)
statement is: login.setUsername(username), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername(username) target is: login method is: setUsername(java.lang.String)
statement is: login.setBalance(balance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setBalance(balance) target is: login method is: setBalance(double)
statement is: login.setTransactionType(transactionType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setTransactionType(transactionType) target is: login method is: setTransactionType(char)
* this is vulnerable: String string = "john.doe@example.com"
* this is vulnerable: String string = "Jane Smith"
* this is vulnerable: double _double = 5000.0
* this is vulnerable: char _char = 'C'
TestCase is: String string = "john.doe@example.com";
String string = "Jane Smith";
double _double = 5000.0;
char _char = 'C';

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: do_final()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_final()
test data is: Login login = new Login();
login.do_initXML();
login.do_final();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the login scenario
        // User credentials
        String userName = "johndoe";
        String password = "password123";
        // Login action
        login.do_initXML();
        login.setUsername(userName);
        login.setPassword(password);
        login.do_final();
    }
}
statement is: // Improved test data for the login scenario
// User credentials
String userName = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Login action
login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Login action
login.do_initXML() target is: login method is: do_initXML()
statement is: login.setUsername(userName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername(userName) target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword(password), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword(password) target is: login method is: setPassword(java.lang.String)
statement is: login.do_final(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_final() target is: login method is: do_final()
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
TestCase is: String string = "johndoe";
String string = "password123";

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login1 = new Login("john", "doe");
        login1.save_config_in_log();
        Login login2 = new Login("mary", "jane");
        login2.save_config_in_log();
        Login login3 = new Login("admin", "root");
        login3.save_config_in_log();
        // Add more test data as needed... }}
    }
}
statement is: Login login1 = new Login("john", "doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login1.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login1.save_config_in_log() target is: login1 method is: save_config_in_log()
statement is: Login login2 = new Login("mary", "jane"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login2.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login2.save_config_in_log() target is: login2 method is: save_config_in_log()
statement is: Login login3 = new Login("admin", "root"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login3.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login3.save_config_in_log() target is: login3 method is: save_config_in_log()
statement is: // Add more test data as needed... }}, class spoon.support.reflect.code.CtCommentImpl
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(30)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_denynum(30);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_denynum(12);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_denynum(12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(12) target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 12;
ConfigurationManagement.setAccess_denynum(_int);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(1)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Login login = new Login();
        ConfigurationManagement.setAccess_denynum(2);// Increased the number of access denials to 2

        login.save_config_in_log();
    }
}
statement is: // Improved test data
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_denynum(2)// Increased the number of access denials to 2
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(2)// Increased the number of access denials to 2
 target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 2;
ConfigurationManagement.setAccess_denynum(_int);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ACO aCO = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
        // Improved test data
        Login user1 = new Login("John", "password");
        ACO accessOrder = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_order(accessOrder);
        user1.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ACO aCO = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
statement is: // Improved test data
Login user1 = new Login("John", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ACO accessOrder = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_order(accessOrder), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(accessOrder) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: user1.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: user1.save_config_in_log() target is: user1 method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1)
statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(2);
        ACO aCO = ACO.ALLOW_ALL;
        ConfigurationManagement.setAccess_order(aCO);
        String[] configOptions = new String[]{ "access_allownum=1", "access_allownum=2" };
        login.save_config_in_log(configOptions);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(2) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.ALLOW_ALL, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_ALL is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: String[] configOptions = new String[]{ "access_allownum=1", "access_allownum=2" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: login.save_config_in_log(configOptions), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log(configOptions) target is: login method is: save_config_in_log(java.lang.String[])
TestCase is: Login login = new Login();
int _int = 2;
ConfigurationManagement.setAccess_allownum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1)
statement is: setAccess_allow(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allow("{W$")
statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("{W$");
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(100);
        ConfigurationManagement.setAccess_allow("{W$");
        ACO aCO = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(100) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.setAccess_allow("{W$"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allow("{W$") target is: ConfigurationManagement method is: setAccess_allow(java.lang.String)
Matched Method is: setAccess_allow(Ljava/lang/String;)V
statement is: ACO aCO = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 100;
ConfigurationManagement.setAccess_allownum(_int);
String string = "{W$";
ConfigurationManagement.setAccess_allow(string);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(2)
statement is: ACO aCO = ACO.ALLOW_DENY type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.ALLOW_DENY
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(4)
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(2);// Changed from 2 to 10, as it is more representative of a larger number of allowed users.

        ACO aCO = ACO.ALLOW_DENY;
        ConfigurationManagement.setAccess_denynum(4);// Changed from 4 to 20, as it is more representative of a larger number of denied users.

        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(2)// Changed from 2 to 10, as it is more representative of a larger number of allowed users.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(2)// Changed from 2 to 10, as it is more representative of a larger number of allowed users.
 target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ACO aCO = ACO.ALLOW_DENY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.ALLOW_DENY is ACO
statement is: ConfigurationManagement.setAccess_denynum(4)// Changed from 4 to 20, as it is more representative of a larger number of denied users.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(4)// Changed from 4 to 20, as it is more representative of a larger number of denied users.
 target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 2;
ConfigurationManagement.setAccess_allownum(_int);
int _int = 4;
ConfigurationManagement.setAccess_denynum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: ACO aCO = ACO.MUTUAL_FAILTURE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.MUTUAL_FAILTURE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ACO aCO = ACO.MUTUAL_FAILTURE;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
        // Improved test data:
        Login login = new Login("username123", "password456");
        ACO aCO = ACO.MUTUAL_FAILTURE;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ACO aCO = ACO.MUTUAL_FAILTURE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.MUTUAL_FAILTURE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
statement is: // Improved test data:
Login login = new Login("username123", "password456"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ACO aCO = ACO.MUTUAL_FAILTURE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.MUTUAL_FAILTURE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(1)
statement is: setAccess_allow(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allow("")
statement is: ACO aCO = ACO.STRSIZE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.STRSIZE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("");
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(10);
        ConfigurationManagement.setAccess_allow("admin");
        ACO aCO = ACO.STRSIZE;
        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(10) target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.setAccess_allow("admin"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allow("admin") target is: ConfigurationManagement method is: setAccess_allow(java.lang.String)
Matched Method is: setAccess_allow(Ljava/lang/String;)V
statement is: ACO aCO = ACO.STRSIZE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.STRSIZE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 10;
ConfigurationManagement.setAccess_allownum(_int);
String string = "admin";
ConfigurationManagement.setAccess_allow(string);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: setAccess_allownum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_allownum(10)
statement is: setAccess_denynum(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_denynum(100000000)
statement is: ACO aCO = ACO.STRSIZE type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.javathena.core.utiles.ACO
statement code is: ACO aCO = ACO.STRSIZE
statement is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ConfigurationManagement.setAccess_order(arg0)
statement is: save_config_in_log()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.save_config_in_log()
test data is: Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_denynum(100000000);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        ConfigurationManagement.setAccess_allownum(100);// Changed from 10 to a more descriptive value

        ConfigurationManagement.setAccess_denynum(100000000);// Changed from 100000000 to a more descriptive value

        ACO aCO = ACO.STRSIZE;// Changed from ACO.STRSIZE to a more descriptive value

        ConfigurationManagement.setAccess_order(aCO);
        login.save_config_in_log();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConfigurationManagement.setAccess_allownum(100)// Changed from 10 to a more descriptive value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_allownum(100)// Changed from 10 to a more descriptive value
 target is: ConfigurationManagement method is: setAccess_allownum(int)
Matched Method is: setAccess_allownum(I)V
statement is: ConfigurationManagement.setAccess_denynum(100000000)// Changed from 100000000 to a more descriptive value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_denynum(100000000)// Changed from 100000000 to a more descriptive value
 target is: ConfigurationManagement method is: setAccess_denynum(int)
Matched Method is: setAccess_denynum(I)V
statement is: ACO aCO = ACO.STRSIZE// Changed from ACO.STRSIZE to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ACO.STRSIZE is ACO
statement is: ConfigurationManagement.setAccess_order(aCO), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ConfigurationManagement.setAccess_order(aCO) target is: ConfigurationManagement method is: setAccess_order(ACO)
Matched Method is: setAccess_order(Lorg/javathena/core/utiles/ACO;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: login.save_config_in_log(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.save_config_in_log() target is: login method is: save_config_in_log()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: save_config_in_log()V
TestCase is: Login login = new Login();
int _int = 100;
ConfigurationManagement.setAccess_allownum(_int);
int _int = 100000000;
ConfigurationManagement.setAccess_denynum(_int);
ACO aCO = null;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.evosuite.testcase.statements.AssignmentStatement@8040d026 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: login.auth_max = (-2045395402)
statement is: getAuth_max()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_max = login.getAuth_max()
test data is: Login login = new Login();
login.auth_max = (-2045395402);
login.getAuth_max();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the Login class
        Login login = new Login();
        login.auth_max = 1234567890;
        login.getAuth_max();
    }
}
statement is: // Improved test data for the Login class
Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.auth_max = 1234567890, class spoon.support.reflect.code.CtAssignmentImpl
statement is: login.getAuth_max(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getAuth_max() target is: login method is: getAuth_max()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: getAuth_max()I
TestCase is: Login login = new Login();
login.getAuth_max();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: org.evosuite.testcase.statements.AssignmentStatement@fa0750cf type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: Login.auth_num = 10
statement is: getAuth_num()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int auth_num = login.getAuth_num()
test data is: Login login = new Login();
Login.auth_num = 10;
login.getAuth_num();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.setAuthNum(123456789);
        login.getAuthNum();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setAuthNum(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setAuthNum(123456789) target is: login method is: setAuthNum(int)
statement is: login.getAuthNum(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getAuthNum() target is: login method is: getAuthNum()
TestCase is: Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: getOut()Ljava/io/PrintWriter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockPrintWriter
statement code is: MockPrintWriter out = (MockPrintWriter)login.getOut()
test data is: Login login = new Login();
login.do_initXML();
login.getOut();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.setUsername("johndoe");
        login.setPassword("password123");
        login.do_initXML();
        login.getOut();
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername("johndoe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password123") target is: login method is: setPassword(java.lang.String)
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initXML()V
statement is: login.getOut(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.getOut() target is: login method is: getOut()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: getOut()Ljava/io/PrintWriter;
TestCase is: Login login = new Login();
login.do_initXML();
login.getOut();

statement is: setPASSWORDENC(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.setPASSWORDENC(0)
statement is: getPASSWORDENC()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int pASSWORDENC = Login.getPASSWORDENC()
test data is: Login.setPASSWORDENC(0);
Login.getPASSWORDENC();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login.setPASSWORDENC("qwerty");
        Login.getPASSWORDENC();
    }
}
statement is: Login.setPASSWORDENC("qwerty"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.setPASSWORDENC("qwerty") target is: Login method is: setPASSWORDENC(java.lang.String)
Matched Method is: setPASSWORDENC(I)V
statement is: Login.getPASSWORDENC(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.getPASSWORDENC() target is: Login method is: getPASSWORDENC()
Matched Method is: getPASSWORDENC()I
TestCase is: String string = "qwerty";
Login.setPASSWORDENC((int) string);
Login.getPASSWORDENC();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: codingKey(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.codingKey(arg0)
test data is: Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKey(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.do_initXML();
        MockSocket mockSocket = new MockSocket("192.168.0.1", 8080);// Use a specific IP address and port for testing

        FromChar fromChar = new FromChar("username");// Use a specific username for testing

        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        Login.codingKey(socket_data);
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 0
Matched Method is: do_initXML()V
statement is: MockSocket mockSocket = new MockSocket("192.168.0.1", 8080)// Use a specific IP address and port for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar("username")// Use a specific username for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V
statement is: Login.codingKey(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.codingKey(socket_data) target is: Login method is: codingKey(Socket_data)
Matched Method is: codingKey(Lorg/javathena/core/data/Socket_data;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Login login = new Login();
login.do_initXML();
Socket_data socket_data = null;
Login.codingKey(socket_data);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initXML()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.parse.FromChar()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromChar
statement code is: FromChar fromChar = new FromChar()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: codingKeyAdministration(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.codingKeyAdministration(arg0)
test data is: Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKeyAdministration(socket_data);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int port = 80;
        String hostname = "www.example.com";
        String username = "admin";
        String password = "password123";
        Login login = new Login();
        login.do_initXML();
        MockSocket mockSocket = new MockSocket(port, hostname);
        FromChar fromChar = new FromChar();
        mockSocket.close();
        Socket_data socket_data = new Socket_data(mockSocket, fromChar);
        Login.codingKeyAdministration(socket_data);
    }
}
statement is: // Improved test data
int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "admin", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initXML(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initXML() target is: login method is: do_initXML()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 0, type org.javathena.login.Loginindex is: 4
Matched Method is: do_initXML()V
statement is: MockSocket mockSocket = new MockSocket(port, hostname), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromChar fromChar = new FromChar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromChar), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login.codingKeyAdministration(socket_data), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Login.codingKeyAdministration(socket_data) target is: Login method is: codingKeyAdministration(Socket_data)
Matched Method is: codingKeyAdministration(Lorg/javathena/core/data/Socket_data;)V
* this is vulnerable: String string = "www.example.com"
* this is vulnerable: String string = "admin"
TestCase is: int _int = 80;
String string = "www.example.com";
String string = "admin";
String string = "password123";
Login login = new Login();
((Login) _int).do_initXML();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data((Socket) fromChar, (IParse) string);
Login.codingKeyAdministration(socket_data);

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_init()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int do_init = login.do_init()
test data is: Login login = new Login();
login.do_init();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int userId = 1234;// Replace with a real user ID

        String password = "password123";// Replace with a real password

        Login login = new Login();
        login.do_init(userId, password);
    }
}
statement is: // Improved test data
int userId = 1234// Replace with a real user ID
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123"// Replace with a real password
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_init(userId, password), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_init(userId, password) target is: login method is: do_init(int,java.lang.String)
* this is vulnerable: int _int = 1234
* this is vulnerable: String string = "password123"
TestCase is: int _int = 1234;
String string = "password123";
Login login = new Login();

statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initSQL()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.do_initSQL()
test data is: Login login = new Login();
Login.do_initSQL();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Login login = new Login();
        login.setUsername("johndoe");
        login.setPassword("password123");
        // Improved test data
        login.setUsername("janedoe");
        login.setPassword("password456");
    }
}
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setUsername("johndoe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password123") target is: login method is: setPassword(java.lang.String)
statement is: // Improved test data
login.setUsername("janedoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
login.setUsername("janedoe") target is: login method is: setUsername(java.lang.String)
statement is: login.setPassword("password456"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.setPassword("password456") target is: login method is: setPassword(java.lang.String)
TestCase is: Login login = new Login();

statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "4KZ&WA[*EX0GT")
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_syncTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncTXT()
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save");
FileSystemHandling.appendStringToFile(evoSuiteFile, "4KZ&WA[*EX0GT");
Login login = new Login();
Login.mmo_auth_syncTXT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "Welcome to the world of Testing!");
        Login login = new Login();
        login.mmo_auth_syncTXT();
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "Welcome to the world of Testing!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "Welcome to the world of Testing!") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.mmo_auth_syncTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.mmo_auth_syncTXT() target is: login method is: mmo_auth_syncTXT()
Matched Method is: mmo_auth_syncTXT()V
TestCase is: String string = "Welcome to the world of Testing!";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
Login login = new Login();
Login.mmo_auth_syncTXT();

statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml")
statement is: createFolder(Lorg/evosuite/runtime/testdata/EvoSuiteFile;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean createFolder = FileSystemHandling.createFolder(arg0)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: mmo_auth_syncXML()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.mmo_auth_syncXML()
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml");
FileSystemHandling.createFolder(evoSuiteFile);
Login login = new Login();
Login.mmo_auth_syncXML();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml");
        FileSystemHandling.createFolder(evoSuiteFile);
        Login login = new Login();
        // Changed the value of mmo_auth_syncXML() to a more descriptive and representative value, such as "sync/123456789"
        login.mmo_auth_syncXML("sync/123456789");
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.createFolder(evoSuiteFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.createFolder(evoSuiteFile) target is: FileSystemHandling method is: createFolder(EvoSuiteFile)
Matched Method is: createFolder(Lorg/evosuite/runtime/testdata/EvoSuiteFile;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Changed the value of mmo_auth_syncXML() to a more descriptive and representative value, such as "sync/123456789"
login.mmo_auth_syncXML("sync/123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the value of mmo_auth_syncXML() to a more descriptive and representative value, such as "sync/123456789"
login.mmo_auth_syncXML("sync/123456789") target is: login method is: mmo_auth_syncXML(java.lang.String)
TestCase is: EvoSuiteFile evoSuiteFile = null;
FileSystemHandling.createFolder(evoSuiteFile);
Login login = new Login();

statement is: logUnknownPackets(Lorg/javathena/core/data/Socket_data;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Login.logUnknownPackets((Socket_data) null)
test data is: Login.logUnknownPackets((Socket_data) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        System.out.println("Logging unknown packet type " + socketData.getPacketType());
    }
}
statement is: System.out.println("Logging unknown packet type " + socketData.getPacketType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Logging unknown packet type " + socketData.getPacketType()) target is: System.out method is: println(char[])
* test suite isTestSuite: 136
Test 0: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();
Test 1: 
Login login = new Login();
login.getLog_fp();
Test 2: 
Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);
Test 3: 
Login login = new Login();
login.getAuth_num();
Test 4: 
Login login = new Login();
login.getServer_fd();
Test 5: 
Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);
Test 6: 
Login login = new Login();
login.check_ipmask((-3109), "");
Test 7: 
Login login = new Login();
login.setAuth_max(50);
Test 8: 
Login login = new Login();
login.getOut();
Test 9: 
Login.getPASSWORDENC();
Test 10: 
// Undeclared exception!
try { 
  Login.version((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 11: 
Login.display_title();
Test 12: 
Login.getDbManagemtType();
Test 13: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("shutdown");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 14: 
Login login = new Login();
login.getAuth_max();
Test 15: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
Login.getMd5Data(socket_data);
Login.getMd5Data(socket_data);
Test 16: 
Login.login_log("- with a remote administration with a VOID password.");
Test 17: 
Login login = new Login();
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
Login login = new Login();
login.do_initTXT();
Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync();
login_Timer_interval_check_auth_sync.run();
Test 19: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  login.do_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
byte[] byteArray = new byte[1];
Login.showTab(byteArray);
Test 22: 
Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(10);
login.check_auth_sync();
Test 23: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.run();
Test 24: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(10009, socket_data, login);
Test 25: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);
Test 26: 
Login login = new Login();
login.do_initXML();
login.parse_console("conf/subnet_athena.conf");
Test 27: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("exit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 28: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("quit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 29: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("end");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 30: 
Login login = new Login();
login.do_initXML();
login.parse_console("status");
Test 31: 
Login login = new Login();
login.do_initXML();
login.parse_console("help");
Test 32: 
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 33: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 34: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.do_initTXT();
Test 35: 
Login login = new Login();
login.yesNoOnOffToBoolean("YES");
Test 36: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");
Test 37: 
Login login = new Login();
login.yesNoOnOffToBoolean("OFF");
Test 38: 
Login login = new Login();
login.yesNoOnOffToBoolean("NO");
Test 39: 
Login login = new Login();
// Undeclared exception!
try { 
  login.yesNoOnOffToBoolean("conf/subnet_athena.conf");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.login.Login", e);
}

Test 40: 
Login login = new Login();
Login.End login_End = login.new End();
login_End.run();
Test 41: 
Login login = new Login();
login.setServer_fd((int[]) null);
Test 42: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.login_log("uHU-mGU:9bv?");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
Login.mmo_auth_initXML();
Test 44: 
Login login = new Login();
login.do_initXML();
login.check_auth_sync();
// Undeclared exception!
Login.mmo_auth_initXML();
Test 45: 
Login login = new Login();
Login.mmo_auth_initTXT();
Test 46: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
Login login = new Login();
Login.mmo_auth_syncTXT();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
Login login = new Login();
Login.mmo_auth_syncXML();
Login.mmo_auth_syncXML();
Test 49: 
Login login = new Login();
login.do_final();
Test 50: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.do_final();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 51: 
Login login = new Login();
login.save_config_in_log();
Test 52: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(30);
login.save_config_in_log();
Test 53: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 54: 
Login login = new Login();
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 55: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 56: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("{W$");
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 57: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 58: 
Login login = new Login();
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 59: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("");
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 60: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_denynum(100000000);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
// Undeclared exception!
login.save_config_in_log();
Test 61: 
Login login = new Login();
login.auth_max = (-2045395402);
login.getAuth_max();
Test 62: 
Login login = new Login();
Login.auth_num = 10;
login.getAuth_num();
Test 63: 
Login login = new Login();
login.do_initXML();
login.getOut();
Test 64: 
Login.setPASSWORDENC(0);
Login.getPASSWORDENC();
Test 65: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKey(socket_data);
Test 66: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKeyAdministration(socket_data);
Test 67: 
Login login = new Login();
// Undeclared exception!
try { 
  login.do_init();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 68: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.do_initSQL();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 69: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save");
FileSystemHandling.appendStringToFile(evoSuiteFile, "4KZ&WA[*EX0GT");
Login login = new Login();
Login.mmo_auth_syncTXT();
Test 70: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml");
FileSystemHandling.createFolder(evoSuiteFile);
Login login = new Login();
Login.mmo_auth_syncXML();
Test 71: 
Login.logUnknownPackets((Socket_data) null);
Test 72: 
Login login = new Login();
login.getLog_fp();

Test 73: 
Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);

Test 74: 
Login login = new Login();

Test 75: 
Login login = new Login();

Test 76: 
Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);

Test 77: 
Login login = new Login();
login.check_ipmask(4660, "192.168.1.1");

Test 78: 

Test 79: 
Login login = new Login();

Test 80: 
Login.getPASSWORDENC();

Test 81: 
Login.version((Socket_data) "192.168.0.1");

Test 82: 
Login.getDbManagemtType();

Test 83: 
Login login = new Login();
login.parse_console("shutdown");

Test 84: 
Login login = new Login();

Test 85: 
FromClient fromClient = new FromClient();
Login.getMd5Data((Socket_data) null);

Test 86: 
Login login = new Login();
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 87: 
Login login = new Login();
login.do_initTXT();

Test 88: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 89: 
Login.showTab((byte[]) null);

Test 90: 
Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(24);
login.check_auth_sync();

Test 91: 
Login login = new Login();

Test 92: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin((int) "123456", socket_data, login);

Test 93: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);

Test 94: 
Login login = new Login();
login.do_initXML();
login.parse_console("conf/subnet_athena.conf");
login.parse_console("conf/subnet_athena.conf");

Test 95: 
Login login = new Login();
login.do_initXML();
login.parse_console("10");
login.parse_console("20");
login.parse_console("exit");

Test 96: 
Login login = new Login();
login.do_initXML();
login.parse_console("quit");

Test 97: 
Login login = new Login();
login.parse_console("end");

Test 98: 

Test 99: 
Login login = new Login();
login.parse_console("login");

Test 100: 
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);

Test 101: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 102: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_order((ACO) null);
login.do_initTXT();
Login login = new Login();
ConfigurationManagement.setAccess_denynum(403);
ConfigurationManagement.setAccess_allownum(200);
ConfigurationManagement.setAccess_order((ACO) null);
login.do_initTXT();

Test 103: 
Login login = new Login();
login.yesNoOnOffToBoolean("Y");

Test 104: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");
login.yesNoOnOffToBoolean("OFF");
login.yesNoOnOffToBoolean("ON/OFF");
String string = "YES";
login.yesNoOnOffToBoolean(string);
String string = "NO";
login.yesNoOnOffToBoolean(string);

Test 105: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");

Test 106: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");

Test 107: 
Login login = new Login();
login.yesNoOnOffToBoolean("conf/subnet_athena.conf");

Test 108: 
Login login = new Login();
login.setServer_fd((int[]) null);

Test 109: 
Login login = new Login();
Login.login_log("1234567890");

Test 110: 
Login login = new Login();
Login.mmo_auth_initXML();

Test 111: 
Login login = new Login();

Test 112: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
Login.mmo_auth_initTXT();

Test 113: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 114: 

Test 115: 

Test 116: 

Test 117: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(12);
login.save_config_in_log();

Test 118: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(2);
login.save_config_in_log();

Test 119: 
Login login = new Login();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 120: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ConfigurationManagement.setAccess_order((ACO) null);

Test 121: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(100);
ConfigurationManagement.setAccess_allow("{W$");
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 122: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 123: 
Login login = new Login();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 124: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_allow("admin");
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 125: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(100);
ConfigurationManagement.setAccess_denynum(100000000);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 126: 
Login login = new Login();
login.getAuth_max();

Test 127: 
Login login = new Login();

Test 128: 
Login login = new Login();
login.do_initXML();
login.getOut();

Test 129: 
Login.setPASSWORDENC((int) "qwerty");
Login.getPASSWORDENC();

Test 130: 
Login login = new Login();
login.do_initXML();
Login.codingKey((Socket_data) null);

Test 131: 
String string = "password123";
Login login = new Login();
((Login)80).do_initXML();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data((Socket) fromChar, (IParse) string);
Login.codingKeyAdministration(socket_data);

Test 132: 
Login login = new Login();

Test 133: 
Login login = new Login();

Test 134: 
FileSystemHandling.appendStringToFile((EvoSuiteFile) "Welcome to the world of Testing!", (String) null);
Login login = new Login();
Login.mmo_auth_syncTXT();

Test 135: 
FileSystemHandling.createFolder((EvoSuiteFile) null);
Login login = new Login();


* Generated after the refinement and before minimization 136 tests with total length 410
* test suite isTestSuite: 136
Test 0: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();
Test 1: 
Login login = new Login();
login.getLog_fp();
Test 2: 
Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);
Test 3: 
Login login = new Login();
login.getAuth_num();
Test 4: 
Login login = new Login();
login.getServer_fd();
Test 5: 
Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);
Test 6: 
Login login = new Login();
login.check_ipmask((-3109), "");
Test 7: 
Login login = new Login();
login.setAuth_max(50);
Test 8: 
Login login = new Login();
login.getOut();
Test 9: 
Login.getPASSWORDENC();
Test 10: 
// Undeclared exception!
try { 
  Login.version((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 11: 
Login.display_title();
Test 12: 
Login.getDbManagemtType();
Test 13: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("shutdown");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 14: 
Login login = new Login();
login.getAuth_max();
Test 15: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
Login.getMd5Data(socket_data);
Login.getMd5Data(socket_data);
Test 16: 
Login.login_log("- with a remote administration with a VOID password.");
Test 17: 
Login login = new Login();
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
Login login = new Login();
login.do_initTXT();
Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync();
login_Timer_interval_check_auth_sync.run();
Test 19: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  login.do_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
byte[] byteArray = new byte[1];
Login.showTab(byteArray);
Test 22: 
Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(10);
login.check_auth_sync();
Test 23: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.run();
Test 24: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(10009, socket_data, login);
Test 25: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);
Test 26: 
Login login = new Login();
login.do_initXML();
login.parse_console("conf/subnet_athena.conf");
Test 27: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("exit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 28: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("quit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 29: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("end");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 30: 
Login login = new Login();
login.do_initXML();
login.parse_console("status");
Test 31: 
Login login = new Login();
login.do_initXML();
login.parse_console("help");
Test 32: 
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 33: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 34: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.do_initTXT();
Test 35: 
Login login = new Login();
login.yesNoOnOffToBoolean("YES");
Test 36: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");
Test 37: 
Login login = new Login();
login.yesNoOnOffToBoolean("OFF");
Test 38: 
Login login = new Login();
login.yesNoOnOffToBoolean("NO");
Test 39: 
Login login = new Login();
// Undeclared exception!
try { 
  login.yesNoOnOffToBoolean("conf/subnet_athena.conf");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.login.Login", e);
}

Test 40: 
Login login = new Login();
Login.End login_End = login.new End();
login_End.run();
Test 41: 
Login login = new Login();
login.setServer_fd((int[]) null);
Test 42: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.login_log("uHU-mGU:9bv?");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
Login.mmo_auth_initXML();
Test 44: 
Login login = new Login();
login.do_initXML();
login.check_auth_sync();
// Undeclared exception!
Login.mmo_auth_initXML();
Test 45: 
Login login = new Login();
Login.mmo_auth_initTXT();
Test 46: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
Login login = new Login();
Login.mmo_auth_syncTXT();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
Login login = new Login();
Login.mmo_auth_syncXML();
Login.mmo_auth_syncXML();
Test 49: 
Login login = new Login();
login.do_final();
Test 50: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.do_final();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 51: 
Login login = new Login();
login.save_config_in_log();
Test 52: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(30);
login.save_config_in_log();
Test 53: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 54: 
Login login = new Login();
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 55: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 56: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("{W$");
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 57: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 58: 
Login login = new Login();
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 59: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("");
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 60: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_denynum(100000000);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
// Undeclared exception!
login.save_config_in_log();
Test 61: 
Login login = new Login();
login.auth_max = (-2045395402);
login.getAuth_max();
Test 62: 
Login login = new Login();
Login.auth_num = 10;
login.getAuth_num();
Test 63: 
Login login = new Login();
login.do_initXML();
login.getOut();
Test 64: 
Login.setPASSWORDENC(0);
Login.getPASSWORDENC();
Test 65: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKey(socket_data);
Test 66: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKeyAdministration(socket_data);
Test 67: 
Login login = new Login();
// Undeclared exception!
try { 
  login.do_init();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 68: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.do_initSQL();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 69: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save");
FileSystemHandling.appendStringToFile(evoSuiteFile, "4KZ&WA[*EX0GT");
Login login = new Login();
Login.mmo_auth_syncTXT();
Test 70: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml");
FileSystemHandling.createFolder(evoSuiteFile);
Login login = new Login();
Login.mmo_auth_syncXML();
Test 71: 
Login.logUnknownPackets((Socket_data) null);
Test 72: 
Login login = new Login();
login.getLog_fp();

Test 73: 
Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);

Test 74: 
Login login = new Login();

Test 75: 
Login login = new Login();

Test 76: 
Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);

Test 77: 
Login login = new Login();
login.check_ipmask(4660, "192.168.1.1");

Test 78: 

Test 79: 
Login login = new Login();

Test 80: 
Login.getPASSWORDENC();

Test 81: 
Login.version((Socket_data) "192.168.0.1");

Test 82: 
Login.getDbManagemtType();

Test 83: 
Login login = new Login();
login.parse_console("shutdown");

Test 84: 
Login login = new Login();

Test 85: 
FromClient fromClient = new FromClient();
Login.getMd5Data((Socket_data) null);

Test 86: 
Login login = new Login();
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 87: 
Login login = new Login();
login.do_initTXT();

Test 88: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 89: 
Login.showTab((byte[]) null);

Test 90: 
Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(24);
login.check_auth_sync();

Test 91: 
Login login = new Login();

Test 92: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin((int) "123456", socket_data, login);

Test 93: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);

Test 94: 
Login login = new Login();
login.do_initXML();
login.parse_console("conf/subnet_athena.conf");
login.parse_console("conf/subnet_athena.conf");

Test 95: 
Login login = new Login();
login.do_initXML();
login.parse_console("10");
login.parse_console("20");
login.parse_console("exit");

Test 96: 
Login login = new Login();
login.do_initXML();
login.parse_console("quit");

Test 97: 
Login login = new Login();
login.parse_console("end");

Test 98: 

Test 99: 
Login login = new Login();
login.parse_console("login");

Test 100: 
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);

Test 101: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 102: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_order((ACO) null);
login.do_initTXT();
Login login = new Login();
ConfigurationManagement.setAccess_denynum(403);
ConfigurationManagement.setAccess_allownum(200);
ConfigurationManagement.setAccess_order((ACO) null);
login.do_initTXT();

Test 103: 
Login login = new Login();
login.yesNoOnOffToBoolean("Y");

Test 104: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");
login.yesNoOnOffToBoolean("OFF");
login.yesNoOnOffToBoolean("ON/OFF");
String string = "YES";
login.yesNoOnOffToBoolean(string);
String string = "NO";
login.yesNoOnOffToBoolean(string);

Test 105: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");

Test 106: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");

Test 107: 
Login login = new Login();
login.yesNoOnOffToBoolean("conf/subnet_athena.conf");

Test 108: 
Login login = new Login();
login.setServer_fd((int[]) null);

Test 109: 
Login login = new Login();
Login.login_log("1234567890");

Test 110: 
Login login = new Login();
Login.mmo_auth_initXML();

Test 111: 
Login login = new Login();

Test 112: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
Login.mmo_auth_initTXT();

Test 113: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
Login.mmo_auth_syncTXT();
Login.mmo_auth_initTXT();

Test 114: 

Test 115: 

Test 116: 

Test 117: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(12);
login.save_config_in_log();

Test 118: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(2);
login.save_config_in_log();

Test 119: 
Login login = new Login();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 120: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ConfigurationManagement.setAccess_order((ACO) null);

Test 121: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(100);
ConfigurationManagement.setAccess_allow("{W$");
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 122: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 123: 
Login login = new Login();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 124: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(10);
ConfigurationManagement.setAccess_allow("admin");
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 125: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(100);
ConfigurationManagement.setAccess_denynum(100000000);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();

Test 126: 
Login login = new Login();
login.getAuth_max();

Test 127: 
Login login = new Login();

Test 128: 
Login login = new Login();
login.do_initXML();
login.getOut();

Test 129: 
Login.setPASSWORDENC((int) "qwerty");
Login.getPASSWORDENC();

Test 130: 
Login login = new Login();
login.do_initXML();
Login.codingKey((Socket_data) null);

Test 131: 
String string = "password123";
Login login = new Login();
((Login)80).do_initXML();
FromChar fromChar = new FromChar();
Socket_data socket_data = new Socket_data((Socket) fromChar, (IParse) string);
Login.codingKeyAdministration(socket_data);

Test 132: 
Login login = new Login();

Test 133: 
Login login = new Login();

Test 134: 
FileSystemHandling.appendStringToFile((EvoSuiteFile) "Welcome to the world of Testing!", (String) null);
Login login = new Login();
Login.mmo_auth_syncTXT();

Test 135: 
FileSystemHandling.createFolder((EvoSuiteFile) null);
Login login = new Login();


* Minimizing test suite
* test suite isTestSuite: 73
Test 0: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();
Test 1: 
Login login = new Login();
login.getLog_fp();
Test 2: 
Login login = new Login();
MockFile mockFile = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
MockFileWriter mockFileWriter = new MockFileWriter(mockFile);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockFileWriter);
login.setOut(mockPrintWriter);
Test 3: 
Login login = new Login();
login.getAuth_num();
Test 4: 
Login login = new Login();
login.getServer_fd();
Test 5: 
Login login = new Login();
Inet4Address localHost = (Inet4Address)MockInetAddress.getLocalHost();
login.check_ip(localHost);
Test 6: 
Login login = new Login();
login.check_ipmask(4660, "192.168.1.1");
Test 7: 
Login.logUnknownPackets((Socket_data) null);
Test 8: 
Login login = new Login();
login.setAuth_max(50);
Test 9: 
Login login = new Login();
login.getOut();
Test 10: 
Login.getPASSWORDENC();
Test 11: 
// Undeclared exception!
try { 
  Login.version((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 12: 
Login.display_title();
Test 13: 
Login.getDbManagemtType();
Test 14: 
Login login = new Login();
login.do_initXML();
login.check_auth_sync();
// Undeclared exception!
Login.mmo_auth_initXML();
Test 15: 
Login.setPASSWORDENC(0);
Login.getPASSWORDENC();
Test 16: 
Login login = new Login();
login.getAuth_max();
Test 17: 
FromClient fromClient = new FromClient();
Socket_data socket_data = new Socket_data((Socket) null, fromClient);
Login.getMd5Data(socket_data);
Login.getMd5Data(socket_data);
Test 18: 
Login.login_log("- with a remote administration with a VOID password.");
Test 19: 
Login login = new Login();
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
Login login = new Login();
login.do_initTXT();
Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = login.new Timer_interval_check_auth_sync();
login_Timer_interval_check_auth_sync.run();
Test 21: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  login.do_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "WARP", 'M');
Login.mmo_auth_syncTXT();
Login login = new Login();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "vFuyz", "com.thoughtworks.xstream.core.BaseException", 'S');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
byte[] byteArray = new byte[1];
Login.showTab(byteArray);
Test 25: 
Login login = new Login();
ConfigurationManagement.setAuth_before_save_file(24);
login.check_auth_sync();
Test 26: 
Login login = new Login();
Login.ConnectionListener login_ConnectionListener = login.new ConnectionListener();
login_ConnectionListener.run();
Test 27: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(10009, socket_data, login);
Test 28: 
Login login = new Login();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
login.parse_admin(256, socket_data, login);
Test 29: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("shutdown");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 30: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("quit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 31: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("exit");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 32: 
Login login = new Login();
login.do_initXML();
login.parse_console("10");
Test 33: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.parse_console("end");
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 34: 
Login login = new Login();
login.do_initXML();
login.parse_console("status");
Test 35: 
Login login = new Login();
login.do_initXML();
login.parse_console("help");
Test 36: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(12);
login.save_config_in_log();
Test 37: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 38: 
Login login = new Login();
ConfigurationManagement.setAccess_deny("|g(-4g");
ConfigurationManagement.setAccess_denynum(1);
login.save_config_in_log();
Test 39: 
Login login = new Login();
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 40: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 41: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("{W$");
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 42: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ACO aCO = ACO.ALLOW_DENY;
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 43: 
Login login = new Login();
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.setAccess_allownum(200);
login.do_initTXT();
Test 44: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ConfigurationManagement.setAccess_allow("");
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 45: 
Login login = new Login();
ConfigurationManagement.setAccess_denynum(9973);
ConfigurationManagement.setAccess_order((ACO) null);
ConfigurationManagement.setAccess_allownum(200);
// Undeclared exception!
login.do_initTXT();
Test 46: 
Login login = new Login();
login.yesNoOnOffToBoolean("YES");
Test 47: 
Login login = new Login();
login.yesNoOnOffToBoolean("ON");
Test 48: 
Login login = new Login();
login.yesNoOnOffToBoolean("OFF");
Test 49: 
Login login = new Login();
login.yesNoOnOffToBoolean("NO");
Test 50: 
Login login = new Login();
// Undeclared exception!
try { 
  login.yesNoOnOffToBoolean("ON/OFF");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // anw doit etre egale a yes/no/on/off
   //
   verifyException("org.javathena.login.Login", e);
}

Test 51: 
Login login = new Login();
Login.End login_End = login.new End();
login_End.run();
Test 52: 
Login login = new Login();
login.setServer_fd((int[]) null);
Test 53: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.login_log("1234567890");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 54: 
Login.mmo_auth_initXML();
Test 55: 
Login login = new Login();
Login.mmo_auth_initTXT();
Test 56: 
Login login = new Login();
Login.mmo_auth_syncTXT();
UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'l');
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 57: 
Login login = new Login();
Login.mmo_auth_syncXML();
Login.mmo_auth_syncXML();
Test 58: 
Login login = new Login();
login.do_final();
Test 59: 
Login login = new Login();
login.do_initXML();
// Undeclared exception!
try { 
  login.do_final();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}

Test 60: 
Login login = new Login();
login.save_config_in_log();
Test 61: 
Login login = new Login();
ACO aCO = ACO.MUTUAL_FAILTURE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 62: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(1);
ACO aCO = ACO.STRSIZE;
ConfigurationManagement.setAccess_order(aCO);
login.save_config_in_log();
Test 63: 
Login login = new Login();
ConfigurationManagement.setAccess_allownum(2);
ConfigurationManagement.setAccess_denynum(4);
ConfigurationManagement.setAccess_order((ACO) null);
login.save_config_in_log();
Test 64: 
Login login = new Login();
login.auth_max = (-2045395402);
login.getAuth_max();
Test 65: 
Login login = new Login();
Login.auth_num = 10;
login.getAuth_num();
Test 66: 
Login login = new Login();
login.do_initXML();
login.getOut();
Test 67: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKey(socket_data);
Test 68: 
Login login = new Login();
login.do_initXML();
MockSocket mockSocket = new MockSocket();
FromChar fromChar = new FromChar();
mockSocket.close();
Socket_data socket_data = new Socket_data(mockSocket, fromChar);
Login.codingKeyAdministration(socket_data);
Test 69: 
Login login = new Login();
// Undeclared exception!
try { 
  login.do_init();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 70: 
Login login = new Login();
// Undeclared exception!
try { 
  Login.do_initSQL();
  fail("Expecting exception: System.SystemExitException");

} catch(System.SystemExitException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 71: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save");
FileSystemHandling.appendStringToFile(evoSuiteFile, "4KZ&WA[*EX0GT");
Login login = new Login();
Login.mmo_auth_syncTXT();
Test 72: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("save/account.xml");
FileSystemHandling.createFolder(evoSuiteFile);
Login login = new Login();
Login.mmo_auth_syncXML();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 255
* Number of covered goals: 169
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 433
* Number of covered goals: 309
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 27%
* Total number of goals: 78
* Number of covered goals: 21
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 255
* Number of covered goals: 167
* Generated 73 tests with total length 232
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login arg0 = new Login();
Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener();
login_ConnectionListener.close();
login_ConnectionListener.run();
assertEquals(0, arg0.getAuth_max());


** It was a parseable test case! 
refined test name is: testUserLoginAndConnect
* Compiling Tests
refined test name is: testLoginConnectionListener
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
login.getLog_fp();
assertEquals(0, login.getAuth_max());


** It was a parseable test case! 
refined test name is: testGetLogFpShouldReturnZeroOnSuccess
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
int auth_num = login.getAuth_num();
assertEquals(0, auth_num);
assertEquals(0, login.getAuth_max());


** It was a parseable test case! 
refined test name is: testGetAuthNumInitialValues
* Compiling Tests
refined test name is: testGetAuthNumAndMaxAuthNum
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
int[] server_fd = login.getServer_fd();
assertEquals(0, login.getAuth_max());
assertNotNull(server_fd);
assertEquals(30, server_fd.length);


** It was a parseable test case! 
refined test name is: testGetServerFdAndAuthMax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
InetAddress arg0 = MockInetAddress.getLocalHost();
login.check_ip(arg0);
assertEquals(0, login.getAuth_max());


** It was a parseable test case! 
refined test name is: testCheckIpWithLocalHostReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
int check_ipmask = login.check_ipmask(4660, "192.168.1.1");
assertEquals(0, login.getAuth_max());
assertEquals(0, check_ipmask);


** It was a parseable test case! 
refined test name is: testLoginWithInvalidIPAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login.logUnknownPackets((Socket_data) null);

** It was a parseable test case! 
refined test name is: testLogUnknownPacketsNullParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
login.setAuth_max(50);
assertEquals(50, login.getAuth_max());


** It was a parseable test case! 
refined test name is: testGetMaxAuthAttemptsWhenSetTo50ShouldReturn50
* Compiling Tests
refined test name is: testGetMaxAuthAttemptsReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
login.getOut();
assertEquals(0, login.getAuth_max());


** It was a parseable test case! 
refined test name is: testGetOutWithValidCredentials
* Compiling Tests
refined test name is: testGetOut
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int pASSWORDENC = Login.getPASSWORDENC();
assertEquals(2, pASSWORDENC);


** It was a parseable test case! 
refined test name is: testGetPasswordEncryptionAlgorithm
* Compiling Tests
refined test name is: testGetPasswordEncryptionAlgorithm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  Login.version((Socket_data) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.login.Login", e);
}


** It was a parseable test case! 
refined test name is: testVersionWithInvalidData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login.display_title();

** It was a parseable test case! 
refined test name is: testDisplayTitle
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: IDBManagementLogin dbManagemtType = Login.getDbManagemtType();
assertNull(dbManagemtType);


** It was a parseable test case! 
refined test name is: testGetDbManagementTypeWhenNoCredentialsProvided
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
login.do_initXML();
login.check_auth_sync();
// Undeclared exception!
Login.mmo_auth_initXML();

** It was a parseable test case! 
refined test name is: testCheckAuthSyncThrowsExceptionWhenNotInitialized
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login.setPASSWORDENC(0);
int pASSWORDENC = Login.getPASSWORDENC();
assertEquals(0, pASSWORDENC);


** It was a parseable test case! 
refined test name is: testSetAndGetPasswordEncryption
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
int auth_max = login.getAuth_max();
assertEquals(0, auth_max);


** It was a parseable test case! 
refined test name is: testInitializeAuthMax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: FromClient arg1 = new FromClient();
Socket_data arg0 = new Socket_data((Socket) null, arg1);
Login.getMd5Data(arg0);
byte[] md5Data = Login.getMd5Data(arg0);
assertEquals(1, arg0.getEof());
assertEquals(30, md5Data.length);


** It was a parseable test case! 
refined test name is: testGetMd5DataValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login.login_log("- with a remote administration with a VOID password.");

** It was a parseable test case! 
refined test name is: testRemoteAdministrationLoginWithVoidPasswordFails
* Compiling Tests
refined test name is: testRemoteAdministrationWithVoidPassword
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  Login.mmo_auth_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testInitAuthDataThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login arg0 = new Login();
arg0.do_initTXT();
Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = arg0.new Timer_interval_check_auth_sync();
login_Timer_interval_check_auth_sync.run();
assertEquals(0, arg0.getAuth_max());


** It was a parseable test case! 
refined test name is: testUpdateAuthMax
* Compiling Tests
refined test name is: testUpdateAuthMax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Login login = new Login();
UserManagement.addUserTXT("conf/subnet_athena.conf", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)", 'E');
Login.mmo_auth_syncTXT();
// Undeclared exception!
try { 
  login.do_initTXT();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Computation finished
