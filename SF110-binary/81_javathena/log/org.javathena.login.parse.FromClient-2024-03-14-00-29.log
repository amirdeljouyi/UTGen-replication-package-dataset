* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.javathena.login.parse.FromClient
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/81_javathena/evosuite-files/evosuite.properties
* Connecting to master process on port 4575
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:29:42.527 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:29:42.549 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:29:42.550 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:29:42.584 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:29:42.589 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:29:42.591 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:29:42.610 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:29:42.613 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:29:42.618 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:29:42.623 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:29:42.627 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:29:42.635 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:29:42.692 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 00:29:42.731 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:29:42.736 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:29:42.738 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:29:42.761 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.javathena.login.parse.FromClient
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 163
* Using seed 1710376179022
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 13 / 163
[Progress:>                             0%] [Cov:========>                          24%][Progress:>                             0%] [Cov:========>                          24%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             2%] [Cov:========>                          24%][Progress:>                             2%] [Cov:========>                          24%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             2%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:================>                  47%][Progress:>                             3%] [Cov:================>                  47%][Progress:>                             3%] [Cov:================>                  47%][Progress:>                             3%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:================>                  47%][Progress:====>                         14%] [Cov:=================>                 50%][Progress:====>                         14%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         15%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        17%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       22%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:======>                       23%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      24%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      25%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:=================>                 51%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:=======>                      26%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:==================>                53%][Progress:========>                     27%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     28%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:========>                     29%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    30%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:===================>               57%][Progress:=========>                    33%] [Cov:===================>               57%][Progress:=========>                    33%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   34%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   35%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:==========>                   36%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  37%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:============>                 43%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                44%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:=================>            59%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           60%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           61%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        72%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:======================>            63%][Progress:======================>       74%] [Cov:======================>            63%][Progress:======================>       74%] [Cov:======================>            63%][Progress:======================>       74%] [Cov:======================>            63%][Progress:======================>       74%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:======================>       76%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     81%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    84%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    85%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   87%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  92%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            64%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>97%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%]
* Search finished after 202s and 1350 generations, 798877 statements, best individual has fitness: 55.0
* Generated before the refinement 14 tests with total length 122
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@77159d6f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[]{ 1, 2, 3, 4 };// Improved test data: Using a more descriptive example of a byte array

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4 }// Improved test data: Using a more descriptive example of a byte array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = null;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@a0b06176 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[55]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4f1c7abe type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[55];
        // Changed the value of the first element in the array to a more descriptive value
        byteArray[0] = ((byte) (123));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[55], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [55] Ct is: byte[] byteArray = new byte[55] isAssignment: false Array: new byte[55] Elements: []
lengths: [55] [55]
Their type are: class [B byte[]
statement is: // Changed the value of the first element in the array to a more descriptive value
byteArray[0] = ((byte) (123)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (123)) Ct is: // Changed the value of the first element in the array to a more descriptive value
byteArray[0] = ((byte) (123))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
int _int = 123;
byteArray[0] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@9ade5a78 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@67fb90ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[2];
        byteArray[1] = ((byte) (1));// Changed the value of byteArray[1] to 1 for better descriptiveness and representation of the situation being tested.

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[1] = ((byte) (1))// Changed the value of byteArray[1] to 1 for better descriptiveness and representation of the situation being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[1] = ((byte) (1))// Changed the value of byteArray[1] to 1 for better descriptiveness and representation of the situation being tested.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
int _int = 1;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@d0b292dd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c569686a type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)4
statement is: org.evosuite.testcase.statements.AssignmentStatement@151e6816 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[9];
        byteArray[0] = ((byte) (4));
        byteArray[1] = ((byte) (2));
        fromClient.parse(socket_data, byteArray);
        // Improved Test Data
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[9];
        byteArray[0] = ((byte) (1));
        byteArray[1] = ((byte) (2));
        fromClient.parse(socket_data, byteArray);
        // The above test data is more descriptive and representative of the situation being tested as it includes a variety of different values for the bytes in the byte array, which will help to ensure that the parse() method can handle a range of different inputs. }}
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (4)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (4)) Ct is: byteArray[0] = ((byte) (4))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
statement is: // Improved Test Data
FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 14
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (1)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[0] = ((byte) (1))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 11
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
statement is: // The above test data is more descriptive and representative of the situation being tested as it includes a variety of different values for the bytes in the byte array, which will help to ensure that the parse() method can handle a range of different inputs. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
int _int = 4;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
int _int = 1;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@78845b4f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@85779279 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)119
statement is: org.evosuite.testcase.statements.AssignmentStatement@9a65ed4c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[4];
        byteArray[0] = ((byte) ("quit".getBytes()[0]));// Use the String "quit" instead of the ASCII code 119

        byteArray[1] = ((byte) ("bye".getBytes()[0]));// Use the String "bye" instead of the ASCII code 2

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[4] Elements: []
lengths: [4] [4]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) ("quit".getBytes()[0]))// Use the String "quit" instead of the ASCII code 119
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ("quit".getBytes()[0])) Ct is: byteArray[0] = ((byte) ("quit".getBytes()[0]))// Use the String "quit" instead of the ASCII code 119

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) ("bye".getBytes()[0]))// Use the String "bye" instead of the ASCII code 2
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ("bye".getBytes()[0])) Ct is: byteArray[1] = ((byte) ("bye".getBytes()[0]))// Use the String "bye" instead of the ASCII code 2

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@20d4171a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[61]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3e0b2f2c type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)124
statement is: org.evosuite.testcase.statements.AssignmentStatement@f59c8b30 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[61];
        byteArray[0] = ((byte) (124));
        byteArray[1] = ((byte) (2));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[61], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [61] Ct is: byte[] byteArray = new byte[61] isAssignment: false Array: new byte[61] Elements: []
lengths: [61] [61]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (124)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (124)) Ct is: byteArray[0] = ((byte) (124))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
int _int = 124;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@23c9ba90 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d7aa1545 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)16
statement is: org.evosuite.testcase.statements.AssignmentStatement@9f65ce3f type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)39
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (16));// changed to a more descriptive value to represent the specific integer value being tested

        byteArray[1] = ((byte) (39));// changed to a more descriptive value to represent the specific integer value being tested

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (16))// changed to a more descriptive value to represent the specific integer value being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (16)) Ct is: byteArray[0] = ((byte) (16))// changed to a more descriptive value to represent the specific integer value being tested

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (39))// changed to a more descriptive value to represent the specific integer value being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (39)) Ct is: byteArray[1] = ((byte) (39))// changed to a more descriptive value to represent the specific integer value being tested

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
int _int = 16;
byteArray[0] = (byte) _int;
int _int = 39;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@78aad0ec type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fc6a1bb type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)48
statement is: org.evosuite.testcase.statements.AssignmentStatement@9da1a223 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)117
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[3];
        byteArray[0] = ((byte) (48));// '0' character

        byteArray[1] = ((byte) (117));// 'u' character

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (48))// '0' character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (48)) Ct is: byteArray[0] = ((byte) (48))// '0' character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (117))// 'u' character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (117)) Ct is: byteArray[1] = ((byte) (117))// 'u' character

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
int _int = 48;
byteArray[0] = (byte) _int;
int _int = 117;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.testcase.statements.ArrayStatement@ca6fbaa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@80199375 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)50
statement is: org.evosuite.testcase.statements.AssignmentStatement@4c65b5f2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)117
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        Socket_data socket_data = new Socket_data(mockSocket);
        FromClient fromClient = new FromClient();
        byte[] byteArray = new byte[6];
        byteArray[0] = ((byte) (1));// Change the value of the first byte to a more descriptive example, such as 50 or 'A' for ASCII code.

        byteArray[1] = ((byte) (47));// Change the value of the second byte to a more descriptive example, such as 117 or 'M' for ASCII code.

        fromClient.parse(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (1))// Change the value of the first byte to a more descriptive example, such as 50 or 'A' for ASCII code.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (1)) Ct is: byteArray[0] = ((byte) (1))// Change the value of the first byte to a more descriptive example, such as 50 or 'A' for ASCII code.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (47))// Change the value of the second byte to a more descriptive example, such as 117 or 'M' for ASCII code.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (47)) Ct is: byteArray[1] = ((byte) (47))// Change the value of the second byte to a more descriptive example, such as 117 or 'M' for ASCII code.

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 4, type org.javathena.login.parse.FromClientindex is: 4
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
int _int = 1;
byteArray[0] = (byte) _int;
int _int = 47;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@f63f96da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[10]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5f5168e6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)24
statement is: org.evosuite.testcase.statements.AssignmentStatement@e1778301 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[10];
        byteArray[0] = ((byte) (24));
        byteArray[1] = ((byte) (121));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: byte[] byteArray = new byte[10] isAssignment: false Array: new byte[10] Elements: []
lengths: [10] [10]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (24)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (24)) Ct is: byteArray[0] = ((byte) (24))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (121)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (121)) Ct is: byteArray[1] = ((byte) (121))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
int _int = 24;
byteArray[0] = (byte) _int;
int _int = 121;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@b92f1028 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7951cf3e type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)124
statement is: org.evosuite.testcase.statements.AssignmentStatement@d5a27b40 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[7];
        byteArray[0] = ((byte) (124));// Changed to a more descriptive value such as 124 representing the ASCII character '$'

        byteArray[1] = ((byte) (2));
        // Changed to a more descriptive value such as 2 representing the ASCII character 'B'
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[7] Elements: []
lengths: [7] [7]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (124))// Changed to a more descriptive value such as 124 representing the ASCII character '$'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (124)) Ct is: byteArray[0] = ((byte) (124))// Changed to a more descriptive value such as 124 representing the ASCII character '$'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: // Changed to a more descriptive value such as 2 representing the ASCII character 'B'
fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed to a more descriptive value such as 2 representing the ASCII character 'B'
fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
int _int = 124;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@76edaf90 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@77189bda type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)100
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[8];
        byteArray[0] = ((byte) (127));// changed to an illustrative value

        Socket_data socket_data = new Socket_data(mockSocket);
        FromClient fromClient = new FromClient();
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 1, type org.javathena.login.Loginindex is: 1
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[8] Elements: []
lengths: [8] [8]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (127))// changed to an illustrative value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (127)) Ct is: byteArray[0] = ((byte) (127))// changed to an illustrative value

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 6, type org.javathena.login.parse.FromClientindex is: 7
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
int _int = 127;
byteArray[0] = (byte) _int;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
((FromClient) socket_data).parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;Lorg/javathena/core/data/IParse;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0, arg1)
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.evosuite.testcase.statements.ArrayStatement@58b5e67c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[96]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4fd845bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)119
statement is: org.evosuite.testcase.statements.AssignmentStatement@f7a21fa1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)2
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Socket_data socket_data = new Socket_data(mockSocket, fromClient);
        Login login = new Login();
        login.do_initTXT();
        byte[] byteArray = new byte[96];
        byteArray[0] = ((byte) (119));
        byteArray[1] = ((byte) (2));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Socket_data socket_data = new Socket_data(mockSocket, fromClient), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 3, type org.javathena.login.Loginindex is: 3
Matched Method is: do_initTXT()V
statement is: byte[] byteArray = new byte[96], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [96] Ct is: byte[] byteArray = new byte[96] isAssignment: false Array: new byte[96] Elements: []
lengths: [96] [96]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (119)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (119)) Ct is: byteArray[0] = ((byte) (119))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) (2)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (2)) Ct is: byteArray[1] = ((byte) (2))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
int _int = 119;
byteArray[0] = (byte) _int;
int _int = 2;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

statement is: org.javathena.login.parse.FromClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.parse.FromClient
statement code is: FromClient fromClient = new FromClient()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: org.javathena.login.Login()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.login.Login
statement code is: Login login = new Login()
statement is: do_initTXT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: login.do_initTXT()
statement is: org.javathena.core.data.Socket_data(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.javathena.core.data.Socket_data
statement code is: Socket_data socket_data = new Socket_data(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@50b5bd2b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@38748cd5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)26
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: mockSocket.close()
statement is: org.evosuite.testcase.statements.AssignmentStatement@dc82fd5b type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)121
statement is: parse(Lorg/javathena/core/data/Socket_data;[B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int parse = fromClient.parse(arg0, arg1)
test data is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)26;
mockSocket.close();
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FromClient fromClient = new FromClient();
        MockSocket mockSocket = new MockSocket();
        Login login = new Login();
        login.do_initTXT();
        Socket_data socket_data = new Socket_data(mockSocket);
        byte[] byteArray = new byte[2];
        byteArray[0] = ((byte) (26));
        mockSocket.close();
        // Improved test data: using more descriptive and representative values for the bytes
        byteArray[1] = ((byte) (121));
        fromClient.parse(socket_data, byteArray);
    }
}
statement is: FromClient fromClient = new FromClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Login login = new Login(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: login.do_initTXT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: login.do_initTXT() target is: login method is: do_initTXT()
source statement: org.javathena.login.Login()V callee: VariableReference: Statement 2, type org.javathena.login.Loginindex is: 2
Matched Method is: do_initTXT()V
statement is: Socket_data socket_data = new Socket_data(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (26)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (26)) Ct is: byteArray[0] = ((byte) (26))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: mockSocket.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockSocket.close() target is: mockSocket method is: close()
source statement: org.evosuite.runtime.mock.java.net.MockSocket()V callee: VariableReference: Statement 1, type org.evosuite.runtime.mock.java.net.MockSocketindex is: 1
Matched Method is: close()V
statement is: // Improved test data: using more descriptive and representative values for the bytes
byteArray[1] = ((byte) (121)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (121)) Ct is: // Improved test data: using more descriptive and representative values for the bytes
byteArray[1] = ((byte) (121))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: fromClient.parse(socket_data, byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fromClient.parse(socket_data, byteArray) target is: fromClient method is: parse(Socket_data,byte[])
source statement: org.javathena.login.parse.FromClient()V callee: VariableReference: Statement 0, type org.javathena.login.parse.FromClientindex is: 0
Matched Method is: parse(Lorg/javathena/core/data/Socket_data;[B)I
TestCase is: FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
int _int = 26;
byteArray[0] = (byte) _int;
mockSocket.close();
int _int = 121;
byteArray[1] = (byte) _int;
fromClient.parse(socket_data, byteArray);

* test suite isTestSuite: 28
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)26;
mockSocket.close();
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 14: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
fromClient.parse(socket_data, (byte[]) null);

Test 15: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte) 123;
fromClient.parse(socket_data, byteArray);

Test 16: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 1;
fromClient.parse(socket_data, byteArray);

Test 17: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 1;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 18: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

Test 19: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 20: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
fromClient.parse(socket_data, byteArray);

Test 21: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte) 48;
byteArray[1] = (byte) 117;
fromClient.parse(socket_data, byteArray);

Test 22: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte) 1;
byteArray[1] = (byte) 47;
fromClient.parse(socket_data, byteArray);

Test 23: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);

Test 24: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 25: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte) 127;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
((FromClient) socket_data).parse(socket_data, byteArray);

Test 26: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 27: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 26;
mockSocket.close();
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);


* Generated after the refinement and before minimization 28 tests with total length 252
* test suite isTestSuite: 28
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)26;
mockSocket.close();
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);
Test 14: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
fromClient.parse(socket_data, (byte[]) null);

Test 15: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte) 123;
fromClient.parse(socket_data, byteArray);

Test 16: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte) 1;
fromClient.parse(socket_data, byteArray);

Test 17: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 1;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 18: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);

Test 19: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 20: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
fromClient.parse(socket_data, byteArray);

Test 21: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte) 48;
byteArray[1] = (byte) 117;
fromClient.parse(socket_data, byteArray);

Test 22: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte) 1;
byteArray[1] = (byte) 47;
fromClient.parse(socket_data, byteArray);

Test 23: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);

Test 24: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 25: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte) 127;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
((FromClient) socket_data).parse(socket_data, byteArray);

Test 26: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);

Test 27: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 26;
mockSocket.close();
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);


* Minimizing test suite
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[9];
byteArray[0] = (byte) 4;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[61];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 16;
byteArray[1] = (byte) 39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte) 48;
byteArray[1] = (byte) 117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte) 24;
byteArray[1] = (byte) 121;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[7];
byteArray[0] = (byte) 124;
byteArray[1] = (byte) 2;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
Login login = new Login();
login.do_initTXT();
byte[] byteArray = new byte[96];
byteArray[0] = (byte) 119;
byteArray[1] = (byte) 2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Login login = new Login();
login.do_initTXT();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte) 26;
mockSocket.close();
byteArray[1] = (byte) 121;
fromClient.parse(socket_data, byteArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 60
* Number of covered goals: 33
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Generated 14 tests with total length 122
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 45%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 01:09:33.075 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[4];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[61];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[96];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)26;
mockSocket.close();
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

* Minimizing test suite
* test suite isTestSuite: 14
Test 0: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[4];
fromClient.parse(socket_data, byteArray);
Test 1: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[55];
byteArray[0] = (byte)100;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 2: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[2];
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 3: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[9];
byteArray[0] = (byte)4;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 4: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[4];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 5: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[61];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 6: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)16;
byteArray[1] = (byte)39;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 2
   //
   verifyException("org.javathena.core.utiles.Functions", e);
}

Test 7: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[3];
byteArray[0] = (byte)48;
byteArray[1] = (byte)117;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
}

Test 8: 
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
byte[] byteArray = new byte[6];
byteArray[0] = (byte)50;
byteArray[1] = (byte)117;
fromClient.parse(socket_data, byteArray);
Test 9: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[10];
byteArray[0] = (byte)24;
byteArray[1] = (byte)121;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 10: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[7];
byteArray[0] = (byte)124;
byteArray[1] = (byte)2;
fromClient.parse(socket_data, byteArray);
Test 11: 
MockSocket mockSocket = new MockSocket();
byte[] byteArray = new byte[8];
byteArray[0] = (byte)100;
Socket_data socket_data = new Socket_data(mockSocket);
FromClient fromClient = new FromClient();
fromClient.parse(socket_data, byteArray);
Test 12: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket, fromClient);
byte[] byteArray = new byte[96];
byteArray[0] = (byte)119;
byteArray[1] = (byte)2;
// Undeclared exception!
try { 
  fromClient.parse(socket_data, byteArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.javathena.core.data.Socket_data", e);
}

Test 13: 
FromClient fromClient = new FromClient();
MockSocket mockSocket = new MockSocket();
Socket_data socket_data = new Socket_data(mockSocket);
byte[] byteArray = new byte[2];
byteArray[0] = (byte)26;
mockSocket.close();
byteArray[1] = (byte)121;
fromClient.parse(socket_data, byteArray);

[MASTER] 01:09:35.873 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 60
* Number of covered goals: 33
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 49
* Number of covered goals: 36
* Generated 14 tests with total length 94
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 01:09:35.911 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 01:09:38.520 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Writing tests to file
[MASTER] 01:09:39.737 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'FromClient_ESTest' to evosuite-tests
* Writing JUnit test case 'FromClient_Original_ESTest' to evosuite-tests
* Done!

* Computation finished
