* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: net.sourceforge.schemaspy.model.Table
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/36_schemaspy/evosuite-files/evosuite.properties
* Connecting to master process on port 21384
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:41:34.121 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:41:34.122 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 00:41:34.123 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 00:41:34.124 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 00:41:34.129 [logback-1] WARN  TestUsageChecker - class net.sourceforge.schemaspy.model.Table$1ColumnInitializationFailure looks like an anonymous class, ignoring it (although reflection says false) ColumnInitializationFailure
[MASTER] 00:41:34.320 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:41:34.322 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:41:34.336 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:41:34.338 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:41:34.339 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class net.sourceforge.schemaspy.model.Table
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 1440
* Using seed 1709253692127
* Starting evolution
* Initial Number of Goals in DynaMOSA = 460 / 1440
[Progress:>                             0%] [Cov:>                                  2%][Progress:>                             1%] [Cov:>                                  2%][Progress:>                             2%] [Cov:>                                  2%][Progress:>                             2%] [Cov:>                                  2%][Progress:>                             2%] [Cov:>                                  2%][Progress:>                             3%] [Cov:>                                  2%][Progress:=>                            4%] [Cov:>                                  2%][Progress:=>                            4%] [Cov:>                                  2%][Progress:=>                            4%] [Cov:>                                  2%][Progress:=>                            5%] [Cov:>                                  2%][Progress:=>                            5%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:>                                  2%][Progress:==>                           7%] [Cov:>                                  2%][Progress:==>                           7%] [Cov:>                                  2%][Progress:==>                           7%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           9%] [Cov:>                                  2%][Progress:==>                           9%] [Cov:>                                  2%][Progress:==>                           9%] [Cov:>                                  2%][Progress:==>                           9%] [Cov:>                                  2%][Progress:==>                           9%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          12%] [Cov:>                                  2%][Progress:===>                          12%] [Cov:>                                  2%][Progress:===>                          12%] [Cov:>                                  2%][Progress:===>                          12%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:>                                  2%][Progress:====>                         14%] [Cov:>                                  2%][Progress:====>                         14%] [Cov:>                                  2%][Progress:====>                         14%] [Cov:>                                  2%][Progress:====>                         14%] [Cov:>                                  2%][Progress:====>                         14%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:>                                  2%][Progress:=====>                        17%] [Cov:>                                  2%][Progress:=====>                        17%] [Cov:>                                  2%][Progress:=====>                        17%] [Cov:>                                  2%][Progress:=====>                        17%] [Cov:>                                  2%][Progress:=====>                        17%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        19%] [Cov:>                                  2%][Progress:=====>                        19%] [Cov:>                                  2%][MASTER] 00:41:53.995 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=====>                        19%] [Cov:>                                  2%][Progress:=====>                        19%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       21%] [Cov:>                                  2%][Progress:======>                       21%] [Cov:=>                                 3%][Progress:======>                       21%] [Cov:=>                                 3%][Progress:======>                       21%] [Cov:=>                                 3%][Progress:======>                       22%] [Cov:=>                                 3%][Progress:======>                       22%] [Cov:=>                                 3%][Progress:======>                       22%] [Cov:=>                                 3%][Progress:======>                       22%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:=======>                      24%] [Cov:=>                                 3%][Progress:=======>                      24%] [Cov:=>                                 3%][Progress:=======>                      24%] [Cov:=>                                 3%][Progress:=======>                      24%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      26%] [Cov:=>                                 3%][Progress:=======>                      26%] [Cov:=>                                 3%][Progress:=======>                      26%] [Cov:=>                                 3%][Progress:=======>                      26%] [Cov:=>                                 3%][Progress:========>                     27%] [Cov:=>                                 3%][Progress:========>                     27%] [Cov:=>                                 3%][Progress:========>                     27%] [Cov:=>                                 3%][Progress:========>                     27%] [Cov:=>                                 3%][Progress:========>                     27%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     29%] [Cov:=>                                 3%][Progress:========>                     29%] [Cov:=>                                 3%][Progress:========>                     29%] [Cov:=>                                 3%][Progress:========>                     29%] [Cov:=>                                 3%][Progress:========>                     29%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    31%] [Cov:=>                                 3%][Progress:=========>                    31%] [Cov:=>                                 3%][Progress:=========>                    31%] [Cov:=>                                 3%][Progress:=========>                    31%] [Cov:=>                                 3%][Progress:=========>                    32%] [Cov:=>                                 3%][Progress:=========>                    32%] [Cov:=>                                 3%][Progress:=========>                    32%] [Cov:=>                                 3%][Progress:=========>                    32%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   34%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  37%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:===========>                  39%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 41%] [Cov:=>                                 3%][Progress:============>                 41%] [Cov:=>                                 3%][Progress:============>                 41%] [Cov:=>                                 3%][Progress:============>                 41%] [Cov:=>                                 3%][Progress:============>                 42%] [Cov:=>                                 3%][Progress:============>                 42%] [Cov:=>                                 3%][Progress:============>                 42%] [Cov:=>                                 3%][Progress:============>                 42%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                44%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                46%] [Cov:=>                                 3%][Progress:=============>                46%] [Cov:=>                                 3%][Progress:=============>                46%] [Cov:=>                                 3%][Progress:=============>                46%] [Cov:=>                                 3%][Progress:=============>                46%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               47%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               48%] [Cov:=>                                 3%][Progress:==============>               49%] [Cov:=>                                 3%][Progress:==============>               49%] [Cov:=>                                 3%][Progress:==============>               49%] [Cov:=>                                 3%][Progress:==============>               49%] [Cov:=>                                 3%][Progress:==============>               49%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              51%] [Cov:=>                                 3%][Progress:===============>              51%] [Cov:=>                                 3%][Progress:===============>              51%] [Cov:=>                                 3%][Progress:===============>              51%] [Cov:=>                                 3%][Progress:===============>              52%] [Cov:=>                                 3%][Progress:===============>              52%] [Cov:=>                                 3%][Progress:===============>              52%] [Cov:=>                                 3%][Progress:===============>              52%] [Cov:=>                                 3%][Progress:===============>              52%] [Cov:=>                                 3%][Progress:===============>              53%] [Cov:=>                                 3%][Progress:===============>              53%] [Cov:=>                                 3%][Progress:===============>              53%] [Cov:=>                                 3%][Progress:===============>              53%] [Cov:=>                                 3%][Progress:===============>              53%] [Cov:=>                                 3%][Progress:================>             54%] [Cov:=>                                 3%][Progress:================>             54%] [Cov:=>                                 3%][Progress:================>             54%] [Cov:=>                                 3%][Progress:================>             54%] [Cov:=>                                 3%][Progress:================>             54%] [Cov:=>                                 3%][Progress:================>             55%] [Cov:=>                                 3%][Progress:================>             55%] [Cov:=>                                 3%][Progress:================>             55%] [Cov:=>                                 3%][Progress:================>             55%] [Cov:=>                                 3%][Progress:================>             56%] [Cov:=>                                 3%][Progress:================>             56%] [Cov:=>                                 3%][Progress:================>             56%] [Cov:=>                                 3%][Progress:================>             56%] [Cov:=>                                 3%][Progress:================>             56%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            57%] [Cov:=>                                 3%][Progress:=================>            58%] [Cov:=>                                 3%][Progress:=================>            58%] [Cov:=>                                 3%][Progress:=================>            58%] [Cov:=>                                 3%][Progress:=================>            58%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:=================>            59%] [Cov:=>                                 3%][Progress:==================>           60%] [Cov:=>                                 3%][Progress:==================>           60%] [Cov:=>                                 3%][Progress:==================>           60%] [Cov:=>                                 3%][Progress:==================>           60%] [Cov:=>                                 3%][Progress:==================>           60%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           62%] [Cov:=>                                 3%][Progress:==================>           62%] [Cov:=>                                 3%][Progress:==================>           62%] [Cov:=>                                 3%][Progress:==================>           62%] [Cov:=>                                 3%][Progress:==================>           62%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:==================>           63%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          64%] [Cov:=>                                 3%][Progress:===================>          65%] [Cov:=>                                 3%][Progress:===================>          65%] [Cov:=>                                 3%][Progress:===================>          65%] [Cov:=>                                 3%][Progress:===================>          65%] [Cov:=>                                 3%][Progress:===================>          65%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:====================>         67%] [Cov:=>                                 3%][Progress:====================>         67%] [Cov:=>                                 3%][Progress:====================>         67%] [Cov:=>                                 3%][Progress:====================>         67%] [Cov:=>                                 3%][Progress:====================>         67%] [Cov:=>                                 3%][Progress:====================>         68%] [Cov:=>                                 3%][Progress:====================>         68%] [Cov:=>                                 3%][Progress:====================>         68%] [Cov:=>                                 3%][Progress:====================>         69%] [Cov:=>                                 3%][Progress:====================>         69%] [Cov:=>                                 3%][Progress:====================>         69%] [Cov:=>                                 3%][Progress:====================>         69%] [Cov:=>                                 3%][Progress:====================>         69%] [Cov:=>                                 3%][Progress:=====================>        70%] [Cov:=>                                 3%][Progress:=====================>        70%] [Cov:=>                                 3%][Progress:=====================>        70%] [Cov:=>                                 3%][Progress:=====================>        70%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        72%] [Cov:=>                                 3%][Progress:=====================>        73%] [Cov:=>                                 3%][Progress:=====================>        73%] [Cov:=>                                 3%][Progress:=====================>        73%] [Cov:=>                                 3%][Progress:=====================>        73%] [Cov:=>                                 3%][Progress:=====================>        73%] [Cov:=>                                 3%][Progress:======================>       74%] [Cov:=>                                 3%][Progress:======================>       74%] [Cov:=>                                 3%][Progress:======================>       74%] [Cov:=>                                 3%][Progress:======================>       74%] [Cov:=>                                 3%][Progress:======================>       74%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:======================>       76%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      77%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      78%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:=======================>      79%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     80%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     81%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     82%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:========================>     83%] [Cov:=>                                 3%][Progress:=========================>    84%] [Cov:=>                                 3%][Progress:=========================>    84%] [Cov:=>                                 3%][Progress:=========================>    84%] [Cov:=>                                 3%][Progress:=========================>    84%] [Cov:=>                                 3%][Progress:=========================>    85%] [Cov:=>                                 3%][Progress:=========================>    85%] [Cov:=>                                 3%][Progress:=========================>    85%] [Cov:=>                                 3%][Progress:=========================>    85%] [Cov:=>                                 3%][Progress:=========================>    85%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:=========================>    86%] [Cov:=>                                 3%][Progress:==========================>   87%] [Cov:=>                                 3%][Progress:==========================>   87%] [Cov:=>                                 3%][Progress:==========================>   87%] [Cov:=>                                 3%][Progress:==========================>   87%] [Cov:=>                                 3%][Progress:==========================>   87%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   88%] [Cov:=>                                 3%][Progress:==========================>   89%] [Cov:=>                                 3%][Progress:==========================>   89%] [Cov:=>                                 3%][Progress:==========================>   89%] [Cov:=>                                 3%][Progress:==========================>   89%] [Cov:=>                                 3%][Progress:==========================>   89%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  90%] [Cov:=>                                 3%][Progress:===========================>  91%] [Cov:=>                                 3%][Progress:===========================>  91%] [Cov:=>                                 3%][Progress:===========================>  91%] [Cov:=>                                 3%][Progress:===========================>  91%] [Cov:=>                                 3%][Progress:===========================>  91%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  92%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 94%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:============================> 96%] [Cov:=>                                 3%][Progress:=============================>97%] [Cov:=>                                 3%][Progress:=============================>97%] [Cov:=>                                 3%][Progress:=============================>97%] [Cov:=>                                 3%][Progress:=============================>97%] [Cov:=>                                 3%][Progress:=============================>97%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>99%] [Cov:=>                                 3%][Progress:=============================>99%] [Cov:=>                                 3%][Progress:=============================>99%] [Cov:=>                                 3%][Progress:=============================>99%] [Cov:=>                                 3%][Progress:=============================>99%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=>                                 3%]
* Search finished after 101s and 494 generations, 187386 statements, best individual has fitness: 1380.0
* Generated before the refinement 9 tests with total length 20
statement is: net.sourceforge.schemaspy.model.Table$ByColumnIdComparator()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table$ByColumnIdComparator
statement code is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator()
statement is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type class net.sourceforge.schemaspy.model.xml.TableColumnMeta
statement code is: TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable()
statement is: net.sourceforge.schemaspy.model.TableColumn(Lnet/sourceforge/schemaspy/model/Table;Lnet/sourceforge/schemaspy/model/xml/TableColumnMeta;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.TableColumn
statement code is: TableColumn tableColumn = new TableColumn((Table) null, arg1)
statement is: compare(Lnet/sourceforge/schemaspy/model/TableColumn;Lnet/sourceforge/schemaspy/model/TableColumn;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int compare = table_ByColumnIdComparator.compare(arg1, arg1)
test data is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
        TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("Comment 1").when(tableColumnMeta1).getComments();
        doReturn("Default Value 1").when(tableColumnMeta1).getDefaultValue();
        doReturn(5).when(tableColumnMeta1).getDigits();
        doReturn("ID 1").when(tableColumnMeta1).getId();
        doReturn("Name 1").when(tableColumnMeta1).getName();
        doReturn(20).when(tableColumnMeta1).getSize();
        doReturn("Type 1").when(tableColumnMeta1).getType();
        doReturn(true).when(tableColumnMeta1).isAutoUpdated();
        doReturn(false).when(tableColumnMeta1).isNullable();
        TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1);
        TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("Comment 2").when(tableColumnMeta2).getComments();
        doReturn("Default Value 2").when(tableColumnMeta2).getDefaultValue();
        doReturn(3).when(tableColumnMeta2).getDigits();
        doReturn("ID 2").when(tableColumnMeta2).getId();
        doReturn("Name 2").when(tableColumnMeta2).getName();
        doReturn(10).when(tableColumnMeta2).getSize();
        doReturn("Type 2").when(tableColumnMeta2).getType();
        doReturn(false).when(tableColumnMeta2).isAutoUpdated();
        doReturn(true).when(tableColumnMeta2).isNullable();
        TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2);
        table_ByColumnIdComparator.compare(tableColumn1, tableColumn2);
    }
}
statement is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("Comment 1").when(tableColumnMeta1).getComments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Comment 1").when(tableColumnMeta1).getComments() target is: doReturn("Comment 1").when(tableColumnMeta1) method is: getComments()
statement is: doReturn("Default Value 1").when(tableColumnMeta1).getDefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Default Value 1").when(tableColumnMeta1).getDefaultValue() target is: doReturn("Default Value 1").when(tableColumnMeta1) method is: getDefaultValue()
statement is: doReturn(5).when(tableColumnMeta1).getDigits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(5).when(tableColumnMeta1).getDigits() target is: doReturn(5).when(tableColumnMeta1) method is: getDigits()
statement is: doReturn("ID 1").when(tableColumnMeta1).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("ID 1").when(tableColumnMeta1).getId() target is: doReturn("ID 1").when(tableColumnMeta1) method is: getId()
statement is: doReturn("Name 1").when(tableColumnMeta1).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Name 1").when(tableColumnMeta1).getName() target is: doReturn("Name 1").when(tableColumnMeta1) method is: getName()
statement is: doReturn(20).when(tableColumnMeta1).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(20).when(tableColumnMeta1).getSize() target is: doReturn(20).when(tableColumnMeta1) method is: getSize()
statement is: doReturn("Type 1").when(tableColumnMeta1).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Type 1").when(tableColumnMeta1).getType() target is: doReturn("Type 1").when(tableColumnMeta1) method is: getType()
statement is: doReturn(true).when(tableColumnMeta1).isAutoUpdated(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(tableColumnMeta1).isAutoUpdated() target is: doReturn(true).when(tableColumnMeta1) method is: isAutoUpdated()
statement is: doReturn(false).when(tableColumnMeta1).isNullable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(tableColumnMeta1).isNullable() target is: doReturn(false).when(tableColumnMeta1) method is: isNullable()
statement is: TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("Comment 2").when(tableColumnMeta2).getComments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Comment 2").when(tableColumnMeta2).getComments() target is: doReturn("Comment 2").when(tableColumnMeta2) method is: getComments()
statement is: doReturn("Default Value 2").when(tableColumnMeta2).getDefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Default Value 2").when(tableColumnMeta2).getDefaultValue() target is: doReturn("Default Value 2").when(tableColumnMeta2) method is: getDefaultValue()
statement is: doReturn(3).when(tableColumnMeta2).getDigits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(3).when(tableColumnMeta2).getDigits() target is: doReturn(3).when(tableColumnMeta2) method is: getDigits()
statement is: doReturn("ID 2").when(tableColumnMeta2).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("ID 2").when(tableColumnMeta2).getId() target is: doReturn("ID 2").when(tableColumnMeta2) method is: getId()
statement is: doReturn("Name 2").when(tableColumnMeta2).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Name 2").when(tableColumnMeta2).getName() target is: doReturn("Name 2").when(tableColumnMeta2) method is: getName()
statement is: doReturn(10).when(tableColumnMeta2).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(10).when(tableColumnMeta2).getSize() target is: doReturn(10).when(tableColumnMeta2) method is: getSize()
statement is: doReturn("Type 2").when(tableColumnMeta2).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("Type 2").when(tableColumnMeta2).getType() target is: doReturn("Type 2").when(tableColumnMeta2) method is: getType()
statement is: doReturn(false).when(tableColumnMeta2).isAutoUpdated(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(tableColumnMeta2).isAutoUpdated() target is: doReturn(false).when(tableColumnMeta2) method is: isAutoUpdated()
statement is: doReturn(true).when(tableColumnMeta2).isNullable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(tableColumnMeta2).isNullable() target is: doReturn(true).when(tableColumnMeta2) method is: isNullable()
statement is: TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: table_ByColumnIdComparator.compare(tableColumn1, tableColumn2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table_ByColumnIdComparator.compare(tableColumn1, tableColumn2) target is: table_ByColumnIdComparator method is: compare(TableColumn,TableColumn)
TestCase is: String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

statement is: net.sourceforge.schemaspy.model.Table(Lnet/sourceforge/schemaspy/model/Database;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table
statement code is: Table table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null)
test data is: Table table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table table = new Table(new Database("my_database"), "my_table", "my_primary_key", "isPrimaryKey: true", "my_foreign_key");
    }
}
statement is: Table table = new Table(new Database("my_database"), "my_table", "my_primary_key", "isPrimaryKey: true", "my_foreign_key"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "my_table";
String string = "my_primary_key";
String string = "isPrimaryKey: true";
String string = "my_foreign_key";
Table table = new Table((Database) string, string, string, string, (String) null);

statement is: net.sourceforge.schemaspy.model.Table(Lnet/sourceforge/schemaspy/model/Database;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table
statement code is: Table table = new Table((Database) null, (String) null, "", "GIN", "Creating ")
test data is: Table table = new Table((Database) null, (String) null, "", "GIN", "Creating ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table table = new Table(new Database(), "my_database", "username", "password", "SELECT * FROM my_table");
    }
}
statement is: Table table = new Table(new Database(), "my_database", "username", "password", "SELECT * FROM my_table"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "my_database";
String string = "username";
String string = "password";
String string = "SELECT * FROM my_table";
Table table = new Table((Database) string, string, string, string, "Creating ");

statement is: net.sourceforge.schemaspy.model.Table(Lnet/sourceforge/schemaspy/model/Database;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table
statement code is: Table table = new Table((Database) null, "e", (String) null, (String) null, (String) null)
test data is: Table table = new Table((Database) null, "e", (String) null, (String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table table = new Table(new Database("localhost"), "employees", "employee_id", "employee_name", "employee_age");
        table.insert(1, "Alice", 25);
        table.insert(2, "Bob", 30);
        table.insert(3, "Charlie", 35);
        table.insert(4, "David", 40);
        table.insert(5, "Eve", 45);
        table.insert(6, "Frank", 50);
    }
}
statement is: Table table = new Table(new Database("localhost"), "employees", "employee_id", "employee_name", "employee_age"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: table.insert(1, "Alice", 25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(1, "Alice", 25) target is: table method is: insert(int,java.lang.String,int)
statement is: table.insert(2, "Bob", 30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(2, "Bob", 30) target is: table method is: insert(int,java.lang.String,int)
statement is: table.insert(3, "Charlie", 35), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(3, "Charlie", 35) target is: table method is: insert(int,java.lang.String,int)
statement is: table.insert(4, "David", 40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(4, "David", 40) target is: table method is: insert(int,java.lang.String,int)
statement is: table.insert(5, "Eve", 45), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(5, "Eve", 45) target is: table method is: insert(int,java.lang.String,int)
statement is: table.insert(6, "Frank", 50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table.insert(6, "Frank", 50) target is: table method is: insert(int,java.lang.String,int)
TestCase is: String string = "employees";
String string = "employee_id";
String string = "employee_name";
String string = "employee_age";
Table table = new Table((Database) string, string, string, string, (String) null);

statement is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String fullName = Table.getFullName((String) null, "TP_~4_E= IFf[d", (String) null, "PKTABLE_SCHEM")
test data is: Table.getFullName((String) null, "TP_~4_E= IFf[d", (String) null, "PKTABLE_SCHEM");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table.getFullName(null, "TP_~4_E= IFf[d", null, "PKTABLE_SCHEM");
    }
}
statement is: Table.getFullName(null, "TP_~4_E= IFf[d", null, "PKTABLE_SCHEM"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Table.getFullName(null, "TP_~4_E= IFf[d", null, "PKTABLE_SCHEM") target is: Table method is: getFullName(<unknown>,java.lang.String,<unknown>,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
TestCase is: String string = "TP_~4_E= IFf[d";
String string = "PKTABLE_SCHEM";
String string = null;
String string = null;
Table.getFullName(string, string, string, string);

statement is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String fullName = Table.getFullName((String) null, (String) null, (String) null, (String) null)
test data is: Table.getFullName((String) null, (String) null, (String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table.getFullName("John", "Doe", "Jr.", "III");// John Doe Jr. III

        Table.getFullName("Jane", "Smith", null, null);// Jane Smith

        Table.getFullName("Bob", "Dylan", "McGee", "PhD");// Bob Dylan McGee PhD }}

    }
}
statement is: Table.getFullName("John", "Doe", "Jr.", "III")// John Doe Jr. III
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Table.getFullName("John", "Doe", "Jr.", "III")// John Doe Jr. III
 target is: Table method is: getFullName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: Table.getFullName("Jane", "Smith", null, null)// Jane Smith
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Table.getFullName("Jane", "Smith", null, null)// Jane Smith
 target is: Table method is: getFullName(java.lang.String,java.lang.String,<unknown>,<unknown>)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: Table.getFullName("Bob", "Dylan", "McGee", "PhD")// Bob Dylan McGee PhD }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Table.getFullName("Bob", "Dylan", "McGee", "PhD")// Bob Dylan McGee PhD }}
 target is: Table method is: getFullName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: String string = "John";
String string = "Doe";
String string = "Jr.";
String string = "III";
Table.getFullName(string, string, string, string);
String string = "Jane";
String string = "Smith";
String string = null;
String string = null;
Table.getFullName(string, string, string, string);
String string = "Bob";
String string = "Dylan";
String string = "McGee";
String string = "PhD";
Table.getFullName(string, string, string, string);

statement is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String fullName = Table.getFullName("", (String) null, "null.null", "")
test data is: Table.getFullName("", (String) null, "null.null", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for Table.getFullName() method
        String firstName = "John";
        String lastName = "Doe";
        String middleInitial = "J";
        String suffix = "Jr.";
        Table.getFullName(firstName, lastName, middleInitial, suffix);
        // Expected result: "John Doe Jr."
        // Additional test cases with different input parameters
        Table.getFullName("", ((String) (null)), "null.null", "");
        // Expected result: ""
        Table.getFullName("Alice", "Smith", "M", "Sr.");
        // Expected result: "Alice Smith M Sr." }}
    }
}
statement is: // Improved test data for Table.getFullName() method
String firstName = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String lastName = "Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String middleInitial = "J", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String suffix = "Jr.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Table.getFullName(firstName, lastName, middleInitial, suffix), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Table.getFullName(firstName, lastName, middleInitial, suffix) target is: Table method is: getFullName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Expected result: "John Doe Jr."
// Additional test cases with different input parameters
Table.getFullName("", ((String) (null)), "null.null", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Expected result: "John Doe Jr."
// Additional test cases with different input parameters
Table.getFullName("", ((String) (null)), "null.null", "") target is: Table method is: getFullName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: // Expected result: ""
Table.getFullName("Alice", "Smith", "M", "Sr."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Expected result: ""
Table.getFullName("Alice", "Smith", "M", "Sr.") target is: Table method is: getFullName(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
Matched Method is: getFullName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Expected result: "Alice Smith M Sr." }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "John";
String string = "Doe";
String string = "J";
String string = "Jr.";
Table.getFullName(string, string, string, string);
String string = "";
String string = "null.null";
String string = "";
String string = null;
Table.getFullName(string, string, string, string);
String string = "Alice";
String string = "Smith";
String string = "M";
String string = "Sr.";
Table.getFullName(string, string, string, string);

statement is: net.sourceforge.schemaspy.model.Table$ByColumnIdComparator()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table$ByColumnIdComparator
statement code is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator()
statement is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type class net.sourceforge.schemaspy.model.xml.TableColumnMeta
statement code is: TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable()
statement is: net.sourceforge.schemaspy.model.TableColumn(Lnet/sourceforge/schemaspy/model/Table;Lnet/sourceforge/schemaspy/model/xml/TableColumnMeta;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.TableColumn
statement code is: TableColumn tableColumn = new TableColumn((Table) null, arg1)
statement is: compare(Lnet/sourceforge/schemaspy/model/TableColumn;Lnet/sourceforge/schemaspy/model/TableColumn;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int compare = table_ByColumnIdComparator.compare(arg1, arg1)
test data is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
        TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("column1").when(tableColumnMeta1).getId();
        doReturn("column1_name").when(tableColumnMeta1).getName();
        doReturn(10).when(tableColumnMeta1).getSize();
        doReturn("integer").when(tableColumnMeta1).getType();
        TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1);
        TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("column2").when(tableColumnMeta2).getId();
        doReturn("column2_name").when(tableColumnMeta2).getName();
        doReturn(5).when(tableColumnMeta2).getSize();
        doReturn("integer").when(tableColumnMeta2).getType();
        TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2);
        // Act
        int result = table_ByColumnIdComparator.compare(tableColumn1, tableColumn2);
        // Assert
        assertEquals(0, result);
    }
}
statement is: // Arrange
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("column1").when(tableColumnMeta1).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column1").when(tableColumnMeta1).getId() target is: doReturn("column1").when(tableColumnMeta1) method is: getId()
statement is: doReturn("column1_name").when(tableColumnMeta1).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column1_name").when(tableColumnMeta1).getName() target is: doReturn("column1_name").when(tableColumnMeta1) method is: getName()
statement is: doReturn(10).when(tableColumnMeta1).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(10).when(tableColumnMeta1).getSize() target is: doReturn(10).when(tableColumnMeta1) method is: getSize()
statement is: doReturn("integer").when(tableColumnMeta1).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("integer").when(tableColumnMeta1).getType() target is: doReturn("integer").when(tableColumnMeta1) method is: getType()
statement is: TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("column2").when(tableColumnMeta2).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column2").when(tableColumnMeta2).getId() target is: doReturn("column2").when(tableColumnMeta2) method is: getId()
statement is: doReturn("column2_name").when(tableColumnMeta2).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column2_name").when(tableColumnMeta2).getName() target is: doReturn("column2_name").when(tableColumnMeta2) method is: getName()
statement is: doReturn(5).when(tableColumnMeta2).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(5).when(tableColumnMeta2).getSize() target is: doReturn(5).when(tableColumnMeta2) method is: getSize()
statement is: doReturn("integer").when(tableColumnMeta2).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("integer").when(tableColumnMeta2).getType() target is: doReturn("integer").when(tableColumnMeta2) method is: getType()
statement is: TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Act
int result = table_ByColumnIdComparator.compare(tableColumn1, tableColumn2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: table_ByColumnIdComparator.compare(tableColumn1, tableColumn2) target is: table_ByColumnIdComparator method is: compare(TableColumn,TableColumn)
statement is: // Assert
assertEquals(0, result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals(0, result) target is:  method is: assertEquals(int,int)
TestCase is: String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

statement is: net.sourceforge.schemaspy.model.Table$ByColumnIdComparator()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.Table$ByColumnIdComparator
statement code is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator()
statement is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type class net.sourceforge.schemaspy.model.xml.TableColumnMeta
statement code is: TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(1).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(1).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable()
statement is: net.sourceforge.schemaspy.model.TableColumn(Lnet/sourceforge/schemaspy/model/Table;Lnet/sourceforge/schemaspy/model/xml/TableColumnMeta;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.TableColumn
statement code is: TableColumn tableColumn = new TableColumn((Table) null, arg1)
statement is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type class net.sourceforge.schemaspy.model.xml.TableColumnMeta
statement code is: TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable()
statement is: net.sourceforge.schemaspy.model.TableColumn(Lnet/sourceforge/schemaspy/model/Table;Lnet/sourceforge/schemaspy/model/xml/TableColumnMeta;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class net.sourceforge.schemaspy.model.TableColumn
statement code is: TableColumn tableColumn = new TableColumn((Table) null, arg1)
statement is: compare(Lnet/sourceforge/schemaspy/model/TableColumn;Lnet/sourceforge/schemaspy/model/TableColumn;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int compare = table_ByColumnIdComparator.compare(arg0, arg1)
test data is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(1).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(1).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
        TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("column1").when(tableColumnMeta1).getId();
        doReturn("column1").when(tableColumnMeta1).getName();
        doReturn(((String) (null))).when(tableColumnMeta1).getComments();
        doReturn(((String) (null))).when(tableColumnMeta1).getDefaultValue();
        doReturn(0).when(tableColumnMeta1).getDigits();
        doReturn(1).when(tableColumnMeta1).getSize();
        doReturn("null.null").when(tableColumnMeta1).getType();
        doReturn(true).when(tableColumnMeta1).isAutoUpdated();
        doReturn(true).when(tableColumnMeta1).isNullable();
        TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1);
        TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
        doReturn("column2").when(tableColumnMeta2).getId();
        doReturn("column2").when(tableColumnMeta2).getName();
        doReturn(((String) (null))).when(tableColumnMeta2).getComments();
        doReturn(((String) (null))).when(tableColumnMeta2).getDefaultValue();
        doReturn(0).when(tableColumnMeta2).getDigits();
        doReturn(1).when(tableColumnMeta2).getSize();
        doReturn("null.null").when(tableColumnMeta2).getType();
        doReturn(false).when(tableColumnMeta2).isAutoUpdated();
        doReturn(false).when(tableColumnMeta2).isNullable();
        TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2);
        table_ByColumnIdComparator.compare(tableColumn1, tableColumn2);
    }
}
statement is: Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("column1").when(tableColumnMeta1).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column1").when(tableColumnMeta1).getId() target is: doReturn("column1").when(tableColumnMeta1) method is: getId()
statement is: doReturn("column1").when(tableColumnMeta1).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column1").when(tableColumnMeta1).getName() target is: doReturn("column1").when(tableColumnMeta1) method is: getName()
statement is: doReturn(((String) (null))).when(tableColumnMeta1).getComments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((String) (null))).when(tableColumnMeta1).getComments() target is: doReturn(((String) (null))).when(tableColumnMeta1) method is: getComments()
statement is: doReturn(((String) (null))).when(tableColumnMeta1).getDefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((String) (null))).when(tableColumnMeta1).getDefaultValue() target is: doReturn(((String) (null))).when(tableColumnMeta1) method is: getDefaultValue()
statement is: doReturn(0).when(tableColumnMeta1).getDigits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(0).when(tableColumnMeta1).getDigits() target is: doReturn(0).when(tableColumnMeta1) method is: getDigits()
statement is: doReturn(1).when(tableColumnMeta1).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(1).when(tableColumnMeta1).getSize() target is: doReturn(1).when(tableColumnMeta1) method is: getSize()
statement is: doReturn("null.null").when(tableColumnMeta1).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("null.null").when(tableColumnMeta1).getType() target is: doReturn("null.null").when(tableColumnMeta1) method is: getType()
statement is: doReturn(true).when(tableColumnMeta1).isAutoUpdated(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(tableColumnMeta1).isAutoUpdated() target is: doReturn(true).when(tableColumnMeta1) method is: isAutoUpdated()
statement is: doReturn(true).when(tableColumnMeta1).isNullable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(tableColumnMeta1).isNullable() target is: doReturn(true).when(tableColumnMeta1) method is: isNullable()
statement is: TableColumn tableColumn1 = new TableColumn(((Table) (null)), tableColumnMeta1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(TableColumnMeta.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: TableColumnMeta argument is: TableColumnMeta.class
Matched Method is: mock(class net.sourceforge.schemaspy.model.xml.TableColumnMeta)
i 0 Parameters size() 0 Num of Method Parameters: 9
i 1 Parameters size() 0 Num of Method Parameters: 9
i 2 Parameters size() 0 Num of Method Parameters: 9
i 3 Parameters size() 0 Num of Method Parameters: 9
i 4 Parameters size() 0 Num of Method Parameters: 9
i 5 Parameters size() 0 Num of Method Parameters: 9
i 6 Parameters size() 0 Num of Method Parameters: 9
i 7 Parameters size() 0 Num of Method Parameters: 9
i 8 Parameters size() 0 Num of Method Parameters: 9
statement is: doReturn("column2").when(tableColumnMeta2).getId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column2").when(tableColumnMeta2).getId() target is: doReturn("column2").when(tableColumnMeta2) method is: getId()
statement is: doReturn("column2").when(tableColumnMeta2).getName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("column2").when(tableColumnMeta2).getName() target is: doReturn("column2").when(tableColumnMeta2) method is: getName()
statement is: doReturn(((String) (null))).when(tableColumnMeta2).getComments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((String) (null))).when(tableColumnMeta2).getComments() target is: doReturn(((String) (null))).when(tableColumnMeta2) method is: getComments()
statement is: doReturn(((String) (null))).when(tableColumnMeta2).getDefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((String) (null))).when(tableColumnMeta2).getDefaultValue() target is: doReturn(((String) (null))).when(tableColumnMeta2) method is: getDefaultValue()
statement is: doReturn(0).when(tableColumnMeta2).getDigits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(0).when(tableColumnMeta2).getDigits() target is: doReturn(0).when(tableColumnMeta2) method is: getDigits()
statement is: doReturn(1).when(tableColumnMeta2).getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(1).when(tableColumnMeta2).getSize() target is: doReturn(1).when(tableColumnMeta2) method is: getSize()
statement is: doReturn("null.null").when(tableColumnMeta2).getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("null.null").when(tableColumnMeta2).getType() target is: doReturn("null.null").when(tableColumnMeta2) method is: getType()
statement is: doReturn(false).when(tableColumnMeta2).isAutoUpdated(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(tableColumnMeta2).isAutoUpdated() target is: doReturn(false).when(tableColumnMeta2) method is: isAutoUpdated()
statement is: doReturn(false).when(tableColumnMeta2).isNullable(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(tableColumnMeta2).isNullable() target is: doReturn(false).when(tableColumnMeta2) method is: isNullable()
statement is: TableColumn tableColumn2 = new TableColumn(((Table) (null)), tableColumnMeta2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: table_ByColumnIdComparator.compare(tableColumn1, tableColumn2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: table_ByColumnIdComparator.compare(tableColumn1, tableColumn2) target is: table_ByColumnIdComparator method is: compare(TableColumn,TableColumn)
TestCase is: String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

* test suite isTestSuite: 18
Test 0: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table$ByColumnIdComparator", e);
}

Test 1: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, "", "GIN", "Creating ");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
Table table = null;
try {
  table = new Table((Database) null, "e", (String) null, (String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
Table.getFullName((String) null, "TP_~4_E= IFf[d", (String) null, "PKTABLE_SCHEM");
Test 5: 
Table.getFullName((String) null, (String) null, (String) null, (String) null);
Test 6: 
Table.getFullName("", (String) null, "null.null", "");
Test 7: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);
Test 8: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(1).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(1).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 9: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

Test 10: 
Table table = new Table((Database) "my_table", "my_primary_key", "isPrimaryKey: true", "my_foreign_key", (String) null);

Test 11: 
Table table = new Table((Database) "my_database", "username", "password", "SELECT * FROM my_table", "Creating ");

Test 12: 
Table table = new Table((Database) "employees", "employee_id", "employee_name", "employee_age", (String) null);

Test 13: 
Table.getFullName("TP_~4_E= IFf[d", "PKTABLE_SCHEM", (String) null, (String) null);

Test 14: 
Table.getFullName("John", "Doe", "Jr.", "III");
Table.getFullName("Jane", "Smith", (String) null, (String) null);
Table.getFullName("Bob", "Dylan", "McGee", "PhD");

Test 15: 
Table.getFullName("John", "Doe", "J", "Jr.");
Table.getFullName("", "null.null", "", (String) null);
Table.getFullName("Alice", "Smith", "M", "Sr.");

Test 16: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

Test 17: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);


* Generated after the refinement and before minimization 18 tests with total length 72
* test suite isTestSuite: 18
Test 0: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table$ByColumnIdComparator", e);
}

Test 1: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, "", "GIN", "Creating ");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
Table table = null;
try {
  table = new Table((Database) null, "e", (String) null, (String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
Table.getFullName((String) null, "TP_~4_E= IFf[d", (String) null, "PKTABLE_SCHEM");
Test 5: 
Table.getFullName((String) null, (String) null, (String) null, (String) null);
Test 6: 
Table.getFullName("", (String) null, "null.null", "");
Test 7: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);
Test 8: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(1).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(1).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 9: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

Test 10: 
Table table = new Table((Database) "my_table", "my_primary_key", "isPrimaryKey: true", "my_foreign_key", (String) null);

Test 11: 
Table table = new Table((Database) "my_database", "username", "password", "SELECT * FROM my_table", "Creating ");

Test 12: 
Table table = new Table((Database) "employees", "employee_id", "employee_name", "employee_age", (String) null);

Test 13: 
Table.getFullName("TP_~4_E= IFf[d", "PKTABLE_SCHEM", (String) null, (String) null);

Test 14: 
Table.getFullName("John", "Doe", "Jr.", "III");
Table.getFullName("Jane", "Smith", (String) null, (String) null);
Table.getFullName("Bob", "Dylan", "McGee", "PhD");

Test 15: 
Table.getFullName("John", "Doe", "J", "Jr.");
Table.getFullName("", "null.null", "", (String) null);
Table.getFullName("Alice", "Smith", "M", "Sr.");

Test 16: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);

Test 17: 
String string = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);
String string = null;
String string = null;
int _int = null;
String string = null;
String string = null;
int _int = null;
String string = null;
boolean _boolean = null;
boolean _boolean = null;
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn(string).when(tableColumnMeta).getComments();
doReturn(string).when(tableColumnMeta).getDefaultValue();
doReturn(_int).when(tableColumnMeta).getDigits();
doReturn(string).when(tableColumnMeta).getId();
doReturn(string).when(tableColumnMeta).getName();
doReturn(_int).when(tableColumnMeta).getSize();
doReturn(string).when(tableColumnMeta).getType();
doReturn(_boolean).when(tableColumnMeta).isAutoUpdated();
doReturn(_boolean).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) tableColumnMeta, (TableColumnMeta) string);


* Minimizing test suite
* test suite isTestSuite: 9
Test 0: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table$ByColumnIdComparator", e);
}

Test 1: 
Table table = null;
try {
  table = new Table((Database) null, "e", (String) null, (String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, "", "GIN", "Creating ");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
Table table = null;
try {
  table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
Table.getFullName("TP_~4_E= IFf[d", "PKTABLE_SCHEM", (String) null, (String) null);
Test 5: 
Table.getFullName("", (String) null, "null.null", "");
Test 6: 
Table.getFullName((String) null, (String) null, (String) null, (String) null);
Test 7: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
table_ByColumnIdComparator.compare(tableColumn, tableColumn);
Test 8: 
Table.ByColumnIdComparator table_ByColumnIdComparator = new Table.ByColumnIdComparator();
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(1).when(tableColumnMeta).getDigits();
doReturn("null.null").when(tableColumnMeta).getId();
doReturn("null.null").when(tableColumnMeta).getName();
doReturn(1).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(true).when(tableColumnMeta).isAutoUpdated();
doReturn(true).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
TableColumnMeta tableColumnMeta = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(tableColumnMeta).getComments();
doReturn((String) null).when(tableColumnMeta).getDefaultValue();
doReturn(0).when(tableColumnMeta).getDigits();
doReturn((String) null).when(tableColumnMeta).getId();
doReturn((String) null).when(tableColumnMeta).getName();
doReturn(0).when(tableColumnMeta).getSize();
doReturn((String) null).when(tableColumnMeta).getType();
doReturn(false).when(tableColumnMeta).isAutoUpdated();
doReturn(false).when(tableColumnMeta).isNullable();
TableColumn tableColumn = new TableColumn((Table) null, tableColumnMeta);
// Undeclared exception!
try { 
  table_ByColumnIdComparator.compare(tableColumn, tableColumn);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 5%
* Total number of goals: 380
* Number of covered goals: 18
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 5%
* Total number of goals: 438
* Number of covered goals: 21
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 1%
* Total number of goals: 188
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 7%
* Total number of goals: 54
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 5%
* Total number of goals: 380
* Number of covered goals: 18
* Generated 9 tests with total length 20
* Resulting test suite's coverage: 4% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Table table = null;
try {
  table = new Table((Database) null, "e", (String) null, (String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table", e);
}


** It was a parseable test case! 
refined test name is: testNullPointerExceptionOnNullDatabase
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Table table = null;
try {
  table = new Table((Database) null, (String) null, "", "GIN", "Creating ");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table", e);
}


** It was a parseable test case! 
refined test name is: testCreatingATableWithNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Table table = null;
try {
  table = new Table((Database) null, (String) null, (String) null, " isPrimaryKey: ", (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("net.sourceforge.schemaspy.model.Table", e);
}


** It was a parseable test case! 
refined test name is: testNullDatabaseArgumentConstructor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String fullName = Table.getFullName("TP_~4_E= IFf[d", "PKTABLE_SCHEM", (String) null, (String) null);
assertNotNull(fullName);
assertEquals("PKTABLE_SCHEM.null", fullName);


** It was a parseable test case! 
refined test name is: testGetFullNameWithNullParams
* Compiling Tests
refined test name is: testGetFullNameWithNullParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String fullName = Table.getFullName("", (String) null, "null.null", "");
assertEquals("null.null.", fullName);
assertNotNull(fullName);


** It was a parseable test case! 
refined test name is: testGetFullNameWithEmptyAndNullParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String fullName = Table.getFullName((String) null, (String) null, (String) null, (String) null);
assertNotNull(fullName);
assertEquals("null.null", fullName);


** It was a parseable test case! 
refined test name is: testGetFullNameWithNullArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:24.910 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:45:24.940 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.020 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:45:25.022 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.103 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:45:25.105 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
[MASTER] 00:45:25.179 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
[MASTER] 00:45:25.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.252 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
[MASTER] 00:45:25.328 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
** Write a test suite: 3 called: 0 to improve: false
[MASTER] 00:45:25.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:45:25.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
** Write a test suite: 2 called: 0 to improve: false
[MASTER] 00:45:25.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4099597510463081216.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'Table_ESTest' to evosuite-tests
[MASTER] 00:45:25.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4099597510463081216.jar
** Write a test suite: 2 called: 0 to improve: false
* Done!

* Computation finished
