/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 09:43:49 GMT 2024
 */


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Menu_ESTest extends Menu_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDVDMainMenuThrowsNullPointerException() throws Throwable  {
      // Given: A menu object that has not been initialized
      Menu menu = new Menu();
      
      // When: The DVDMainMenu method is called on the menu object
      try {
      menu.DVDMainMenu();
      } catch(NullPointerException e) {
      // Then: An exception should be thrown with a null message
      assertEquals("Expecting exception: NullPointerException", e);
      
      // no message in exception (getMessage() returned null)
      verifyException("Menu", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateXMLThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      Menu menu = new Menu();
      // Undeclared exception!
      try { 
        menu.createXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Menu", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitThrowsNullPointerException() throws Throwable  {
      // Given: A menu instance with invalid input data
      Menu menu = new Menu();
      
      try {
      menu.init();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // When: The init method is called with invalid input
      // Then: A NullPointerException should be thrown
      verifyException("Menu", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMenuTaking6Arguments() throws Throwable  {
      // rollbacked to evosuite
      Menu menu = new Menu("Appetizers", "Starters", "Salads", "Soups", true, (GUI) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMenuTaking4Arguments() throws Throwable  {
      // rollbacked to evosuite
      Menu menu = new Menu("", "ZM QT", true, (GUI) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRunThrowsNullPointerException() throws Throwable  {
      // Given: a new instance of the Menu class and an expected NullPointerException
      Menu menu = new Menu();
      assertThrows(NullPointerException.class, () -> menu.run());
      
      // When: calling the run method with a null argument
      try {
      menu.run();
      } catch (NullPointerException e) {
      // Then: verify that the expected exception is thrown and that the message is null
      assertEquals(null, e.getMessage());}
  }
}
