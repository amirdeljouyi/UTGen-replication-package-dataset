/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 18:27:02 GMT 2024
 */

package net.sf.sugar.fspath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.io.File;
import java.net.URI;
import java.util.Date;
import net.sf.sugar.fspath.FSPathResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FSPathResult_ESTest extends FSPathResult_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningNull() throws Throwable  {
      // Given a File object representing a temporary file with the extension ".t5.xSigP" and a filename that starts with "NM6Dj>V`x"
      File arg0 = MockFile.createTempFile(".t5.xSigP", "NM6Dj>V`x");
      
      // When we create an FSPathResult object from the File object
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // Then the URI of the resulting FSPathResult should be null, as it is a temporary file and does not have a valid URI
      assertNull(fSPathResult.getURI());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsAbsoluteIsFalse() throws Throwable  {
      // Given a FSPathResult object with a null URI argument
      URI arg0 = MockURI.URI((String) null, (String) null, (String) null, (String) null);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // When the getURI method is called on the FSPathResult object
      URI uRI = fSPathResult.getURI();
      
      // Then the resulting URI should have an empty raw path
      assertEquals("", uRI.getRawPath());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsOpaqueIsTrue() throws Throwable  {
      // Given a FSPathResult object with a URI that has no user info
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "", (String) null, 376, "", "", "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // When the getURI method is called on the FSPathResult object
      URI uRI = fSPathResult.getURI();
      
      // Then the returned URI should have no raw user info
      assertNull(uRI.getRawUserInfo());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNull() throws Throwable  {
      // Given a FSPathResult object with a negative value for the path length
      Double arg0 = new Double(-1129.0);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // When we call getString() on this FSPathResult object
      String string = fSPathResult.getString();
      
      // Then the result is null, as the path length is negative and cannot be represented as a valid String
      assertNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNonEmptyString() throws Throwable  {
      // Given a FSPathResult object containing a string that starts with "^811%M9G6jh^IEQ:"
      FSPathResult fSPathResult = new FSPathResult("^811%M9G6jh^IEQ:");
      
      // When the getString() method is called on the FSPathResult object
      String string = fSPathResult.getString();
      
      // Then the resulting string should be equal to the original input string
      assertEquals("^811%M9G6jh^IEQ:", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningNull() throws Throwable  {
      // Given a mock URI object that has no information about the file system path
      URI arg0 = MockURI.URI((String) null, (String) null, (String) null, (String) null);
      
      // When the FSPathResult is created with the mock URI object
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // Then the resulting File object should be null
      assertNull(fSPathResult.getFile());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereIsAbsoluteIsTrue() throws Throwable  {
      // Given: Set the current time to a specific value for predictable results
      System.setCurrentTimeMillis(-39L);
      
      // When: Create a temporary file with a unique name and write some data to it
      File tempFile = MockFile.createTempFile("<A Oj^=n@s-(!7C]a", "<A Oj^=n@s-(!7C]a");
      
      // And: Create an FSPathResult object for the file and get its file object
      FSPathResult fSPathResult = new FSPathResult(tempFile);
      File file = fSPathResult.getFile();
      
      // Then: Assert that the length of the file is 0
      assertEquals(0L, file.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsZero() throws Throwable  {
      // Create a mock File object with a null path and a random name
      MockFile mockFile = new MockFile((String)null, "pWNj");
      
      // Create a new FSPathResult using the mock file object
      FSPathResult fsPathResult = new FSPathResult(mockFile);
      
      // Get the file object from the FSPathResult
      File file = fsPathResult.getFile();
      
      // Assert that the file is not a directory
      assertFalse(file.isDirectory());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      // Given a FSPathResult with a MockDate object
      MockDate mockDate = new MockDate();
      FSPathResult fsPathResult = new FSPathResult(mockDate);
      
      // When the getDate method is called on the FSPathResult
      Date date = fsPathResult.getDate();
      
      // Then assert that the Date returned matches the expected value
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingURI() throws Throwable  {
      // Given a file URI
      URI fileURI = MockURI.aFileURI;
      
      // When we create an FSPathResult object from this URI
      FSPathResult fSPathResult = new FSPathResult(fileURI);
      
      // Then the toString() method should return the expected string representation of the path
      String expectedPath = "file:///tmp/foo.bar";
      assertEquals(expectedPath, fSPathResult.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNonEmptyString() throws Throwable  {
      // Given a FSPathResult with a boolean value of false
      Boolean arg0 = Boolean.FALSE;
      
      // When the toString method is called on the result object
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      
      // Then the resulting string should be "false"
      assertEquals("false", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDouble() throws Throwable  {
      // Given a FSPathResult instance with a Double value of 616.2350011863235
      Double arg0 = new Double(616.2350011863235);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // When the toString method is called on the FSPathResult instance
      String string = fSPathResult.toString();
      
      // Then the toString method should return a string representation of the Double value with 2 decimal places
      assertEquals("616.23", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      // Given: A newly created FSPathResult object with an empty path
      FSPathResult fSPathResult = new FSPathResult("");
      
      // When: The toString method is called on the FSPathResult object
      String string = fSPathResult.toString();
      
      // Then: The resulting string should be an empty string
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingFile() throws Throwable  {
      File arg0 = MockFile.createTempFile(".t5.xSigP", "NM6Dj>V`x");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      // Given: we have a File object representing a temporary file with a specific name and extension
      
      String string = fSPathResult.toString();
      // When: we convert the FSPathResult to a String
      
      assertEquals("/tmp/.t5.xSigP0NM6Dj>V`x", string);
      // Then: we assert that the resulting String is equal to the expected value, which is the path of the temporary file
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingBoolean() throws Throwable  {
      // Given: A FSPathResult with a null result
      FSPathResult fSPathResult = new FSPathResult((Boolean) null);
      
      // When: The toString method is called
      String string = fSPathResult.toString();
      
      // Then: The resulting string should be "FSPathResult : empty"
      assertNotNull(string);
      assertEquals("FSPathResult : empty", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsPositive() throws Throwable  {
      // Given: We have a MockFile object called "mockFile" and an FSPathResult instance with the mockFile as its argument.
      MockFile mockFile = new MockFile("");
      FSPathResult fSPathResult = new FSPathResult(mockFile);
      
      // When: We call the getFile() method on the FSPathResult object.
      File file = fSPathResult.getFile();
      
      // Then: The returned File object should be equal to the MockFile object passed in as an argument.
      assertSame(mockFile, file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDate() throws Throwable  {
      // Given a MockDate object
      MockDate arg0 = new MockDate();
      
      // When the FSPathResult toString method is called on it
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      
      // Then the resulting string should not be null and should match the expected format
      assertNotNull(string);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningEmptyString() throws Throwable  {
      // Create a new instance of FSPathResult with an empty string
      FSPathResult fsPathResult = new FSPathResult("");
      
      // Call the getString method on the FSPathResult object
      String result = fsPathResult.getString();
      
      // Assert that the result is an empty string
      assertEquals("", result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      // Given: A FSPathResult object with an empty string as its path
      FSPathResult fSPathResult = new FSPathResult("");
      
      // When: The date is retrieved from the FSPathResult object
      Date date = fSPathResult.getDate();
      
      // Then: The date should be null
      assertNull(date);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereGetPortIsPositive() throws Throwable  {
      // Given: A FSPathResult instance, "fSPathResult", with a non-empty path
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "", "net.sf.sugar.fspath.FSPathResult", 376, "", "", "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      
      // When: The URI of the FSPathResult instance is retrieved
      URI uRI = fSPathResult.getURI();
      
      // Then: The retrieved URI is absolute
      assertTrue(uRI.isAbsolute());
  }
}
