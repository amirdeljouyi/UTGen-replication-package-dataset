/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 15:27:22 GMT 2024
 */

package net.virtualinfinity.atrobots.gui.renderers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.util.LinkedHashSet;
import java.util.Set;
import net.virtualinfinity.atrobots.gui.renderers.RobotRenderer;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RobotRenderer_ESTest extends RobotRenderer_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetShowStatusBars() throws Throwable  {
      // Given a RobotRenderer instance with the default setting for showStatusBars
      RobotRenderer robotRenderer = new RobotRenderer();
      
      // When we call isShowStatusBars on the instance
      boolean actualValue = robotRenderer.isShowStatusBars();
      
      // Then we expect the return value to be true (the default setting)
      assertTrue(actualValue);
      
      // Given a RobotRenderer instance with showStatusBars set to false
      robotRenderer.setShowStatusBars(false);
      
      // When we call isShowStatusBars on the instance
      boolean actualValue2 = robotRenderer.isShowStatusBars();
      
      // Then we expect the return value to be false
      assertFalse(actualValue2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsRenderDeadReturningFalse() throws Throwable  {
      // rollbacked to evosuite
      RobotRenderer robotRenderer = new RobotRenderer();
      assertTrue(robotRenderer.isRenderDead());
      
      robotRenderer.setRenderDead(false);
      robotRenderer.isRenderDead();
      assertTrue(robotRenderer.isFillShield());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFillShield() throws Throwable  {
      RobotRenderer robotRenderer;
      // Given a RobotRenderer object with the default configuration, where the shield is filled by default
      robotRenderer = new RobotRenderer();
      assertTrue(robotRenderer.isFillShield());
      
      // When the fillShield property of the RobotRenderer object is set to false
      robotRenderer.setFillShield(false);
      boolean fillShield = robotRenderer.isFillShield();
      // Then the shield should not be filled
      assertFalse(fillShield);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsRenderDeadReturningTrue() throws Throwable  {
      // Given: A RobotRenderer object is created and the renderDead variable is set to true
      RobotRenderer robotRenderer = new RobotRenderer();
      boolean renderDead = robotRenderer.isRenderDead();
      
      // When: The RobotRenderer's properties are accessed
      boolean isFillShield = robotRenderer.isFillShield();
      boolean showStatusBars = robotRenderer.isShowStatusBars();
      boolean showName = robotRenderer.isShowName();
      
      // Then: The properties of the RobotRenderer should be set to true
      assertTrue(isFillShield);
      assertTrue(showStatusBars);
      assertTrue(renderDead);
      assertTrue(showName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsShowStatusBarsReturningTrue() throws Throwable  {
      // Given a RobotRenderer object with different parameters
      RobotRenderer robotRenderer = new RobotRenderer();
      robotRenderer.setFillShield(true);
      robotRenderer.setShowStatusBars(true);
      robotRenderer.setRenderDead(true);
      robotRenderer.setShowName(true);
      
      // When the renderRobot method is called with different parameters
      boolean showStatusBars = robotRenderer.isShowStatusBars();
      assertTrue(robotRenderer.isFillShield());
      assertTrue(showStatusBars);
      assertTrue(robotRenderer.isRenderDead());
      assertTrue(robotRenderer.isShowName());
      
      // Then the correct output should be returned
      assertEquals(1, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRender() throws Throwable  {
      // Given a robot renderer and some test data
      RobotRenderer robotRenderer = new RobotRenderer();
      Graphics2D arg0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RobotSnapshot arg1 = new RobotSnapshot();
      LinkedHashSet<Integer> arg2 = new LinkedHashSet<>();
      
      // When the render method is called with the test data
      robotRenderer.render(arg0, arg1, (Set<Integer>) arg2);
      
      // Then the fill shield property should be set to true
      assertTrue(robotRenderer.isFillShield());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsFillShieldReturningTrue() throws Throwable  {
      RobotRenderer robotRenderer = new RobotRenderer();
      // Given that we have a robot renderer instance
      
      boolean fillShield = robotRenderer.isFillShield();
      // When we ask the robot renderer if it should fill the shield
      
      assertTrue(robotRenderer.isShowName());
      // Then we expect the robot renderer to show the name of the robot
      
      assertTrue(fillShield);
      // Then we expect the robot renderer to fill the shield with a color
      
      assertTrue(robotRenderer.isRenderDead());
      // Then we expect the robot renderer to render the dead robot in a specific way
      
      assertTrue(robotRenderer.isShowStatusBars());
      // Then we expect the robot renderer to show status bars for the robot
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRenderThrowsNullPointerException() throws Throwable  {
      // Given: A robot renderer with its render dead flag set to true
      RobotRenderer robotRenderer = new RobotRenderer();
      robotRenderer.setRenderDead(true);
      
      // And: A graphics context and a robot snapshot object
      Graphics2D graphicsContext = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      RobotSnapshot robotSnapshot = new RobotSnapshot();
      
      // When: The render method is called with the graphics context and robot snapshot objects
      LinkedHashSet<Integer> set = new LinkedHashSet<>();
      try {
      robotRenderer.render(graphicsContext, robotSnapshot, (Set<Integer>) set);
      
      // Then: A null pointer exception should be thrown
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      verifyException("net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetShowName() throws Throwable  {
      // rollbacked to evosuite
      RobotRenderer robotRenderer = new RobotRenderer();
      assertTrue(robotRenderer.isShowName());
      
      robotRenderer.setShowName(false);
      boolean showName = robotRenderer.isShowName();
      assertFalse(showName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsShowNameReturningTrue() throws Throwable  {
      // Set up a new robot renderer object
      RobotRenderer robotRenderer = new RobotRenderer();
      
      // Test the isShowName method
      boolean showName = robotRenderer.isShowName();
      assertTrue(showName);
      
      // Test the isRenderDead method
      assertTrue(robotRenderer.isRenderDead());
      
      // Test the isShowStatusBars method
      assertTrue(robotRenderer.isShowStatusBars());
      
      // Test the isFillShield method
      assertTrue(robotRenderer.isFillShield());
  }
}
