/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 09:17:00 GMT 2024
 */

package com.lts.swing.combobox;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.swing.combobox.SimpleComboBox;
import com.lts.swing.combobox.SimpleComboBoxModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleComboBox_ESTest extends SimpleComboBox_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetModel() throws Throwable  {
      // Given: We have a SimpleComboBoxModel object and a new SimpleComboBox instance
      SimpleComboBoxModel model = new SimpleComboBoxModel();
      SimpleComboBox comboBox = new SimpleComboBox(model);
      
      // When: The focus traversal keys are enabled for the SimpleComboBox
      comboBox.setFocusTraversalKeysEnabled(true);
      
      // Then: The getFocusTraversalKeysEnabled method should return true
      assertTrue(comboBox.getFocusTraversalKeysEnabled());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedValueReturningNonNull() throws Throwable  {
      // Given a SimpleComboBoxModel and a SimpleComboBox instance, with the model containing null items
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox arg2 = new SimpleComboBox(arg0);
      arg0.insert(0, (Object) null, arg2);
      
      // When a null item is inserted into the model
      arg0.insert(0, (Object) null, arg2);
      
      // Then the selected value should not be a focus traversal policy provider
      SimpleComboBox selectedValue = (SimpleComboBox)arg2.getSelectedValue();
      assertFalse(selectedValue.isFocusTraversalPolicyProvider());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Byte arg1 = new Byte((byte)109);
      arg0.add((Object) null, arg1);
      long selectedLong = simpleComboBox.getSelectedLong();
      assertEquals(109L, selectedLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningPositive() throws Throwable  {
      // Create a new SimpleComboBoxModel and a SimpleComboBox with it
      SimpleComboBoxModel model = new SimpleComboBoxModel();
      SimpleComboBox comboBox = new SimpleComboBox(model);
      
      // Add an item to the model at index 0, with a null value and a Byte object
      Byte byteValue = new Byte((byte)40);
      model.insert(0, null, byteValue);
      
      // Get the selected int from the combo box
      int selectedInt = comboBox.getSelectedInt();
      
      // Assert that the selected int is equal to 40
      assertEquals(40, selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningZero() throws Throwable  {
      SimpleComboBoxModel model = new SimpleComboBoxModel();
      SimpleComboBox comboBox = new SimpleComboBox(model);
      
      // Add a null item to the combobox with a priority of 0 (low)
      model.insert(0, (Object) null, new Byte((byte)0));
      
      // Verify that the selected long is equal to the inserted long
      long expectedLong = 0L;
      long actualLong = comboBox.getSelectedLong();
      assertEquals(expectedLong, actualLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningNegative() throws Throwable  {
      // Given: A SimpleComboBox instance with an empty model
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      
      // When: The selected item is retrieved
      long selectedLong = simpleComboBox.getSelectedLong();
      
      // Then: The selected item should be null
      assertEquals((-1L), selectedLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongThrowsIllegalArgumentException() throws Throwable  {
      // Test that an IllegalArgumentException is thrown when trying to get the selected long from a null combo box model
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox arg1 = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      
      // Expect an IllegalArgumentException to be thrown when trying to get the selected long from a null combo box model
      try {
      arg1.getSelectedLong();
      fail("Expected exception: IllegalArgumentException");
      } catch (IllegalArgumentException e) {
      // Verify that the expected exception was thrown
      assertEquals(e.getMessage(), "No selected item in combo box model", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningZero() throws Throwable  {
      // rollbacked to evosuite
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Byte arg2 = new Byte((byte)0);
      arg0.insert(0, (Object) null, arg2);
      int selectedInt = simpleComboBox.getSelectedInt();
      assertEquals(0, selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningNegative() throws Throwable  {
      // Given a SimpleComboBox with an empty selection
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      
      // When the getSelectedInt method is called on the SimpleComboBox
      int selectedInt = simpleComboBox.getSelectedInt();
      
      // Then the returned value should be -1, indicating no selection has been made
      assertEquals((-1), selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntThrowsIllegalArgumentException() throws Throwable  {
      // rollbacked to evosuite
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox arg1 = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      // Undeclared exception!
      try { 
        arg1.getSelectedInt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.combobox.SimpleComboBox", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedValueReturningNull() throws Throwable  {
      // Given: A new instance of SimpleComboBox with a SimpleComboBoxModel
      SimpleComboBoxModel model = new SimpleComboBoxModel();
      SimpleComboBox combo = new SimpleComboBox(model);
      
      // When: The selected value is retrieved
      Object selectedValue = combo.getSelectedValue();
      
      // Then: The selected value should be null
      assertNull(selectedValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectedValue() throws Throwable  {
      // Given a combo box with a selection of "apple"
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      simpleComboBox.setSelectedValue("apple");
      
      // When the focus traversal policy provider is retrieved
      boolean isFocusTraversalPolicyProvider = simpleComboBox.isFocusTraversalPolicyProvider();
      
      // Then the value of the focus traversal policy provider should be false
      assertFalse(isFocusTraversalPolicyProvider);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateSimpleComboBoxThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      SimpleComboBox simpleComboBox = null;
      try {
        simpleComboBox = new SimpleComboBox((SimpleComboBoxModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
