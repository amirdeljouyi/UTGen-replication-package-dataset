/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 04:51:28 GMT 2024
 */

package jipa;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import jipa.Main;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Main_ESTest extends Main_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveCommentReturningEmptyString() throws Throwable  {
      // No Comments were added
      String removeComment = Main.removeComment("");
      assertEquals("", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningFalse() throws Throwable  {
      // This test verifies that the isNumeric method returns false for a null string input.
      boolean numeric = Main.isNumeric((String) null);
      assertFalse(numeric);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileName() throws Throwable  {
      // Given: We have a SystemInUtil object and a Main class with a getFileName() method that returns the filename entered by the user through standard input.
      // When: The user enters "abc123" as their filename.
      SystemInUtil.addInputLine("abc123");
      String fileName = Main.getFileName();
      // Then: The returned filename should be "abc123".
      assertEquals("abc123", fileName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValueReturningNegative() throws Throwable  {
      // Given a string with a word and a punctuation mark at the end
      String inputString = "The quick brown fox jumps over the lazy dog.";
      
      // When the method is called on the input string
      int jumpValue = Main.getJumpValue(inputString);
      
      // Then the method should return the expected value
      assertEquals((-2), jumpValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      int value = Main.getValue("*");
      assertEquals((-1), value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testResetInstructions() throws Throwable  {
      // rollbacked to evosuite
      Main.resetInstructions();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructions() throws Throwable  {
      // No Comments were added
      boolean loadInstructions = Main.loadInstructions("./instructions/load-instructions");
      assertFalse(loadInstructions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsNoSuchElementException() throws Throwable  {
      // Given: an empty file is provided as input
      String filename = "";
      
      // When: we call the loadInstructions method with this file
      try {
      Main.loadInstructions(filename);
      fail("Expecting exception: NoSuchElementException");
      
      } catch (NoSuchElementException e) {
      // Then: a NoSuchElementException is thrown, indicating that no line was found in the file
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToOpcode() throws Throwable  {
      // rollbacked to evosuite
      Main.opcodes opcode = Main.opcodes.toOpcode("0123456789");
      assertEquals(Main.opcodes.novalue, opcode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningTrue() throws Throwable  {
      // No Comments were added
      boolean numeric = Main.isNumeric("123");
      assertTrue(numeric);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue0() throws Throwable  {
      // No Comments were added
      String stringValue = Main.getStringValue("Hello, world!");
      assertEquals("0", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue1() throws Throwable  {
      // Arrange
      String inputString = "]Y\"\"J";
      Main main = new Main();
      
      // Act
      String stringValue = main.getStringValue(inputString);
      
      // Assert
      assertEquals("00", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadValue() throws Throwable  {
      // Given: A user enters a value of 10.5 into the system input line
      SystemInUtil.addInputLine("10.5");
      
      // When: The user reads the value from the system input line
      int readValue = Main.readValue();
      
      // Then: The program should return 0 as the value is not valid
      assertEquals(0, readValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningZero() throws Throwable  {
      // No Comments were added
      int value = Main.getValue("00");
      assertEquals(0, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments0() throws Throwable  {
      // No Comments were added
      String[] splitArguments = Main.splitArguments("UP#]]~8pBSh>\"2,yb%");
      assertEquals(1, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments1() throws Throwable  {
      // Split the argument string into an array of strings
      String[] splitArguments = Main.splitArguments("123,456,789");
      
      // Check that there are three elements in the array
      assertEquals(3, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveComment0() throws Throwable  {
      // Arrange
      String originalString = "This is a comment that needs to be removed from the code.";
      String expectedResult = "This is a comment that needs to be removed from the code.";
      
      // Act
      String actualResult = Main.removeComment(originalString);
      
      // Assert
      assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveComment1() throws Throwable  {
      // No Comments were added
      String removeComment = Main.removeComment("-+jgtu/90olw,;]4]");
      assertEquals("-+jgtu/90olw,", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsSystemExitException() throws Throwable  {
      // When an invalid file is passed to the "loadInstructions" method,
      // it should throw a "System.SystemExitException" exception with a message indicating that the file could not be found.
      try {
      Main.loadInstructions("q");
      fail("Expecting System.SystemExitException");
      } catch(System.SystemExitException e) {
      verifyException("org.evosuite.runtime.System", e);
      assertTrue(e.getMessage() != null && e.getMessage().contains("File not found"));}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // Test the behavior of the processInstruction method when an ArrayIndexOutOfBoundsException is thrown
      try {
      Main.processInstruction("cmp");
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Verify that the correct exception is thrown and its message matches the expected value
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException0() throws Throwable  {
      try {
      Main.processInstruction("je");
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      /*
      *  Here we are verifying that the exception thrown is indeed a NullPointerException and
      *  that it was caused by an invalid instruction. We also check that the message in the
      *  exception is null, which means that there is no additional information about the
      *  exception.
      */
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException1() throws Throwable  {
      // Given: The Main class has a processInstruction method that takes a String instruction as an argument and returns the result of executing the instruction.
      // When: The "jz" instruction is passed to the processInstruction method, which causes a NullPointerException to be thrown.
      try {
      // Try to execute the "jz" instruction, which should throw a NullPointerException.
      Main.processInstruction("jz");
      
      // Fail if no exception is thrown.
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException2() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("jbe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException3() throws Throwable  {
      // Test that an exception is thrown when trying to process a null pointer instruction
      try {
      Main.processInstruction("jb");
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception has the correct type and message
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException4() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("jae");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException5() throws Throwable  {
      try {
      Main.processInstruction(null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception is related to the variable being null
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException6() throws Throwable  {
      try {
      Main.processInstruction("jnz");
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception is of the expected type and contains the correct message.
      assertEquals(NullPointerException.class, e.getClass());
      assertTrue(e.getMessage().contains("Variable"));}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException7() throws Throwable  {
      // Given: the input string "and" is being passed to the processInstruction method
      try {
      Main.processInstruction("and");
      
      // When: the input string is processed by the processInstruction method
      
      // Then: an exception is thrown with a NullPointerException message
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException8() throws Throwable  {
      // Given: The input instruction is "or"
      String instruction = "or";
      
      try {
      // When: The method is called with the input instruction
      Main.processInstruction(instruction);
      
      // Then: An exception should be thrown
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Given: The expected exception is a NullPointerException
      verifyException("jipa.Variable", e);
      
      // When: The exception is caught
      String message = e.getMessage();
      
      // Then: The message should be null
      assertNull(message);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException9() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("xor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException10() throws Throwable  {
      // Undeclared exception!
      try {
      Main.processInstruction("mod");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException11() throws Throwable  {
      // Given: We have a Main class with a processInstruction method that takes a string as input
      // and returns an object of type Variable.
      // When: The processInstruction method is called with the string "mul"
      try {
      // Then: A NullPointerException should be thrown because the method attempts to access a null variable.
      Main.processInstruction("mul");
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException12() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("sub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException13() throws Throwable  {
      try {
      Main.processInstruction("add");
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the thrown exception is an instance of the expected type
      assertTrue(e instanceof NullPointerException);
      // Verify that the message in the exception matches the expected value
      assertEquals("jipa.Variable", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException14() throws Throwable  {
      // Test for expected NullPointerException when processing an invalid instruction
      try {
      Main.processInstruction("dec");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is a JIPA variable exception, with no message
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException15() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Main.processInstruction("inc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException16() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("var");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException17() throws Throwable  {
      try {
      // Given a null variable name
      String variableName = null;
      
      // When we call processInstruction with the variable name
      Main.processInstruction(variableName);
      
      // Then an exception is thrown
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is of type jipa.Variable and has no message (getMessage() returned null)
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // Test that the process instruction method throws an ArrayIndexOutOfBoundsException when called with a null value.
      try {
      Main.processInstruction("set");
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // Verify that the exception is thrown as expected.
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException2() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("cpy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException3() throws Throwable  {
      // Given
      String instruction = "mov";
      
      try {
      // When
      Main.processInstruction(instruction);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNoSuchElementException() throws Throwable  {
      // Test that an exception is thrown when no line is found in the input
      try {
      Main.processInstruction("in");
      fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      // Verify that the exception was thrown due to a missing line
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException18() throws Throwable  {
      // This test verifies that the processInstruction method throws a NullPointerException
      // when an invalid instruction is passed as an argument.
      
      try {
      Main.processInstruction("out");
      fail("Expected NullPointerException to be thrown");
      } catch (NullPointerException e) {
      // Verify that the exception message is null, indicating that no additional information was provided.
      assertEquals(null, e.getMessage());
      
      // Verify that the exception was thrown from the correct class and method.
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsSystemExitException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("halt");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction0() throws Throwable  {
      // rollbacked to evosuite
      Main.processInstruction("jump to the bank");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsTooManyResourcesException() throws Throwable  {
      // Test that the method splits a single argument into an array of individual digits
      String[] arg0 = Main.splitArguments("1234567890");
      assertEquals(10, arg0.length);
      for (int i = 0; i < arg0.length; i++) {
      assertEquals(String.valueOf(i), arg0[i]);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNoSuchElementException() throws Throwable  {
      // Given: The Main class has a main method that takes an array of Strings as input
      String[] args = new String[0];
      
      // When: The main method is invoked with no arguments
      try {
      // Undeclared exception!
      Main.main(args);
      fail("Expecting exception: NoSuchElementException");
      } catch (NoSuchElementException e) {
      // Then: A NoSuchElementException is thrown because the input array has no elements
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction1() throws Throwable  {
      // rollbacked to evosuite
      Main.processInstruction("jmp");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMain() throws Throwable  {
      // Test that the pointer is initialized to 0
      assertEquals(0, Main.iPtr);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValueReturningZero() throws Throwable  {
      // Initialize a variable to hold the value returned by getJumpValue("1")
      int jumpValue = Main.getJumpValue("1");
      
      // Assert that the returned value is equal to 0, which means that the string "1" was successfully parsed as an integer
      assertEquals(0, jumpValue);
  }
}
