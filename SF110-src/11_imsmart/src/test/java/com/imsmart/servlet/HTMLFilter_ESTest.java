/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 16:15:50 GMT 2024
 */

package com.imsmart.servlet;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.imsmart.servlet.HTMLFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HTMLFilter_ESTest extends HTMLFilter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFilterReturningEmptyString() throws Throwable  {
      // Given: A String variable 'filter' that contains an empty string
      String filter = "";
      
      // When: The filter is applied to an empty string
      filter = HTMLFilter.filter(filter);
      
      // Then: The result should be an empty string
      assertEquals("", filter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFilterReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String filter = HTMLFilter.filter("n<='&lt;=g`?6b9,cZ\"a]kbs`");
      assertEquals("n&lt;='&amp;lt;=g`?6b9,cZ&quot;a]kbs`", filter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFilterReturningNull() throws Throwable  {
      // No Comments were added
      String filter = HTMLFilter.filter((String) null);
      assertNull(filter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFilterWithNonEmptyString() throws Throwable  {
      // Given the HTML string "<script>alert('Hello World!')</script><p>This is a paragraph.</p>"
      // When it is passed through the HTMLFilter
      String filteredHTML = HTMLFilter.filter("<script>alert('Hello World!')</script><p>This is a paragraph.</p>");
      
      // Then the filter should return a string that replaces any script tags with an empty string
      assertNotNull(filteredHTML); // Check that the filteredHTML is not null
      assertEquals("&lt;script&gt;alert('Hello World!')&lt;/script&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;", filteredHTML); // Check that the filteredHTML matches the expected output
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHTMLFilter() throws Throwable  {
      // Create a new instance of the HTML filter
      HTMLFilter hTMLFilter = new HTMLFilter();
      
      // Test the filter with various inputs and expected outputs
      assertEquals(hTMLFilter.filter("This is a <b>bold</b> statement."), "This is a bold statement.");
      assertEquals(hTMLFilter.filter("This is an <i>italicized</i> sentence."), "This is an italicized sentence.");
      assertEquals(hTMLFilter.filter("This is a <u>underlined</u> phrase."), "This is a underlined phrase.");
  }
}
