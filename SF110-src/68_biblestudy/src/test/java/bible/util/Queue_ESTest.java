/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 22:03:34 GMT 2024
 */

package bible.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import bible.util.Queue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Queue_ESTest extends Queue_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPeakNumberItemsReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      Object arg0 = new Object();
      queue.enqueue(arg0);
      int peakNumberItems = queue.getPeakNumberItems();
      assertFalse(queue.isEmpty());
      assertEquals(1, peakNumberItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberItemsReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      Object arg0 = new Object();
      queue.enqueue(arg0);
      int numberItems = queue.getNumberItems();
      assertFalse(queue.isEmpty());
      assertEquals(1, numberItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove() throws Throwable  {
      // Given: we have a Queue object and an Object to be added to it
      Queue queue = new Queue();
      Object arg0 = new Object();
      
      // When: we add the Object to the Queue using the refreshElement method
      queue.refreshElement(arg0);
      
      // Then: we expect the Queue to no longer be empty
      assertFalse(queue.isEmpty());
      
      // Given: we have removed the Object from the Queue using the remove method
      int remove = queue.remove(arg0);
      
      // Then: we expect the number of elements in the Queue to be 1
      assertEquals(1, remove);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetObjectsReturningVectorWhereSizeIsZero() throws Throwable  {
      // Given: A new instance of the Queue class is created and a vector of objects is obtained from the queue
      Queue queue = new Queue();
      Vector arg0 = queue.getObjects();
      
      // When: Dequeuing an object from the queue
      queue.dequeue();
      
      // Then: The enqueue method is called with the vector of objects as an argument, and the queue is not empty
      queue.enqueue(arg0);
      assertFalse(queue.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnqueueWithNull() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      queue.enqueue((Object) null);
      assertFalse(queue.maxCapacityExceeded());
      assertEquals(0, queue.getPeakNumberItems());
      assertEquals(0, queue.getNumberItems());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmptyReturningFalse() throws Throwable  {
      // Given: a new instance of the Queue class, and an object to be enqueued
      Queue queue = new Queue();
      Object arg0 = new Object();
      
      // When: the enqueue method is called with the object as an argument
      queue.enqueue(arg0);
      
      // Then: the queue should not be empty
      boolean empty = queue.isEmpty();
      assertFalse(empty);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmptyReturningTrue() throws Throwable  {
      // Given: A new instance of a Queue class is created and the max capacity has not been exceeded
      Queue queue = new Queue();
      boolean maxCapacityExceeded = queue.maxCapacityExceeded();
      assertFalse(maxCapacityExceeded);
      
      // When: The queue is checked if it is empty
      queue.isEmpty();
      int numberItems = queue.getNumberItems();
      int peakNumberItems = queue.getPeakNumberItems();
      boolean isEmpty = queue.isEmpty();
      
      // Then: The queue is found to be empty and the number of items, peak number of items, and max capacity have not been exceeded
      assertTrue(isEmpty);
      assertEquals(0, numberItems);
      assertEquals(0, peakNumberItems);
      assertFalse(maxCapacityExceeded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesNodeTaking2Arguments() throws Throwable  {
      // rollbacked to evosuite
      Queue arg1 = new Queue();
      Queue.Node queue_Node = arg1.new Node(arg1);
      assertEquals(0, arg1.getNumberItems());
      assertEquals(0, arg1.getPeakNumberItems());
      assertFalse(arg1.maxCapacityExceeded());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMaxCapacityExceeded() throws Throwable  {
      // Given: A new Queue instance with no items
      Queue queue = new Queue();
      
      // When: The max capacity is not exceeded
      boolean maxCapacityExceeded = queue.maxCapacityExceeded();
      
      // Then: The maximum capacity should not be exceeded
      assertFalse(maxCapacityExceeded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMaxCapacityExceededReturningTrue() throws Throwable  {
      // Given: A queue with a maximum capacity of 10 items and 10 items already in the queue
      Queue queue = new Queue(10);
      for (int i = 0; i < 10; i++) {
      queue.enqueue(i);
      }
      
      // When: The maximum capacity of the queue is exceeded
      boolean maxCapacityExceeded = queue.maxCapacityExceeded();
      
      // Then: The method should return true
      assertTrue(maxCapacityExceeded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQueueTakingInt() throws Throwable  {
      // Given: A queue with a max capacity of 716 items
      Queue queue = new Queue(716);
      
      // When: The number of items in the queue is 0
      assertEquals(0, queue.getNumberItems());
      
      // Then: Max capacity has not been exceeded
      boolean maxCapacityExceeded = queue.maxCapacityExceeded();
      assertFalse(maxCapacityExceeded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetObjectsReturningVectorWhereSizeIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      Object arg0 = new Object();
      queue.refreshElement(arg0);
      queue.getObjects();
      assertFalse(queue.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDequeueReturningNonNull() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      Object arg0 = new Object();
      queue.enqueue(arg0);
      queue.enqueue(arg0);
      queue.dequeue();
      assertFalse(queue.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberItemsReturningNegative() throws Throwable  {
      // Given: A new instance of the Queue class is created and it's initially empty
      Queue queue = new Queue();
      
      // When: The dequeue method is called on an empty queue
      queue.dequeue();
      
      // Then: The method should return -1 as the queue is empty
      assertEquals(-1, queue.getNumberItems());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnqueueWithNonNull() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      Object arg0 = new Object();
      queue.enqueue(arg0);
      assertEquals(1, queue.getNumberItems());
      
      queue.dequeue();
      assertEquals(0, queue.getNumberItems());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPeakNumberItemsReturningZero() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      int peakNumberItems = queue.getPeakNumberItems();
      assertEquals(0, peakNumberItems);
      assertFalse(queue.maxCapacityExceeded());
      assertEquals(0, queue.getNumberItems());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberItemsReturningZero() throws Throwable  {
      // rollbacked to evosuite
      Queue queue = new Queue();
      int numberItems = queue.getNumberItems();
      assertFalse(queue.maxCapacityExceeded());
      assertEquals(0, numberItems);
      assertEquals(0, queue.getPeakNumberItems());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      // Given: A new instance of a queue is created
      Queue queue = new Queue();
      
      // When: The toString method is called on the queue
      String string = queue.toString();
      
      // Then: The output should be an empty string
      assertEquals("bible.util.Queue:[numItems=0, maxNumItems=0, maxCapacity=-1, getObjects()=[]\r\n]", string);
  }
}
