/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 23:18:39 GMT 2024
 */

package macaw.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import javax.swing.JPanel;
import macaw.businessLayer.User;
import macaw.system.SessionProperties;
import macaw.util.DisplayableListItemAdder;
import macaw.util.DisplayableListItemDeleter;
import macaw.util.DisplayableListItemEditor;
import macaw.util.DisplayableListItemSelector;
import macaw.util.DisplayableListItemViewer;
import macaw.util.DisplayableListPanel;
import macaw.util.DisplayableListParentForm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DisplayableListPanel_ESTest extends DisplayableListPanel_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDisplayableListPanelTaking5ArgumentsAndCallsUpdateButtonStates0() throws Throwable  {
      // Set up a SessionProperties object with some test data
      SessionProperties props = new SessionProperties();
      props.setProperty("currentUser", new User("userInterfaceFactory", "retrievalService"));
      
      // Create a DisplayableListPanel instance and update its button states
      DisplayableListPanel panel = new DisplayableListPanel(props, null, "userInterfaceFactory", true, false);
      panel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDisplayableListPanelTaking4ArgumentsAndCallsUpdateButtonStates() throws Throwable  {
      // Given: The SessionProperties object is created with a current user set
      SessionProperties props = new SessionProperties();
      props.setProperty("currentUser", new User());
      
      // When: A DisplayableListPanel is created with the SessionProperties and displayable list parent form set to null, retrieval service set to "retrievalService" and update button states flag set to true
      DisplayableListPanel panel = new DisplayableListPanel(props, (DisplayableListParentForm) null, "retrievalService", true);
      
      // Then: The updateButtonStates() method is called on the panel, which updates the button states for the list based on the current user and the retrieval service
      panel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDisplayableListPanelTaking5ArgumentsAndCallsUpdateButtonStates1() throws Throwable  {
      SessionProperties sessionProps = new SessionProperties();
      User user = new User();
      sessionProps.setProperty("currentUser", user);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProps, (DisplayableListParentForm) null, "userInterfaceFactory", false, false);
      // Update the button states in the DisplayableListPanel object
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteSelectedListItemsThrowsHeadlessException() throws Throwable  {
      // Given: A JUnit test that is testing the deleteSelectedListItems() method of a DisplayableListPanel class
      // When: The method is called with a headless environment
      SessionProperties sessionProperties = new SessionProperties();
      User currentUser = new User();
      sessionProperties.setProperty("currentUser", currentUser);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "retrievalService", true);
      
      // Then: An exception is thrown with a HeadlessException message
      try {
      displayableListPanel.deleteSelectedListItems();
      fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      verifyException("java.awt.GraphicsEnvironment", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddListItemThrowsHeadlessException() throws Throwable  {
      // Given
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "securityService", false);
      
      // When
      try {
      displayableListPanel.addListItem();
      fail("Expecting exception: HeadlessException");
      } catch (HeadlessException e) {
      // Then
      verifyException("java.awt.GraphicsEnvironment", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDisplayableListPanelTaking4ArgumentsAndCallsGetPanel() throws Throwable  {
      SessionProperties sessionProps = new SessionProperties();
      User user = new User();
      sessionProps.setProperty("currentUser", user);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProps, (DisplayableListParentForm) null, "retrievalService", true);
      JPanel panel = displayableListPanel.getPanel();
      // Check that the focus traversal keys are enabled for the panel
      assertTrue(panel.getFocusTraversalKeysEnabled());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemSelector() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "securityService", true);
      displayableListPanel.setDisplayableListItemSelector((DisplayableListItemSelector) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemViewer() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "securityService", false, true);
      displayableListPanel.setDisplayableListItemViewer((DisplayableListItemViewer) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemEditor() throws Throwable  {
      // Create a SessionProperties object with the current user set to a new User object
      SessionProperties sessionProperties = new SessionProperties();
      sessionProperties.setProperty("currentUser", new User());
      
      // Create a DisplayableListPanel object and set its properties
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "log", true);
      displayableListPanel.setDisplayableListItemEditor((DisplayableListItemEditor) null);
      
      // Assert that the displayable list panel has been initialized correctly
      assertNotNull(displayableListPanel);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSave() throws Throwable  {
      // Given: a SessionProperties object and a User object
      SessionProperties sessionProperties = new SessionProperties();
      User user = new User();
      
      // When: the currentUser property is set on the SessionProperties object
      sessionProperties.setProperty("currentUser", user);
      
      // Then: a DisplayableListPanel instance is created with the SessionProperties and User objects as arguments
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, null, "log", false, false);
      
      // When: the save method is called on the DisplayableListPanel instance
      displayableListPanel.save();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemAdder() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "userInterfaceFactory", false, false);
      displayableListPanel.setDisplayableListItemAdder((DisplayableListItemAdder) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNewRecord() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "", true, false);
      displayableListPanel.setNewRecord(true);
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemDeleter() throws Throwable  {
      // Given: A SessionProperties object and a User object
      SessionProperties sessionProperties = new SessionProperties();
      User user = new User();
      
      // When: Setting the "currentUser" property of the SessionProperties object to the User object
      sessionProperties.setProperty("currentUser", user);
      
      // Then: Creating a DisplayableListPanel object with the SessionProperties object, null as the parent form, and the string "securityService" as the service name
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "securityService", true, true);
      
      // And: Setting the displayableListItemDeleter property of the DisplayableListPanel object to null
      displayableListPanel.setDisplayableListItemDeleter((DisplayableListItemDeleter) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetListOwnerName() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "log", true, true);
      displayableListPanel.setListOwnerName("XOc3bUn'2");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDisplayableListPanelTaking5ArgumentsAndCallsGetPanel() throws Throwable  {
      // Given
      SessionProperties properties = new SessionProperties();
      User user = new User();
      properties.setProperty("currentUser", user);
      
      DisplayableListParentForm parentForm = null;
      String title = "";
      boolean showTitle = true;
      boolean showSearch = false;
      
      // When
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(properties, parentForm, title, showTitle, showSearch);
      JPanel panel = displayableListPanel.getPanel();
      
      // Then
      assertFalse(panel.isFocusTraversalPolicySet());
  }
}
