/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 18:36:14 GMT 2024
 */

package com.allenstudio.ir.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.allenstudio.ir.util.XmlElement;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlElement_ESTest extends XmlElement_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingIntReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Create a new XmlElement with an empty name
      XmlElement xmlElement = new XmlElement("");
      
      // Append the XmlElement to itself
      xmlElement.append(xmlElement);
      
      // Add a sub-element with an empty name
      XmlElement addSubElement = xmlElement.addSubElement("");
      
      // Remove the first sub-element (which is now at index 1)
      XmlElement removeElement = xmlElement.removeElement(1);
      
      // Assert that the removed element is the same as the added element
      assertSame(removeElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingIntReturningXmlElementWhereCountIsPositive() throws Throwable  {
      // rollbacked to evosuite
      XmlElement arg0 = new XmlElement();
      arg0.addElement(arg0);
      XmlElement addSubElement = arg0.addSubElement("3Sh.DU}s8~", "3Sh.DU}s8~");
      assertEquals("3Sh.DU}s8~", addSubElement.getData());
      
      XmlElement removeElement = arg0.removeElement(0);
      assertNotSame(removeElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentReturningXmlElementWhereHasChangedIsFalse() throws Throwable  {
      // Given an XmlElement with a non-null parent
      XmlElement xmlElement = new XmlElement("", "");
      xmlElement.setParent(xmlElement);
      
      // When the getParent method is called
      XmlElement actualParent = xmlElement.getParent();
      
      // Then the method should return the same instance as the parent
      assertSame(actualParent, xmlElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Given a new XmlElement object with no name set
      XmlElement xmlElement = new XmlElement();
      
      // When the getName() method is called without any arguments
      String name = xmlElement.getName();
      
      // Then the method should return null
      assertNull(name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningNull() throws Throwable  {
      // Given: A new XmlElement instance with no sub-elements
      XmlElement xmlElement = new XmlElement();
      xmlElement.subElements = null;
      
      // When: We call the getElements() method
      List elements = xmlElement.getElements();
      
      // Then: The returned list should be null
      assertNull(elements);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningListWhereIsEmptyIsFalse() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement");
      xmlElement.addSubElement("com.allenstudio.ir.util.XmlElement");
      xmlElement.getElements();
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingIntReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Given: An XML element with sub-elements and attributes.
      XmlElement xmlElement = new XmlElement("@ [W(XWp;c4c7ngvT`F");
      xmlElement.addSubElement("E'mh1GA>%b[Xww}hK");
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement arg0 = new XmlElement("(F-6ooco:Cx", arg1);
      xmlElement.append(arg0);
      assertEquals(2, xmlElement.count());
      
      // When: Getting the second sub-element of the XML element.
      XmlElement secondSubElement = xmlElement.getElement(1);
      
      // Then: The returned sub-element is not the same as the original XML element.
      assertNotSame(xmlElement, secondSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataReturningNull() throws Throwable  {
      // Test to ensure that the getData() method returns null when there is no data in the XmlElement object
      // Create an instance of Hashtable with no key-value pairs
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      
      // Create an instance of XmlElement with the hashtable as its argument
      XmlElement xmlElement = new XmlElement("Xu;UO@Ta/oc'w)];", arg1);
      
      // Call the getData() method and assert that it returns null
      String data = xmlElement.getData();
      assertNull(data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataReturningNonEmptyString() throws Throwable  {
      // Create an instance of XmlElement with a name
      XmlElement xmlElement = new XmlElement("/oBYx\"");
      
      // Add a sub element to the XmlElement with a specific data
      XmlElement addSubElement = xmlElement.addSubElement("");
      addSubElement.data = "/oBYx\"";
      
      // Get the data of the added sub element
      String data = addSubElement.getData();
      
      // Assert that the count of sub elements is 1
      assertEquals(1, xmlElement.count());
      
      // Assert that the data of the added sub element is equal to "/oBYx\""
      assertEquals("/oBYx\"", data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributesReturningNull() throws Throwable  {
      // Given a new XmlElement object with no attributes set
      XmlElement xmlElement = new XmlElement();
      
      // When the getAttributes method is called without any arguments
      Hashtable<String, String> attributes = xmlElement.getAttributes();
      
      // Then the returned value should be null
      assertNull(attributes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributesReturningHashtableWhereSizeIsPositive() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement("");
      xmlElement.getAttribute("", "");
      Hashtable<String, String> attributes = xmlElement.getAttributes();
      assertEquals(1, attributes.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningNonEmptyString() throws Throwable  {
      // Given: a new XmlElement instance is created and an attribute with the key "key" is set to "value"
      XmlElement xmlElement = new XmlElement();
      xmlElement.getAttribute("key", "value");
      
      // When: the value of the attribute with the key "key" is retrieved using getAttribute() method
      String attribute = xmlElement.getAttribute("key");
      
      // Then: the value of the attribute with the key "key" should be equal to "value"
      assertEquals("value", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningEmptyString() throws Throwable  {
      // Given the XmlElement "xmlElement" has been created with a name and an attribute
      XmlElement xmlElement = new XmlElement("FS,m1`U,e<");
      xmlElement.addAttribute("", "");
      
      // When the attribute is retrieved using the getAttribute method
      String attribute = xmlElement.getAttribute("");
      
      // Then the expected attribute value should be returned
      assertEquals("", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningPositive() throws Throwable  {
      // Given: An XML element with one sub-element
      XmlElement xmlElement = new XmlElement("root");
      xmlElement.addSubElement("child1");
      
      // When: We call the "count" method on the element
      int count = xmlElement.count();
      
      // Then: The result should be 1, as there is only one sub-element
      assertEquals(1, count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeReturningNonNull() throws Throwable  {
      // Given a Hashtable containing two attributes
      Hashtable<String, String> inputAttributes = new Hashtable<>();
      inputAttributes.put("", "com.allenstudio.ir.util.XmlElement");
      inputAttributes.put("VUE", "");
      
      // When an XmlElement is created with the given attributes
      XmlElement xmlElement = new XmlElement("^d+j|a<Y_**>Fq_", inputAttributes);
      
      // Then the XmlElement should have two attributes
      assertEquals(2, xmlElement.getAttributes().size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingStringReturningXmlElementWhereCountIsPositive() throws Throwable  {
      // rollbacked to evosuite
      XmlElement arg0 = new XmlElement("");
      arg0.append(arg0);
      XmlElement element = arg0.getElement("");
      assertEquals(1, element.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveFromParent() throws Throwable  {
      // Given a XML element "xmlElement"
      XmlElement xmlElement = new XmlElement();
      
      // When the "removeFromParent()" method is called on the element
      xmlElement.removeFromParent();
      
      // Then the number of observers should be 0
      assertEquals(0, xmlElement.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeWithNullAndCreatesXmlElementTakingString() throws Throwable  {
      XmlElement xmlElement = new XmlElement("root");
      // Given an XmlElement with name "root"
      
      Object addAttribute = xmlElement.addAttribute("usSh|8`!?;/", (String) null);
      // When we call addAttribute() with a null value for the attribute name and a null value for the attribute value
      
      assertNull(addAttribute);
      // Then the method should return null, as it is not possible to add an attribute with a null name or a null value.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement(":", ":");
      
      // When
      String name = xmlElement.getName();
      
      // Then
      assertEquals(":", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetData() throws Throwable  {
      // Arrange
      XmlElement xmlElement = new XmlElement();
      
      // Act
      xmlElement.setData("");
      
      // Assert
      assertEquals("", xmlElement.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      // Given: A newly created XmlElement object with a null name and a specific class type
      XmlElement xmlElement = new XmlElement((String) null, "com.allenstudio.ir.util.XmlElement");
      
      // When: The getElements() method is called on the XmlElement object
      List elements = xmlElement.getElements();
      
      // Then: The returned list should be empty
      assertEquals(0, elements.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataReturningEmptyString() throws Throwable  {
      // Given a newly created XML element with no data
      XmlElement xmlElement = new XmlElement(":");
      
      // When we get the data from the XML element
      String data = xmlElement.getData();
      
      // Then we expect an empty string as the result
      assertEquals("", data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParent() throws Throwable  {
      // Given: A new XmlElement object is created
      XmlElement xmlElement = new XmlElement();
      
      // When: The parent of the element is set to null
      xmlElement.setParent((XmlElement) null);
      
      // Then: The count of the element should be 0
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningNull() throws Throwable  {
      // Given: a new XmlElement instance with no attributes set
      XmlElement xmlElement = new XmlElement();
      
      // When: getting the "userName" attribute using the getAttribute method
      String attribute = xmlElement.getAttribute("userName");
      
      // Then: assert that the returned value is null
      assertNull(attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      // Given a new XmlElement object with no sub-elements
      XmlElement xmlElement = new XmlElement();
      
      // When the hashCode method is called on this element
      int result = xmlElement.hashCode();
      
      // Then the hash code should be non-zero and not equal to the default value
      assertNotEquals(0, result);
      assertNotEquals(-123456789, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingStringAndCallsHashCode() throws Throwable  {
      // Given a valid XML element instance
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement");
      
      // When the hash code method is called
      int hashCode = xmlElement.hashCode();
      
      // Then the hash code should be positive
      assertTrue(hashCode > 0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      // Given an XmlElement instance
      XmlElement xmlElement = new XmlElement();
      
      // When setting its attributes to null
      xmlElement.setAttributes(null);
      
      // Then the hashCode method should return 0
      assertEquals(0, xmlElement.hashCode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      XmlElement arg0 = new XmlElement();
      arg0.addSubElement(":+37k-");
      boolean equals = xmlElement.equals(arg0);
      assertEquals(1, arg0.count());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingStringAndCallsEquals() throws Throwable  {
      // Given a new XmlElement object with the name "com.allenstudio.ir.util.XmlElement"
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement");
      
      // When adding a sub-element to the element with the name "~-X"
      XmlElement arg0 = xmlElement.addSubElement("~-X");
      
      // Then the count of sub-elements for the element should be 1
      assertEquals(1, xmlElement.count());
      
      // And the equals method should return false when comparing the element to a different object
      boolean equals = xmlElement.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      // Given two different objects
      Object arg0 = new Object();
      XmlElement xmlElement = new XmlElement();
      
      // When the equals method is called with one of them as argument
      boolean equals = xmlElement.equals(arg0);
      
      // Then the result should be false
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement("j~BE4`<A+Ve}", "j~BE4`<A+Ve}");
      boolean equals = xmlElement.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2Arguments() throws Throwable  {
      // Given two XmlElements with different null values
      XmlElement xmlElement1 = new XmlElement((String) null, (Hashtable<String, String>) null);
      XmlElement xmlElement2 = new XmlElement((String) null, (Hashtable<String, String>) null);
      
      // When we compare them for equality
      boolean equals = xmlElement1.equals(xmlElement2);
      
      // Then they should be equal
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsEquals() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement();
      XmlElement arg0 = new XmlElement("~-X", "com.allenstudio.i.util.XmlElement");
      
      // When
      boolean equals = xmlElement.equals(arg0);
      
      // Then
      assertEquals("com.allenstudio.i.util.XmlElement", arg0.getData());
      assertFalse(equals);
      assertFalse(arg0.equals((Object)xmlElement));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Given
      XmlElement xmlElement1 = new XmlElement();
      
      // When
      boolean equals = xmlElement1.equals(xmlElement1);
      
      // Then
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppend() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      XmlElement arg0 = new XmlElement();
      xmlElement.append(arg0);
      xmlElement.clone();
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsClone() throws Throwable  {
      // Given an XmlElement object with a null subElements list
      XmlElement xmlElement = new XmlElement();
      xmlElement.subElements = null;
      
      // When the clone method is called on this object
      Object clone = xmlElement.clone();
      
      // Then a new object should be returned that is not the same as the original
      assertNotNull(clone);
      assertNotSame(clone, xmlElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingStringAndCallsPrintNode() throws Throwable  {
      // Create a new XmlElement object with the name "com.allenstudio.ir.util.XmlElement"
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement");
      
      // Print the node of the XmlElement object to the console
      XmlElement.printNode(xmlElement, "com.allenstudio.ir.util.XmlElement");
      
      // Assert that the name of the XmlElement object is "com.allenstudio.ir.util.XmlElement"
      assertEquals("com.allenstudio.ir.util.XmlElement", xmlElement.getName());
      
      // Assert that the data of the XmlElement object is an empty string
      assertEquals("", xmlElement.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsAddSubElementTakingString0() throws Throwable  {
      // Given a new XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When we add a sub-element with some text
      xmlElement.addSubElement(".81Azrm(U|KB");
      
      // Then the count method should return 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingStringReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Given: An XmlElement object is created with a sub-element
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement");
      xmlElement.addSubElement("com.allenstudio.ir.util.XmlElement");
      
      // When: The method getElement() is called on the XmlElement object
      XmlElement subElement = xmlElement.getElement("com.allenstudio.ir.util.XmlElement");
      
      // Then: The method should return the sub-element with the given name
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingString() throws Throwable  {
      // Given a new XmlElement instance
      XmlElement xmlElement = new XmlElement();
      
      // When adding a sub-element to the element
      xmlElement.addSubElement("<sub-element>");
      
      // Then the count of sub-elements should be 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsAddSubElementTakingString1() throws Throwable  {
      // Given an empty XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When we add two sub-elements to it
      xmlElement.addSubElement("cm.allenstudio.ir.util.XmlElement");
      xmlElement.addSubElement("cm.allenstudio.ir.util.XmlElement");
      
      // Then the count of sub-elements should be 2
      assertEquals(2, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsGetElementTakingString() throws Throwable  {
      // Given the XmlElement class and an instance of it
      XmlElement xmlElement = new XmlElement();
      
      // When a specific element is searched for using a given selector
      XmlElement element = xmlElement.getElement(".I`=N-|s];X");
      
      // Then the element should be null (not found)
      assertNull(element);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSubElementTaking2Arguments() throws Throwable  {
      // Given a XmlElement with a sub element added to it
      XmlElement xmlElement = new XmlElement();
      XmlElement addSubElement = xmlElement.addSubElement("'", "'");
      
      // When the sub element is removed from its parent
      addSubElement.removeFromParent();
      
      // Then the count of the parent XmlElement should be zero
      assertEquals(0, xmlElement.count());
      
      // And the data of the removed sub element should be "'", which is the same as the one used to create it
      assertEquals("'", addSubElement.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElement() throws Throwable  {
      // Given a XmlElement with one sub element
      XmlElement xmlElement = new XmlElement();
      xmlElement.addSubElement("cm.allenstudio.ir.util.XmlElement");
      
      // When removing the sub element
      XmlElement arg0 = xmlElement.removeElement(0);
      
      // Then the number of elements in the XmlElement is 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElementReturningNull() throws Throwable  {
      // rollbacked to evosuite
      XmlElement arg0 = new XmlElement();
      XmlElement removeElement = arg0.removeElement(arg0);
      assertNull(removeElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTaking2Arguments() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement();
      
      // When
      xmlElement.addAttribute("(F-6ooco:Cx", "(F-6ooco:Cx");
      
      // Then
      String attribute = xmlElement.getAttribute("(F-6ooco:Cx", (String) null);
      assertEquals("(F-6ooco:Cx", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeWithNullAndCreatesXmlElementTakingNoArguments() throws Throwable  {
      // Given a new XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When the addAttribute method is called with null as the attribute name and "9eLBkk!].SEuk1t/Fn" as the attribute value
      Object addAttribute = xmlElement.addAttribute(null, "9eLBkk!].SEuk1t/Fn");
      
      // Then the method should return null
      assertNull(addAttribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTaking2ArgumentsReturningNull() throws Throwable  {
      // Given an XML element with no attributes
      XmlElement xmlElement = new XmlElement("");
      
      // When a non-existent attribute is requested
      String attribute = xmlElement.getAttribute("", (String) null);
      
      // Then the method should return null
      assertNull(attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetName() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      xmlElement.setName("Greetings");
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingIntReturningXmlElementWhereCountIsPositive() throws Throwable  {
      // Given: a non-empty list of XML elements
      XmlElement arg0 = new XmlElement();
      arg0.append(arg0);
      
      // When: getting the first element from the list
      XmlElement element = arg0.getElement(0);
      
      // Then: the first element should have a count of 1
      assertEquals(1, element.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsertElement() throws Throwable  {
      // Test that the insertElement method adds an observer to the list of observers
      XmlElement element = new XmlElement();
      element.insertElement(element, 0);
      assertEquals(1, element.countObservers());
      
      // Test that the countObservers method returns the correct number of observers for an empty list
      XmlElement emptyElement = new XmlElement();
      assertEquals(0, emptyElement.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNotifyObservers() throws Throwable  {
      // Given: a new instance of XmlElement with no name set
      XmlElement xmlElement = new XmlElement();
      
      // When: notifyObservers is called on the element
      xmlElement.notifyObservers();
      
      // Then: the element's name should be null
      assertNull(xmlElement.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElementReturningXmlElementWhereCountIsZero() throws Throwable  {
      // rollbacked to evosuite
      XmlElement arg0 = new XmlElement();
      arg0.addElement(arg0);
      arg0.removeElement(arg0);
      assertEquals(0, arg0.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentReturningNull() throws Throwable  {
      // Given a new XmlElement object with no parent
      XmlElement xmlElement = new XmlElement();
      
      // When the getParent method is called on the element
      XmlElement parent = xmlElement.getParent();
      
      // Then the method should return null
      assertNull(parent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsPrintNode() throws Throwable  {
      // rollbacked to evosuite
      XmlElement arg0 = new XmlElement("<tag>", "</tag>");
      XmlElement.printNode(arg0, "<value>");
      assertEquals("</tag>", arg0.getData());
      assertEquals("<tag>", arg0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveAllElements() throws Throwable  {
      // Given: The test is setting up an XML element and removing all of its child elements.
      XmlElement xmlElement = new XmlElement();
      xmlElement.removeAllElements();
      
      // When: The count method is called on the XML element.
      int count = xmlElement.count();
      
      // Then: The count should be equal to 0, as there are no child elements remaining.
      assertEquals(0, count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeNames() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      Enumeration attributeNames = xmlElement.getAttributeNames();
      assertNotNull(attributeNames);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClone() throws Throwable  {
      // Given an XmlElement with no attributes
      XmlElement xmlElement = new XmlElement();
      
      // When we clone the element
      Object clone = xmlElement.clone();
      
      // Then the clone should not be the same object as the original element
      assertNotSame(clone, xmlElement);
      
      // And it should not be null
      assertNotNull(clone);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttribute() throws Throwable  {
      // Given: A new XmlElement instance with an attribute named "name" and a value of "Jane Smith"
      XmlElement xmlElement = new XmlElement();
      xmlElement.addAttribute("name", "Jane Smith");
      
      // When: The printNode method is called on the XmlElement instance with the name as an argument
      xmlElement.printNode(xmlElement, "Jane Smith");
      
      // Then: The count method should return 0 as there are no child nodes in the XmlElement instance
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningZero() throws Throwable  {
      // Test that the count method returns 0 for an empty XML element
      XmlElement xmlElement = new XmlElement();
      int expectedCount = 0;
      int actualCount = xmlElement.count();
      assertEquals(expectedCount, actualCount);
  }
}
