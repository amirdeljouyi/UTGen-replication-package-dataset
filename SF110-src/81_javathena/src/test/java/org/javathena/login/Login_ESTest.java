/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 12:30:35 GMT 2024
 */

package org.javathena.login;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimer_interval_check_auth_syncTakingLoginAndCallsRun() throws Throwable  {
      Login arg0 = new Login();
      arg0.do_initXML();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync = arg0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync.run();
      assertEquals(0, arg0.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsDo_initTXT0() throws Throwable  {
      Login login = new Login();
      EvoSuiteFile arg0 = new EvoSuiteFile("save/account.txt");
      FileSystemHandling.createFolder(arg0);
      login.do_initTXT();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initSQL() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_init() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCodingKeyAdministrationWithSocket_dataWhereGetEofIsZero() throws Throwable  {
      MockSocket arg0 = new MockSocket();
      FromClient arg1 = new FromClient();
      arg0.close();
      Socket_data arg0 = new Socket_data(arg0, arg1);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_fdReturningNull() throws Throwable  {
      Login login = new Login();
      login.server_fd = null;
      login.getServer_fd();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_numReturningPositive() throws Throwable  {
      Login login = new Login();
      Login.auth_num = 2580;
      int auth_num = login.getAuth_num();
      assertEquals(2580, auth_num);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_numReturningNegative() throws Throwable  {
      Login login = new Login();
      Login.auth_num = (-2849);
      int auth_num = login.getAuth_num();
      assertEquals((-2849), auth_num);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_maxReturningPositive() throws Throwable  {
      Login login = new Login();
      login.auth_max = 2375;
      int auth_max = login.getAuth_max();
      assertEquals(2375, auth_max);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log0() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(15);
      ConfigurationManagement.setAccess_order((ACO) null);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log1() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_order((ACO) null);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOutReturningNonNull() throws Throwable  {
      Login login = new Login();
      login.save_config_in_log();
      login.getOut();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_finalAndDo_initTXT() throws Throwable  {
      Login login = new Login();
      login.do_initTXT();
      // Undeclared exception!
      try { 
        login.do_final();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_finalAndDo_final() throws Throwable  {
      Login login = new Login();
      login.do_final();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_auth_sync() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsMmo_auth_syncXML() throws Throwable  {
      Login login = new Login();
      Login.mmo_auth_syncXML();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXT() throws Throwable  {
      Login login = new Login();
      int mmo_auth_initTXT = Login.mmo_auth_initTXT();
      assertEquals(0, mmo_auth_initTXT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initXML0() throws Throwable  {
      int mmo_auth_initXML = Login.mmo_auth_initXML();
      assertEquals(0, mmo_auth_initXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsLogin_log() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        Login.login_log("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMd5DataWithSocket_dataWhereGetEofIsPositive() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      arg0.setMd5key("=ZxCIjws7FwW");
      Login.getMd5Data(arg0);
      assertEquals(1, arg0.getEof());
      assertEquals("2345678910111213", arg0.getMd5key());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetServer_fd() throws Throwable  {
      Login login = new Login();
      login.setServer_fd((int[]) null);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEndTakingLoginAndCallsRun() throws Throwable  {
      Login arg0 = new Login();
      Login.End login_End = arg0.new End();
      login_End.run();
      assertEquals(0, arg0.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsYesNoOnOffToBoolean() throws Throwable  {
      Login login = new Login();
      // Undeclared exception!
      try { 
        login.yesNoOnOffToBoolean("Never mind");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBoolean0() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("NO");
      assertEquals(0, login.getAuth_max());
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBoolean1() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("ON");
      assertTrue(yesNoOnOffToBoolean);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBoolean2() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("off");
      assertFalse(yesNoOnOffToBoolean);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndYesNoOnOffToBooleanAndYesNoOnOffToBoolean3() throws Throwable  {
      Login login = new Login();
      boolean yesNoOnOffToBoolean = login.yesNoOnOffToBoolean("Yes");
      assertTrue(yesNoOnOffToBoolean);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initTXTThrowsTooManyResourcesException() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(9021);
      ConfigurationManagement.setAccess_denynum(5432);
      ConfigurationManagement.setAccess_order((ACO) null);
      // Undeclared exception!
      login.do_initTXT();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsDo_initTXT1() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(9985);
      ConfigurationManagement.setAccess_denynum(10);
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.do_initTXT();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log2() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_allownum(10);
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log3() throws Throwable  {
      Login login = new Login();
      ACO arg0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(arg0);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log4() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_denynum(1);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLoginTakingNoArgumentsAndCallsSave_config_in_log5() throws Throwable  {
      Login login = new Login();
      ConfigurationManagement.setAccess_denynum(10);
      login.save_config_in_log();
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_console0() throws Throwable  {
      Login login = new Login();
      login.do_initTXT();
      int parse_console = login.parse_console("help");
      assertEquals(0, parse_console);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_console1() throws Throwable  {
      Login login = new Login();
      login.do_initTXT();
      int parse_console = login.parse_console("status");
      assertEquals(0, parse_console);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_console2() throws Throwable  {
      Login login = new Login();
      login.do_initTXT();
      int parse_console = login.parse_console("alive");
      assertEquals(0, parse_console);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsSystemExitException0() throws Throwable  {
      // Given: A login object that has been initialized with a console input stream
      Login login = new Login();
      login.do_initTXT();
      
      // When: The parse_console method is called with the "end" command
      try {
      login.parse_console("end");
      fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      // Then: An exception is thrown, as expected
      verifyException("org.evosuite.runtime.System", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsSystemExitException1() throws Throwable  {
      // rollbacked to evosuite
      Login login = new Login();
      login.do_initTXT();
      // Undeclared exception!
      try { 
        login.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_consoleThrowsSystemExitException2() throws Throwable  {
      // Given: A Login object with a console input
      Login login = new Login();
      login.do_initTXT();
      
      try {
      // When: The user inputs "exit" and the method is called
      login.parse_console("exit");
      
      // Then: An exception should be thrown
      fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
      // Verify that the correct exception was thrown
      verifyException("org.evosuite.runtime.System", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_adminThrowsNullPointerException() throws Throwable  {
      // Test that parse_admin throws NullPointerException when called with null data
      Login arg2 = new Login();
      MockSocket arg0 = new MockSocket();
      Socket_data arg1 = new Socket_data(arg0);
      try {
      // Attempt to call parse_admin with a null data parameter
      arg2.parse_admin(50, arg1, null);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the correct exception was thrown (NullPointerException)
      verifyException("org.javathena.core.data.Socket_data", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesConnectionListenerTakingLoginAndCallsRun() throws Throwable  {
      // Given a Login object
      Login login = new Login();
      
      // When the ConnectionListener is created and run
      Login.ConnectionListener connectionListener = login.new ConnectionListener();
      connectionListener.run();
      
      // Then the auth_max should be 0
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_auth_syncAndCheck_auth_syncAndMmo_auth_syncTXT() throws Throwable  {
      // Given a user has attempted to log in using MMO Auth
      Login login = new Login();
      
      // When the user attempts to sync their account with MMO Auth
      login.mmo_auth_syncTXT();
      
      // Then the user's authentication data should be synchronized with MMO Auth
      int check_auth_sync = login.check_auth_sync();
      assertEquals(0, login.getAuth_max());
      assertEquals(0, check_auth_sync);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShowTab() throws Throwable  {
      // Given: The user is on the login page and has selected to show a tab
      byte[] arg0 = new byte[2];
      Login.showTab(arg0);
      
      // When: The user clicks the "Show Tab" button
      Login.showTab(arg0);
      
      // Then: A new tab with the appropriate length is shown
      assertEquals(2, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_syncXML() throws Throwable  {
      // Test to ensure that the mmo_auth_syncTXT and mmo_auth_syncXML methods are called correctly
      // Create a new instance of the Login class
      Login login = new Login();
      
      // Call the mmo_auth_syncTXT method
      login.mmo_auth_syncTXT();
      
      // Call the mmo_auth_syncXML method
      login.mmo_auth_syncXML();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXTThrowsNullPointerException0() throws Throwable  {
      // rollbacked to evosuite
      UserManagement.addUserTXT("c~|", "c~|", "`bAz$", 'S');
      Login login = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXTThrowsNumberFormatException() throws Throwable  {
      // Given a user's credentials and an incorrect password,
      // when the login function is called with an invalid password,
      // then an exception should be thrown.
      
      Login login = new Login();
      UserManagement.addUserTXT("Invalid password (account: '%s', pass: '%s', received pass: '%s', ip: %s)\n", "YES", ">~b%hfxz)#f/hWO~X0m", 'T');
      Login.mmo_auth_syncTXT();
      
      try {
      Login.mmo_auth_initTXT();
      fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      // For input string: \"\"
      verifyException("java.lang.NumberFormatException", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXTThrowsNullPointerException1() throws Throwable  {
      // No Comments were added
      Login login = new Login();
      UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'R');
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse_console3() throws Throwable  {
      // Given a Login object with a do_initTXT method called
      Login login = new Login();
      login.do_initTXT();
      
      // When the parse_console method is called with "logout" as input
      int parse_console = login.parse_console("logout");
      
      // Then the output should be 0 and the auth_max value should be 0
      assertEquals(0, parse_console);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initTXTThrowsNullPointerException2() throws Throwable  {
      Login login = new Login();
      try {
      login.mmo_auth_initTXT();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Test that the expected exception is thrown when the method is called with a null parameter
      assertNotNull(e);
      assertNull(e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMmo_auth_initXML1() throws Throwable  {
      EvoSuiteFile accountXml = new EvoSuiteFile("save/account.xml");
      // Create a new folder using the FileSystemHandling class
      FileSystemHandling.createFolder(accountXml);
      // Get the current value of mmo_auth_initXML using the Login class
      int currentValue = Login.mmo_auth_initXML();
      // Assert that the current value is equal to 0
      assertEquals(0, currentValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_logAndLogin_log() throws Throwable  {
      // No Comments were added
      Login.login_log("johndoe@example.com");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCodingKeyAdministrationThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Socket_data arg0 = new Socket_data((Socket) null);
      Login.getMd5Data(arg0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_maxReturningZero() throws Throwable  {
      // Given a Login object with auth_max set to 0
      Login login = new Login();
      int auth_max = login.getAuth_max();
      
      // When the getAuth_max method is called on the Login object
      int actual = login.getAuth_max();
      
      // Then the value of auth_max should be 0
      assertEquals(0, actual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPASSWORDENC() throws Throwable  {
      // No Comments were added
      Login.setPASSWORDENC(4609);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDo_initXML() throws Throwable  {
      // No Comments were added
      Login login = new Login();
      login.do_initXML();
      EvoSuiteFile arg0 = new EvoSuiteFile("save/account.xml");
      boolean createFolder = FileSystemHandling.createFolder(arg0);
      assertTrue(createFolder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDbManagemtType() throws Throwable  {
      // rollbacked to evosuite
      IDBManagementLogin dbManagemtType = Login.getDbManagemtType();
      assertNull(dbManagemtType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDisplay_title() throws Throwable  {
      // rollbacked to evosuite
      Login.display_title();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVersionThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPASSWORDENC() throws Throwable  {
      // No Comments were added
      int pASSWORDENC = Login.getPASSWORDENC();
      assertEquals(2, pASSWORDENC);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOutReturningNull() throws Throwable  {
      // Given: A user is logged in to the system and has a maximum authentication limit of 5
      Login login = new Login();
      login.setAuth_max(5);
      
      // When: The user attempts to log out
      login.getOut();
      
      // Then: The user's authentication limit should be reduced by 1
      assertEquals(4, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAuth_max() throws Throwable  {
      // Given a Login object with auth_max set to 10
      Login login = new Login();
      login.setAuth_max(10);
      
      // When getAuth_max is called on the Login object
      int actual = login.getAuth_max();
      
      // Then the returned value should be 10
      assertEquals(10, actual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogUnknownPackets() throws Throwable  {
      // Given a Socket_data object with a null socket reference
      Socket_data arg0 = new Socket_data((Socket) null);
      
      // When logUnknownPackets is called on the Socket_data object
      Login.logUnknownPackets(arg0);
      
      // Then the EOF counter should be 0
      assertEquals(0, arg0.getEof());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_ipmask() throws Throwable  {
      // Test that the check_ipmask method returns 0 for a valid IP address and subnet mask.
      Login login = new Login();
      int check_ipmask = login.check_ipmask(2000000, "conf/subnet_athena.conf");
      assertEquals(0, login.getAuth_max());
      assertEquals(0, check_ipmask);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheck_ip() throws Throwable  {
      // No Comments were added
      Login login = new Login();
      login.check_ip((InetAddress) null);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_fdReturningNonEmptyArray() throws Throwable  {
      // Given a Login instance with valid credentials
      Login login = new Login();
      
      // When the getServer_fd method is called
      int[] server_fd = login.getServer_fd();
      
      // Then the returned array should have a length of 30 and not be null
      assertEquals(0, login.getAuth_max());
      assertEquals(30, server_fd.length);
      assertNotNull(server_fd);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_numReturningZero() throws Throwable  {
      Login login = new Login();
      int auth_num = login.getAuth_num();
      assertEquals(0, auth_num);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCodingKeyThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOut() throws Throwable  {
      // rollbacked to evosuite
      Login login = new Login();
      login.setOut((PrintWriter) null);
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLog_fp() throws Throwable  {
      // Create a new instance of the Login class
      Login login = new Login();
      
      // Call the getLog_fp method on the login object
      login.getLog_fp();
      
      // Assert that the auth_max field is set to 0
      assertEquals(0, login.getAuth_max());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClose() throws Throwable  {
      // rollbacked to evosuite
      Login arg0 = new Login();
      Login.ConnectionListener login_ConnectionListener = arg0.new ConnectionListener();
      login_ConnectionListener.close();
      login_ConnectionListener.run();
      assertEquals(0, arg0.getAuth_max());
  }
}
