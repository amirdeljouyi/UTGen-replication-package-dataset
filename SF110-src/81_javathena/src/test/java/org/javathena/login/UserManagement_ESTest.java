/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 06:49:05 GMT 2024
 */

package org.javathena.login;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.Socket;
import java.sql.ResultSet;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserManagement_ESTest extends UserManagement_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnban() throws Throwable  {
      MockSocket arg0 = new MockSocket();
      Socket_data arg0 = new Socket_data(arg0, (IParse) null);
      // Undeclared exception!
      try { 
        UserManagement.unban(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToChangeAnEmail() throws Throwable  {
      MockSocket arg0 = new MockSocket();
      Socket_data arg0 = new Socket_data(arg0);
      // Undeclared exception!
      try { 
        UserManagement.toChangeAnEmail(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStatusChange() throws Throwable  {
      Proxy arg0 = Proxy.NO_PROXY;
      MockSocket arg0 = new MockSocket(arg0);
      Socket_data arg0 = new Socket_data(arg0);
      // Undeclared exception!
      try { 
        UserManagement.statusChange(arg0, (byte[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSendUserList() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.sendUserList((Socket_data) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountReg2() throws Throwable  {
      byte[] arg1 = new byte[12];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountData() throws Throwable  {
      byte[] arg1 = new byte[7];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountData((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAccountReg2() throws Throwable  {
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.receiveAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingResultSet() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEmailLimitedTime() throws Throwable  {
      MockSocket arg0 = new MockSocket();
      Socket_data arg0 = new Socket_data(arg0, (IParse) null);
      // Undeclared exception!
      try { 
        UserManagement.emailLimitedTime(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEmailCreation() throws Throwable  {
      Proxy arg0 = Proxy.NO_PROXY;
      MockSocket arg0 = new MockSocket(arg0);
      FromClient arg1 = new FromClient();
      Socket_data arg0 = new Socket_data(arg0, arg1);
      // Undeclared exception!
      try { 
        UserManagement.emailCreation(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckMySQL() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.dynamicFailBanCheckMySQL(",P2{~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientEncrypted() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.connectionOfClientEncrypted((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfCharServer() throws Throwable  {
      Proxy arg0 = Proxy.NO_PROXY;
      MockSocket arg0 = new MockSocket(arg0);
      FromClient arg1 = new FromClient();
      Socket_data arg0 = new Socket_data(arg0, arg1);
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.connectionOfCharServer(arg0, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharServerToAuthentify() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.charServerToAuthentify(arg0, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testChangeSexChrif_changesex() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.changeSexChrif_changesex((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testChangeSex() throws Throwable  {
      MockSocket arg0 = new MockSocket();
      FromClient arg1 = new FromClient();
      Socket_data arg0 = new Socket_data(arg0, arg1);
      // Undeclared exception!
      try { 
        UserManagement.changeSex(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBanResquest() throws Throwable  {
      Proxy arg0 = Proxy.NO_PROXY;
      MockSocket arg0 = new MockSocket(arg0);
      Socket_data arg0 = new Socket_data(arg0);
      // Undeclared exception!
      try { 
        UserManagement.banResquest(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdministationLogin() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.administationLogin((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGM() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.addGM(10000, 10000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOnline() throws Throwable  {
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.account_idToOnline((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOffline() throws Throwable  {
      byte[] arg1 = new byte[6];
      // Undeclared exception!
      try { 
        UserManagement.account_idToOffline((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[3] = (byte) 90;
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals(1509949440, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[6] = (byte) (-76);
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals((-180), tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBUserReturningPositive() throws Throwable  {
      UserManagement.addUserTXT(">", ">", ">", 'v');
      int nBUser = UserManagement.getNBUser();
      assertEquals(1, nBUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIdCountReturningPositive() throws Throwable  {
      // No Comments were added
      Auth_data addUserTXT = UserManagement.addUserTXT("gM?#V|uZ", "gM?#V|uZ", "gM?#V|uZ", '[');
      assertEquals("-", addUserTXT.getEmail());
      assertEquals(0, (int)addUserTXT.getAccount_id());
      assertEquals(0, addUserTXT.getLogincount());
      assertEquals('[', addUserTXT.getSex());
      assertEquals(0, addUserTXT.getState());
      
      int accountIdCount = UserManagement.getAccountIdCount();
      assertEquals(1, accountIdCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereIsResetLogincounIsTrue() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = UserManagement.addUserTXT("&^%5jDf", "&^%5jDf", " )uHN,C0", 'l');
      arg0.setResetLogincoun(true);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals("&^%5jDf", addUser.getUserid());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getState());
      assertEquals("&^%5jDf", addUser.getPass());
      assertEquals('l', addUser.getSex());
      assertEquals(0, addUser.getLogincount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetVersionIsPositive() throws Throwable  {
      // Given: A user with version 54 is added to the system
      Auth_data arg0 = new Auth_data();
      arg0.setVersion(54);
      
      // When: The user is added to the system using the UserManagement class
      Auth_data addUser = UserManagement.addUser(arg0);
      
      // Then: The client type of the user should be 0 (zero)
      assertEquals(0, addUser.getClientType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setLastlogin();
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getUserid());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsNegative() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setLogincount((-1));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getLast_ip());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsPositive() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = UserManagement.addUserTXT(" )uHN,C0", " )uHN,C0", " )uHN,C0", 'l');
      arg0.setLogin_id2(37);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogincount());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals(0, addUser.getState());
      assertEquals('l', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsNegative() throws Throwable  {
      // Create a new Auth_data object to be used for testing
      Auth_data arg0 = new Auth_data();
      
      // Set the login_id2 field on the Auth_data object to a negative value
      arg0.setLogin_id2(-671);
      
      // Call the addUser method with the created Auth_data object as an argument
      Auth_data addUser = UserManagement.addUser(arg0);
      
      // Assert that the returned addUser object has a null email field
      assertNull(addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsPositive() throws Throwable  {
      // Given: A user with login_id1 = 1023456789
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id1(1023456789);
      
      // When: The user is added to the system
      Auth_data addUser = UserManagement.addUser(arg0);
      
      // Then: The user should not be resetting their login count
      assertFalse(addUser.isResetLogincoun());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id1((-1541));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNotNull(addUser.getPass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLevelIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setLevel(3);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0L, addUser.getConnect_until_time());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setDelflag(1109);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals('\u0000', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsNegative() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setDelflag((-4936));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, (int)addUser.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsPositive() throws Throwable  {
      // Given: A new Auth_data object with a connect_until_time of 219L
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time(219L);
      
      // When: The UserManagement.addUser method is called with the new Auth_data object
      Auth_data addUser = UserManagement.addUser(arg0);
      
      // Then: The return value of the addUser method should be a non-negative integer (i.e., a valid login ID)
      assertEquals(0, addUser.getLogin_id1());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsNegative() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time((-17L));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertSame(arg0, addUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetClientTypeIsPositive() throws Throwable  {
      // Test that adding a user with a client type of 9 returns the same object as was passed in.
      Auth_data arg0 = new Auth_data();
      arg0.setClientType(9);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertSame(arg0, addUser); // Assert that the returned user is the same object as the one passed in.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetCharserverIsZero() throws Throwable  {
      // Arrange
      String userId = "test_user";
      String pass = "password123";
      int charServer = 0;
      String email = "-";
      char sex = 'l';
      
      // Act
      Auth_data arg0 = UserManagement.addUserTXT(userId, pass, "", sex);
      arg0.setCharserver(charServer);
      Auth_data addUser = UserManagement.addUser(arg0);
      
      // Assert
      assertEquals("password123", addUser.getPass());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals("test_user", addUser.getUserid());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("-", addUser.getEmail());
      assertEquals('l', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetCharserverIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = UserManagement.addUserTXT("%~[=d`GICQ)", "", "pA`m|", 'o');
      arg0.setCharserver(1242);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('o', addUser.getSex());
      assertEquals("", addUser.getPass());
      assertEquals(0, addUser.getLogincount());
      assertEquals("%~[=d`GICQ)", addUser.getUserid());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsPositive() throws Throwable  {
      // Arrange
      Auth_data arg0 = new Auth_data();
      arg0.setBan_until_time(3750L);
      
      // Act
      Auth_data addUser = UserManagement.addUserTXT("%~[=d`GICQ)", "", "pA`m|", 'o');
      
      // Assert
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals("%~[=d`GICQ)", addUser.getUserid());
      assertEquals("", addUser.getPass());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('o', addUser.getSex());
      assertEquals("-", addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsNegative() throws Throwable  {
      // Given a new user data object with a ban time of -966 seconds
      Auth_data newUserData = new Auth_data();
      newUserData.setBan_until_time((-966L));
      
      // When the user is added to the system
      Auth_data addedUser = UserManagement.addUser(newUserData);
      
      // Then the ban time of the added user should be -966 seconds
      assertEquals((-966L), addedUser.getBan_until_time());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetAccount_reg2_numIsPositive() throws Throwable  {
      // No Comments were added
      Auth_data arg0 = UserManagement.addUserTXT("S0022", "S0022", "com.mysql.jdbc.BestResponseTimeBalanceStrategy", ']');
      FastMap<String, String> account_reg2 = arg0.getAccount_reg2();
      account_reg2.put(":", "_");
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(']', addUser.getSex());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("S0022", addUser.getPass());
      assertEquals("S0022", addUser.getUserid());
      assertEquals("-", addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_dats() throws Throwable  {
      // Given an empty map of authenticated data
      FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
      
      // When the map is queried for size
      int size = auth_dats.size();
      
      // Then the size should be 0
      assertEquals(0, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAllOnlinAccounts() throws Throwable  {
      // Given a Socket_data object and a byte array with length 9,
      Socket_data socketData = new Socket_data((Socket) null);
      byte[] buffer = new byte[9];
      
      // When the receiveAllOnlinAccounts method is called on the Socket_data object with the byte array as an argument,
      UserManagement.receiveAllOnlinAccounts(socketData, buffer);
      
      // Then the getMd5key method of the Socket_data object should return null
      assertNull(socketData.getMd5key());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAuth_dats() throws Throwable  {
      // rollbacked to evosuite
      FastMap<Integer, Auth_data> arg0 = new FastMap<Integer, Auth_data>(0);
      Auth_data arg1 = new Auth_data();
      arg0.put((Integer) null, arg1);
      UserManagement.setAuth_dats(arg0);
      assertFalse(arg0.isShared());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckTXT() throws Throwable  {
      // This test verifies that the dynamicFailBanCheck method in UserManagement class throws a NullPointerException when the given string is null.
      assertThrows(NullPointerException.class, () -> {
      UserManagement.dynamicFailBanCheckTXT((String) null);});
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIds() throws Throwable  {
      // Given: A list of account IDs is retrieved from the user management service
      FastTable<Integer> accountIds = UserManagement.getAccountIds();
      
      // When: The size of the list is checked
      int actualSize = accountIds.size();
      
      // Then: The list should be empty (i.e., have a size of 0)
      assertEquals(0, actualSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingString() throws Throwable  {
      // No Comments were added
      Auth_data userTxt = UserManagement.getUserTxt("John Doe");
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsGM() throws Throwable  {
      // No Comments were added
      int gM = UserManagement.isGM(3431L);
      assertEquals((-1), gM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero0() throws Throwable  {
      // rollbacked to evosuite
      int charif_sendallwos = UserManagement.charif_sendallwos(0, (byte[]) null);
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero1() throws Throwable  {
      // Given: A user is logged in and has access to a specific feature
      int[] arg1 = new int[3];
      int charif_sendallwos = UserManagement.charif_sendallwos(2, arg1);
      
      // When: The user tries to perform an action that requires the feature
      
      // Then: The system should return a success message
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_user0() throws Throwable  {
      // No Comments were added
      Integer arg0 = new Integer(99);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_user1() throws Throwable  {
      // No Comments were added
      Integer arg0 = new Integer(1001);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValid0() throws Throwable  {
      // No Comments were added
      int levelIsValid = UserManagement.levelIsValid(3, "Engineer", 3, 5);
      assertEquals(3, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValidReturningNegative() throws Throwable  {
      // No Comments were added
      int levelIsValid = UserManagement.levelIsValid((-257), "8\"AWsEQ", (-257), (-257));
      assertEquals((-1), levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValid1() throws Throwable  {
      // No Comments were added
      int levelIsValid = UserManagement.levelIsValid(129, "set users %s : %d\n", 30, 30);
      assertEquals(99, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // This test checks that a NullPointerException is thrown when attempting to create a connection with null socket data.
      byte[] arg1 = new byte[7];
      try {
      UserManagement.connectionOfClient(null, arg1, false);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // Verify that the expected exception is thrown.
      verifyException("org.javathena.core.utiles.Functions", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdd_online_user() throws Throwable  {
      // rollbacked to evosuite
      Auth_data arg0 = new Auth_data();
      int add_online_user = UserManagement.add_online_user(arg0);
      assertEquals(0, add_online_user);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveUser() throws Throwable  {
      // Create a new user with the specified credentials and email address
      Auth_data arg0 = UserManagement.addUserTXT("password1234", "password1234", "test@gmail.com", 't');
      
      // Assert that the user was created successfully
      assertNotNull(arg0);
      
      // Remove the user from the system
      Auth_data removeUser = UserManagement.removeUser(arg0);
      
      // Assert that the user was removed successfully
      assertEquals("password1234", arg0.getPass());
      assertEquals("password1234", arg0.getUserid());
      assertEquals(0, arg0.getState());
      assertNull(removeUser);
      assertEquals(0, arg0.getLogincount());
      assertEquals("test@gmail.com", arg0.getEmail());
      assertEquals('t', arg0.getSex());
      assertEquals(0, (int)arg0.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningZero() throws Throwable  {
      // Given: A byte array of length 2
      byte[] arg0 = new byte[2];
      
      // When: The method is called with the above byte array
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      
      // Then: The result should be 0, as the input byte array only contains a single "0" character (ASCII value of '0')
      assertEquals(0, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddIpToBanListMySQLThrowsNumberFormatException() throws Throwable  {
      // Given: A user tries to add an IP address to the ban list in MySQL database
      String ipAddress = "192.168.0.1";
      
      try {
      // When: The user adds the IP address to the ban list
      UserManagement.addIpToBanListMySQL(ipAddress);
      
      // Then: An exception is thrown, as the input string is not a valid number
      fail("Expecting exception: NumberFormatException");
      
      } catch (NumberFormatException e) {
      // Verify that the correct exception is thrown with the correct message
      verifyException("java.lang.NumberFormatException", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBUserReturningZero() throws Throwable  {
      // rollbacked to evosuite
      int nBUser = UserManagement.getNBUser();
      assertEquals(0, nBUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOnline_db_final() throws Throwable  {
      // Check that the online database is empty before any operation
      int online_db_final = UserManagement.online_db_final();
      assertEquals(0, online_db_final);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBSession() throws Throwable  {
      // This test case verifies that the number of sessions returned by the getNBSession method is 0.
      int nBSession = UserManagement.getNBSession();
      assertEquals(0, nBSession);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountID() throws Throwable  {
      // Test that a null value is returned when the user ID does not exist in the system.
      Integer accountID = UserManagement.getAccountID("9876543210");
      assertNull(accountID);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingIntegerThrowsNullPointerException() throws Throwable  {
      // Test that a null userId throws a NullPointerException
      try {
      UserManagement.getUserSQL((Integer) null);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is of type NullPointerException
      assertEquals(NullPointerException.class, e.getClass());
      
      // Verify that the message in the exception is null (getMessage() returned null)
      assertNull(e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIs_user_online() throws Throwable  {
      // rollbacked to evosuite
      boolean is_user_online = UserManagement.is_user_online((Integer) 1234567890);
      assertFalse(is_user_online);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingNoArguments() throws Throwable  {
      // rollbacked to evosuite
      UserManagement.addAccountIdCount();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSessionAtThrowsIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        UserManagement.getSessionAt(154);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSession() throws Throwable  {
      // No Comments were added
      UserManagement.addSession((Socket_data) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingInteger() throws Throwable  {
      // Given: A valid account ID for a user
      Auth_data authData = new Auth_data();
      Integer accountId = authData.getAccount_id();
      
      // When: Calling the getUserTxt method with the account ID
      Auth_data userTxt = UserManagement.getUserTxt(accountId);
      
      // Then: The returned value should be null
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumberOfUserThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        UserManagement.numberOfUser((Socket_data) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingStringThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL("user1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIdCountReturningZero() throws Throwable  {
      // rollbacked to evosuite
      int accountIdCount = UserManagement.getAccountIdCount();
      assertEquals(0, accountIdCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserSQL() throws Throwable  {
      // No Comments were added
      Auth_data addUserSQL = UserManagement.addUserSQL("John Doe", "johndoe@example.com", "password123", 10);
      assertNull(addUserSQL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBecomeGM() throws Throwable  {
      // rollbacked to evosuite
      UserManagement.toBecomeGM((Socket_data) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnLogServer() throws Throwable  {
      // Given a Socket_data object with a null socket and a FromChar object
      Socket_data arg0 = new Socket_data((Socket) null, new FromChar());
      
      // When the unLogServer method is called on this Socket_data object
      UserManagement.unLogServer(arg0);
      
      // Then the scheduledExecutionTime of the Socket_data object should be 0L
      assertEquals(0L, arg0.scheduledExecutionTime());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDebugXML() throws Throwable  {
      // rollbacked to evosuite
      UserManagement.debugXML();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccountIdCount() throws Throwable  {
      // rollbacked to evosuite
      UserManagement.setAccountIdCount(5);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBGM() throws Throwable  {
      // No Comments were added
      int nBGM = UserManagement.getNBGM();
      assertEquals(0, nBGM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingInt() throws Throwable  {
      // No Comments were added
      UserManagement.addAccountIdCount((-591));
  }
}
