/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 12:06:11 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyPool() throws Throwable  {
      // Given a class reader with the name "java/lang/Object"
      ClassReader classReader = new ClassReader("java/lang/Object");
      
      // When we create a new class writer with an access flag of 53
      ClassWriter arg0 = new ClassWriter(53);
      
      // Then we copy the pool from the class reader to the class writer
      classReader.copyPool(arg0);
      
      // Assert that the SKIP_CODE constant is equal to 1
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // with a valid input (a valid index for an unsigned short)
      ClassReader classReader = new ClassReader("java/lang/Object");
      int header = classReader.readUnsignedShort(4);
      assertEquals(927, header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      char[] arg1 = new char[8];
      String readUTF8 = classReader.readUTF8(185, arg1);
      assertEquals(821, classReader.header);
      assertEquals("\u0000(", readUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      short readShort = classReader.readShort(1);
      assertEquals(927, classReader.header);
      assertEquals((short) (-326), readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      long readLong = classReader.readLong(74);
      assertEquals(4614500841213200128L, readLong);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      Label[] arg1 = new Label[7];
      classReader.readLabel(2, arg1);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      int readInt = classReader.readInt(10);
      assertEquals(117453066, readInt);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      int readByte = classReader.readByte(2);
      assertEquals(927, classReader.header);
      assertEquals(186, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      int readUnsignedShort = classReader.readUnsignedShort(198);
      assertEquals(24942, readUnsignedShort);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClass() throws Throwable  {
      // Given a class reader for org.apache.commons.io.filefilter.DelegateFileFilter
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      
      // When the header of the class is read
      int header = classReader.header;
      
      // Then the header should be 821
      assertEquals(821, header);
      
      // Given a character array with length 3
      char[] arg1 = new char[3];
      
      // When the class is read using the header and the character array
      String readClass = classReader.readClass(header, arg1);
      
      // Then the class should be "\u0000("
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Read an integer value from a specified offset in the class file data
      ClassReader classReader = new ClassReader("java/lang/Object");
      int readInt = classReader.readInt(1);
      
      // Assert that the returned value matches the expected value
      assertEquals(927, classReader.header);
      
      // Assert that the integer value is equal to the expected value
      assertEquals((-21316096), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      long readLong = classReader.readLong(1);
      assertEquals((-91551935198383104L), readLong);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      char[] arg1 = new char[3];
      // Undeclared exception!
      try { 
        classReader.readConst(1, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("wheel.asm.MethodWriter");
      char[] arg1 = new char[9];
      // Undeclared exception!
      try { 
        classReader.readUTF8(4, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("wheel.asm.MethodWriter");
      char[] arg1 = new char[5];
      // Undeclared exception!
      try { 
        classReader.readConst(4, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      char[] arg1 = new char[10];
      // Undeclared exception!
      try { 
        classReader.readUTF8(47, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptWithEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter arg0 = new ClassWriter(1000);
      Attribute[] arg1 = new Attribute[0];
      // Undeclared exception!
      classReader.accept((ClassVisitor) arg0, arg1, 4);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept0() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      ClassWriter arg0 = new ClassWriter(8);
      arg0.cr = classReader;
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      ClassWriter arg0 = new ClassWriter(1);
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 8);
      assertEquals(33, classReader.getAccess());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingInputStreamThrowsIOException() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = null;
      try {
        classReader = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      ClassReader arg0 = new ClassReader(classReader.b, 821, 821);
      ClassWriter classWriter = null;
      try {
        classWriter = new ClassWriter(arg0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingString0() throws Throwable  {
      // rollbacked to evosuite
      ClassReader arg0 = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      ClassWriter classWriter = new ClassWriter(arg0, 4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningNonEmptyArray() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader.getInterfaces();
      assertEquals(530, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningEmptyArray() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      classReader.getInterfaces();
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNull() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      classReader.getSuperName();
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      String superName = classReader.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", superName);
      assertEquals(821, classReader.header);
      assertNotNull(superName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingString1() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Double");
      assertEquals(2258, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      String className = classReader.getClassName();
      assertEquals(821, classReader.header);
      assertEquals("org/apache/commons/io/filefilter/DelegateFileFilter", className);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Object");
      classReader.readByte(1004);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      int item = classReader.getItem(21);
      assertEquals(927, classReader.header);
      assertEquals(106, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess() throws Throwable  {
      // we want to test that the getAccess() method returns the expected value.
      ClassReader classReader = new ClassReader("java/lang/Object");
      int expectedAccess = 33; // this is the expected access value for the Object class
      
      // When we call the getAccess() method on the ClassReader instance,
      // We expect it to return the expected value of 33.
      int actualAccess = classReader.getAccess();
      
      // Then we assert that the actual access value returned by the method is equal to the expected value.
      assertEquals(expectedAccess, actualAccess);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      short readShort = classReader.readShort((byte)87);
      assertEquals(927, classReader.header);
      assertEquals((short)26990, readShort);
  }
}
