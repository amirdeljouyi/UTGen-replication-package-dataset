/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 01:58:40 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMergedType() throws Throwable  {
      ClassWriter classWriter = new ClassWriter((-3396));
      classWriter.addUninitializedType("N+(,N(g6", 13);
      classWriter.addType("4y#VYoQ(Z~==");
      // Undeclared exception!
      try { 
        classWriter.getMergedType(2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClassWithNonEmptyString() throws Throwable  {
      ClassWriter classWriter = new ClassWriter(978);
      // Undeclared exception!
      try { 
        classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewUTF8ReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter(1425);
      classWriter.index = (-1730);
      int newUTF8 = classWriter.newUTF8("");
      assertEquals((-1730), newUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewNameTypeReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter(978);
      classWriter.index = (-170);
      int newNameType = classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
      assertEquals((-169), newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewMethodReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter((-3396));
      classWriter.index = (-775);
      int newMethod = classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
      assertEquals((-771), newMethod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewFieldReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter((-12));
      classWriter.index = (-12);
      int newField = classWriter.newField("", "m{+)tn{tC", "['n");
      assertEquals((-7), newField);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewConstReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter((-3396));
      classWriter.index = (-775);
      int newConst = classWriter.newConst("N+(,N(g6");
      assertEquals((-774), newConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassItem() throws Throwable  {
      ClassWriter classWriter = new ClassWriter(978);
      Item newClassItem = classWriter.newClassItem("i8=^v3E2s");
      assertNotNull(newClassItem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassReturningNegative() throws Throwable  {
      ClassWriter classWriter = new ClassWriter((-698));
      classWriter.index = (-698);
      int newClass = classWriter.newClass("");
      assertEquals((-697), newClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewNameType() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(4);
      int newNameType = classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
      assertEquals(2, newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewUTF8() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1425);
      int newUTF8 = classWriter.newUTF8("");
      assertEquals(1, newUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassReturningPositive() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-698));
      int newClass = classWriter.newClass("");
      assertEquals(2, newClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClass0() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(978);
      String[] classNames = {"org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label"};
      
      // Act
      String commonSuperClass = classWriter.getCommonSuperClass(classNames[0], classNames[1]);
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClass1() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(1101);
      
      // Act
      String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClass2() throws Throwable  {
      // Set up the class writer and the two classes to be used for testing.
      ClassWriter classWriter = new ClassWriter(19);
      String classA = "org.apache.commons.io.filefilter.FileFileFilter";
      String classB = "java/lang/Object";
      
      // Call the getCommonSuperClass method and store the result in a variable.
      String commonSuperClass = classWriter.getCommonSuperClass(classA, classB);
      
      // Verify that the returned superclass is valid.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUninitializedTypeWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1101);
      Item[] itemArray = new Item[1];
      classWriter.typeTable = itemArray;
      int addUninitializedType = classWriter.addUninitializedType("", 1541);
      assertEquals(1, addUninitializedType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddType() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-980));
      classWriter.addType("RuntimeInvisibleAnnotations");
      int addUninitializedType = classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
      assertEquals(2, addUninitializedType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUninitializedType() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1101);
      classWriter.addUninitializedType("Lky0-5", 1101);
      int addUninitializedType = classWriter.addUninitializedType("Lky0-5", 1101);
      assertEquals(1, addUninitializedType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewMethodReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1024);
      classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
      int newMethod = classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
      assertEquals(4, newMethod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewMethodItem() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(-4045);
      Item newMethodItem = classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
      
      // Act
      boolean result = newMethodItem != null;
      
      // Assert
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewFieldItem() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(982);
      classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
      int newField = classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
      assertEquals(4, newField);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewConstThrowsIllegalArgumentException() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(635);
      Item arg0 = classWriter.newFloat(635);
      // Undeclared exception!
      try { 
        classWriter.newConst(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewConstReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1101);
      Character arg0 = Character.valueOf(',');
      int newConst = classWriter.newConst(arg0);
      assertEquals(1, newConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToByteArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1120);
      classWriter.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClass() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-2539));
      classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(86, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(635);
      String[] arg5 = new String[8];
      arg5[0] = "";
      arg5[1] = "";
      arg5[2] = "";
      arg5[3] = "";
      arg5[4] = "";
      arg5[5] = "";
      arg5[6] = "";
      arg5[7] = "";
      classWriter.visit(20, (-159), "", "", "", arg5);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(103, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSourceWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(184);
      classWriter.visitSource("", "");
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(77, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNullAndToByteArray() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(635);
      classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(106, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethod() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(3716);
      String[] arg4 = new String[1];
      arg4[0] = "";
      classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", arg4);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(166, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithNull() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1293);
      classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithNullAndNull() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1);
      classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-2539));
      classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
      classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithNonEmptyStringAndTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(978);
      classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(114, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithEmptyStringAndFalse() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-2005));
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(69, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClassWithNonEmptyStringAndNonEmptyString() throws Throwable  {
      // Given a valid input "~rffPKml<=" and "<=~rffPKml<="
      String input1 = "~rffPKml<=";
      String input2 = "<=~rffPKml<=";
      
      // When the newNameType method is called with these inputs
      ClassWriter classWriter = new ClassWriter(4611);
      classWriter.visitOuterClass("INl", input1, input2);
      int newNameType = classWriter.newNameType(input1, input2);
      
      // Then the method should return the correct value of 4
      assertEquals(4, newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClass() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(31);
      classWriter.visitOuterClass("", "SourceFile", (String) null);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(58, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClassWithNull() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(635);
      
      // When
      classWriter.visitOuterClass("", (String) null, (String) null);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSourceWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-375));
      classWriter.visitSource("", (String) null);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(48, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSourceWithNullAndNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(4);
      classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1120);
      String[] arg5 = new String[3];
      arg5[0] = "";
      arg5[1] = ".5@s{l'Q<\"QFLOKV";
      arg5[2] = ".5@s{l'Q<\"QFLOKV";
      classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", arg5);
      classWriter.invalidFrames = true;
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(78, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewUTF8WithNonEmptyStringAndVisitWithEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(39);
      String[] arg5 = new String[0];
      classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", arg5);
      int newUTF8 = classWriter.newUTF8("Synthetic");
      assertEquals(4, newUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(5);
      String[] arg5 = new String[1];
      // Undeclared exception!
      try { 
        classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-3372));
      classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(978);
      classWriter.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassWriterTaking2Arguments() throws Throwable  {
      // Given: The input is a string representing the fully-qualified name of a class.
      ClassReader arg0 = new ClassReader("java/lang/Object");
      
      // When: Creating a new instance of the ClassWriter with the given argument.
      ClassWriter classWriter = new ClassWriter(arg0, 2);
      
      // Then: The new instance should not be null.
      assertNotNull(classWriter);
      
      // Given: The input is a float value.
      float input = 1;
      
      // When: Creating a new instance of the Item with the given argument.
      Item newFloat = classWriter.newFloat(input);
      
      // Then: The new instance should not be null.
      assertNotNull(newFloat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitField() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-2539));
      classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(140, byteArray.length);
  }
}
