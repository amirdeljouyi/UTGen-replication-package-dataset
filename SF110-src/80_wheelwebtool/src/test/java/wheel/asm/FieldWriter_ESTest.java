/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 20:06:31 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1));
      FieldWriter fieldWriter = new FieldWriter(arg0, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
      String[] arg5 = new String[1];
      arg5[0] = "/=dB%gg,xmS+&";
      arg0.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", arg5);
      int size = fieldWriter.getSize();
      assertEquals(30, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFieldWriter0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1329));
      FieldWriter fieldWriter = new FieldWriter(arg0, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
      int size = fieldWriter.getSize();
      assertEquals(36, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2780);
      FieldWriter fieldWriter = new FieldWriter(arg0, 2780, "6H2", "6H2", "6H2", "6H2");
      fieldWriter.visitAnnotation("6H2", true);
      int size = fieldWriter.getSize();
      assertEquals(36, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2782);
      FieldWriter fieldWriter = new FieldWriter(arg0, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
      int size = fieldWriter.getSize();
      assertEquals(36, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFieldWriter1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(8);
      FieldWriter fieldWriter = new FieldWriter(arg0, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
      int size = fieldWriter.getSize();
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateFieldWriterThrowsIllegalArgumentException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2793);
      FieldWriter arg5 = new FieldWriter(arg0, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
      FieldWriter fieldWriter = null;
      try {
        fieldWriter = new FieldWriter(arg0, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", arg5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1379));
      FieldWriter fieldWriter = new FieldWriter(arg0, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
      fieldWriter.visitEnd();
  }
}
