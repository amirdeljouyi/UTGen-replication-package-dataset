/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 13:58:01 GMT 2024
 */

package nu.staldal.lagoon;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import nu.staldal.lagoon.LagoonCLI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LagoonCLI_ESTest extends LagoonCLI_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain0() throws Throwable  {
      // Given: A String array containing two elements
      String[] args = new String[2];
      args[1] = "power";
      
      // When: Invoking the LagoonCLI main method with the given arguments
      LagoonCLI.main(args);
      
      // Then: The length of the array should be 2
      assertEquals(2, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain1() throws Throwable  {
      // No Comments were added
      String[] arg0 = new String[1];
      arg0[0] = "#~.xml";
      LagoonCLI.main(arg0);
      assertEquals(1, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain2() throws Throwable  {
      // Given: a user tries to authenticate without providing any credentials
      String[] args = new String[1];
      args[0] = "nu.staldal.lagoon.core.AuthenticationMissingException";
      
      // When: the user runs the CLI with the provided arguments
      LagoonCLI.main(args);
      
      // Then: an AuthenticationMissingException is thrown
      assertEquals(1, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain3() throws Throwable  {
      // rollbacked to evosuite
      String[] arg0 = new String[1];
      arg0[0] = "HA8m5BE_|-@L!}u.sitemap";
      LagoonCLI.main(arg0);
      assertEquals(1, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNullPointerException0() throws Throwable  {
      String[] arg0 = new String[3];
      arg0[1] = "1";
      // This line should throw a NullPointerException due to the invalid input.
      LagoonCLI.main(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNullPointerException1() throws Throwable  {
      // Test that LagoonCLI throws a NullPointerException when a non-existent force is specified.
      String[] arg0 = new String[2];
      arg0[1] = "force";
      
      try {
      // Try to execute the main method with an invalid force argument.
      LagoonCLI.main(arg0);
      
      // Fail the test if no exception was thrown, or if the exception is not a NullPointerException.
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // The exception message should be null.
      assertEquals(null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNullPointerException2() throws Throwable  {
      String[] args = new String[6];
      args[1] = "build";
      
      // Given a valid input argument for the build command
      // When the main method is invoked with this argument
      try {
      LagoonCLI.main(args);
      } catch (NullPointerException e) {
      fail("Expecting exception: NullPointerException");
      }
      
      // Then the build command should be executed successfully
      assertEquals("build", args[1]);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain4() throws Throwable  {
      // rollbacked to evosuite
      String[] arg0 = new String[2];
      arg0[1] = "0";
      LagoonCLI.main(arg0);
      assertEquals(2, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithEmptyArray() throws Throwable  {
      // Given: The LagoonCLI class has been initialized with an empty string array as arguments
      String[] args = new String[0];
      LagoonCLI cli = new LagoonCLI();
      
      // When: We call the main method of the LagoonCLI class with the provided arguments
      cli.main(args);
      
      // Then: The length of the argument array should be 0, as no arguments were passed to the program
      assertEquals(0, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLagoonCLI() throws Throwable  {
      // rollbacked to evosuite
      LagoonCLI lagoonCLI = new LagoonCLI();
  }
}
