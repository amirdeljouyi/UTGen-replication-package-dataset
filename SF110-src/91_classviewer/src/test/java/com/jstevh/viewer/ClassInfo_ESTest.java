/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 01:45:18 GMT 2024
 */

package com.jstevh.viewer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jstevh.viewer.ClassInfo;
import com.jstevh.viewer.DirManager;
import com.jstevh.viewer.MethodData;
import java.lang.reflect.Array;
import java.lang.reflect.Member;
import javax.swing.JFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassInfo_ESTest extends ClassInfo_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataTakingClassArray() throws Throwable  {
      // Get an array of classes representing JFrame
      Class<JFrame>[] arg0 = (Class<JFrame>[]) Array.newInstance(Class.class, 0);
      
      // Call getData method and store the returned value in data variable
      String[] data = ClassInfo.getData(arg0);
      
      // Assert that the returned value is null
      assertNull(data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataTakingMemberArrayReturningNonEmptyArray() throws Throwable  {
      // Given: A list of members with one member
      Member[] arg0 = new Member[1];
      Member member = mock(Member.class, new ViolatedAssumptionAnswer());
      arg0[0] = member;
      
      // When: The method "getData" is called with the list of members
      String[] data = ClassInfo.getData(arg0);
      
      // Then: The method should return an array with one element
      assertEquals(1, data.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataTakingMemberArrayReturningNull() throws Throwable  {
      // Given: an empty input array of Members
      Member[] arg0 = new Member[0];
      
      // When: the getData method is called with this input
      String[] data = ClassInfo.getData(arg0);
      
      // Then: the output should be null
      assertNull(data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintInterfacesAndCreatesClassInfoTakingStringAndMain() throws Throwable  {
      // Given a class info object for "com.jstevh.viewer.MethodData"
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData");
      
      // When the printInterfaces method is called on this class info object with an empty interface list
      String[] printInterfaces = classInfo.printInterfaces();
      
      // Then the returned array should be null
      assertNull(printInterfaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintInterfaces0() throws Throwable  {
      // Given an Object class
      ClassInfo objectClass = new ClassInfo("java.lang.Object");
      
      // When we print its interfaces
      String[] interfaceNames = objectClass.printInterfaces();
      
      // Then we expect to get no interfaces
      assertNull(interfaceNames);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintConstructors() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] arg0 = new String[2];
      arg0[0] = "com.jstevh.viewer.ClassInfo$1";
      ClassInfo.main(arg0);
      String[] printConstructors = classInfo.printConstructors();
      assertNull(printConstructors);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintMethodsTakingNoArguments() throws Throwable  {
      // Given: The DirManager class is being used to manage a directory of files
      DirManager dirManager = new DirManager(false);
      
      // When: A new ClassInfo object is created with the name of a class and the DirManager instance
      ClassInfo classInfo = new ClassInfo("javax.swing.JFrame", dirManager);
      
      // Then: The printInterfaces() method returns an array of strings containing the names of the interfaces implemented by the class
      String[] interfaces = classInfo.printInterfaces();
      assertEquals(7, interfaces.length);
      
      // And: The printMethods() method returns an array of strings containing the names of the methods in the class
      String[] methods = classInfo.printMethods();
      assertEquals(329, methods.length);
      
      // And: The returned array is not null
      assertNotNull(methods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintFieldsAndPrintFieldsReturningNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] arg0 = new String[5];
      arg0[0] = "com.jstevh.viewer.ClassInfo$1";
      ClassInfo.main(arg0);
      classInfo.printFields();
      assertTrue(ClassInfo.debug);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain0() throws Throwable  {
      // When: The user calls the main method and passes it an array with four strings
      String[] args = new String[4];
      args[0] = "new";
      ClassInfo.main(args);
      
      // Then: The length of the array passed to the method should be 4
      assertEquals(4, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTakingStringReturningNonEmptyArray() throws Throwable  {
      // Given: A class "com.jstevh.viewer.MethodData" exists in the system and has a method with id 564
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData");
      classInfo.srchMethods(".");
      
      // When: The method with id 564 is searched for using "getFoundMethod" method
      MethodData foundMethod = classInfo.getFoundMethod(564);
      
      // Then: The method should be null, as it does not exist in the system
      assertNull(foundMethod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFoundMethod() throws Throwable  {
      // Given a class with a nested inner class and a methodData object to hold information about the method
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      MethodData foundMethod = classInfo.getFoundMethod(2);
      
      // When we use the getFoundMethod() method with an index of 2
      assertNull(foundMethod);
      
      // Then the methodData object should be null because no method exists at that index
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTaking2ArgumentsReturningNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      String[] arg1 = new String[1];
      arg1[0] = "com.jstevh.tools.StringTools";
      String[] srchMethods = classInfo.srchMethods("com.jstevh.tools.StringTools", arg1);
      assertNotNull(srchMethods);
      assertNotSame(srchMethods, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTaking2ArgumentsWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      String[] srchMethods = classInfo.srchMethods((String) null, (String[]) null);
      assertNull(srchMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFoundMethodThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      classInfo.srchMethods("j");
      // Undeclared exception!
      try { 
        classInfo.getFoundMethod(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTakingStringWithNull() throws Throwable  {
      // This test case verifies that the srchMethods method returns null when no search string is provided.
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] srchMethods = classInfo.srchMethods((String) null);
      
      // Verify that the returned array is null
      assertNull(srchMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTakingStringReturningNull() throws Throwable  {
      // Arrange
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      
      // Act
      String[] srchMethods = classInfo.srchMethods("N ");
      
      // Assert
      assertNull(srchMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSrchMethodsTaking2Arguments() throws Throwable  {
      // Given
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
      
      // When
      String[] interfaces = classInfo.printInterfaces();
      
      // Then
      assertNotNull(interfaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintInterfaces1() throws Throwable  {
      // Given a class "com.jstevh.tools.StringTools"
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      
      // When the printInterfaces() method is called on this class
      String[] printInterfaces = classInfo.printInterfaces();
      
      // Then the result should be null
      assertNull(printInterfaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain1() throws Throwable  {
      // Set up some sample data to be used as command-line arguments.
      String[] args = new String[4];
      args[0] = "java.lang.Object";
      
      // Invoke the main method of the ClassInfo class with the sample data.
      ClassInfo.main(args);
      
      // Verify that the correct number of arguments were processed.
      assertEquals(4, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintConstructors() throws Throwable  {
      // Test that the method returns null when given a null input
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] printConstructors = classInfo.printConstructors();
      assertNull(printConstructors);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintMethodsTakingInt() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      String[] arg0 = new String[0];
      ClassInfo.main(arg0);
      String[] printMethods = classInfo.printMethods(1);
      assertNull(printMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintMethodsTakingInt() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] printMethods = classInfo.printMethods(2);
      assertNull(printMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintConstructorsReturningNonEmptyArray() throws Throwable  {
      // Given
      String[] arg0 = new String[] {"com.jstevh.viewer.DirManager"};
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.DirManager");
      
      // When
      String[] printConstructors = classInfo.printConstructors();
      
      // Then
      assertNotSame(printConstructors, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintMethodsTakingNoArguments() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String[] printMethods = classInfo.printMethods();
      assertEquals(12, printMethods.length);
      assertNotNull(printMethods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintFieldsAndPrintFieldsReturningNull() throws Throwable  {
      // Arrange
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      String[] arg0 = new String[0];
      
      // Act
      ClassInfo.main(arg0);
      
      // Assert
      String[] printFields = classInfo.printFields();
      assertNull(printFields);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintFields0() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("javax.swing.JFrame");
      String[] printFields = classInfo.printFields();
      assertEquals(37, printFields.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsPrintFields1() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
      String[] printFields = classInfo.printFields();
      assertEquals(1, printFields.length);
      assertNotNull(printFields);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndPrintFieldsAndPrintFieldsReturningNull() throws Throwable  {
      // Given
      ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringTools");
      
      // When
      String[] printFields = classInfo.printFields();
      
      // Then
      assertNull(printFields);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTaking2Arguments() throws Throwable  {
      // Given
      DirManager arg1 = new DirManager(false);
      
      // When
      ClassInfo classInfo = new ClassInfo("java.lang.Object", arg1);
      
      // Then
      assertFalse(classInfo.isInterface());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassInfoTaking2ArgumentsThrowsClassNotFoundException() throws Throwable  {
      // No Comments were added
      DirManager arg1 = new DirManager(false);
      ClassInfo classInfo = null;
      try {
        classInfo = new ClassInfo((String) null, arg1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jstevh.viewer.ClassInfo", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTaking2ArgumentsAndCallsPrintInterfaces() throws Throwable  {
      // Given: A new instance of DirManager with the "false" flag as a parameter.
      DirManager dirManager = new DirManager(false);
      
      // When: Creating a new ClassInfo object with the class name and the DirManager object.
      ClassInfo classInfo = new ClassInfo("javax.swing.JFrame", dirManager);
      
      // Then: The printInterfaces method should not return null.
      assertNotNull(classInfo.printInterfaces());
      
      // When: Invoking the main method of the ClassInfo object with an array containing the class name as a string.
      ClassInfo.main(new String[] { "javax.swing.JFrame" });
      
      // Then: The printInterfaces method should return an array with 7 elements.
      String[] interfaces = classInfo.printInterfaces();
      assertEquals(7, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsGetSuperClassName0() throws Throwable  {
      // Given a class with no explicit superclass
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData");
      
      // When we get the superclass name for this class
      String superClassName = classInfo.getSuperClassName();
      
      // Then we expect null, since there is no explicit superclass
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperClassNameReturningNonEmptyString() throws Throwable  {
      // Arrange
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      
      // Act
      String superClassName = classInfo.getSuperClassName();
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassInfoTakingStringAndCallsGetSuperClassName1() throws Throwable  {
      // Given a class info object for java.lang.Object,
      ClassInfo classInfo = new ClassInfo("java.lang.Object");
      
      // When we get its superclass name,
      String superClassName = classInfo.getSuperClassName();
      
      // Then the returned value should be null, since Object does not have a superclass.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassPackage() throws Throwable  {
      // rollbacked to evosuite
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      String classPackage = classInfo.getClassPackage();
      assertEquals("com.jstevh.viewer", classPackage);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // Create an instance of a nested class
      ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
      
      // Call the getClassName method on the instance to retrieve the class name
      String className = classInfo.getClassName();
      
      // Assert that the returned class name is the expected value
  }
}
