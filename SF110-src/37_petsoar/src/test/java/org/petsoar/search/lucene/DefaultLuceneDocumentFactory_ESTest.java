/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 04:17:39 GMT 2024
 */

package org.petsoar.search.lucene;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.util.List;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.petsoar.search.lucene.DefaultLuceneDocumentFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultLuceneDocumentFactory_ESTest extends DefaultLuceneDocumentFactory_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetType() throws Throwable  {
      // Given: A DefaultLuceneDocumentFactory.FieldConfiguration instance with a type set to "No origin bean specified"
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfiguration = new DefaultLuceneDocumentFactory.FieldConfiguration();
      fieldConfiguration.setType("No origin bean specified");
      
      // When: The getType method is called on the field configuration instance
      String type = fieldConfiguration.getType();
      
      // Then: The returned value should be "No origin bean specified"
      assertEquals("No origin bean specified", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetType() throws Throwable  {
      // Given a new instance of DefaultLuceneDocumentFactory.FieldConfiguration
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfig = new DefaultLuceneDocumentFactory.FieldConfiguration();
      
      // When the getType method is called
      String type = fieldConfig.getType();
      
      // Then the return value should be null
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFieldConfigurationAndCallsToString() throws Throwable  {
      // Given a DefaultLuceneDocumentFactory.FieldConfiguration object
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfig = new DefaultLuceneDocumentFactory.FieldConfiguration();
      
      // When the toString method is called on the object
      String stringRepresentation = fieldConfig.toString();
      
      // Then it should return a non-null value
      assertNotNull(stringRepresentation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeName() throws Throwable  {
      // Given
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfiguration = new DefaultLuceneDocumentFactory.FieldConfiguration();
      String expectedAttributeName = "attribute_name";
      
      // When
      String actualAttributeName = fieldConfiguration.getAttributeName();
      
      // Then
      assertEquals(expectedAttributeName, actualAttributeName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFieldName() throws Throwable  {
      // Given a DefaultLuceneDocumentFactory.FieldConfiguration object with no field name set
      DefaultLuceneDocumentFactory.FieldConfiguration config = new DefaultLuceneDocumentFactory.FieldConfiguration();
      
      // When the getFieldName method is called on the object
      String actualFieldName = config.getFieldName();
      
      // Then the returned value should be null, indicating that no field name has been set
      assertNull(actualFieldName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFieldConfigurationAndCallsEquals() throws Throwable  {
      // Given
      DefaultLuceneDocumentFactory.ClassConfiguration classConfig = new DefaultLuceneDocumentFactory.ClassConfiguration();
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfig = new DefaultLuceneDocumentFactory.FieldConfiguration();
      
      // When
      boolean equals = fieldConfig.equals(classConfig);
      
      // Then
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFieldName() throws Throwable  {
      // Given a DefaultLuceneDocumentFactory.FieldConfiguration object with a field name
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfig = new DefaultLuceneDocumentFactory.FieldConfiguration();
      String expectedFieldName = " +_?V*";
      fieldConfig.setFieldName(expectedFieldName);
      
      // When the getFieldName method is called
      String actualFieldName = fieldConfig.getFieldName();
      
      // Then the correct field name is returned
      assertEquals(expectedFieldName, actualFieldName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAttributeName() throws Throwable  {
      // Given a field configuration with an attribute name set to a non-null value
      DefaultLuceneDocumentFactory.FieldConfiguration fieldConfiguration = new DefaultLuceneDocumentFactory.FieldConfiguration();
      fieldConfiguration.setAttributeName("org.petsoar.search.lucene.DefaultLuceneDocumentFactory$ClassConfiguration@1[fieldConfigurations=[org.petsoar.search.lucene.DefaultLuceneDocumentFactory$FieldConfiguration@2[attributeName=<null>,fieldName=<null>,type=<null>]]]");
      
      // When the type is requested from the field configuration
      String actualType = fieldConfiguration.getType();
      
      // Then the type should be null
      assertNull(actualType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultAnalyzerAndCallsTokenStream() throws Throwable  {
      // Given: A TokenStream is created with a null reader
      DefaultLuceneDocumentFactory.DefaultAnalyzer defaultLuceneDocumentFactory_DefaultAnalyzer = new DefaultLuceneDocumentFactory.DefaultAnalyzer();
      TokenStream tokenStream = defaultLuceneDocumentFactory_DefaultAnalyzer.tokenStream("Couldn't get string content of attribute, attributeName=", (Reader) null);
      
      // When: The method is called with a null reader
      assertNotNull(tokenStream);
      
      // Then: A TokenStream object should be returned, even though the reader is null
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHandleFieldNameThrowsRuntimeException() throws Throwable  {
      // rollbacked to evosuite
      DefaultLuceneDocumentFactory.FieldConfiguration arg0 = new DefaultLuceneDocumentFactory.FieldConfiguration();
      DefaultLuceneDocumentFactory defaultLuceneDocumentFactory = new DefaultLuceneDocumentFactory();
      // Undeclared exception!
      try { 
        defaultLuceneDocumentFactory.getHandleFieldName(arg0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't load lucene config file successfully, file=class org.petsoar.search.lucene.DefaultLuceneDocumentFactory$FieldConfiguration
         //
         verifyException("org.petsoar.search.lucene.DefaultLuceneDocumentFactory", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateAnalyzer() throws Throwable  {
      // Given: A DefaultLuceneDocumentFactory instance is created.
      DefaultLuceneDocumentFactory defaultLuceneDocumentFactory = new DefaultLuceneDocumentFactory();
      
      // When: The createAnalyzer method is called on the DefaultLuceneDocumentFactory.
      Analyzer createAnalyzer = defaultLuceneDocumentFactory.createAnalyzer();
      
      // Then: The returned analyzer should not be null.
      assertNotNull(createAnalyzer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDocumentThrowsRuntimeException() throws Throwable  {
      DefaultLuceneDocumentFactory arg0 = new DefaultLuceneDocumentFactory();
      // Create a new instance of the DefaultLuceneDocumentFactory class
      
      try {
      arg0.createDocument(arg0);
      fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      // We expect an exception to be thrown when creating a document with a null argument
      verifyException("org.petsoar.search.lucene.DefaultLuceneDocumentFactory", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHandleAttributeNameThrowsRuntimeException() throws Throwable  {
      DefaultLuceneDocumentFactory arg0 = new DefaultLuceneDocumentFactory();
      // This test is checking that the method throws a RuntimeException when an invalid file path is passed in
      String[] args = {"invalid_file_path"};
      try {
      arg0.getHandleAttributeName(args);
      fail("Expected exception: RuntimeException");
      } catch (RuntimeException e) {
      // This verifies that the correct exception type is thrown and that the message matches the expected message
      assertEquals("Couldn't load lucene config file successfully, file=invalid_file_path", e.getMessage());
      throw e;}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddFieldConfiguration() throws Throwable  {
      // rollbacked to evosuite
      DefaultLuceneDocumentFactory.ClassConfiguration defaultLuceneDocumentFactory_ClassConfiguration = new DefaultLuceneDocumentFactory.ClassConfiguration();
      DefaultLuceneDocumentFactory.FieldConfiguration arg0 = new DefaultLuceneDocumentFactory.FieldConfiguration();
      defaultLuceneDocumentFactory_ClassConfiguration.addFieldConfiguration(arg0);
      assertNull(arg0.getFieldName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassConfigurationAndCallsToString() throws Throwable  {
      // rollbacked to evosuite
      DefaultLuceneDocumentFactory.ClassConfiguration defaultLuceneDocumentFactory_ClassConfiguration = new DefaultLuceneDocumentFactory.ClassConfiguration();
      String string = defaultLuceneDocumentFactory_ClassConfiguration.toString();
      assertNotNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEquals() throws Throwable  {
      // Arrange
      DefaultLuceneDocumentFactory.ClassConfiguration arg0 = new DefaultLuceneDocumentFactory.ClassConfiguration();
      
      // Act
      boolean equals = arg0.equals(arg0);
      
      // Assert
      assertTrue(equals, "Equals method should return true if called with the same instance");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFieldConfigurations() throws Throwable  {
      // rollbacked to evosuite
      DefaultLuceneDocumentFactory.ClassConfiguration defaultLuceneDocumentFactory_ClassConfiguration = new DefaultLuceneDocumentFactory.ClassConfiguration();
      List fieldConfigurations = defaultLuceneDocumentFactory_ClassConfiguration.getFieldConfigurations();
      assertEquals(0, fieldConfigurations.size());
  }
}
