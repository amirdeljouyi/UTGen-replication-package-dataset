/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 05:35:45 GMT 2024
 */

package net.sourceforge.schemaspy.model.xml;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import javax.imageio.metadata.IIOMetadataNode;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.model.xml.TableMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TableMeta_ESTest extends TableMeta_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Given a IIOMetadataNode with the attribute "remotdeCatalog" and a value of "null"
      IIOMetadataNode arg0 = new IIOMetadataNode(" remotdeCatalog: ");
      arg0.setAttribute("name", (String) null);
      
      // When a TableMeta object is created from the IIOMetadataNode
      TableMeta tableMeta = new TableMeta(arg0);
      
      // Then the name of the TableMeta should be null
      String name = tableMeta.getName();
      assertNull(name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given: a TableMeta object with a name attribute set to "name"
      IIOMetadataNode arg0 = new IIOMetadataNode("name");
      arg0.setAttribute("name", "name");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When: getting the name of the table meta
      String name = tableMeta.getName();
      
      // Then: the name of the table should be "name"
      assertEquals("name", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentsReturningNonEmptyString() throws Throwable  {
      // Given
      IIOMetadataNode arg0 = new IIOMetadataNode("name");
      arg0.setAttribute("name", "name");
      arg0.setAttribute("remarks", "name");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When
      String comments = tableMeta.getComments();
      
      // Then
      assertEquals("name", comments);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnsReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      // Create a new IIOMetadataNode with the name "name" and set an attribute named "name" to "name"
      IIOMetadataNode node = new IIOMetadataNode("name");
      node.setAttribute("name", "name");
      
      // Create a new TableMeta instance with the given IIOMetadataNode
      TableMeta tableMeta = new TableMeta(node);
      
      // Get the list of columns for this table meta data
      List<TableColumnMeta> columns = tableMeta.getColumns();
      
      // Assert that the list is empty
      assertTrue(columns.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteCatalogReturningNonEmptyString() throws Throwable  {
      // Given a TableMeta object with a IIOMetadataNode argument
      IIOMetadataNode arg0 = new IIOMetadataNode("name");
      arg0.setAttribute("remoteCatalog", "wt&Afq?nJx#KO|cJR4");
      arg0.setAttribute("name", "name");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When the getRemoteCatalog method is called on the TableMeta object
      String remoteCatalog = tableMeta.getRemoteCatalog();
      
      // Then the method should return the correct value, which in this case is "wt&Afq?nJx#KO|cJR4"
      assertEquals("wt&Afq?nJx#KO|cJR4", remoteCatalog);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteSchemaReturningNonEmptyString() throws Throwable  {
      // Create an IIOMetadataNode object with the name attribute set to "name" and the remoteSchema attribute set to "name".
      IIOMetadataNode metadataNode = new IIOMetadataNode("name");
      metadataNode.setAttributeNS("name", "name", "name");
      metadataNode.setAttribute("remoteSchema", "name");
      
      // Create a TableMeta object from the metadataNode object.
      TableMeta tableMeta = new TableMeta(metadataNode);
      
      // Get the remote schema using the getRemoteSchema() method.
      String remoteSchema = tableMeta.getRemoteSchema();
      
      // Assert that the remote schema is equal to "name".
      assertEquals("name", remoteSchema);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTableMeta() throws Throwable  {
      // Given a IIOMetadataNode with no remote catalog attribute set
      IIOMetadataNode metadata = new IIOMetadataNode("name");
      metadata.setAttribute("name", "name");
      metadata.setAttribute("remarks", "");
      
      // When we create a TableMeta from the IIOMetadataNode
      TableMeta tableMeta = new TableMeta(metadata);
      
      // Then the remote catalog should be null
      assertNull(tableMeta.getRemoteCatalog());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateTableMetaThrowsNullPointerException() throws Throwable  {
      // Given a IIOMetadataNode with name and comments attributes set
      IIOMetadataNode arg0 = new IIOMetadataNode();
      arg0.setAttribute("name", "John Doe");
      arg0.setAttribute("comments", "A highly skilled and experienced developer.");
      
      // When a TableMeta object is created with the IIOMetadataNode as an argument
      TableMeta tableMeta = null;
      try {
      tableMeta = new TableMeta(arg0);
      } catch (NullPointerException e) {
      // Then an exception is thrown with no message
      assertEquals(null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteSchemaReturningNull() throws Throwable  {
      // Given: A IIOMetadataNode object with a specific name and value
      IIOMetadataNode arg0 = new IIOMetadataNode("name");
      arg0.setAttributeNS("name", "name", "name");
      
      // When: The TableMeta class is instantiated with the IIOMetadataNode
      TableMeta tableMeta = new TableMeta(arg0);
      
      // Then: The remoteSchema attribute of the TableMeta object should be null, since it has not been set
      String remoteSchema = tableMeta.getRemoteSchema();
      assertNull(remoteSchema);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRemoteCatalogReturningNull() throws Throwable  {
      // Given: A TableMeta instance was created from an IIOMetadataNode "column" node
      IIOMetadataNode arg0 = new IIOMetadataNode("column");
      arg0.setAttribute("name", "o~");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When: The remote catalog of the table meta is retrieved
      String remoteCatalog = tableMeta.getRemoteCatalog();
      
      // Then: The retrieved remote catalog should be null, as there is no value set for it in the metadata
      assertNull(remoteCatalog);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnsReturningListWhereIsEmptyIsFalse() throws Throwable  {
      // Given: A TableMeta object with a column named "o~"
      IIOMetadataNode arg0 = new IIOMetadataNode("column");
      arg0.setAttribute("name", "o~");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When: Retrieving the columns of the table meta
      List<TableColumnMeta> columns = tableMeta.getColumns();
      
      // Then: The list of columns should contain only one element, with the name "o~"
      assertEquals(1, columns.size());
      assertEquals("o~", columns.get(0).getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Given a IIOMetadataNode object with the name attribute set to an empty string
      IIOMetadataNode arg0 = new IIOMetadataNode("name");
      arg0.setAttribute("name", "");
      
      // When a TableMeta object is created from the IIOMetadataNode
      TableMeta tableMeta = new TableMeta(arg0);
      
      // Then the name of the table should be an empty string
      String name = tableMeta.getName();
      assertEquals("", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentsReturningNull() throws Throwable  {
      // Given: A TableMeta object with no comments set
      IIOMetadataNode arg0 = new IIOMetadataNode("column");
      arg0.setAttribute("name", "o~");
      TableMeta tableMeta = new TableMeta(arg0);
      
      // When: The getComments() method is called
      String comments = tableMeta.getComments();
      
      // Then: Null should be returned as there are no comments set
      assertNull(comments);
  }
}
