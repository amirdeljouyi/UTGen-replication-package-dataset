/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 10:00:42 GMT 2024
 */

package org.quickserver.net.server.impl;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataMode;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockingClientHandler_ESTest extends BlockingClientHandler_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClean() throws Throwable  {
      // Test that a BlockingClientHandler object can be instantiated with a negative ID
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353);
      
      // Clean the handler to reset it for testing
      blockingClientHandler.clean();
      
      // Assert that the handler's name is as expected
      assertEquals("<ClientHandler-Pool#-2353-ID:13>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataMode() throws Throwable  {
      // Given a BlockingClientHandler instance with ID -2353
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353);
      
      // And a DataType argument set to OUT
      DataType arg1 = DataType.OUT;
      
      // When the method setDataMode is called with null as the first argument and arg1 as the second argument
      blockingClientHandler.setDataMode(null, arg1);
      
      // Then the name of the BlockingClientHandler should be "<ClientHandler-Pool#-2353-ID:9>"
      assertEquals("<ClientHandler-Pool#-2353-ID:9>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRun() throws Throwable  {
      // Create a new BlockingClientHandler with an ID of -2353
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353);
      
      // Start the client handler in its own thread
      blockingClientHandler.run();
      
      // Assert that the name of the client handler is "<ClientHandler-Pool#-2353-ID:5>"
      assertEquals("<ClientHandler-Pool#-2353-ID:5>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments0() throws Throwable  {
      BlockingClientHandler handler = new BlockingClientHandler();
      CommandHandler clientEventHandler = new CommandHandler();
      PipedInputStream inputStream = new PipedInputStream();
      handler.in = (InputStream) inputStream;
      handler.setClientEventHandler(clientEventHandler);
      handler.connection = true;
      handler.closeConnection();
      assertEquals("<ClientHandler-Pool#-1-ID:75>", handler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments1() throws Throwable  {
      // Given a BlockingClientHandler instance with a client event handler set
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      blockingClientHandler.setClientEventHandler(new CommandHandler());
      
      // When the connection is established
      blockingClientHandler.connection = true;
      
      // Then the name of the BlockingClientHandler instance should be "<ClientHandler-Pool#-1-ID:62>"
      assertEquals("<ClientHandler-Pool#-1-ID:62>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments2() throws Throwable  {
      // Given a BlockingClientHandler instance
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // When the closeConnection method is called
      blockingClientHandler.closeConnection();
      
      // Then the name of the handler should be "<ClientHandler-Pool#-1-ID:53>"
      assertEquals("<ClientHandler-Pool#-1-ID:53>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStream() throws Throwable  {
      // Given a BlockingClientHandler object and a PipedInputStream
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      PipedInputStream arg0 = new PipedInputStream();
      
      // When the data mode of the handler is set to BINARY
      DataMode dataMode = DataMode.BINARY;
      blockingClientHandler.dataModeIN = dataMode;
      
      // And the handler's input stream is set to the PipedInputStream
      blockingClientHandler.setInputStream(arg0);
      
      // Then the handler's name should be "<ClientHandler-Pool#-1-ID:48>"
      assertEquals("<ClientHandler-Pool#-1-ID:48>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStreamWithNull() throws Throwable  {
      // Given
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      InputStream inputStream = null; // Null means there is no input stream available
      
      // When
      blockingClientHandler.setInputStream(inputStream);
      
      // Then
      assertEquals("ClientHandler-Pool#-1-ID:17", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateInputOutputStreamsThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.updateInputOutputStreams();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckReturnClientHandler() throws Throwable  {
      // Arrange
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // Act
      boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler();
      
      // Assert
      assertTrue(checkReturnClientHandler);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSocketChannelThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // Given: A new instance of the handler
      
      // When: Trying to set the socket channel to null in blocking mode
      
      try {
      blockingClientHandler.setSocketChannel((SocketChannel) null);
      
      // Then: An IllegalStateException should be thrown
      fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBlockingMode() throws Throwable  {
      // Given
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353);
      
      // When
      boolean actualValue = blockingClientHandler.getBlockingMode();
      
      // Then
      assertTrue(actualValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectionKeyThrowsIllegalStateException() throws Throwable  {
      // Test that setSelectionKey() throws IllegalStateException when called in blocking mode
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
      try {
      blockingClientHandler.setSelectionKey((SelectionKey) null);
      fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      // Can't set in blocking mode!
      verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReturnClientHandler() throws Throwable  {
      // Given
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // When
      blockingClientHandler.returnClientHandler();
      
      // Then
      assertEquals(0, blockingClientHandler.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForReadThrowsIllegalStateException() throws Throwable  {
      // Given a BlockingClientHandler with a negative clientId
      int negativeClientId = -2353;
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(negativeClientId);
      
      // When the registerForRead method is called
      try {
      blockingClientHandler.registerForRead();
      
      // Then an IllegalStateException is thrown because it's not possible to register in blocking mode
      fail("Expecting exception: IllegalStateException");
      } catch (IllegalStateException e) {
      // Can't register in blocking mode!
      verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetClientWriteHandlerThrowsIllegalStateException() throws Throwable  {
      // Given a BlockingClientHandler with write handler set to null
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
      blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
      
      // When the setClientWriteHandler method is called with a null handler
      try {
      blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
      
      // Then an IllegalStateException should be thrown
      fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      // Can't register in blocking mode!
      verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReader() throws Throwable  {
      // Given a BlockingClientHandler instance with a port of 0
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
      
      // When the getBufferedReader method is called
      BufferedReader bufferedReader = blockingClientHandler.getBufferedReader();
      
      // Then the method should return null
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForWriteThrowsIllegalStateException() throws Throwable  {
      // rollbacked to evosuite
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
      // Undeclared exception!
      try { 
        blockingClientHandler.registerForWrite();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't register in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSocketChannelThrowsIllegalStateException() throws Throwable  {
      // rollbacked to evosuite
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFinalize() throws Throwable  {
      // Given a BlockingClientHandler instance
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // When the finalize method is called on the instance
      blockingClientHandler.finalize();
      
      // Then the instance should be properly cleaned up
      assertEquals("<ClientHandler-Pool#-1-ID:3>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectionKeyThrowsIllegalStateException() throws Throwable  {
      // Given a BlockingClientHandler instance
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      
      // When the getSelectionKey() method is called
      try {
      // Try to get the selection key of the handler in blocking mode
      blockingClientHandler.getSelectionKey();
      } catch(IllegalStateException e) {
      // Verify that an IllegalStateException was thrown, as expected
      verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);}
  }
}
