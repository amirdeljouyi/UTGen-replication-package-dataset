/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 07:52:23 GMT 2024
 */

package com.browsersoft.aacs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.browsersoft.aacs.User;
import java.util.NoSuchElementException;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getUserName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNull() throws Throwable  {
      User user = new User();
      user.setSurName((String) null);
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      User user = new User("log4j.debug", "log4j.debug");
      user.addRole("log4j.debug");
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNull() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setPassword((String) null);
      user.getPassword();
      assertFalse(user.getPasschange());
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertEquals("m{", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.encodePassword("UoIhJx%W&%(E08jGds");
      user.getPassword();
      assertEquals("{SSHA}3rsC1kbVoIG+2Z7QnhbpVUH6ubxYWFhY", user.getPassword());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNull() throws Throwable  {
      User user = new User();
      user.setPassrenewal((String) null);
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNonEmptyString() throws Throwable  {
      User user = new User("8:IDL^+2PVNeQ+9'1{", "8:IDL^+2PVNeQ+9'1{");
      user.setPassrenewal("8:IDL^+2PVNeQ+9'1{");
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNull() throws Throwable  {
      User user = new User();
      user.setOrg((String) null);
      user.getOrg();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNonNull() throws Throwable  {
      User user = new User("T62<+.@L", "T62<+.@L");
      InitialLdapContext initialLdapContext = new InitialLdapContext();
      user.dctx = (LdapContext) initialLdapContext;
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.setIpAddr(".3srEX8FJ");
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningEmptyString() throws Throwable  {
      // Given a user with an empty IP address
      User user = new User();
      user.setIpAddr("");
      
      // When the IP address is retrieved
      String ipAddr = user.getIpAddr();
      
      // Then the returned value should be an empty string
      assertEquals("", ipAddr);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      // Given a user object
      User user = new User();
      
      // When the user is added to a group
      user.addGroup("Sales");
      
      // Then the user's groups should contain the Sales group
      assertTrue(user.getGroups().contains("Sales"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningNull() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.setCountry((String) null);
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setCountry("m{");
      user.getCountry();
      assertEquals("m{", user.getUserName());
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.addAllowedip("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningNegative() throws Throwable  {
      // Given a user and an argument object that represents another user
      User user = new User();
      User arg0 = new User("{sha}x%w&%(e08jgds", "4%tb9(");
      
      // When the users are compared using compareTo method
      int compareTo = user.compareTo(arg0);
      
      // Then the result of the comparison is -18
      assertEquals((-18), compareTo);
      
      // And the argument object has the correct username and password
      assertEquals("4%tb9(", arg0.getUserName());
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigest() throws Throwable  {
      User user = new User("o", "o"); // Create a new user object with the username 'o' and password 'o'
      boolean checkDigest = user.checkDigest("dn: cn=o, o=, c=subjectDN\ncn: o\nid: o\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", "dn: cn=o, o=, c=subjectDN\ncn: o\nid: o\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      assertFalse(checkDigest); // Check that the password digest is not valid for the user object
      
      byte[] arg0 = new byte[1]; // Create an empty array of bytes to be used as input to createDigest() method
      String createDigest = user.createDigest(arg0, "Reading configuration from URL "); // Call the createDigest() method with the empty byte array and a string input
      assertEquals("{SSHA}MESuZHZb3uvbTwjg/DAFJH/xFgIA", createDigest); // Check that the returned digest is correct
      assertFalse(user.getPasschange()); // Check that the password change flag is not set for the user object
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTaking2ArgumentsAndCallsCreateDigest() throws Throwable  {
      // Given a user with the username "o" and password "o"
      User user = new User("o", "o");
      
      // When we create a digest for the action of reading configuration from a URL
      byte[] arg0 = new byte[1];
      String createDigest = user.createDigest(arg0, "Reading configuration from URL ");
      
      // Then the digest should be equal to "{SSHA}MESuZHZb3uvbTwjg/DAFJH/xFgIA"
      assertEquals("{SSHA}MESuZHZb3uvbTwjg/DAFJH/xFgIA", createDigest);
      
      // And the user's password should not be changed (getPasschange method returns false)
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningPositive() throws Throwable  {
      // Given two users with different passwords and usernames
      User user = new User("userPassword:", "EMail");
      User arg0 = new User("8+A#?H%j08)", "{sha}#y}z^d5dh*");
      
      // When we compare the users with each other
      int compareTo = user.compareTo(arg0);
      
      // Then we expect that the first user is not equal to the second user
      assertFalse(arg0.getPasschange());
      assertEquals("{sha}#y}z^d5dh*", arg0.getUserName());
      assertEquals(61, compareTo);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToThrowsNullPointerException() throws Throwable  {
      // Arrange
      User arg0 = new User();
      
      // Act and Assert
      try {
      arg0.compareTo(arg0);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      verifyException("com.browsersoft.aacs.User", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningEmptyString() throws Throwable  {
      // Given a user object
      User user = new User();
      
      // When the getUserId method is called
      String userId = user.getUserId();
      
      // Then we expect the userId to be non-null and not equal to 0
      assertNotNull(userId);
      assertNotEquals(0, userId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      // Given: A user object with password change disabled
      User user = new User();
      user.setPasschange(false);
      
      // When: The getPasschange method is called
      boolean passchange = user.getPasschange();
      
      // Then: The return value should be false, indicating that the user's password has not been changed
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningEmptyString() throws Throwable  {
      // Given: A new user is created
      User user = new User();
      
      // When: The password for the user is retrieved
      String password = user.getPassword();
      
      // Then: The password should not be empty and should not change
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDN() throws Throwable  {
      // Given a new user instance with default values
      User user = new User();
      
      // When the DN is set to a valid value
      user.setDN("cn=test, o=example, c=US");
      
      // Then the getDN method returns the expected value
      assertEquals("cn=test, o=example, c=US", user.getDN());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      String userName = user.getUserName();
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertFalse(user.getPasschange());
      assertEquals("m{", userName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningEmptyString() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningEmptyString() throws Throwable  {
      // Given: A User object is created with default values.
      User user = new User();
      
      // When: The getSurname() method is called on the User object.
      String surname = user.getSurName();
      
      // Then: The surname returned should be null.
      assertNull(surname);
      
      // Given: A User object is created with a non-null surname.
      User user2 = new User("John", "Doe");
      
      // When: The getPasschange() method is called on the User object.
      boolean passChange = user2.getPasschange();
      
      // Then: The pass change property should be false.
      assertFalse(passChange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningNull() throws Throwable  {
      // Given: We have a User object
      User user = new User();
      
      // When: We call the getGroups() method on the User object
      user.getGroups();
      
      // Then: The passchange field of the User object should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNull() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordReturningTrue() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.encodePassword("$uperS3cretP@ssw0rd!");
      boolean checkPassword = user.checkPassword("$uperS3cretP@ssw0rd!");
      assertEquals("{SSHA}qiWlrrTPDi3AuhQP7UIcwAPX4cFYWFhY", user.getPassword());
      assertTrue(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTakingNoArgumentsAndCallsCheckDigest() throws Throwable  {
      // Given
      User user = new User();
      String input1 = "{sha}&";
      String input2 = "{sha}&";
      
      // When
      boolean checkDigest = user.checkDigest(input1, input2);
      
      // Then
      assertFalse(checkDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigestWithEmptyArrayAndEmptyString() throws Throwable  {
      // Given a user with a password and salt
      User user = new User();
      byte[] arg0 = new byte[0];
      
      // When creating a digest using the password and salt
      String createDigest = user.createDigest(arg0, "");
      
      // Then the digest should match the expected value
      assertEquals("{SHA}2jmj7l5rSw0yVb/vlWAYkK/YBwk=", createDigest);
      
      // And the user's password change flag should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      User arg0 = new User();
      User user = new User("N", "N");
      // Test that two objects are not equal if they have different values for their name and password
      assertFalse(user.equals(arg0));
      
      // Test that the hashCode() method returns a consistent value for both objects, even if they have different values for their name and password
      assertEquals(user.hashCode(), arg0.hashCode());
      
      // Test that the equals() method works as expected when comparing objects with different values for their name and password
      assertFalse(arg0.equals((Object)user));
      
      // Test that the getPasschange() method returns false if the password has not been changed
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingString() throws Throwable  {
      // Given a user object with group and role information
      User user = new User();
      user.addGroup("cn: test_group");
      user.addRole("role_name");
      
      // When the user is converted to a string representation
      String string = user.toString("test_user");
      
      // Then the string should contain the user's information
      assertEquals("dn: cn=, o=, c=test_usercn: test_userid: test_usersn: test_useruserPassword: test_userrole: role_nametest_usergroup: cn: test_grouptest_userobjectClass: toptest_userobjectClass: persontest_user", string);
      
      // And the user's password should not be able to change
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIpAddr() throws Throwable  {
      // Given a User object with an IP address set
      User user = new User();
      user.setIpAddr(";^LgIn=x48?[hnBvC");
      
      // When the user's information is converted to a string
      String string = user.toString();
      
      // Then the resulting string should contain the user's IP address
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsAndAddGroup() throws Throwable  {
      // Given a user with group "Administrators"
      User user = new User();
      user.addGroup("Administrators");
      
      // When the user's toString method is called
      String string = user.toString();
      
      // Then the returned string should contain the user's information in LDIF format
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \ngroup: Administrators\nobjectClass: top\nobjectClass: person\n", string);
      
      // And the user's password should not be in plain text
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsAndAddRole() throws Throwable  {
      // Given a user object with a manager role
      User user = new User();
      user.addRole("manager");
      
      // When we call the toString method on this user object
      String string = user.toString();
      
      // Then the resulting string should contain the correct information about the user, including their manager role
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: manager\nobjectClass: top\nobjectClass: person\n", string);
      
      // And the getPasschange method should return false for this user object
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException() throws Throwable  {
      // Given
      User user = new User();
      
      // When
      try {
      user.setDN("Qx#=<,c,~g}i/-s:OU");
      } catch (NoSuchElementException e) {
      // Then
      verifyException("java.util.StringTokenizer", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDN() throws Throwable  {
      // Create a new User object
      User user = new User();
      
      // Set the DN (Distinguished Name) of the user to "cn=john,o=example"
      user.setDN("cn=john,o=example");
      
      // Verify that the getOrg() method returns the correct organization name
      assertEquals("example", user.getOrg());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNull() throws Throwable  {
      // Given a user with a null DN
      User user = new User();
      user.setDN(null);
      
      // When we call getPasschange on the user
      boolean passChange = user.getPasschange();
      
      // Then we expect the method to return false
      assertFalse(passChange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllowedip() throws Throwable  {
      // Given a user with allowed IP addresses
      User user = new User();
      user.addAllowedip("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      user.addAllowedip("objectClass: person");
      
      // When the user's password is changed
      user.setPasschange(true);
      
      // Then the user's allowed IP addresses should not be used for password change
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddActivegroup() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.addActivegroup("Golf Club");
      user.addActivegroup("Tennis Court");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTakingNoArgumentsAndCallsAddGroup() throws Throwable  {
      // Create a new user with the "Critical" and "Security" groups
      User user = new User();
      user.addGroup("Critical");
      user.addGroup("Security");
      
      // Verify that the user's password is not expired (i.e., they are allowed to change their password)
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTakingNoArgumentsAndCallsAddRole() throws Throwable  {
      // Given: A User object with two roles, "Administrator" and "Power User"
      User user = new User();
      user.addRole("Administrator");
      user.addRole("Power User");
      
      // When: The getPasschange method is called on the User object
      boolean passchange = user.getPasschange();
      
      // Then: The passchange value should be false
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPassword() throws Throwable  {
      // Create a new User object with a valid user ID and password
      User user = new User("user123", "password123");
      
      // Set the password to null
      user.setPassword(null);
      
      // Check if the password is correct (should be false since we set it to null)
      boolean checkPassword = user.checkPassword("incorrectPassword");
      
      // Assert that the username and user ID match the expected values
      assertEquals("user123", user.getUserName());
      assertFalse(checkPassword);
      assertFalse(user.getPasschange());
      assertEquals("user123", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPassword() throws Throwable  {
      // Given: A new user is created with a password
      User user = new User();
      
      // When: The password is checked using the checkPassword method
      boolean checkPassword = user.checkPassword("$uperS3cretP@ssw0rd!");
      
      // Then: The password should be valid and the passchange flag should be set to false
      assertFalse(user.getPasschange());
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithEmptyString() throws Throwable  {
      // Given a new user object
      User user = new User();
      
      // When the encode password method is called with an empty string
      user.encodePassword("");
      
      // Then the passchange property should be false
      assertFalse(user.getPasschange());
      
      // And the password property should be empty
      assertEquals("", user.getPassword());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.encodePassword((String) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasschangeReturningFalse() throws Throwable  {
      // Given a user with a password change flag set to false
      User user = new User();
      
      // When the getPasswordChange method is called on this user
      boolean passchange = user.getPasschange();
      
      // Then the method should return false
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSalt() throws Throwable  {
      // rollbacked to evosuite
      User.setSalt("$2a$10$r7tKXxB6TsC3K3Ri9kpqyOm");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Given: a new user with an IP address of "192.168.0.1"
      User arg0 = new User();
      arg0.setIpAddr("192.168.0.1");
      
      // When: the user is compared to itself
      boolean equals = arg0.equals(arg0);
      
      // Then: the user should be equal to itself
      assertTrue(equals);
      
      // And: the user's password change flag should not be set
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeThrowsNullPointerException() throws Throwable  {
      // Given: A user object with a null username
      User user = new User();
      
      // When: The hashCode method is called on the user object
      try {
      user.hashCode();
      
      // Then: A NullPointerException should be thrown
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("com.browsersoft.aacs.User", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail() throws Throwable  {
      // Create a new User object with the given properties
      User user = new User("org.apache.log4j.PropertyConfigurator", "0M(IF[OLlEC,r8[&(R");
      
      // Verify that the getEmail() method returns the correct email address
      assertEquals("0M(IF[OLlEC,r8[&(R", user.getUserName());
      
      // Verify that the getPasschange() method returns false
      assertFalse(user.getPasschange());
      
      // Verify that the getUserId() method returns the correct user ID
      assertEquals("org.apache.log4j.PropertyConfigurator", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNonEmptyString() throws Throwable  {
      // Given: A user object with an organization set to "Acme Inc."
      User user = new User();
      user.setOrg("Acme Inc.");
      
      // When: The getOrg() method is called on the user object
      String actualOrg = user.getOrg();
      
      // Then: The getOrg() method should return "Acme Inc."
      assertEquals(actualOrg, "Acme Inc.");
      
      // And: The passchange property of the user object should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPasschange() throws Throwable  {
      // Given a User object with default values
      User user = new User();
      
      // When the getPasschange method is called
      boolean passchange = user.getPasschange();
      
      // Then the returned value should be false
      assertFalse(passchange);
      
      // And when the setPasschange method is called with true
      user.setPasschange(true);
      
      // Then the returned value should be true
      boolean newPasschange = user.getPasschange();
      assertTrue(newPasschange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      // Given: a User object with default values
      User user = new User();
      
      // When: the update() method is called on the User object with the same User object as an argument
      user.update(user);
      
      // Then: the passchange flag of the User object should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEmail() throws Throwable  {
      // Given: A user with email "shawn@gmail.com" and password change status set to false
      User user = new User();
      user.setEmail("shawn@gmail.com");
      user.setPasschange(false);
      
      // When: The user's password is changed
      user.setPasschange(true);
      
      // Then: The user's password change status should be true
      assertTrue(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserId() throws Throwable  {
      // Given a user with a specific ID
      User user = new User();
      user.setUserId("12345");
      
      // When the getUserId method is called
      String actualUserId = user.getUserId();
      
      // Then the correct ID should be returned
      assertEquals("12345", actualUserId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserName() throws Throwable  {
      // Create a new User object with the default values
      User user = new User();
      
      // Set the username for the user
      user.setUserName("John Doe");
      
      // Assert that the passchange flag is false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCredentials() throws Throwable  {
      // Given: We have a user object and we want to test the password change functionality.
      // When: We call the getCredentials method on the user object.
      User user = new User();
      user.getCredentials();
      // Then: The passchange flag should be false.
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningEmptyString() throws Throwable  {
      // Given: A new user object is created and the getOrg() method is called on it
      User user = new User();
      String org = user.getOrg();
      
      // When: The passchange property of the user object is checked
      boolean passChange = user.getPasschange();
      
      // Then: The passchange property should be false
      assertFalse(passChange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNonEmptyString() throws Throwable  {
      // Create a new user object
      User user = new User();
      
      // Set the surname for the user
      user.setSurName("Davis");
      
      // Get the surname for the user
      String actualSurname = user.getSurName();
      
      // Check that the surname is correct
      assertEquals("Davis", actualSurname);
      
      // Check that the passchange flag is false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPassvalidstart() throws Throwable  {
      // Arrange
      User user = new User();
      String validStartPassword = "12345678";
      
      // Act
      user.setPassvalidstart(validStartPassword);
      
      // Assert
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLdapContext() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.setLdapContext((LdapContext) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePassword() throws Throwable  {
      // Given a User object with a username and user ID, and a password to encode
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      String originalPassword = "userPassword: ";
      
      // When the password is encoded using the encodePassword method
      user.encodePassword(originalPassword);
      
      // Then the password should be encrypted and stored in the User object
      assertFalse(user.getPasschange());
      assertEquals("m{", user.getUserName());
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNull() throws Throwable  {
      // Given a user with an LDAP context
      User user = new User("o", "o");
      
      // When the LDAP context is retrieved
      user.getLdapContext();
      
      // Then the passchange flag should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstart() throws Throwable  {
      // Given
      User user = new User();
      String password = "password";
      
      // When
      user.setPassvalidstart(password);
      
      // Then
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroups() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }
}
