/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 10:56:24 GMT 2024
 */

package com.mentorgen.tools.profile.runtime;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mentorgen.tools.profile.Controller;
import com.mentorgen.tools.profile.runtime.ClassAllocation;
import com.mentorgen.tools.profile.runtime.Frame;
import com.mentorgen.tools.profile.runtime.Profile;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Profile_ESTest extends Profile_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStop() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.stop();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFileName() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.setFileName("<init>");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitProfilerAndStartTaking2Arguments() throws Throwable  {
      // Given: A profiler is initialized
      Profile.initProfiler();
      
      // When: The profiler starts a profile with an ID and a name
      Profile.start("gGfqMy1n5s", "gGfqMy1n5s");
      
      // Then: The profiler should throw an IOException if all file system handling throws an IOException
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testThreads() throws Throwable  {
      // rollbacked to evosuite
      Profile.clear();
      Iterable<Long> threads = Profile.threads();
      assertNotNull(threads);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInteractions() throws Throwable  {
      // Given: A profile with an ID of 2530L
      Profile.init();
      
      // When: We call the interactions method with this ID
      Iterable<Frame> interactions = Profile.interactions(2530L);
      
      // Then: The returned value should be null
      assertNull(interactions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFrameListReturningNonNull() throws Throwable  {
      // Given: A profile is initialized with some data
      Profile.init();
      
      // When: The method to get the list of frames is called
      Iterable<Frame> frameList = Profile.frameList();
      
      // Then: The list of frames should not be null
      assertNotNull(frameList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocations() throws Throwable  {
      // Given: A profiler is initialized
      Profile.initProfiler();
      
      // When: The allocations are requested
      Iterable<ClassAllocation> allocations = Profile.allocations();
      
      // Then: The allocations should not be null
      assertNotNull(allocations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShutdown() throws Throwable  {
      // Set up the profile for testing
      Profile.clear();
      
      // Start the profiling session with a unique identifier and an encryption key
      Profile.start("@dU)~Imc;Jxqat2fa", "cxTs(97MCcmS&6");
      
      // Perform the test logic here
      // ...
      
      // Shut down the profiling session
      Profile.shutdown();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSortFrameListThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Profile.sortFrameList((Comparator<Frame>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mentorgen.tools.profile.runtime.Profile", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThreadTotalTimeThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Profile.getThreadTotalTime(228L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mentorgen.tools.profile.runtime.Profile", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFrameListReturningNull() throws Throwable  {
      // Given: a profile with no frames
      Profile profile = new Profile();
      
      // When: getting the frame list for the profile
      Iterable<Frame> frameList = profile.frameList();
      
      // Then: the frame list is null
      assertNull(frameList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocAndClear() throws Throwable  {
      // No Comments were added
      Profile.clear();
      Profile.alloc("Catch: ");
      Profile.alloc("Catch: ");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAlloc0() throws Throwable  {
      // Clear the profile by resetting its state to default values
      Profile.clear();
      
      // Start a new profiling session with the given name and description
      Profile.start("<init>", "<init>");
      
      // Allocate memory for the new session
      Profile.alloc("<init>");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAlloc1() throws Throwable  {
      // No Comments were added
      Profile.clear();
      Profile.start("init", "init");
      Profile.alloc("init");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocAndInitProfiler() throws Throwable  {
      // Initialize the profiler
      Profile.initProfiler();
      
      // Start the profiling session with a specified file name and properties file
      Profile.start("profile.properties", "profile.properties");
      
      // Allocate a profile with a specific name
      Profile.alloc("my_profile");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocAndShutdown() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.shutdown();
      Profile.alloc("A string value that is used to test alloc() method");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTaking2ArgumentsWithEmptyString() throws Throwable  {
      // This test initializes the profiler and sets it to debug mode.
      Profile.initProfiler();
      Controller._debug = true;
      
      // This test starts a profiling session with an empty name and an empty description.
      Profile.start("", "");
      
      // This test ends a profiling session with a specific name and description.
      Profile.end("", "@aG7W;S%?bV/nJs");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndWithEmptyStringAndStartTaking2ArgumentsWithEmptyString() throws Throwable  {
      // Given: A profiler is initialized for a database query
      Profile.initProfiler();
      
      // When: The profiler starts measuring the performance of the database query
      Profile.start("", "Average time taken to perform a database query");
      
      // Then: The profiler should be able to measure the average time taken to perform the database query
      Profile.end("", "@aG7W;S%?bV/nJs");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnd0() throws Throwable  {
      // This test verifies that the Profile class can start and end profiling correctly.
      // It uses the clear() method to reset any previously set profiles before starting new ones.
      Profile.clear();
      
      // Start a profile with the name "Catch: " and a description of "Catch: ".
      Profile.start("Catch: ", "Catch: ");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwindAndCreatesProfileAndRun() throws Throwable  {
      // Given: The Profile class is initialized and a profiler is started
      Profile.initProfiler();
      Profile.start("J4NUAT.,<.|", "J4NUAT.,<.|");
      
      // When: A new Profile object is created and the run() method is called
      Profile profile = new Profile();
      profile.run();
      
      // Then: The profiler is unwinded with the correct arguments
      Profile.unwind("J4NUAT.,<.|", "J4NUAT.,<.|", "J4NUAT.,<.|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwind() throws Throwable  {
      // Given a profiler is initialized and a profiling session is started
      Profile.initProfiler();
      Profile.start("]GfqMy15s", "]GfqMy15s");
      
      // When the profiler unwinds the profiling session
      Profile.unwind("]GfqMy15s", "]GfqMy15s", "]GfqMy15s");
      
      // Then the profiler should have collected accurate performance data for the profiling session
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwindThrowsNullPointerException0() throws Throwable  {
      // rollbacked to evosuite
      Controller._debug = true;
      // Undeclared exception!
      try { 
        Profile.unwind("Y Xeri(iaXJ>~X6", "com.mentorgen.tools.profile.runtime.Profile", "rZC/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mentorgen.tools.profile.runtime.Profile", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwindThrowsNullPointerException1() throws Throwable  {
      // Given a valid input string for the Profile.unwind() method
      String input = "Y Xeri(iaXJ>~X6";
      
      // When the unwind() method is called with the input string
      try {
      Profile.unwind(input, "com.mentorgen.tools.profile.runtime.Profile", "rZC/");
      
      // Then an exception should be thrown with a null message
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is of type NullPointerException and has no message
      verifyException("com.mentorgen.tools.profile.runtime.Profile", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndWaitAndInitProfiler() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.endWait("init", "waiting for 10 minutes");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndWait() throws Throwable  {
      // rollbacked to evosuite
      Profile.clear();
      Profile.start("Jane Doe", "John Smith");
      Profile.endWait("Jane Doe", "John Smith");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      // rollbacked to evosuite
      Profile.init();
      Profile.beginWait("loading data from server", "connecting to database");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBeginWait() throws Throwable  {
      // Given: A profiler is initialized
      Profile.initProfiler();
      
      // When: The profiler starts measuring performance for two profiles "profile1" and "profile2"
      Profile.start("profile1", "profile2");
      
      // Then: The profiler begins waiting for the completion of the measurement for both profiles
      Profile.beginWait("profile1", "profile2");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndAndInitProfiler() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.start("Testing123", "Testing123");
      Profile.end("Testing123", "Testing123");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTaking2ArgumentsAndEnd() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.start("]GfqMy15s", "]GfqMy15s");
      Profile.start("]GfqMy15s", "]GfqMy15s");
      Profile.end("]GfqMy15s", "]GfqMy15s");
      Profile.start("]GfqMy15s", "]GfqMy15s");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnd1() throws Throwable  {
      // No Comments were added
      Profile.clear();
      Profile.start("Catch: ", "Catch: ");
      Profile.start("Catch: ", "Catch: ");
      Profile.end("A*G@LTiF\r7", "SOA{j!)[LJEWcU(CSI");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTaking2ArgumentsAndCreatesProfileAndRun() throws Throwable  {
      // Initialize the profiler
      Profile.initProfiler();
      
      // Start a profile session with the given name
      Profile.start("J4NUAT.,<.|", "J4NUAT.,<.|");
      
      // Create a new instance of the profile class
      Profile profile = new Profile();
      
      // Run the profile session
      profile.run();
      
      // Start another profile session with the given name
      Profile.start("J4NUAT.,<.|", "J4NUAT.,<.|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitProfiler() throws Throwable  {
      // Set the remote flag for the controller to true
      Controller._remote = true;
      
      // Initialize the profiler for the current session
      Profile.initProfiler();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTakingNoArgumentsThrowsNullPointerException() throws Throwable  {
      // When we attempt to start profiling with a null argument
      try {
      Profile.start();
      } catch (NullPointerException e) {
      // Then an exception is thrown with the expected message
      verifyException("com.mentorgen.tools.profile.runtime.Profile", e);}
  }
}
