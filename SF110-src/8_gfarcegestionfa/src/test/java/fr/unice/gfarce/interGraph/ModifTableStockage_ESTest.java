/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 15:55:15 GMT 2024
 */

package fr.unice.gfarce.interGraph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import fr.unice.gfarce.interGraph.ModifTableStockage;
import fr.unice.gfarce.interGraph.TableStockage;
import java.awt.HeadlessException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModifTableStockage_ESTest extends ModifTableStockage_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testColonneMailAndSupprimerColonne() throws Throwable  {
      // Given: We have a TableStockage object with some data
      TableStockage arg0 = new TableStockage();
      
      // When: We create a ModifTableStockage object and call its colonneMail method
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      TableStockage colonneMail = modifTableStockage.colonneMail();
      
      // Then: The returned TableStockage object has the correct number of rows and columns
      assertEquals(0, colonneMail.getRowCount());
      assertEquals(1, colonneMail.getColumnCount());
      
      // Given: We have a TableStockage object with some data
      TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0);
      
      // Then: The returned TableStockage object has the correct number of rows and columns
      assertEquals(0, supprimerColonne.getColumnCount());
      assertEquals(0, supprimerColonne.getRowCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAjouterColonne() throws Throwable  {
      TableStockage arg0 = new TableStockage();
      Class<Boolean> arg1 = Boolean.class;
      
      // When a new column is added to the table using the ModifTableStockage class
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      TableStockage ajouterColonne = modifTableStockage.ajouterColonne("fr.unice.gfarce.interGraph.TableStockage", arg1);
      
      // Then the number of columns in the table should be 1, and the number of rows should be 0
      assertEquals(1, ajouterColonne.getColumnCount());
      assertEquals(0, ajouterColonne.getRowCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSelectMailThrowsHeadlessException() throws Throwable  {
      // rollbacked to evosuite
      TableStockage arg0 = new TableStockage();
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      // Undeclared exception!
      try { 
        modifTableStockage.selectMail();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFusionnerColonnesThrowsHeadlessException() throws Throwable  {
      // rollbacked to evosuite
      TableStockage arg0 = new TableStockage();
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      // Undeclared exception!
      try { 
        modifTableStockage.fusionnerColonnes((-1));
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAjouterLigne() throws Throwable  {
      // Given a table storage with 57 columns and 57 rows
      TableStockage arg0 = new TableStockage(57, 57);
      
      // When setting the column class of the first column to Object.class
      Class<Object> arg1 = Object.class;
      arg0.setColumnClass(0, arg1);
      
      // Then the table storage has 57 columns and 58 rows after adding a new line
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      TableStockage ajouterLigne = modifTableStockage.ajouterLigne();
      assertEquals(57, ajouterLigne.getColumnCount());
      assertEquals(58, ajouterLigne.getRowCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAjouterLigneThrowsHeadlessException() throws Throwable  {
      TableStockage arg0 = new TableStockage();
      ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
      
      try {
      modifTableStockage.ajouterLigne();
      fail("Expecting exception: HeadlessException");
      
      } catch (HeadlessException e) {
      verifyException("java.awt.GraphicsEnvironment", e);}
  }
}
