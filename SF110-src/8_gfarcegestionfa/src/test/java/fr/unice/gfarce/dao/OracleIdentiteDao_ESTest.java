/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 14:33:08 GMT 2024
 */

package fr.unice.gfarce.dao;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import fr.unice.gfarce.dao.OracleIdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OracleIdentiteDao_ESTest extends OracleIdentiteDao_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithEmptyStringAndEmptyString() throws Throwable  {
      // Given
      OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite candidateType = Identite.TypeIdentite.CANDIDAT;
      
      // When
      List<Identite> findResults = dao.find("", "", "", "", candidateType);
      
      // Then
      assertNull(findResults);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindRespForm() throws Throwable  {
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      // Find the response form for a specific student
      RespFormation[] findRespForm = oracleIdentiteDao.findRespForm("S:0A(T/6/42a_,", "Jane Doe", "]a,w^tBP", "1985-03-07");
      // Assert that the response form is null
      assertNull(findRespForm);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindCandidat() throws Throwable  {
      // Given a candidate with the ID "123456789" and email address "john.doe@example.com",
      // we want to check if they exist in the system using the OracleIdentiteDao.
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat[] findCandidat = oracleIdentiteDao.findCandidat("123456789", "john.doe@example.com", "fr.unice.gfarce.identity.Identite", "~uCxi\fk");
      
      // When we call the findCandidat method with their ID and email address,
      // it should return a null value since they are not in the system yet.
      assertNull(findCandidat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNullAndNonEmptyString0() throws Throwable  {
      // rollbacked to evosuite
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.FORMATEUR;
      List<Identite> find = dAO.find("fr.unice.gfarce.identity.Candidat", (String) null, (String) null, "fr.unice.gfarce.identity.Candidat", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNullAndNonEmptyString1() throws Throwable  {
      // No Comments were added
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.FORMATEUR;
      List<Identite> find = dAO.find((String) null, "qA08.=\"O#Fr[G-3~.>3", (String) null, "qA08.=\"O#Fr[G-3~.>3", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNonEmptyStringAndNull() throws Throwable  {
      // Given a DAO instance
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      
      // When searching for an identity with the name "Alex", surname "Smith", email "alex.smith@example.com" and no type
      List<Identite> find = dAO.find("Alex", "Smith", "alex.smith@example.com", "", (Identite.TypeIdentite) null);
      
      // Then the method should return an empty list, as there is no identity with the given criteria
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDelete() throws Throwable  {
      // Given: A candidate object and an OracleIdentiteDao instance
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat arg0 = new Candidat();
      
      // When: The delete method is called on the OracleIdentiteDao instance with the candidate object as a parameter
      oracleIdentiteDao.delete(arg0);
      
      // Then: The nationality of the candidate should be null after deletion
      assertNull(arg0.getNationalite());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      // No Comments were added
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      oracleIdentiteDao.update((Identite) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsert() throws Throwable  {
      OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
      RespFormation newUser = new RespFormation();
      MockGregorianCalendar now = new MockGregorianCalendar();
      dao.insert(newUser, "", now);
      assertEquals(1, now.getMinimalDaysInFirstWeek());
  }
}
