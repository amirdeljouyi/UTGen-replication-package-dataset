/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 21:04:36 GMT 2024
 */

package org.exolab.jms.net.socket;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.exolab.jms.net.socket.SocketRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SocketRequestInfo_ESTest extends SocketRequestInfo_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateSocketRequestInfoTakingURIThrowsException() throws Throwable  {
      URI bindAll = new URI("bindAll", "bindAll", "bindAll", "bindAll", "bindAll");
      SocketRequestInfo socketRequestInfo;
      try {
      // Create a SocketRequestInfo object using the given URI
      socketRequestInfo = new SocketRequestInfo(bindAll);
      } catch (Exception e) {
      // Verify that an exception is thrown as expected
      assertTrue(e instanceof Exception);
      verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIThrowsException() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("&");
      try {
      socketRequestInfo.getAlternativeURI();
      } catch (Exception e) {
      // Verify that the expected exception was thrown
      verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningZero() throws Throwable  {
      // Create a new URI object for testing
      URI uri = new URI();
      
      // Create a new SocketRequestInfo object with the URI object as parameter
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      
      // Test that the default connection request queue size is 50
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      
      // Set the connection request queue size to 0 and test again
      socketRequestInfo.setConnectionRequestQueueSize(0);
      int connectionRequestQueueSize = socketRequestInfo.getConnectionRequestQueueSize();
      assertEquals(0, connectionRequestQueueSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetBindAll() throws Throwable  {
      // Arrange
      URI uri = new URI("");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      boolean initialValue = socketRequestInfo.getBindAll();
      
      // Act
      socketRequestInfo.setBindAll(false);
      
      // Assert
      assertFalse(socketRequestInfo.getBindAll());
      assertNotEquals(initialValue, socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningURIWhereGetPortIsNegative() throws Throwable  {
      // Given a SocketRequestInfo object with alternative host enabled
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(new URI());
      socketRequestInfo.setAlternativeHost("true");
      
      // When the alternative URI is retrieved
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      
      // Then the bind all flag should be set to true
      assertTrue(socketRequestInfo.getBindAll());
      
      // And the connection request queue size should be 50
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      
      // And an alternative URI should be present
      assertNotNull(alternativeURI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningNonEmptyString() throws Throwable  {
      // Given
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      
      // When
      String alternativeHost = socketRequestInfo.getAlternativeHost();
      
      // Then
      assertEquals("example.com", alternativeHost);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningEmptyString() throws Throwable  {
      // Create a new URI object to use as an argument
      URI arg0 = new URI();
      
      // Create a new SocketRequestInfo object and initialize it with the given URI
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      
      // Set the alternative host for the SocketRequestInfo object
      socketRequestInfo.setAlternativeHost("");
      
      // Get the alternative host of the SocketRequestInfo object
      String altHost = socketRequestInfo.getAlternativeHost();
      
      // Assert that the alternative host is equal to an empty string
      assertEquals("", altHost);
      
      // Assert that the connection request queue size of the SocketRequestInfo object is 50
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      
      // Assert that the bind all flag of the SocketRequestInfo object is true
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Create a new URI object
      URI uri = new URI();
      
      // Create a new SocketRequestInfo object with the given URI
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      
      // Test that the equals method returns true when comparing two null objects
      assertTrue(socketRequestInfo.equals((Object) null, (Object) null));
      
      // Test that getBindAll() returns true if the bind all flag is set to true
      socketRequestInfo.setBindAll(true);
      assertTrue(socketRequestInfo.getBindAll());
      
      // Test that getConnectionRequestQueueSize() returns 50 by default
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBindAllReturningTrue() throws Throwable  {
      // Given a URI object
      URI arg0 = new URI();
      
      // When creating a SocketRequestInfo from the URI
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      
      // Then the bindAll flag is set to true
      assertTrue(socketRequestInfo.getBindAll());
      
      // And the connection request queue size is set to 50
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExportThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("localhost");
      // Undeclared exception!
      try { 
        socketRequestInfo.export((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningURIWhereGetPortIsPositive() throws Throwable  {
      // Create a new URI object with the required parameters
      URI arg0 = new URI("org.exolab.jms.net.connector.URIRequestInfo", "", "org.exolab.jms.net.orb.provider.uri", 1272, "org.exolab.jms.net.orb.provider.uri", "", "");
      
      // Create a new SocketRequestInfo object with the URI and bind all settings
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("alt");
      
      // Set the alternative host for the request
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      assertNotNull(alternativeURI);
      
      // Verify that the bind all setting is enabled
      assertTrue(socketRequestInfo.getBindAll());
      
      // Verify the size of the connection request queue
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningNull() throws Throwable  {
      // Given
      URI uri = new URI("org.exolab.jms.net.connector.URIRequestInfo", "", "org.exolab.jms.net.orb.provider.uri", 1272, "org.exolab.jms.net.orb.provider.uri", "", "");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      
      // When
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      
      // Then
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertNull(alternativeURI);
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningNegative() throws Throwable  {
      // Tests that the setConnectionRequestQueueSize method sets the correct value for the connection request queue size
      URI uri = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      socketRequestInfo.setConnectionRequestQueueSize(-1779); // Sets the connection request queue size to -1779
      int expectedQueueSize = -1779; // The expected value for the connection request queue size
      int actualQueueSize = socketRequestInfo.getConnectionRequestQueueSize(); // Gets the actual value for the connection request queue size
      assertEquals(expectedQueueSize, actualQueueSize); // Asserts that the expected and actual values are equal
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningNull() throws Throwable  {
      URI uri = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri);
      
      // Get the alternative host for this request
      String alternativeHost = socketRequestInfo.getAlternativeHost();
      
      // Assert that the bindAll flag is set to true
      assertTrue(socketRequestInfo.getBindAll());
      
      // Assert that the connection request queue size is 50
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSocketRequestInfoTaking2Arguments() throws Throwable  {
      // Given
      URI uri = new URI();
      Properties properties = new Properties("org.exolab.jms.net.orb.provider.uri");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(uri, properties);
      
      // When
      boolean equals = socketRequestInfo.equals((Object) null, (Object) "org.exolab.jms.net.orb.provider.uri");
      
      // Then
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertFalse(equals);
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningPositive() throws Throwable  {
      // Given a SocketRequestInfo instance with a URI argument
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      
      // When the method getConnectionRequestQueueSize() is called on the SocketRequestInfo instance
      int connectionRequestQueueSize = socketRequestInfo.getConnectionRequestQueueSize();
      
      // Then the value returned should be 50
      assertEquals(50, connectionRequestQueueSize);
      
      // And the method getBindAll() should return true
      assertTrue(socketRequestInfo.getBindAll());
  }
}
