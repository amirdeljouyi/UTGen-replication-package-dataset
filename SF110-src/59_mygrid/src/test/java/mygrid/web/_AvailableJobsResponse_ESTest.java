/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 17:58:05 GMT 2024
 */

package mygrid.web;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import mygrid.web.ArrayOfJob;
import mygrid.web._AvailableJobsResponse;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class _AvailableJobsResponse_ESTest extends _AvailableJobsResponse_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAvailableJobsResultReturningNonNull() throws Throwable  {
      // Given: We have an instance of _AvailableJobsResponse with a set of jobs in the availableJobsResult field.
      _AvailableJobsResponse __AvailableJobsResponse = new _AvailableJobsResponse();
      ArrayOfJob arg0 = new ArrayOfJob();
      __AvailableJobsResponse.setAvailableJobsResult(arg0);
      
      // When: We call the getAvailableJobsResult() method on the instance.
      ArrayOfJob availableJobsResult = __AvailableJobsResponse.getAvailableJobsResult();
      
      // Then: The returned list of jobs should be the same as the one set in the availableJobsResult field.
      assertSame(availableJobsResult, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAvailableJobsResult() throws Throwable  {
      // rollbacked to evosuite
      _AvailableJobsResponse __AvailableJobsResponse = new _AvailableJobsResponse();
      ArrayOfJob arg0 = new ArrayOfJob();
      __AvailableJobsResponse.setAvailableJobsResult(arg0);
      __AvailableJobsResponse.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      // Given a response with available jobs
      _AvailableJobsResponse availableJobsResponse = new _AvailableJobsResponse();
      
      // When the hash code is calculated
      int hashCode = availableJobsResponse.hashCode();
      
      // Then the result should be the same as the input
      assertEquals(availableJobsResponse, availableJobsResponse);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Given: two instances of _AvailableJobsResponse, both referring to the same object
      _AvailableJobsResponse response1 = new _AvailableJobsResponse();
      _AvailableJobsResponse response2 = response1;
      
      // When: calling equals method on both instances with each other as argument
      boolean equals1 = response1.equals(response2);
      boolean equals2 = response2.equals(response1);
      
      // Then: the result of the equals method should be true for both instances
      assertTrue(equals1);
      assertTrue(equals2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      // Given: an object with a specific value
      _AvailableJobsResponse availableJobsResponse = new _AvailableJobsResponse();
      Object arg0 = new Object();
      
      // When: the method is called with the object as argument
      boolean equals = availableJobsResponse.equals(arg0);
      
      // Then: the method should return false because the two objects are not equal
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      // Given: A new _AvailableJobsResponse object, arg0
      _AvailableJobsResponse arg0 = new _AvailableJobsResponse();
      
      // When: The equals method is called on the object with itself as the argument, arg0
      boolean equals = arg0.equals(arg0);
      
      // Then: The result should be true
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAvailableJobsResultReturningNull() throws Throwable  {
      // Given a _AvailableJobsResponse instance with a null availableJobsResult array
      _AvailableJobsResponse __AvailableJobsResponse = new _AvailableJobsResponse();
      
      // When we call getAvailableJobsResult on the instance
      ArrayOfJob availableJobsResult = __AvailableJobsResponse.getAvailableJobsResult();
      
      // Then the method should return null
      assertNull(availableJobsResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg1 = Object.class;
      QName arg2 = QName.valueOf("t~WO09GF\n8c}^74VS");
      Deserializer deserializer = _AvailableJobsResponse.getDeserializer("t~WO09GF\n8c}^74VS", arg1, arg2);
      assertEquals("Axis SAX Mechanism", deserializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      // Given: A TypeDesc object is created and initialized with an AvailableJobsResponse object
      TypeDesc typeDesc = _AvailableJobsResponse.getTypeDesc();
      
      // When: The hasAttributes method is called on the TypeDesc object
      boolean hasAttributes = typeDesc.hasAttributes();
      
      // Then: The returned value should be false, indicating that there are no attributes associated with this type
      assertFalse(hasAttributes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg1 = Object.class;
      QName arg2 = QName.valueOf("t~WO09GF\n8c}^74VS");
      Serializer serializer = _AvailableJobsResponse.getSerializer("t~WO09GF\n8c}^74VS", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }
}
