/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 17:40:47 GMT 2024
 */

package mygrid.web;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import mygrid.web.Job;
import mygrid.web._Fail;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class _Fail_ESTest extends _Fail_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereIsBroadcastedIsTrue() throws Throwable  {
      // Given a job that has been broadcasted
      Job job = new Job();
      job.setBroadcasted(true);
      
      // When the method getCurrentEngineId is called on the job
      String currentEngineId = job.getCurrentEngineId();
      
      // Then the method should return null, as there is no current engine id for a broadcasted job
      assertNull(currentEngineId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJob() throws Throwable  {
      // Given a Fail object and a Job object
      _Fail fail = new _Fail();
      Job job = new Job();
      
      // When the setJob method is called with the Job object as an argument
      fail.setJob(job);
      
      // Then the job field of the Fail object should be set to the passed in Job object
      assertEquals(job, fail.getJob());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereGetProgressIsPositive() throws Throwable  {
      // rollbacked to evosuite
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      arg0.setProgress(1000);
      Job job = __Fail.getJob();
      assertEquals(1000, job.getProgress());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereGetProgressIsNegative() throws Throwable  {
      // Given a Job instance with progress = -1271
      Job arg0 = new Job();
      arg0.setProgress(-1271);
      
      // Create an instance of _Fail and set its job to the given Job instance
      _Fail __fail = new _Fail();
      __fail.setJob(arg0);
      
      // When the getJob method is called on the _Fail instance
      Job job = __fail.getJob();
      
      // Then the returned job should be the same as the given Job instance
      assertSame(job, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetJob() throws Throwable  {
      // No Comments were added
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      __Fail.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      // rollbacked to evosuite
      _Fail __Fail = new _Fail();
      __Fail.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // rollbacked to evosuite
      _Fail __Fail = new _Fail();
      _Fail arg0 = new _Fail();
      boolean equals = __Fail.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      // Given: We have an instance of the class _Fail and a new instance of the class Job
      _Fail fail = new _Fail();
      Job job = new Job();
      
      // When: We call the equals method on the _Fail instance with the Job instance as an argument
      boolean areEqual = fail.equals(job);
      
      // Then: The method should return false, since two different classes are being compared
      assertFalse(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      // Given two instances of the Fail class
      _Fail arg0 = new _Fail();
      _Fail arg1 = new _Fail();
      
      // When we compare them for equality
      boolean equals = arg0.equals(arg1);
      
      // Then they should be equal
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningNull() throws Throwable  {
      // rollbacked to evosuite
      _Fail __Fail = new _Fail();
      Job job = __Fail.getJob();
      assertNull(job);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg1 = Object.class;
      QName arg2 = QName.valueOf("http://tempuri.org/");
      Deserializer deserializer = _Fail.getDeserializer(">Fail", arg1, arg2);
      assertEquals("Axis SAX Mechanism", deserializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      // rollbacked to evosuite
      Class<_Fail> arg1 = _Fail.class;
      QName arg2 = new QName("", "d`9>_FI");
      Serializer serializer = _Fail.getSerializer("_t[]", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      // Given a type without any attributes
      TypeDesc typeDesc = _Fail.getTypeDesc();
      
      // When checking if the type has attributes
      boolean actual = typeDesc.hasAttributes();
      
      // Then the method should return false
      assertFalse(actual);
  }
}
