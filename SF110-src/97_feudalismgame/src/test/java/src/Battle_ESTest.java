/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 01:41:14 GMT 2024
 */

package src;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import src.Battle;
import src.Fiefdoms;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Battle_ESTest extends Battle_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMagyarThrowsNoClassDefFoundError() throws Throwable  {
      // rollbacked to evosuite
      Battle battle = new Battle();
      ArrayList<Object> arg0 = new ArrayList<Object>();
      arg0.add((Object) null);
      // Undeclared exception!
      try { 
        battle.magyar(arg0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.CurrentPlayers
         //
         verifyException("src.Battle", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRollDice() throws Throwable  {
      // Given: We have a Battle class that can roll dice and store the results.
      Battle battle = new Battle();
      
      // When: We call the rollDice method with an argument of 2363.
      int[] rollDice = battle.rollDice(2363);
      
      // Then: The result should be an array containing the original value and all zeros.
      assertArrayEquals(new int[] {2363, 0, 0, 0, 0, 0}, rollDice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPerform() throws Throwable  {
      // Create a new battle instance and a linked list of fiefdoms to pass as an argument
      Battle battle = new Battle();
      LinkedList<Fiefdoms> fiefdoms = new LinkedList<>();
      
      // Invoke the perform method with the fiefdoms as an argument
      battle.perform(fiefdoms);
      
      // Check that the size of the linked list is 0, which means no fiefdoms were added to the battle
      assertEquals(0, fiefdoms.size());
  }
}
