/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 04:13:25 GMT 2024
 */

package org.fixsuite.message;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.fixsuite.message.Library;
import org.fixsuite.message.info.DictionaryInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadFromDirectoryWithEmptyString() throws Throwable  {
      // Given: A library instance is created
      Library library = new Library();
      
      // When: The library tries to load from directory
      boolean loadFromDirectory = library.loadFromDirectory("");
      
      // Then: Assert that the loading was unsuccessful (i.e., returned false)
      assertFalse(loadFromDirectory);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadFromDirectoryWithNonEmptyString() throws Throwable  {
      // Given: A library instance is created and a directory path is passed to it.
      Library library = new Library();
      String directoryPath = "C:\\Users\\John Doe\\Documents\\Books";
      
      // When: The loadFromDirectory method is called with the directory path as an argument.
      boolean loadFromDirectory = library.loadFromDirectory(directoryPath);
      
      // Then: The method should return false since the directory does not exist.
      assertFalse(loadFromDirectory);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDictionary() throws Throwable  {
      // Given: A library with a non-existent dictionary
      Library library = new Library();
      
      // When: The dictionary is requested
      DictionaryInfo dictionary = library.getDictionary("myDictionary");
      
      // Then: The dictionary should be null
      assertNull(dictionary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDictionaries() throws Throwable  {
      // Given: The Library instance has no dictionaries associated with it
      Library library = new Library();
      
      // When: We call the getDictionaries() method on the Library instance
      List<DictionaryInfo> dictionaries = library.getDictionaries();
      
      // Then: We expect the list of dictionaries to be empty
      assertTrue(dictionaries.isEmpty());
  }
}
