/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 03:07:32 GMT 2024
 */

package Joshua.FoxHunt;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import Joshua.FoxHunt.HuntDisplay;
import Joshua.FoxHunt.TrigPoint;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HuntDisplay_ESTest extends HuntDisplay_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreferredSize() throws Throwable  {
      // Given a HuntDisplay instance with no explicit preferred size set
      HuntDisplay huntDisplay = new HuntDisplay();
      huntDisplay.prefSize = null;
      
      // When the getPreferredSize method is called on this instance
      Dimension preferredSize = huntDisplay.getPreferredSize();
      
      // Then the returned value should be null
      assertNull(preferredSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinimumSize() throws Throwable  {
      // rollbacked to evosuite
      HuntDisplay huntDisplay = new HuntDisplay();
      huntDisplay.minSize = null;
      Dimension minimumSize = huntDisplay.getMinimumSize();
      assertNull(minimumSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPaintComponent() throws Throwable  {
      // Given: A HuntDisplay instance and a BufferedImage with dimensions 9x9.
      BufferedImage bufferedImage = new BufferedImage(9, 9, 9);
      HuntDisplay huntDisplay = new HuntDisplay();
      
      // When: The paintComponent method is called on the HuntDisplay instance.
      huntDisplay.paintComponent(bufferedImage.createGraphics());
      
      // Then: The focus traversal policy provider property of the HuntDisplay should be false.
      assertFalse(huntDisplay.isFocusTraversalPolicyProvider());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPaintComponentThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      HuntDisplay huntDisplay = new HuntDisplay();
      TrigPoint arg0 = new TrigPoint(2043.964, 2043.964, 2043.964, true);
      huntDisplay.addPoint(arg0);
      // Undeclared exception!
      try { 
        huntDisplay.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Joshua.FoxHunt.HuntDisplay", e);
      }
  }
}
