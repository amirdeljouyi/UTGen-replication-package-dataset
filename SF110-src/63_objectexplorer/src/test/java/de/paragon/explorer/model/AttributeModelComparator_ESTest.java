/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 19:07:09 GMT 2024
 */

package de.paragon.explorer.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import de.paragon.explorer.model.ArrayAttributeModel;
import de.paragon.explorer.model.AttributeModel;
import de.paragon.explorer.model.AttributeModelComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeModelComparator_ESTest extends AttributeModelComparator_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative0() throws Throwable  {
      // Create an instance of the AttributeModelComparator class to use for comparison
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      
      // Create two instances of the AttributeModel class, with different names
      AttributeModel arg0 = new AttributeModel();
      arg0.setName("e$");
      AttributeModel arg1 = new AttributeModel();
      arg1.setName("");
      
      // Compare the two instances using the compare method of the AttributeModelComparator class
      int compare = attributeModelComparator.compare(arg0, arg1);
      
      // Assert that the comparison returns a negative value (-1)
      assertEquals((-1), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive0() throws Throwable  {
      // rollbacked to evosuite
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      AttributeModel arg1 = new AttributeModel();
      arg1.setName("e$");
      ArrayAttributeModel arg0 = new ArrayAttributeModel();
      arg0.setName("o");
      int compare = attributeModelComparator.compare((AttributeModel) arg0, arg1);
      assertEquals(10, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive1() throws Throwable  {
      // rollbacked to evosuite
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      AttributeModel arg0 = new AttributeModel();
      arg0.setName("&7");
      ArrayAttributeModel arg1 = new ArrayAttributeModel();
      arg1.setName("");
      int compare = attributeModelComparator.compare(arg0, (AttributeModel) arg1);
      assertEquals(2, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive2() throws Throwable  {
      // Given two AttributeModels, one of which is an ArrayAttributeModel and the other has a name ending in "$"
      AttributeModel arrayAttributeModel = new ArrayAttributeModel();
      AttributeModel dollarSignAttributeModel = new AttributeModel();
      dollarSignAttributeModel.setName("e$");
      
      // When we compare these two models using our custom comparator
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compareResult = attributeModelComparator.compare(arrayAttributeModel, dollarSignAttributeModel);
      
      // Then the result should be 1, indicating that the ArrayAttributeModel is "greater than" the other model
      assertEquals(1, compareResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative1() throws Throwable  {
      // Given
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      AttributeModel arg1 = new AttributeModel();
      arg1.setName("HeV");
      ArrayAttributeModel arg0 = new ArrayAttributeModel();
      arg0.setName("Could not read configuration file [");
      
      // When
      int compare = attributeModelComparator.compare((AttributeModel) arg0, arg1);
      
      // Then
      assertEquals(-5, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative2() throws Throwable  {
      // Given two different AttributeModel instances
      AttributeModel arg0 = new AttributeModel();
      arg0.setName("'g}^,@");
      AttributeModel arg1 = new AttributeModel();
      arg1.setName("?T)!~p>uNSo#vB:");
      
      // When we compare the two instances using the comparator
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compare = attributeModelComparator.compare(arg0, arg1);
      
      // Then the result should be a negative value indicating that the first argument is less than the second argument
      assertEquals((-24), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningZero() throws Throwable  {
      // rollbacked to evosuite
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      AttributeModel arg1 = new AttributeModel();
      arg1.setName("unique_name");
      int compare = attributeModelComparator.compare(arg1, arg1);
      assertEquals(0, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareWithNullAndAttributeModelWhereIsObjectModelIsFalse() throws Throwable  {
      // Create an instance of the comparator and two attribute models to compare
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      ArrayAttributeModel arg0 = new ArrayAttributeModel();
      ArrayAttributeModel arg1 = new ArrayAttributeModel();
      
      // Compare the two attribute models with each other, expecting a non-zero result
      int compare = attributeModelComparator.compare(arg0, arg1);
      assertNotEquals(0, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareWithNullAndNull() throws Throwable  {
      // Given two null AttributeModels
      AttributeModel model1 = null;
      AttributeModel model2 = null;
      
      // When we compare them using our AttributeModelComparator
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compare = attributeModelComparator.compare(model1, model2);
      
      // Then we expect the comparison to return -1
      assertEquals(-1, compare);
  }
}
