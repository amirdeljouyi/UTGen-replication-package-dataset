/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 14:57:01 GMT 2024
 */

package com.ib.client;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.ib.client.ComboLeg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComboLeg_ESTest extends ComboLeg_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse0() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      comboLeg.m_designatedLocation = "{";
      ComboLeg arg0 = new ComboLeg();
      assertFalse(arg0.equals((Object)comboLeg)); // Test that two objects with different designated locations are not equal
      
      // When we call the equals method on one of the objects with a non-null designated location
      boolean equals = comboLeg.equals(arg0);
      
      // Then we expect the method to return false, since the two objects have different designated locations
      assertFalse(equals); // Test that the objects are not equal
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments0() throws Throwable  {
      // rollbacked to evosuite
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(0, 0, (String) null, "*sVEZGHnSgC0+$7uo8", 0, 0, (String) null);
      boolean equals = comboLeg.equals(arg0);
      assertFalse(arg0.equals((Object)comboLeg));
      assertFalse(equals);
      assertEquals(0, arg0.m_ratio);
      assertEquals(0, arg0.m_shortSaleSlot);
      assertEquals(0, arg0.m_conId);
      assertEquals(0, arg0.m_openClose);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments1() throws Throwable  {
      // Given: A new ComboLeg object with a ratio of 1 and a conId of 0
      ComboLeg comboLeg = new ComboLeg(1, 0, "SPY", "*sVEZGHnSgC0+$7uo8", 0, 0, "SPY");
      
      // When: The equals method is called with another ComboLeg object
      ComboLeg arg0 = new ComboLeg(1, 0, "SPY", "*sVEZGHnSgC0+$7uo8", 0, 0, "SPY");
      boolean result = comboLeg.equals(arg0);
      
      // Then: The two objects are equal and have the same ratio and conId
      assertTrue(result);
      assertEquals(1, arg0.m_ratio);
      assertEquals(0, arg0.m_conId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse1() throws Throwable  {
      // rollbacked to evosuite
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg();
      assertEquals(0, arg0.m_shortSaleSlot);
      
      arg0.m_shortSaleSlot = 3;
      boolean equals = comboLeg.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking5Arguments() throws Throwable  {
      // No Comments were added
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(0, 0, (String) null, (String) null, 3);
      boolean equals = comboLeg.equals(arg0);
      assertEquals(0, arg0.m_conId);
      assertEquals(3, arg0.m_openClose);
      assertFalse(arg0.equals((Object)comboLeg));
      assertEquals(0, arg0.m_ratio);
      assertEquals(0, arg0.m_shortSaleSlot);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments2() throws Throwable  {
      // Create two instances of ComboLeg with different values for m_ratio and m_shortSaleSlot.
      ComboLeg comboLeg1 = new ComboLeg(0, 2, "", "", 0, 1, (String) null);
      ComboLeg comboLeg2 = new ComboLeg(0, 3, "", "", 0, 1, (String) null);
      
      // Test that the equals method returns false for these two instances.
      assertFalse(comboLeg1.equals(comboLeg2));
      
      // Test that the m_ratio and m_shortSaleSlot fields are properly set in each instance.
      assertEquals(2, comboLeg1.m_ratio);
      assertEquals(3, comboLeg2.m_ratio);
      assertEquals(1, comboLeg1.m_shortSaleSlot);
      assertEquals(1, comboLeg2.m_shortSaleSlot);
      
      // Test that the m_conId and m_openClose fields are properly set in each instance.
      assertEquals(0, comboLeg1.m_conId);
      assertEquals(0, comboLeg2.m_conId);
      assertEquals(0, comboLeg1.m_openClose);
      assertEquals(0, comboLeg2.m_openClose);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments3() throws Throwable  {
      // Given: A ComboLeg object with some predefined values
      ComboLeg comboLeg = new ComboLeg(1, (-2075), (String) null, (String) null, 3, (-967), "");
      
      // When: The equals method is called on the ComboLeg object with a different value for m_conId
      ComboLeg arg0 = new ComboLeg();
      boolean equals = comboLeg.equals(arg0);
      
      // Then: The result of the equals method should be false, since the two objects have different values for m_conId
      assertFalse(equals);
      
      // And: The other fields of the ComboLeg object should still match
      assertEquals((-967), comboLeg.m_shortSaleSlot);
      assertEquals((-2075), comboLeg.m_ratio);
      assertEquals(3, comboLeg.m_openClose);
      assertEquals(0, arg0.m_openClose);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // Given a ComboLeg object "comboLeg" and an Object reference "null"
      ComboLeg comboLeg = new ComboLeg();
      Object nullRef = null;
      
      // When we call "equals" on "comboLeg" with the "null" reference
      boolean equals = comboLeg.equals(nullRef);
      
      // Then the result should be false, as "comboLeg" is not equal to null
      assertFalse(equals);
      
      // And the other properties of "comboLeg" should remain unchanged
      assertEquals(0, comboLeg.m_shortSaleSlot);
      assertEquals(0, comboLeg.m_openClose);
      assertEquals(0, comboLeg.m_ratio);
      assertEquals(0, comboLeg.m_conId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue0() throws Throwable  {
      // Given a ComboLeg object with default values
      ComboLeg leg = new ComboLeg();
      
      // When we call the equals method on the ComboLeg object
      boolean equal = leg.equals(leg);
      
      // Then the result should be true, as the ComboLeg object is equivalent to itself
      assertEquals(true, equal);
      
      // And the openClose, conId, ratio, and shortSaleSlot fields should all be set to 0
      assertEquals(0, leg.m_openClose);
      assertEquals(0, leg.m_conId);
      assertEquals(0, leg.m_ratio);
      assertEquals(0, leg.m_shortSaleSlot);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue1() throws Throwable  {
      // Given
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg otherComboLeg = new ComboLeg();
      
      // When
      boolean equals = comboLeg.equals(otherComboLeg);
      
      // Then
      assertTrue(equals);
  }
}
