/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 00:49:16 GMT 2024
 */

package com.yahoo.platform.yui.compressor;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.yahoo.platform.yui.compressor.JavaScriptCompressor;
import java.io.StringReader;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.ToolErrorReporter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaScriptCompressor_ESTest extends JavaScriptCompressor_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalse0() throws Throwable  {
      // No Comments were added
      ToolErrorReporter arg1 = new ToolErrorReporter(false);
      StringReader arg0 = new StringReader("debugger");
      JavaScriptCompressor javaScriptCompressor = new JavaScriptCompressor(arg0, arg1);
      // Undeclared exception!
      try { 
        javaScriptCompressor.compress((Writer) null, (-43), false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalseAndTrue() throws Throwable  {
      // Arrange
      StringReader reader = new StringReader("Mm^f;a;z:R");
      ToolErrorReporter reporter = new ToolErrorReporter(true);
      JavaScriptCompressor compressor = new JavaScriptCompressor(reader, reporter);
      
      // Act and Assert
      try {
      compressor.compress((Writer) null, -383, false, true, false, false);
      } catch (NullPointerException e) {
      // Verify that the exception is thrown with the correct message
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);
      throw e;}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalseAndCompressWithTrueAndCompressWithPositiveAndCompressWithFalse() throws Throwable  {
      ToolErrorReporter errorReporter = new ToolErrorReporter(true);
      StringReader input = new StringReader("top");
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, errorReporter);
      try {
      compressor.compress((Writer) null, 85, true, true, false, false);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the correct exception is thrown
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithTrue0() throws Throwable  {
      // Given a JavaScript compressor instance with default settings
      ToolErrorReporter errorReporter = new ToolErrorReporter(true);
      StringReader inputStringReader = new StringReader("msg.no.brace.body");
      JavaScriptCompressor compressor = new JavaScriptCompressor(inputStringReader, errorReporter);
      
      // When the compress method is called with a null writer argument
      try {
      compressor.compress((Writer) null, 82, true, true, true, true);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Then an exception is thrown with a message indicating that the writer argument is null
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalseAndCompressWithTrueAndCompressWithNegativeAndCompressWithFalse() throws Throwable  {
      // Given
      StringReader input = new StringReader("eval");
      ToolErrorReporter errorReporter = new ToolErrorReporter(true);
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, errorReporter);
      
      // When
      try {
      compressor.compress((Writer) null, -3875, false, true, true, false);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithTrue1() throws Throwable  {
      // Given: A JavaScript compressor with a StringReader and a ToolErrorReporter
      StringReader input = new StringReader("lI+-h4EowzT");
      ToolErrorReporter reporter = new ToolErrorReporter(true);
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, reporter);
      
      // When: We attempt to compress the input with a null writer and a number of options set to true
      try {
      compressor.compress((Writer) null, 1, true, true, true, true);
      } catch (NullPointerException e) {
      // Then: A NullPointerException is thrown because the writer is null
      assertEquals(e.getMessage(), "Null writer");}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalseAndPositive() throws Throwable  {
      ToolErrorReporter errorReporter = new ToolErrorReporter(false);
      StringReader input = new StringReader("NXVK-F%xqxW7Pb+H1");
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, errorReporter);
      // Undeclared exception!
      try {
      compressor.compress((Writer) null, 52, false, false, false, false);
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithTrue2() throws Throwable  {
      // rollbacked to evosuite
      ToolErrorReporter arg1 = new ToolErrorReporter(true);
      StringReader arg0 = new StringReader("ZKwlS,YJSYmlD");
      JavaScriptCompressor javaScriptCompressor = new JavaScriptCompressor(arg0, arg1);
      // Undeclared exception!
      try { 
        javaScriptCompressor.compress((Writer) null, 5, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJavaScriptCompressorThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Given a string containing JavaScript code that is intended to be compressed
      StringReader input = new StringReader("function greet(name) { alert('Hello, ' + name + '!'); }");
      
      // When the JavaScriptCompressor class is instantiated with the input string and an error reporter
      ToolErrorReporter errorReporter = new ToolErrorReporter(false);
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, errorReporter);
      
      // Then an exception should be thrown due to a StringIndexOutOfBoundsException
      try {
      fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch (StringIndexOutOfBoundsException e) {
      // Assert that the expected exception is thrown
      assertTrue(e instanceof StringIndexOutOfBoundsException);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithFalse1() throws Throwable  {
      ToolErrorReporter errorReporter = new ToolErrorReporter(false);
      StringReader inputReader = new StringReader("j|/83Z>g/");
      JavaScriptCompressor compressor = new JavaScriptCompressor(inputReader, errorReporter);
      
      // Given: We have a Java object of type JavaScriptCompressor with an input reader and an error reporter.
      
      try {
      compressor.compress((Writer) null, (-1), false, false, false, false);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // When: We call the `compress` method with a null writer and an invalid compression level.
      
      // Then: The method should throw a NullPointerException with no message.
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompressWithZero() throws Throwable  {
      StringReader input = new StringReader("0");
      ToolErrorReporter errorReporter = new ToolErrorReporter(false);
      JavaScriptCompressor compressor = new JavaScriptCompressor(input, errorReporter);
      
      // Testing for NullPointerException when passing null as the first argument to the compress method
      try {
      compressor.compress((Writer) null, 0, false, false, false, false);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verifying that the exception is correctly thrown and that it has no message
      verifyException("com.yahoo.platform.yui.compressor.JavaScriptCompressor", e);}
  }
}
