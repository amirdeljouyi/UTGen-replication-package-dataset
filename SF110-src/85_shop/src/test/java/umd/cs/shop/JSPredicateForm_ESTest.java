/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 01:15:26 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesTaking2Arguments() throws Throwable  {
      // Given
      JSTerm term = new JSTerm();
      JSSubstitution subst = new JSSubstitution();
      
      // When
      JSPredicateForm form = new JSPredicateForm("(u)T");
      JSSubstitution result = form.matches(term, subst);
      
      // Then
      assertTrue(result.fail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStandarizerPredicateForm() throws Throwable  {
      // Arrange
      JSPredicateForm input = new JSPredicateForm("(u)T`");
      
      // Act
      JSPredicateForm output = input.standarizerPredicateForm();
      
      // Assert
      assertNotSame(output, input);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Create two JSPredicateForms with different names
      JSPredicateForm jspf1 = new JSPredicateForm("(u)T`");
      JSTerm arg0 = new JSTerm();
      
      // Assert that they are unequal
      assertFalse(jspf1.equals((JSPredicateForm) arg0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesTakingJSPredicateFormWithNonEmptyList() throws Throwable  {
      // Given a JSTerm object and some input data
      JSTerm jSTerm = new JSTerm();
      jSTerm.add((Object) "PPp a}hgA]:$s8>:{");
      
      // When the matches method is called with a predicate
      JSPredicateForm arg0 = new JSPredicateForm("(u)T`");
      JSSubstitution matches = jSTerm.matches(arg0);
      
      // Then the match should fail
      assertTrue(matches.fail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesTakingJSPredicateFormWithEmptyList() throws Throwable  {
      // rollbacked to evosuite
      JSPredicateForm jSPredicateForm = new JSPredicateForm("(u)T`");
      JSPredicateForm arg0 = new JSPredicateForm();
      JSSubstitution matches = jSPredicateForm.matches(arg0);
      assertTrue(matches.fail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStr() throws Throwable  {
      // Given
      JSPredicateForm jSPredicateForm = new JSPredicateForm();
      
      // When
      StringBuffer str = jSPredicateForm.toStr();
      
      // Then
      assertEquals("", str.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrint() throws Throwable  {
      // Given
      JSPredicateForm jSPredicateForm = new JSPredicateForm();
      
      // When
      jSPredicateForm.print();
      
      // Then
      assertEquals(10, jSPredicateForm.capacity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError0() throws Throwable  {
      // Given: A JSPredicateForm object is created with an invalid predicate syntax
      JSPredicateForm jSPredicateForm = null;
      
      try {
      jSPredicateForm = new JSPredicateForm("(F jJy|_jT5. CD@>");
      // When: The object is instantiated with the invalid predicate syntax
      fail("Expecting exception: Error");
      } catch (Error e) {
      // Then: An error should be thrown with a null message
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError1() throws Throwable  {
      // Given: A JSPredicateForm object with a formula that is not valid
      String formula = "(c-";
      
      // When: The constructor is called with the invalid formula
      JSPredicateForm jSPredicateForm = null;
      try {
      jSPredicateForm = new JSPredicateForm(formula);
      fail("Expecting exception: Error");
      
      } catch (Error e) {
      // Then: An error is thrown with no message in the exception (getMessage() returned null)
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError2() throws Throwable  {
      JSPredicateForm jSPredicateForm = null;
      try {
      jSPredicateForm = new JSPredicateForm("((p(x) & q(x)) -> r(x))");
      fail("Expecting exception: Error");
      } catch (Error e) {
      // no message in exception (getMessage() returned null)
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError3() throws Throwable  {
      // Arrange
      JSPredicateForm jSPredicateForm = null;
      
      // Act and Assert
      try {
      jSPredicateForm = new JSPredicateForm("(!p");
      fail("Expecting exception: Error");
      
      } catch(Error e) {
      // Verify that the correct exception is thrown with no message
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError4() throws Throwable  {
      JSPredicateForm jSPredicateForm = null;
      try {
      jSPredicateForm = new JSPredicateForm("(!Bp");
      fail("Expecting exception: Error");
      } catch(Error e) {
      // no message in exception (getMessage() returned null)
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError5() throws Throwable  {
      // Given
      JSPredicateForm jSPredicateForm = null;
      String predicateString = "()T`";
      
      // When
      try {
      jSPredicateForm = new JSPredicateForm(predicateString);
      fail("Expecting exception: Error");
      } catch (Error e) {
      // Then
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError6() throws Throwable  {
      // Given: A new instance of JSPredicateForm with invalid input "("
      JSPredicateForm jSPredicateForm = null;
      try {
      jSPredicateForm = new JSPredicateForm("(");
      fail("Expecting exception: Error");
      
      } catch(Error e) {
      // When: An invalid input is provided to the constructor
      // Then: A NullPointerException should be thrown
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStringThrowsError7() throws Throwable  {
      JSPredicateForm jSPredicateForm = null;
      try {
      jSPredicateForm = new JSPredicateForm("A&!B");
      fail("Expecting exception: Error");
      } catch(Error e) {
      // no message in exception (getMessage() returned null)
      verifyException("umd.cs.shop.JSPredicateForm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJSPredicateFormTakingString() throws Throwable  {
      // Arrange
      JSPredicateForm jSPredicateForm = new JSPredicateForm((String) null);
      
      // Act
      boolean actual = jSPredicateForm.isEmpty();
      
      // Assert
      assertTrue(actual, "The form is empty");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateJSPredicateFormTakingStreamTokenizerThrowsError() throws Throwable  {
      // No Comments were added
      JSPredicateForm jSPredicateForm = null;
      try {
        jSPredicateForm = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
