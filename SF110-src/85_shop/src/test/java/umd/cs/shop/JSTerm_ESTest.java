/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 03:42:35 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneT() throws Throwable  {
      // Given a JSTerm object with isEval set to true
      JSTerm arg0 = new JSTerm();
      arg0.makeEval(true);
      
      // When the clone method is called on the JSTerm object
      JSTerm clonedTerm = arg0.cloneT();
      
      // Then the cloned term should have the same value for isEval as the original term
      assertTrue(clonedTerm.isEval());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // rollbacked to evosuite
      JSTerm arg0 = new JSTerm();
      arg0.makeVariable();
      // Undeclared exception!
      try { 
        arg0.equals(arg0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatches() throws Throwable  {
      // rollbacked to evosuite
      JSTerm arg0 = new JSTerm();
      JSSubstitution matches = arg0.matches(arg0, (JSSubstitution) null);
      assertTrue(matches.fail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsFunction() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      // Given a term that is not a function
      
      boolean function = jSTerm.isFunction();
      // When we check if the term is a function
      
      assertFalse(function);
      // Then we expect the result to be false, since the term is not a function
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsVariable() throws Throwable  {
      // Given a JSTerm object with a false value for isVariable
      JSTerm jSTerm = new JSTerm();
      
      // When the isVariable method is called on the JSTerm object
      boolean variable = jSTerm.isVariable();
      
      // Then the result of the method should be false
      assertFalse(variable);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeFunction() throws Throwable  {
      // Given: A new JSTerm instance
      JSTerm jSTerm = new JSTerm();
      
      // When: The makeFunction method is called on the JSTerm instance
      jSTerm.makeFunction();
      
      // Then: The JSTerm instance should be a valid function
      assertTrue(jSTerm.isFunction());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsConstant() throws Throwable  {
      // Given a JSTerm object with a non-constant value
      JSTerm jSTerm = new JSTerm();
      
      // When the isConstant method is called
      boolean constant = jSTerm.isConstant();
      
      // Then it should return false, indicating that the value is not constant
      assertFalse(constant);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCall() throws Throwable  {
      // Given a JSTerm instance, we want to ensure that it can make a variable
      JSTerm jst = new JSTerm();
      
      // When we call the makeVariable() method on the JSTerm instance
      jst.makeVariable();
      
      // Then we expect the isVariable() method to return true
      assertTrue(jst.isVariable());
      
      // Given a JSTerm instance, we want to ensure that it can call a function
      JSTerm call = jst.call();
      
      // When we call the call() method on the JSTerm instance
      call.makeVariable();
      
      // Then we expect the isVariable() method to return true
      assertTrue(call.isVariable());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsGround() throws Throwable  {
      // Create a new JSTerm object
      JSTerm jSTerm = new JSTerm();
      
      // Make a variable using the makeVariable method
      jSTerm.makeVariable();
      
      // Check if the term is a variable
      assertTrue(jSTerm.isVariable());
      
      // Check if the term is ground
      boolean ground = jSTerm.isGround();
      
      // Assert that the term is not ground
      assertFalse(ground);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStrThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      // Test for exception when calling toStr() on an empty vector
      try {
      jSTerm.toStr();
      } catch(ArrayIndexOutOfBoundsException e) {
      // Verify that the exception is expected and thrown as expected
      verifyException("java.util.Vector", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchesThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JSTerm term = new JSTerm();
      term.makeConstant();
      JSSubstitution subst = new JSSubstitution();
      
      // Given a constant term and a substitution with no bindings
      
      try {
      // When we call matches on the term with the substitution
      term.matches(term, subst);
      
      // Then an ArrayIndexOutOfBoundsException is thrown
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Verify that the exception is thrown because 0 >= 0
      verifyException("java.util.Vector", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneTThrowsNullPointerException() throws Throwable  {
      JSTerm jsterm = new JSTerm();
      jsterm.setSize(1024);
      
      // Given: The JSTerm object has a non-null size and is not null
      
      try {
      // When: The cloneT() method is called on the JSTerm object
      
      jsterm.cloneT();
      
      // Then: A NullPointerException should be thrown
      
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the correct exception is thrown
      
      verifyException("umd.cs.shop.JSTerm", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJSTerm() throws Throwable  {
      // rollbacked to evosuite
      JSTerm jSTerm = new JSTerm();
      jSTerm.addElement("Hello");
      jSTerm.print();
      assertFalse(jSTerm.isVariable());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeConstant() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeConstant();
      
      // Given: We have a JSTerm object with a constant value
      // When: We try to print the value without checking for an empty vector
      // Then: An ArrayIndexOutOfBoundsException is expected to be thrown because the vector is empty
      
      try {
      jSTerm.print();
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Verify that the exception is an instance of java.util.Vector
      verifyException("java.util.Vector", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeEval() throws Throwable  {
      // rollbacked to evosuite
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeEval(true);
      jSTerm.addElement("Hello");
      jSTerm.print();
      assertTrue(jSTerm.isEval());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Given: a JSTerm object "arg0"
      JSTerm arg0 = new JSTerm();
      
      // When: the equals method is called with "arg0" as the argument
      boolean equals = arg0.equals(arg0);
      
      // Then: the result should be false, since "arg0" is equal to itself
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMakeVariable() throws Throwable  {
      JSTerm jSTerm = new JSTerm();
      jSTerm.makeVariable();
      
      try {
      jSTerm.print();
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // This exception is expected because the variable has not been declared.
      verifyException("java.util.Vector", e);}
  }
}
