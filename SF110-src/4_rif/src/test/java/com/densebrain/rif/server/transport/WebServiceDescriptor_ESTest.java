/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 06:36:12 GMT 2024
 */

package com.densebrain.rif.server.transport;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.densebrain.rif.server.transport.WebServiceDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebServiceDescriptor_ESTest extends WebServiceDescriptor_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, (String) null, (String) null);
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertNull(typesNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNull() throws Throwable  {
      // Arrange
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, null, null);
      
      // Act
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      
      // Assert
      assertNull(targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningEmptyString() throws Throwable  {
      // Create a new WebServiceDescriptor instance with default values
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(Object.class, "$", "$");
      
      // Set the target namespace to an empty string
      webServiceDescriptor.targetNamespace = "";
      
      // Assert that the getTargetNamespace() method returns an empty string
      assertEquals("", webServiceDescriptor.getTargetNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazz() throws Throwable  {
      // No Comments were added
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "mq]?\"EGDWOi6", (String) null);
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      assertNull(serviceClazz);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Create two WebServiceDescriptors with the same service and endpoint URLs
      WebServiceDescriptor descriptor1 = new WebServiceDescriptor((Class) null, "nB.Hm7NS~/`_FcZ'nM", "nB.Hm7NS~/`_FcZ'nM");
      WebServiceDescriptor descriptor2 = new WebServiceDescriptor((Class) null, "nB.Hm7NS~/`_FcZ'nM", "nB.Hm7NS~/`_FcZ'nM");
      
      // Check that the descriptors are equal
      assertTrue(descriptor1.equals(descriptor2));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Arrange
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor(arg0, "yK)", "yK)");
      WebServiceDescriptor webServiceDescriptor2 = new WebServiceDescriptor(arg0, "yK)", "yK)");
      
      // Act
      boolean equals = webServiceDescriptor1.equals(webServiceDescriptor2);
      
      // Assert
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // Given a WebServiceDescriptor instance with the "$" value for both the namespace and name parameters
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(Object.class, "$", "$");
      
      // When the equals method is called with a null argument
      boolean equals = webServiceDescriptor.equals((Object) null);
      
      // Then the result of the call to equals should be false
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor0() throws Throwable  {
      // Given: A WebServiceDescriptor instance has been created with a specific configuration
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "I]wp N4WhjnD&Lv&4o@", (String) null);
      
      // When: The hashCode() method is called on the instance
      int result = webServiceDescriptor.hashCode();
      
      // Then: The returned value should be a unique and consistent representation of the WebServiceDescriptor instance
      assertTrue(result > 0, "Hash code should be greater than 0");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor1() throws Throwable  {
      // No Comments were added
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "yK)", "yK)");
      webServiceDescriptor.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTargetNamespace() throws Throwable  {
      // Create a new WebServiceDescriptor instance with empty target namespace.
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      
      // Set the target namespace to an empty string.
      webServiceDescriptor.setTargetNamespace("");
      
      // Assert that the target namespace is equal to an empty string.
      assertEquals("", webServiceDescriptor.getTargetNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNonEmptyString() throws Throwable  {
      // Given a WebServiceDescriptor with a target namespace of "$"
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(Object.class, "$", "$");
      
      // When the getTargetNamespace method is called
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      
      // Then the target namespace should be "$"
      assertEquals("$", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTypesNamespace() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, ".w u", "sXo");
      assertEquals("sXo", webServiceDescriptor.getTypesNamespace());
      
      webServiceDescriptor.setTypesNamespace("");
      webServiceDescriptor.getTypesNamespace();
      assertEquals("", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertEquals("$", typesNamespace);
  }
}
