/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 16:34:31 GMT 2024
 */

package uk.me.jockmacmad.jstate.state;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.me.jockmacmad.jstate.state.EndState;
import uk.me.jockmacmad.jstate.state.Event;
import uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition;
import uk.me.jockmacmad.jstate.state.StartState;
import uk.me.jockmacmad.jstate.state.Transition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transition_ESTest extends Transition_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWillTrigger() throws Throwable  {
      // Given: The start state and end state are defined
      StartState startState = StartState.getSingleton();
      EndState endState = new EndState();
      
      // When: A transition is created from the start state to the end state with a null event
      Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, startState, endState);
      
      // Then: The willTrigger method should return false when called with the end state and null event
      boolean willTrigger = transition.willTrigger(endState, (Event) null);
      assertFalse(willTrigger);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEvaluateGuardConditions() throws Throwable  {
      // rollbacked to evosuite
      EndState arg3 = new EndState();
      Transition transition = new Transition("@AF5D6Lz}:`*cr", (Event) null, arg3, arg3);
      transition.evaluateGuardConditions();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Given a transition with a specific start state and end state
      Vector<IntegerGreaterThanGuardCondition> guardConditions = new Vector<IntegerGreaterThanGuardCondition>();
      StartState startState = StartState.getSingleton();
      Event event = new Event("com.objectmentors.state.StartState", guardConditions, startState);
      Transition transition1 = new Transition("com.objectmentors.state.StartState", event, startState, startState);
      
      // And another transition with a different start state and end state
      StartState otherStartState = StartState.getSingleton();
      Event otherEvent = new Event("com.objectmentors.state.StartState", guardConditions, otherStartState);
      Transition transition2 = new Transition("com.objectmentors.state.StartState", otherEvent, startState, startState);
      
      // When we call the equals method with both transitions as arguments
      boolean equals1 = transition1.equals(transition2);
      boolean equals2 = transition2.equals(transition1);
      
      // Then both calls should return false
      assertFalse(equals1);
      assertFalse(equals2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTriggerEvent() throws Throwable  {
      // Given: A transition with a null trigger event
      EndState arg3 = new EndState();
      Transition transition = new Transition(null, (Event) null, arg3, arg3);
      
      // When: The getTriggerEvent method is called
      Event triggerEvent = transition.getTriggerEvent();
      
      // Then: A null event should be returned
      assertNull(triggerEvent);
  }
}
